(self["webpackChunknova_spektr"] = self["webpackChunknova_spektr"] || []).push([[838],{

/***/ 39098:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = (__webpack_require__(79391).Buffer);
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);


/***/ }),

/***/ 2337:
/***/ ((module) => {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ 81505:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   X: () => (/* binding */ BehaviorSubject)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40628);


var BehaviorSubject = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: false,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
        if (hasError) {
            throw thrownError;
        }
        this._throwIfClosed();
        return _value;
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, (this._value = value));
    };
    return BehaviorSubject;
}(_Subject__WEBPACK_IMPORTED_MODULE_1__/* .Subject */ .x));

//# sourceMappingURL=BehaviorSubject.js.map

/***/ }),

/***/ 27943:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ errorNotification),
/* harmony export */   JM: () => (/* binding */ nextNotification),
/* harmony export */   TQ: () => (/* binding */ COMPLETE_NOTIFICATION)
/* harmony export */ });
/* unused harmony export createNotification */
var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();
function errorNotification(error) {
    return createNotification('E', undefined, error);
}
function nextNotification(value) {
    return createNotification('N', value, undefined);
}
function createNotification(kind, value, error) {
    return {
        kind: kind,
        value: value,
        error: error,
    };
}
//# sourceMappingURL=NotificationFactories.js.map

/***/ }),

/***/ 44950:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   y: () => (/* binding */ Observable)
/* harmony export */ });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11308);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(21620);
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4164);
/* harmony import */ var _util_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(51932);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5828);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(60093);
/* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87492);







var Observable = (function () {
    function Observable(subscribe) {
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new _Subscriber__WEBPACK_IMPORTED_MODULE_0__/* .SafeSubscriber */ .Hp(observerOrNext, error, complete);
        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_1__/* .errorContext */ .x)(function () {
            var _a = _this, operator = _a.operator, source = _a.source;
            subscriber.add(operator
                ?
                    operator.call(subscriber, source)
                : source
                    ?
                        _this._subscribe(subscriber)
                    :
                        _this._trySubscribe(subscriber));
        });
        return subscriber;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.error(err);
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscriber = new _Subscriber__WEBPACK_IMPORTED_MODULE_0__/* .SafeSubscriber */ .Hp({
                next: function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscriber.unsubscribe();
                    }
                },
                error: reject,
                complete: resolve,
            });
            _this.subscribe(subscriber);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable.prototype[_symbol_observable__WEBPACK_IMPORTED_MODULE_2__/* .observable */ .L] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        return (0,_util_pipe__WEBPACK_IMPORTED_MODULE_3__/* .pipeFromArray */ .U)(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());

function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : _config__WEBPACK_IMPORTED_MODULE_4__/* .config */ .v.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
    return value && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_5__/* .isFunction */ .m)(value.next) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_5__/* .isFunction */ .m)(value.error) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_5__/* .isFunction */ .m)(value.complete);
}
function isSubscriber(value) {
    return (value && value instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__/* .Subscriber */ .Lv) || (isObserver(value) && (0,_Subscription__WEBPACK_IMPORTED_MODULE_6__/* .isSubscription */ .Nn)(value));
}
//# sourceMappingURL=Observable.js.map

/***/ }),

/***/ 60821:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   t: () => (/* binding */ ReplaySubject)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40628);
/* harmony import */ var _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(61026);



var ReplaySubject = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(ReplaySubject, _super);
    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
        if (_bufferSize === void 0) { _bufferSize = Infinity; }
        if (_windowTime === void 0) { _windowTime = Infinity; }
        if (_timestampProvider === void 0) { _timestampProvider = _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_1__/* .dateTimestampProvider */ .l; }
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._timestampProvider = _timestampProvider;
        _this._buffer = [];
        _this._infiniteTimeWindow = true;
        _this._infiniteTimeWindow = _windowTime === Infinity;
        _this._bufferSize = Math.max(1, _bufferSize);
        _this._windowTime = Math.max(1, _windowTime);
        return _this;
    }
    ReplaySubject.prototype.next = function (value) {
        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
        if (!isStopped) {
            _buffer.push(value);
            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        var subscription = this._innerSubscribe(subscriber);
        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
        var copy = _buffer.slice();
        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
            subscriber.next(copy[i]);
        }
        this._checkFinalizedStatuses(subscriber);
        return subscription;
    };
    ReplaySubject.prototype._trimBuffer = function () {
        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
            var now = _timestampProvider.now();
            var last = 0;
            for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
                last = i;
            }
            last && _buffer.splice(0, last + 1);
        }
    };
    return ReplaySubject;
}(_Subject__WEBPACK_IMPORTED_MODULE_2__/* .Subject */ .x));

//# sourceMappingURL=ReplaySubject.js.map

/***/ }),

/***/ 40890:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ Scheduler)
/* harmony export */ });
/* harmony import */ var _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(61026);

var Scheduler = (function () {
    function Scheduler(schedulerActionCtor, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.schedulerActionCtor = schedulerActionCtor;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.schedulerActionCtor(this, work).schedule(state, delay);
    };
    Scheduler.now = _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_0__/* .dateTimestampProvider */ .l.now;
    return Scheduler;
}());

//# sourceMappingURL=Scheduler.js.map

/***/ }),

/***/ 40628:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ Subject)
/* harmony export */ });
/* unused harmony export AnonymousSubject */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(44950);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(21620);
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(55674);
/* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(37616);
/* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(87492);






var Subject = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype._throwIfClosed = function () {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__/* .ObjectUnsubscribedError */ .N();
        }
    };
    Subject.prototype.next = function (value) {
        var _this = this;
        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_2__/* .errorContext */ .x)(function () {
            var e_1, _a;
            _this._throwIfClosed();
            if (!_this.isStopped) {
                if (!_this.currentObservers) {
                    _this.currentObservers = Array.from(_this.observers);
                }
                try {
                    for (var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__values */ .XA)(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var observer = _c.value;
                        observer.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
    };
    Subject.prototype.error = function (err) {
        var _this = this;
        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_2__/* .errorContext */ .x)(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.hasError = _this.isStopped = true;
                _this.thrownError = err;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().error(err);
                }
            }
        });
    };
    Subject.prototype.complete = function () {
        var _this = this;
        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_2__/* .errorContext */ .x)(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.isStopped = true;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().complete();
                }
            }
        });
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject.prototype, "observed", {
        get: function () {
            var _a;
            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
    });
    Subject.prototype._trySubscribe = function (subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
    };
    Subject.prototype._innerSubscribe = function (subscriber) {
        var _this = this;
        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
        if (hasError || isStopped) {
            return _Subscription__WEBPACK_IMPORTED_MODULE_3__/* .EMPTY_SUBSCRIPTION */ .Lc;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new _Subscription__WEBPACK_IMPORTED_MODULE_3__/* .Subscription */ .w0(function () {
            _this.currentObservers = null;
            (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_4__/* .arrRemove */ .P)(observers, subscriber);
        });
    };
    Subject.prototype._checkFinalizedStatuses = function (subscriber) {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
        if (hasError) {
            subscriber.error(thrownError);
        }
        else if (isStopped) {
            subscriber.complete();
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new _Observable__WEBPACK_IMPORTED_MODULE_5__/* .Observable */ .y();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(_Observable__WEBPACK_IMPORTED_MODULE_5__/* .Observable */ .y));

var AnonymousSubject = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject.prototype.error = function (err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject.prototype.complete = function () {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : _Subscription__WEBPACK_IMPORTED_MODULE_3__/* .EMPTY_SUBSCRIPTION */ .Lc;
    };
    return AnonymousSubject;
}(Subject));

//# sourceMappingURL=Subject.js.map

/***/ }),

/***/ 11308:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hp: () => (/* binding */ SafeSubscriber),
/* harmony export */   Lv: () => (/* binding */ Subscriber)
/* harmony export */ });
/* unused harmony export EMPTY_OBSERVER */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60093);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(21620);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5828);
/* harmony import */ var _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(51576);
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(96236);
/* harmony import */ var _NotificationFactories__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27943);
/* harmony import */ var _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(12424);
/* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(87492);









var Subscriber = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(Subscriber, _super);
    function Subscriber(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
            _this.destination = destination;
            if ((0,_Subscription__WEBPACK_IMPORTED_MODULE_1__/* .isSubscription */ .Nn)(destination)) {
                destination.add(_this);
            }
        }
        else {
            _this.destination = EMPTY_OBSERVER;
        }
        return _this;
    }
    Subscriber.create = function (next, error, complete) {
        return new SafeSubscriber(next, error, complete);
    };
    Subscriber.prototype.next = function (value) {
        if (this.isStopped) {
            handleStoppedNotification((0,_NotificationFactories__WEBPACK_IMPORTED_MODULE_2__/* .nextNotification */ .JM)(value), this);
        }
        else {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (this.isStopped) {
            handleStoppedNotification((0,_NotificationFactories__WEBPACK_IMPORTED_MODULE_2__/* .errorNotification */ .A)(err), this);
        }
        else {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (this.isStopped) {
            handleStoppedNotification(_NotificationFactories__WEBPACK_IMPORTED_MODULE_2__/* .COMPLETE_NOTIFICATION */ .TQ, this);
        }
        else {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
        }
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        try {
            this.destination.error(err);
        }
        finally {
            this.unsubscribe();
        }
    };
    Subscriber.prototype._complete = function () {
        try {
            this.destination.complete();
        }
        finally {
            this.unsubscribe();
        }
    };
    return Subscriber;
}(_Subscription__WEBPACK_IMPORTED_MODULE_1__/* .Subscription */ .w0));

var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
}
var ConsumerObserver = (function () {
    function ConsumerObserver(partialObserver) {
        this.partialObserver = partialObserver;
    }
    ConsumerObserver.prototype.next = function (value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) {
            try {
                partialObserver.next(value);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    ConsumerObserver.prototype.error = function (err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) {
            try {
                partialObserver.error(err);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
        else {
            handleUnhandledError(err);
        }
    };
    ConsumerObserver.prototype.complete = function () {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) {
            try {
                partialObserver.complete();
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    return ConsumerObserver;
}());
var SafeSubscriber = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(SafeSubscriber, _super);
    function SafeSubscriber(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(observerOrNext) || !observerOrNext) {
            partialObserver = {
                next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),
                error: error !== null && error !== void 0 ? error : undefined,
                complete: complete !== null && complete !== void 0 ? complete : undefined,
            };
        }
        else {
            var context_1;
            if (_this && _config__WEBPACK_IMPORTED_MODULE_4__/* .config */ .v.useDeprecatedNextContext) {
                context_1 = Object.create(observerOrNext);
                context_1.unsubscribe = function () { return _this.unsubscribe(); };
                partialObserver = {
                    next: observerOrNext.next && bind(observerOrNext.next, context_1),
                    error: observerOrNext.error && bind(observerOrNext.error, context_1),
                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),
                };
            }
            else {
                partialObserver = observerOrNext;
            }
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
    }
    return SafeSubscriber;
}(Subscriber));

function handleUnhandledError(error) {
    if (_config__WEBPACK_IMPORTED_MODULE_4__/* .config */ .v.useDeprecatedSynchronousErrorHandling) {
        (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_5__/* .captureError */ .O)(error);
    }
    else {
        (0,_util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_6__/* .reportUnhandledError */ .h)(error);
    }
}
function defaultErrorHandler(err) {
    throw err;
}
function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = _config__WEBPACK_IMPORTED_MODULE_4__/* .config */ .v.onStoppedNotification;
    onStoppedNotification && _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_7__/* .timeoutProvider */ .z.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
}
var EMPTY_OBSERVER = {
    closed: true,
    next: _util_noop__WEBPACK_IMPORTED_MODULE_8__/* .noop */ .Z,
    error: defaultErrorHandler,
    complete: _util_noop__WEBPACK_IMPORTED_MODULE_8__/* .noop */ .Z,
};
//# sourceMappingURL=Subscriber.js.map

/***/ }),

/***/ 21620:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Lc: () => (/* binding */ EMPTY_SUBSCRIPTION),
/* harmony export */   Nn: () => (/* binding */ isSubscription),
/* harmony export */   w0: () => (/* binding */ Subscription)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60093);
/* harmony import */ var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(378);
/* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(37616);




var Subscription = (function () {
    function Subscription(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
    }
    Subscription.prototype.unsubscribe = function () {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
                this._parentage = null;
                if (Array.isArray(_parentage)) {
                    try {
                        for (var _parentage_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__values */ .XA)(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                            var parent_1 = _parentage_1_1.value;
                            parent_1.remove(this);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    _parentage.remove(this);
                }
            }
            var initialFinalizer = this.initialTeardown;
            if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(initialFinalizer)) {
                try {
                    initialFinalizer();
                }
                catch (e) {
                    errors = e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__/* .UnsubscriptionError */ .B ? e.errors : [e];
                }
            }
            var _finalizers = this._finalizers;
            if (_finalizers) {
                this._finalizers = null;
                try {
                    for (var _finalizers_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__values */ .XA)(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                        var finalizer = _finalizers_1_1.value;
                        try {
                            execFinalizer(finalizer);
                        }
                        catch (err) {
                            errors = errors !== null && errors !== void 0 ? errors : [];
                            if (err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__/* .UnsubscriptionError */ .B) {
                                errors = (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)((0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__read */ .CR)(errors)), (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__read */ .CR)(err.errors));
                            }
                            else {
                                errors.push(err);
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (errors) {
                throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_2__/* .UnsubscriptionError */ .B(errors);
            }
        }
    };
    Subscription.prototype.add = function (teardown) {
        var _a;
        if (teardown && teardown !== this) {
            if (this.closed) {
                execFinalizer(teardown);
            }
            else {
                if (teardown instanceof Subscription) {
                    if (teardown.closed || teardown._hasParent(this)) {
                        return;
                    }
                    teardown._addParent(this);
                }
                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
            }
        }
    };
    Subscription.prototype._hasParent = function (parent) {
        var _parentage = this._parentage;
        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
    };
    Subscription.prototype._addParent = function (parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription.prototype._removeParent = function (parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) {
            this._parentage = null;
        }
        else if (Array.isArray(_parentage)) {
            (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_3__/* .arrRemove */ .P)(_parentage, parent);
        }
    };
    Subscription.prototype.remove = function (teardown) {
        var _finalizers = this._finalizers;
        _finalizers && (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_3__/* .arrRemove */ .P)(_finalizers, teardown);
        if (teardown instanceof Subscription) {
            teardown._removeParent(this);
        }
    };
    Subscription.EMPTY = (function () {
        var empty = new Subscription();
        empty.closed = true;
        return empty;
    })();
    return Subscription;
}());

var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
    return (value instanceof Subscription ||
        (value && 'closed' in value && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(value.remove) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(value.add) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(value.unsubscribe)));
}
function execFinalizer(finalizer) {
    if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(finalizer)) {
        finalizer();
    }
    else {
        finalizer.unsubscribe();
    }
}
//# sourceMappingURL=Subscription.js.map

/***/ }),

/***/ 5828:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   v: () => (/* binding */ config)
/* harmony export */ });
var config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: undefined,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false,
};
//# sourceMappingURL=config.js.map

/***/ }),

/***/ 67343:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ firstValueFrom)
/* harmony export */ });
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4885);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11308);


function firstValueFrom(source, config) {
    var hasConfig = typeof config === 'object';
    return new Promise(function (resolve, reject) {
        var subscriber = new _Subscriber__WEBPACK_IMPORTED_MODULE_0__/* .SafeSubscriber */ .Hp({
            next: function (value) {
                resolve(value);
                subscriber.unsubscribe();
            },
            error: reject,
            complete: function () {
                if (hasConfig) {
                    resolve(config.defaultValue);
                }
                else {
                    reject(new _util_EmptyError__WEBPACK_IMPORTED_MODULE_1__/* .EmptyError */ .K());
                }
            },
        });
        source.subscribe(subscriber);
    });
}
//# sourceMappingURL=firstValueFrom.js.map

/***/ }),

/***/ 92533:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ ConnectableObservable)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(44950);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(21620);
/* harmony import */ var _operators_refCount__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(99500);
/* harmony import */ var _operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(43304);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59251);






var ConnectableObservable = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._subject = null;
        _this._refCount = 0;
        _this._connection = null;
        if ((0,_util_lift__WEBPACK_IMPORTED_MODULE_1__/* .hasLift */ .A)(source)) {
            _this.lift = source.lift;
        }
        return _this;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype._teardown = function () {
        this._refCount = 0;
        var _connection = this._connection;
        this._subject = this._connection = null;
        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
    };
    ConnectableObservable.prototype.connect = function () {
        var _this = this;
        var connection = this._connection;
        if (!connection) {
            connection = this._connection = new _Subscription__WEBPACK_IMPORTED_MODULE_2__/* .Subscription */ .w0();
            var subject_1 = this.getSubject();
            connection.add(this.source.subscribe((0,_operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__/* .createOperatorSubscriber */ .x)(subject_1, undefined, function () {
                _this._teardown();
                subject_1.complete();
            }, function (err) {
                _this._teardown();
                subject_1.error(err);
            }, function () { return _this._teardown(); })));
            if (connection.closed) {
                this._connection = null;
                connection = _Subscription__WEBPACK_IMPORTED_MODULE_2__/* .Subscription */ .w0.EMPTY;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return (0,_operators_refCount__WEBPACK_IMPORTED_MODULE_4__/* .refCount */ .x)()(this);
    };
    return ConnectableObservable;
}(_Observable__WEBPACK_IMPORTED_MODULE_5__/* .Observable */ .y));

//# sourceMappingURL=ConnectableObservable.js.map

/***/ }),

/***/ 94331:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ combineLatest)
/* harmony export */ });
/* unused harmony export combineLatestInit */
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(44950);
/* harmony import */ var _util_argsArgArrayOrObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60276);
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85472);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(64616);
/* harmony import */ var _util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(36876);
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81037);
/* harmony import */ var _util_createObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(91668);
/* harmony import */ var _operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(43304);
/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(89221);









function combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__/* .popScheduler */ .yG)(args);
    var resultSelector = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__/* .popResultSelector */ .jO)(args);
    var _a = (0,_util_argsArgArrayOrObject__WEBPACK_IMPORTED_MODULE_1__/* .argsArgArrayOrObject */ .D)(args), observables = _a.args, keys = _a.keys;
    if (observables.length === 0) {
        return (0,_from__WEBPACK_IMPORTED_MODULE_2__/* .from */ .D)([], scheduler);
    }
    var result = new _Observable__WEBPACK_IMPORTED_MODULE_3__/* .Observable */ .y(combineLatestInit(observables, scheduler, keys
        ?
            function (values) { return (0,_util_createObject__WEBPACK_IMPORTED_MODULE_4__/* .createObject */ .n)(keys, values); }
        :
            _util_identity__WEBPACK_IMPORTED_MODULE_5__/* .identity */ .y));
    return resultSelector ? result.pipe((0,_util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_6__/* .mapOneOrManyArgs */ .Z)(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform) {
    if (valueTransform === void 0) { valueTransform = _util_identity__WEBPACK_IMPORTED_MODULE_5__/* .identity */ .y; }
    return function (subscriber) {
        maybeSchedule(scheduler, function () {
            var length = observables.length;
            var values = new Array(length);
            var active = length;
            var remainingFirstValues = length;
            var _loop_1 = function (i) {
                maybeSchedule(scheduler, function () {
                    var source = (0,_from__WEBPACK_IMPORTED_MODULE_2__/* .from */ .D)(observables[i], scheduler);
                    var hasFirstValue = false;
                    source.subscribe((0,_operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_7__/* .createOperatorSubscriber */ .x)(subscriber, function (value) {
                        values[i] = value;
                        if (!hasFirstValue) {
                            hasFirstValue = true;
                            remainingFirstValues--;
                        }
                        if (!remainingFirstValues) {
                            subscriber.next(valueTransform(values.slice()));
                        }
                    }, function () {
                        if (!--active) {
                            subscriber.complete();
                        }
                    }));
                }, subscriber);
            };
            for (var i = 0; i < length; i++) {
                _loop_1(i);
            }
        }, subscriber);
    };
}
function maybeSchedule(scheduler, execute, subscription) {
    if (scheduler) {
        (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_8__/* .executeSchedule */ .f)(subscription, scheduler, execute);
    }
    else {
        execute();
    }
}
//# sourceMappingURL=combineLatest.js.map

/***/ }),

/***/ 24033:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ concat)
/* harmony export */ });
/* harmony import */ var _operators_concatAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73898);
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(81037);
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85472);



function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return (0,_operators_concatAll__WEBPACK_IMPORTED_MODULE_0__/* .concatAll */ .u)()((0,_from__WEBPACK_IMPORTED_MODULE_1__/* .from */ .D)(args, (0,_util_args__WEBPACK_IMPORTED_MODULE_2__/* .popScheduler */ .yG)(args)));
}
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ 64818:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ EMPTY)
/* harmony export */ });
/* unused harmony export empty */
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44950);

var EMPTY = new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) { return subscriber.complete(); });
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
//# sourceMappingURL=empty.js.map

/***/ }),

/***/ 85472:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ from)
/* harmony export */ });
/* harmony import */ var _scheduled_scheduled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(86271);
/* harmony import */ var _innerFrom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53526);


function from(input, scheduler) {
    return scheduler ? (0,_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_0__/* .scheduled */ .x)(input, scheduler) : (0,_innerFrom__WEBPACK_IMPORTED_MODULE_1__/* .innerFrom */ .Xf)(input);
}
//# sourceMappingURL=from.js.map

/***/ }),

/***/ 20067:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   s: () => (/* binding */ fromSubscribable)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44950);

function fromSubscribable(subscribable) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) { return subscribable.subscribe(subscriber); });
}
//# sourceMappingURL=fromSubscribable.js.map

/***/ }),

/***/ 53526:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Xf: () => (/* binding */ innerFrom)
/* harmony export */ });
/* unused harmony exports fromInteropObservable, fromArrayLike, fromPromise, fromIterable, fromAsyncIterable, fromReadableStreamLike */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(99938);
/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(41894);
/* harmony import */ var _util_isPromise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(11817);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44950);
/* harmony import */ var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(69861);
/* harmony import */ var _util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(43322);
/* harmony import */ var _util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9843);
/* harmony import */ var _util_isIterable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(67781);
/* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(53652);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(60093);
/* harmony import */ var _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(51576);
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(4164);












function innerFrom(input) {
    if (input instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y) {
        return input;
    }
    if (input != null) {
        if ((0,_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_1__/* .isInteropObservable */ .c)(input)) {
            return fromInteropObservable(input);
        }
        if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__/* .isArrayLike */ .z)(input)) {
            return fromArrayLike(input);
        }
        if ((0,_util_isPromise__WEBPACK_IMPORTED_MODULE_3__/* .isPromise */ .t)(input)) {
            return fromPromise(input);
        }
        if ((0,_util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_4__/* .isAsyncIterable */ .D)(input)) {
            return fromAsyncIterable(input);
        }
        if ((0,_util_isIterable__WEBPACK_IMPORTED_MODULE_5__/* .isIterable */ .T)(input)) {
            return fromIterable(input);
        }
        if ((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_6__/* .isReadableStreamLike */ .L)(input)) {
            return fromReadableStreamLike(input);
        }
    }
    throw (0,_util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_7__/* .createInvalidObservableTypeError */ .z)(input);
}
function fromInteropObservable(obj) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) {
        var obs = obj[_symbol_observable__WEBPACK_IMPORTED_MODULE_8__/* .observable */ .L]();
        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_9__/* .isFunction */ .m)(obs.subscribe)) {
            return obs.subscribe(subscriber);
        }
        throw new TypeError('Provided object does not correctly implement Symbol.observable');
    });
}
function fromArrayLike(array) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) {
        for (var i = 0; i < array.length && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        subscriber.complete();
    });
}
function fromPromise(promise) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) {
        promise
            .then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_10__/* .reportUnhandledError */ .h);
    });
}
function fromIterable(iterable) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) {
        var e_1, _a;
        try {
            for (var iterable_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_11__/* .__values */ .XA)(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                var value = iterable_1_1.value;
                subscriber.next(value);
                if (subscriber.closed) {
                    return;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        subscriber.complete();
    });
}
function fromAsyncIterable(asyncIterable) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) {
        process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
    });
}
function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_6__/* .readableStreamLikeToAsyncGenerator */ .Q)(readableStream));
}
function process(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_11__/* .__awaiter */ .mG)(this, void 0, void 0, function () {
        var value, e_2_1;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__/* .__generator */ .Jh)(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 5, 6, 11]);
                    asyncIterable_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_11__/* .__asyncValues */ .KL)(asyncIterable);
                    _b.label = 1;
                case 1: return [4, asyncIterable_1.next()];
                case 2:
                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                    value = asyncIterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) {
                        return [2];
                    }
                    _b.label = 3;
                case 3: return [3, 1];
                case 4: return [3, 11];
                case 5:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3, 11];
                case 6:
                    _b.trys.push([6, , 9, 10]);
                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                    return [4, _a.call(asyncIterable_1)];
                case 7:
                    _b.sent();
                    _b.label = 8;
                case 8: return [3, 10];
                case 9:
                    if (e_2) throw e_2.error;
                    return [7];
                case 10: return [7];
                case 11:
                    subscriber.complete();
                    return [2];
            }
        });
    });
}
//# sourceMappingURL=innerFrom.js.map

/***/ }),

/***/ 85296:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   of: () => (/* binding */ of)
/* harmony export */ });
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81037);
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85472);


function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__/* .popScheduler */ .yG)(args);
    return (0,_from__WEBPACK_IMPORTED_MODULE_1__/* .from */ .D)(args, scheduler);
}
//# sourceMappingURL=of.js.map

/***/ }),

/***/ 43304:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ createOperatorSubscriber)
/* harmony export */ });
/* unused harmony export OperatorSubscriber */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11308);


function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(OperatorSubscriber, _super);
    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext
            ? function (value) {
                try {
                    onNext(value);
                }
                catch (err) {
                    destination.error(err);
                }
            }
            : _super.prototype._next;
        _this._error = onError
            ? function (err) {
                try {
                    onError(err);
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._error;
        _this._complete = onComplete
            ? function () {
                try {
                    onComplete();
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._complete;
        return _this;
    }
    OperatorSubscriber.prototype.unsubscribe = function () {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var closed_1 = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        }
    };
    return OperatorSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__/* .Subscriber */ .Lv));

//# sourceMappingURL=OperatorSubscriber.js.map

/***/ }),

/***/ 92646:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   K: () => (/* binding */ catchError)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53526);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43304);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59251);



function catchError(selector) {
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .e)(function (source, subscriber) {
        var innerSub = null;
        var syncUnsub = false;
        var handledResult;
        innerSub = source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ .x)(subscriber, undefined, undefined, function (err) {
            handledResult = (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__/* .innerFrom */ .Xf)(selector(err, catchError(selector)(source)));
            if (innerSub) {
                innerSub.unsubscribe();
                innerSub = null;
                handledResult.subscribe(subscriber);
            }
            else {
                syncUnsub = true;
            }
        }));
        if (syncUnsub) {
            innerSub.unsubscribe();
            innerSub = null;
            handledResult.subscribe(subscriber);
        }
    });
}
//# sourceMappingURL=catchError.js.map

/***/ }),

/***/ 73898:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ concatAll)
/* harmony export */ });
/* harmony import */ var _mergeAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32110);

function concatAll() {
    return (0,_mergeAll__WEBPACK_IMPORTED_MODULE_0__/* .mergeAll */ .J)(1);
}
//# sourceMappingURL=concatAll.js.map

/***/ }),

/***/ 69819:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $: () => (/* binding */ connect)
/* harmony export */ });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40628);
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53526);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59251);
/* harmony import */ var _observable_fromSubscribable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20067);




var DEFAULT_CONFIG = {
    connector: function () { return new _Subject__WEBPACK_IMPORTED_MODULE_0__/* .Subject */ .x(); },
};
function connect(selector, config) {
    if (config === void 0) { config = DEFAULT_CONFIG; }
    var connector = config.connector;
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__/* .operate */ .e)(function (source, subscriber) {
        var subject = connector();
        (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__/* .innerFrom */ .Xf)(selector((0,_observable_fromSubscribable__WEBPACK_IMPORTED_MODULE_3__/* .fromSubscribable */ .s)(subject))).subscribe(subscriber);
        subscriber.add(source.subscribe(subject));
    });
}
//# sourceMappingURL=connect.js.map

/***/ }),

/***/ 36958:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   d: () => (/* binding */ defaultIfEmpty)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59251);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43304);


function defaultIfEmpty(defaultValue) {
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .e)(function (source, subscriber) {
        var hasValue = false;
        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ .x)(subscriber, function (value) {
            hasValue = true;
            subscriber.next(value);
        }, function () {
            if (!hasValue) {
                subscriber.next(defaultValue);
            }
            subscriber.complete();
        }));
    });
}
//# sourceMappingURL=defaultIfEmpty.js.map

/***/ }),

/***/ 64392:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ distinctUntilChanged)
/* harmony export */ });
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64616);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59251);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(43304);



function distinctUntilChanged(comparator, keySelector) {
    if (keySelector === void 0) { keySelector = _util_identity__WEBPACK_IMPORTED_MODULE_0__/* .identity */ .y; }
    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__/* .operate */ .e)(function (source, subscriber) {
        var previousKey;
        var first = true;
        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__/* .createOperatorSubscriber */ .x)(subscriber, function (value) {
            var currentKey = keySelector(value);
            if (first || !comparator(previousKey, currentKey)) {
                first = false;
                previousKey = currentKey;
                subscriber.next(value);
            }
        }));
    });
}
function defaultCompare(a, b) {
    return a === b;
}
//# sourceMappingURL=distinctUntilChanged.js.map

/***/ }),

/***/ 56671:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   h: () => (/* binding */ filter)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59251);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43304);


function filter(predicate, thisArg) {
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .e)(function (source, subscriber) {
        var index = 0;
        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ .x)(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
    });
}
//# sourceMappingURL=filter.js.map

/***/ }),

/***/ 69248:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ first)
/* harmony export */ });
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4885);
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56671);
/* harmony import */ var _take__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(37026);
/* harmony import */ var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(36958);
/* harmony import */ var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(22877);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(64616);






function first(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function (source) {
        return source.pipe(predicate ? (0,_filter__WEBPACK_IMPORTED_MODULE_0__/* .filter */ .h)(function (v, i) { return predicate(v, i, source); }) : _util_identity__WEBPACK_IMPORTED_MODULE_1__/* .identity */ .y, (0,_take__WEBPACK_IMPORTED_MODULE_2__/* .take */ .q)(1), hasDefaultValue ? (0,_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__/* .defaultIfEmpty */ .d)(defaultValue) : (0,_throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__/* .throwIfEmpty */ .T)(function () { return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__/* .EmptyError */ .K(); }));
    };
}
//# sourceMappingURL=first.js.map

/***/ }),

/***/ 79606:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ map)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59251);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43304);


function map(project, thisArg) {
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .e)(function (source, subscriber) {
        var index = 0;
        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ .x)(subscriber, function (value) {
            subscriber.next(project.call(thisArg, value, index++));
        }));
    });
}
//# sourceMappingURL=map.js.map

/***/ }),

/***/ 32110:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   J: () => (/* binding */ mergeAll)
/* harmony export */ });
/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2740);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(64616);


function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    return (0,_mergeMap__WEBPACK_IMPORTED_MODULE_0__/* .mergeMap */ .z)(_util_identity__WEBPACK_IMPORTED_MODULE_1__/* .identity */ .y, concurrent);
}
//# sourceMappingURL=mergeAll.js.map

/***/ }),

/***/ 40014:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   p: () => (/* binding */ mergeInternals)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53526);
/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(89221);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43304);



function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
    var buffer = [];
    var active = 0;
    var index = 0;
    var isComplete = false;
    var checkComplete = function () {
        if (isComplete && !buffer.length && !active) {
            subscriber.complete();
        }
    };
    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
    var doInnerSub = function (value) {
        expand && subscriber.next(value);
        active++;
        var innerComplete = false;
        (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__/* .innerFrom */ .Xf)(project(value, index++)).subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ .x)(subscriber, function (innerValue) {
            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
            if (expand) {
                outerNext(innerValue);
            }
            else {
                subscriber.next(innerValue);
            }
        }, function () {
            innerComplete = true;
        }, undefined, function () {
            if (innerComplete) {
                try {
                    active--;
                    var _loop_1 = function () {
                        var bufferedValue = buffer.shift();
                        if (innerSubScheduler) {
                            (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__/* .executeSchedule */ .f)(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                        }
                        else {
                            doInnerSub(bufferedValue);
                        }
                    };
                    while (buffer.length && active < concurrent) {
                        _loop_1();
                    }
                    checkComplete();
                }
                catch (err) {
                    subscriber.error(err);
                }
            }
        }));
    };
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ .x)(subscriber, outerNext, function () {
        isComplete = true;
        checkComplete();
    }));
    return function () {
        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
    };
}
//# sourceMappingURL=mergeInternals.js.map

/***/ }),

/***/ 2740:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ mergeMap)
/* harmony export */ });
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53526);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(59251);
/* harmony import */ var _mergeInternals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(40014);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60093);





function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(resultSelector)) {
        return mergeMap(function (a, i) { return (0,_map__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(function (b, ii) { return resultSelector(a, b, i, ii); })((0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__/* .innerFrom */ .Xf)(project(a, i))); }, concurrent);
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_3__/* .operate */ .e)(function (source, subscriber) { return (0,_mergeInternals__WEBPACK_IMPORTED_MODULE_4__/* .mergeInternals */ .p)(source, subscriber, project, concurrent); });
}
//# sourceMappingURL=mergeMap.js.map

/***/ }),

/***/ 86267:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   O: () => (/* binding */ multicast)
/* harmony export */ });
/* harmony import */ var _observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(92533);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60093);
/* harmony import */ var _connect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(69819);



function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory = (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };
    if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(selector)) {
        return (0,_connect__WEBPACK_IMPORTED_MODULE_1__/* .connect */ .$)(selector, {
            connector: subjectFactory,
        });
    }
    return function (source) { return new _observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_2__/* .ConnectableObservable */ .c(source, subjectFactory); };
}
//# sourceMappingURL=multicast.js.map

/***/ }),

/***/ 62074:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Q: () => (/* binding */ observeOn)
/* harmony export */ });
/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(89221);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59251);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43304);



function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .e)(function (source, subscriber) {
        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ .x)(subscriber, function (value) { return (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__/* .executeSchedule */ .f)(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__/* .executeSchedule */ .f)(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__/* .executeSchedule */ .f)(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
    });
}
//# sourceMappingURL=observeOn.js.map

/***/ }),

/***/ 98608:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _: () => (/* binding */ publishReplay)
/* harmony export */ });
/* harmony import */ var _ReplaySubject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60821);
/* harmony import */ var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(86267);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60093);



function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
    if (selectorOrScheduler && !(0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(selectorOrScheduler)) {
        timestampProvider = selectorOrScheduler;
    }
    var selector = (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(selectorOrScheduler) ? selectorOrScheduler : undefined;
    return function (source) { return (0,_multicast__WEBPACK_IMPORTED_MODULE_1__/* .multicast */ .O)(new _ReplaySubject__WEBPACK_IMPORTED_MODULE_2__/* .ReplaySubject */ .t(bufferSize, windowTime, timestampProvider), selector)(source); };
}
//# sourceMappingURL=publishReplay.js.map

/***/ }),

/***/ 29657:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ reduce)
/* harmony export */ });
/* harmony import */ var _scanInternals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(98756);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59251);


function reduce(accumulator, seed) {
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .e)((0,_scanInternals__WEBPACK_IMPORTED_MODULE_1__/* .scanInternals */ .U)(accumulator, seed, arguments.length >= 2, false, true));
}
//# sourceMappingURL=reduce.js.map

/***/ }),

/***/ 99500:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ refCount)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59251);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43304);


function refCount() {
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .e)(function (source, subscriber) {
        var connection = null;
        source._refCount++;
        var refCounter = (0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ .x)(subscriber, undefined, undefined, undefined, function () {
            if (!source || source._refCount <= 0 || 0 < --source._refCount) {
                connection = null;
                return;
            }
            var sharedConnection = source._connection;
            var conn = connection;
            connection = null;
            if (sharedConnection && (!conn || sharedConnection === conn)) {
                sharedConnection.unsubscribe();
            }
            subscriber.unsubscribe();
        });
        source.subscribe(refCounter);
        if (!refCounter.closed) {
            connection = source.connect();
        }
    });
}
//# sourceMappingURL=refCount.js.map

/***/ }),

/***/ 98756:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ scanInternals)
/* harmony export */ });
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43304);

function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return function (source, subscriber) {
        var hasState = hasSeed;
        var state = seed;
        var index = 0;
        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_0__/* .createOperatorSubscriber */ .x)(subscriber, function (value) {
            var i = index++;
            state = hasState
                ?
                    accumulator(state, value, i)
                :
                    ((hasState = true), value);
            emitOnNext && subscriber.next(state);
        }, emitBeforeComplete &&
            (function () {
                hasState && subscriber.next(state);
                subscriber.complete();
            })));
    };
}
//# sourceMappingURL=scanInternals.js.map

/***/ }),

/***/ 81711:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   O: () => (/* binding */ startWith)
/* harmony export */ });
/* harmony import */ var _observable_concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(24033);
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81037);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59251);



function startWith() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    var scheduler = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__/* .popScheduler */ .yG)(values);
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__/* .operate */ .e)(function (source, subscriber) {
        (scheduler ? (0,_observable_concat__WEBPACK_IMPORTED_MODULE_2__/* .concat */ .z)(values, source, scheduler) : (0,_observable_concat__WEBPACK_IMPORTED_MODULE_2__/* .concat */ .z)(values, source)).subscribe(subscriber);
    });
}
//# sourceMappingURL=startWith.js.map

/***/ }),

/***/ 63468:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ subscribeOn)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59251);

function subscribeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .e)(function (source, subscriber) {
        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
    });
}
//# sourceMappingURL=subscribeOn.js.map

/***/ }),

/***/ 96918:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   w: () => (/* binding */ switchMap)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53526);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59251);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43304);



function switchMap(project, resultSelector) {
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .e)(function (source, subscriber) {
        var innerSubscriber = null;
        var index = 0;
        var isComplete = false;
        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ .x)(subscriber, function (value) {
            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
            var innerIndex = 0;
            var outerIndex = index++;
            (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__/* .innerFrom */ .Xf)(project(value, outerIndex)).subscribe((innerSubscriber = (0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ .x)(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
                innerSubscriber = null;
                checkComplete();
            })));
        }, function () {
            isComplete = true;
            checkComplete();
        }));
    });
}
//# sourceMappingURL=switchMap.js.map

/***/ }),

/***/ 37026:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   q: () => (/* binding */ take)
/* harmony export */ });
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64818);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59251);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(43304);



function take(count) {
    return count <= 0
        ?
            function () { return _observable_empty__WEBPACK_IMPORTED_MODULE_0__/* .EMPTY */ .E; }
        : (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__/* .operate */ .e)(function (source, subscriber) {
            var seen = 0;
            source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__/* .createOperatorSubscriber */ .x)(subscriber, function (value) {
                if (++seen <= count) {
                    subscriber.next(value);
                    if (count <= seen) {
                        subscriber.complete();
                    }
                }
            }));
        });
}
//# sourceMappingURL=take.js.map

/***/ }),

/***/ 81083:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ tap)
/* harmony export */ });
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60093);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59251);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(43304);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(64616);




function tap(observerOrNext, error, complete) {
    var tapObserver = (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(observerOrNext) || error || complete
        ?
            { next: observerOrNext, error: error, complete: complete }
        : observerOrNext;
    return tapObserver
        ? (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__/* .operate */ .e)(function (source, subscriber) {
            var _a;
            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
            var isUnsub = true;
            source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__/* .createOperatorSubscriber */ .x)(subscriber, function (value) {
                var _a;
                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
                subscriber.next(value);
            }, function () {
                var _a;
                isUnsub = false;
                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                subscriber.complete();
            }, function (err) {
                var _a;
                isUnsub = false;
                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
                subscriber.error(err);
            }, function () {
                var _a, _b;
                if (isUnsub) {
                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                }
                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
            }));
        })
        :
            _util_identity__WEBPACK_IMPORTED_MODULE_3__/* .identity */ .y;
}
//# sourceMappingURL=tap.js.map

/***/ }),

/***/ 22877:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   T: () => (/* binding */ throwIfEmpty)
/* harmony export */ });
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4885);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59251);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43304);



function throwIfEmpty(errorFactory) {
    if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .e)(function (source, subscriber) {
        var hasValue = false;
        source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ .x)(subscriber, function (value) {
            hasValue = true;
            subscriber.next(value);
        }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));
    });
}
function defaultErrorFactory() {
    return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_2__/* .EmptyError */ .K();
}
//# sourceMappingURL=throwIfEmpty.js.map

/***/ }),

/***/ 28296:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   q: () => (/* binding */ toArray)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29657);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59251);


var arrReducer = function (arr, value) { return (arr.push(value), arr); };
function toArray() {
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .e)(function (source, subscriber) {
        (0,_reduce__WEBPACK_IMPORTED_MODULE_1__/* .reduce */ .u)(arrReducer, [])(source).subscribe(subscriber);
    });
}
//# sourceMappingURL=toArray.js.map

/***/ }),

/***/ 20746:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: () => (/* binding */ scheduleArray)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44950);

function scheduleArray(input, scheduler) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) {
        var i = 0;
        return scheduler.schedule(function () {
            if (i === input.length) {
                subscriber.complete();
            }
            else {
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    this.schedule();
                }
            }
        });
    });
}
//# sourceMappingURL=scheduleArray.js.map

/***/ }),

/***/ 1232:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ scheduleAsyncIterable)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44950);
/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(89221);


function scheduleAsyncIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) {
        (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__/* .executeSchedule */ .f)(subscriber, scheduler, function () {
            var iterator = input[Symbol.asyncIterator]();
            (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__/* .executeSchedule */ .f)(subscriber, scheduler, function () {
                iterator.next().then(function (result) {
                    if (result.done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(result.value);
                    }
                });
            }, 0, true);
        });
    });
}
//# sourceMappingURL=scheduleAsyncIterable.js.map

/***/ }),

/***/ 47024:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Q: () => (/* binding */ scheduleIterable)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44950);
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(48124);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60093);
/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(89221);




function scheduleIterable(input, scheduler) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .y(function (subscriber) {
        var iterator;
        (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__/* .executeSchedule */ .f)(subscriber, scheduler, function () {
            iterator = input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__/* .iterator */ .h]();
            (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__/* .executeSchedule */ .f)(subscriber, scheduler, function () {
                var _a;
                var value;
                var done;
                try {
                    (_a = iterator.next(), value = _a.value, done = _a.done);
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(value);
                }
            }, 0, true);
        });
        return function () { return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };
    });
}
//# sourceMappingURL=scheduleIterable.js.map

/***/ }),

/***/ 34851:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   l: () => (/* binding */ scheduleObservable)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53526);
/* harmony import */ var _operators_observeOn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62074);
/* harmony import */ var _operators_subscribeOn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63468);



function scheduleObservable(input, scheduler) {
    return (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__/* .innerFrom */ .Xf)(input).pipe((0,_operators_subscribeOn__WEBPACK_IMPORTED_MODULE_1__/* .subscribeOn */ .R)(scheduler), (0,_operators_observeOn__WEBPACK_IMPORTED_MODULE_2__/* .observeOn */ .Q)(scheduler));
}
//# sourceMappingURL=scheduleObservable.js.map

/***/ }),

/***/ 41786:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ schedulePromise)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53526);
/* harmony import */ var _operators_observeOn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62074);
/* harmony import */ var _operators_subscribeOn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63468);



function schedulePromise(input, scheduler) {
    return (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__/* .innerFrom */ .Xf)(input).pipe((0,_operators_subscribeOn__WEBPACK_IMPORTED_MODULE_1__/* .subscribeOn */ .R)(scheduler), (0,_operators_observeOn__WEBPACK_IMPORTED_MODULE_2__/* .observeOn */ .Q)(scheduler));
}
//# sourceMappingURL=schedulePromise.js.map

/***/ }),

/***/ 57336:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   v: () => (/* binding */ scheduleReadableStreamLike)
/* harmony export */ });
/* harmony import */ var _scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1232);
/* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53652);


function scheduleReadableStreamLike(input, scheduler) {
    return (0,_scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_0__/* .scheduleAsyncIterable */ .z)((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_1__/* .readableStreamLikeToAsyncGenerator */ .Q)(input), scheduler);
}
//# sourceMappingURL=scheduleReadableStreamLike.js.map

/***/ }),

/***/ 86271:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ scheduled)
/* harmony export */ });
/* harmony import */ var _scheduleObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(34851);
/* harmony import */ var _schedulePromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(41786);
/* harmony import */ var _scheduleArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20746);
/* harmony import */ var _scheduleIterable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(47024);
/* harmony import */ var _scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1232);
/* harmony import */ var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(69861);
/* harmony import */ var _util_isPromise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11817);
/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(41894);
/* harmony import */ var _util_isIterable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(67781);
/* harmony import */ var _util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(43322);
/* harmony import */ var _util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(9843);
/* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(53652);
/* harmony import */ var _scheduleReadableStreamLike__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(57336);













function scheduled(input, scheduler) {
    if (input != null) {
        if ((0,_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_0__/* .isInteropObservable */ .c)(input)) {
            return (0,_scheduleObservable__WEBPACK_IMPORTED_MODULE_1__/* .scheduleObservable */ .l)(input, scheduler);
        }
        if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__/* .isArrayLike */ .z)(input)) {
            return (0,_scheduleArray__WEBPACK_IMPORTED_MODULE_3__/* .scheduleArray */ .r)(input, scheduler);
        }
        if ((0,_util_isPromise__WEBPACK_IMPORTED_MODULE_4__/* .isPromise */ .t)(input)) {
            return (0,_schedulePromise__WEBPACK_IMPORTED_MODULE_5__/* .schedulePromise */ .c)(input, scheduler);
        }
        if ((0,_util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_6__/* .isAsyncIterable */ .D)(input)) {
            return (0,_scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_7__/* .scheduleAsyncIterable */ .z)(input, scheduler);
        }
        if ((0,_util_isIterable__WEBPACK_IMPORTED_MODULE_8__/* .isIterable */ .T)(input)) {
            return (0,_scheduleIterable__WEBPACK_IMPORTED_MODULE_9__/* .scheduleIterable */ .Q)(input, scheduler);
        }
        if ((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_10__/* .isReadableStreamLike */ .L)(input)) {
            return (0,_scheduleReadableStreamLike__WEBPACK_IMPORTED_MODULE_11__/* .scheduleReadableStreamLike */ .v)(input, scheduler);
        }
    }
    throw (0,_util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_12__/* .createInvalidObservableTypeError */ .z)(input);
}
//# sourceMappingURL=scheduled.js.map

/***/ }),

/***/ 12928:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ Action)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(21620);


var Action = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return this;
    };
    return Action;
}(_Subscription__WEBPACK_IMPORTED_MODULE_1__/* .Subscription */ .w0));

//# sourceMappingURL=Action.js.map

/***/ }),

/***/ 75609:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   t: () => (/* binding */ AsapAction)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(84033);
/* harmony import */ var _immediateProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12333);



var AsapAction = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = _immediateProvider__WEBPACK_IMPORTED_MODULE_1__/* .immediateProvider */ .g.setImmediate(scheduler.flush.bind(scheduler, undefined)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        var _a;
        if (delay === void 0) { delay = 0; }
        if (delay != null ? delay > 0 : this.delay > 0) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        var actions = scheduler.actions;
        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
            _immediateProvider__WEBPACK_IMPORTED_MODULE_1__/* .immediateProvider */ .g.clearImmediate(id);
            if (scheduler._scheduled === id) {
                scheduler._scheduled = undefined;
            }
        }
        return undefined;
    };
    return AsapAction;
}(_AsyncAction__WEBPACK_IMPORTED_MODULE_2__/* .AsyncAction */ .o));

//# sourceMappingURL=AsapAction.js.map

/***/ }),

/***/ 4104:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ AsapScheduler)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41887);


var AsapScheduler = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this._active = true;
        var flushId = this._scheduled;
        this._scheduled = undefined;
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
            while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__/* .AsyncScheduler */ .v));

//# sourceMappingURL=AsapScheduler.js.map

/***/ }),

/***/ 84033:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: () => (/* binding */ AsyncAction)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12928);
/* harmony import */ var _intervalProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63795);
/* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(37616);




var AsyncAction = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        var _a;
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
        if (delay === void 0) { delay = 0; }
        return _intervalProvider__WEBPACK_IMPORTED_MODULE_1__/* .intervalProvider */ .V.setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay != null && this.delay === delay && this.pending === false) {
            return id;
        }
        if (id != null) {
            _intervalProvider__WEBPACK_IMPORTED_MODULE_1__/* .intervalProvider */ .V.clearInterval(id);
        }
        return undefined;
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, _delay) {
        var errored = false;
        var errorValue;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = e ? e : new Error('Scheduled action threw falsy error');
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype.unsubscribe = function () {
        if (!this.closed) {
            var _a = this, id = _a.id, scheduler = _a.scheduler;
            var actions = scheduler.actions;
            this.work = this.state = this.scheduler = null;
            this.pending = false;
            (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_2__/* .arrRemove */ .P)(actions, this);
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
            this.delay = null;
            _super.prototype.unsubscribe.call(this);
        }
    };
    return AsyncAction;
}(_Action__WEBPACK_IMPORTED_MODULE_3__/* .Action */ .a));

//# sourceMappingURL=AsyncAction.js.map

/***/ }),

/***/ 41887:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   v: () => (/* binding */ AsyncScheduler)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _Scheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40890);


var AsyncScheduler = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__extends */ .ZT)(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) { now = _Scheduler__WEBPACK_IMPORTED_MODULE_1__/* .Scheduler */ .b.now; }
        var _this = _super.call(this, SchedulerAction, now) || this;
        _this.actions = [];
        _this._active = false;
        return _this;
    }
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this._active) {
            actions.push(action);
            return;
        }
        var error;
        this._active = true;
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions.shift()));
        this._active = false;
        if (error) {
            while ((action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(_Scheduler__WEBPACK_IMPORTED_MODULE_1__/* .Scheduler */ .b));

//# sourceMappingURL=AsyncScheduler.js.map

/***/ }),

/***/ 98607:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ asapScheduler)
/* harmony export */ });
/* unused harmony export asap */
/* harmony import */ var _AsapAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(75609);
/* harmony import */ var _AsapScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4104);


var asapScheduler = new _AsapScheduler__WEBPACK_IMPORTED_MODULE_0__/* .AsapScheduler */ .E(_AsapAction__WEBPACK_IMPORTED_MODULE_1__/* .AsapAction */ .t);
var asap = (/* unused pure expression or super */ null && (asapScheduler));
//# sourceMappingURL=asap.js.map

/***/ }),

/***/ 61026:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   l: () => (/* binding */ dateTimestampProvider)
/* harmony export */ });
var dateTimestampProvider = {
    now: function () {
        return (dateTimestampProvider.delegate || Date).now();
    },
    delegate: undefined,
};
//# sourceMappingURL=dateTimestampProvider.js.map

/***/ }),

/***/ 12333:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ immediateProvider)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(99938);
/* harmony import */ var _util_Immediate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38098);


var setImmediate = _util_Immediate__WEBPACK_IMPORTED_MODULE_0__/* .Immediate */ .H.setImmediate, clearImmediate = _util_Immediate__WEBPACK_IMPORTED_MODULE_0__/* .Immediate */ .H.clearImmediate;
var immediateProvider = {
    setImmediate: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var delegate = immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__spreadArray */ .ev)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__read */ .CR)(args)));
    },
    clearImmediate: function (handle) {
        var delegate = immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=immediateProvider.js.map

/***/ }),

/***/ 63795:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   V: () => (/* binding */ intervalProvider)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);

var intervalProvider = {
    setInterval: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = intervalProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
            return delegate.setInterval.apply(delegate, (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)([handler, timeout], (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__read */ .CR)(args)));
        }
        return setInterval.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)([handler, timeout], (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__read */ .CR)(args)));
    },
    clearInterval: function (handle) {
        var delegate = intervalProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=intervalProvider.js.map

/***/ }),

/***/ 12424:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ timeoutProvider)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);

var timeoutProvider = {
    setTimeout: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
            return delegate.setTimeout.apply(delegate, (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)([handler, timeout], (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__read */ .CR)(args)));
        }
        return setTimeout.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)([handler, timeout], (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__read */ .CR)(args)));
    },
    clearTimeout: function (handle) {
        var delegate = timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=timeoutProvider.js.map

/***/ }),

/***/ 48124:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   h: () => (/* binding */ iterator)
/* harmony export */ });
/* unused harmony export getSymbolIterator */
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator = getSymbolIterator();
//# sourceMappingURL=iterator.js.map

/***/ }),

/***/ 4164:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   L: () => (/* binding */ observable)
/* harmony export */ });
var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();
//# sourceMappingURL=observable.js.map

/***/ }),

/***/ 4885:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   K: () => (/* binding */ EmptyError)
/* harmony export */ });
/* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45055);

var EmptyError = (0,_createErrorClass__WEBPACK_IMPORTED_MODULE_0__/* .createErrorClass */ .d)(function (_super) { return function EmptyErrorImpl() {
    _super(this);
    this.name = 'EmptyError';
    this.message = 'no elements in sequence';
}; });
//# sourceMappingURL=EmptyError.js.map

/***/ }),

/***/ 38098:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   H: () => (/* binding */ Immediate)
/* harmony export */ });
/* unused harmony export TestTools */
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
    if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
    }
    return false;
}
var Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        activeHandles[handle] = true;
        if (!resolved) {
            resolved = Promise.resolve();
        }
        resolved.then(function () { return findAndClearHandle(handle) && cb(); });
        return handle;
    },
    clearImmediate: function (handle) {
        findAndClearHandle(handle);
    },
};
var TestTools = {
    pending: function () {
        return Object.keys(activeHandles).length;
    }
};
//# sourceMappingURL=Immediate.js.map

/***/ }),

/***/ 55674:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   N: () => (/* binding */ ObjectUnsubscribedError)
/* harmony export */ });
/* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45055);

var ObjectUnsubscribedError = (0,_createErrorClass__WEBPACK_IMPORTED_MODULE_0__/* .createErrorClass */ .d)(function (_super) {
    return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = 'ObjectUnsubscribedError';
        this.message = 'object unsubscribed';
    };
});
//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ }),

/***/ 378:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: () => (/* binding */ UnsubscriptionError)
/* harmony export */ });
/* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45055);

var UnsubscriptionError = (0,_createErrorClass__WEBPACK_IMPORTED_MODULE_0__/* .createErrorClass */ .d)(function (_super) {
    return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors
            ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
            : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
    };
});
//# sourceMappingURL=UnsubscriptionError.js.map

/***/ }),

/***/ 81037:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   jO: () => (/* binding */ popResultSelector),
/* harmony export */   yG: () => (/* binding */ popScheduler)
/* harmony export */ });
/* unused harmony export popNumber */
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60093);
/* harmony import */ var _isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(98972);


function last(arr) {
    return arr[arr.length - 1];
}
function popResultSelector(args) {
    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(last(args)) ? args.pop() : undefined;
}
function popScheduler(args) {
    return (0,_isScheduler__WEBPACK_IMPORTED_MODULE_1__/* .isScheduler */ .K)(last(args)) ? args.pop() : undefined;
}
function popNumber(args, defaultValue) {
    return typeof last(args) === 'number' ? args.pop() : defaultValue;
}
//# sourceMappingURL=args.js.map

/***/ }),

/***/ 60276:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ argsArgArrayOrObject)
/* harmony export */ });
var isArray = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
function argsArgArrayOrObject(args) {
    if (args.length === 1) {
        var first_1 = args[0];
        if (isArray(first_1)) {
            return { args: first_1, keys: null };
        }
        if (isPOJO(first_1)) {
            var keys = getKeys(first_1);
            return {
                args: keys.map(function (key) { return first_1[key]; }),
                keys: keys,
            };
        }
    }
    return { args: args, keys: null };
}
function isPOJO(obj) {
    return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
}
//# sourceMappingURL=argsArgArrayOrObject.js.map

/***/ }),

/***/ 37616:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ arrRemove)
/* harmony export */ });
function arrRemove(arr, item) {
    if (arr) {
        var index = arr.indexOf(item);
        0 <= index && arr.splice(index, 1);
    }
}
//# sourceMappingURL=arrRemove.js.map

/***/ }),

/***/ 45055:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   d: () => (/* binding */ createErrorClass)
/* harmony export */ });
function createErrorClass(createImpl) {
    var _super = function (instance) {
        Error.call(instance);
        instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
}
//# sourceMappingURL=createErrorClass.js.map

/***/ }),

/***/ 91668:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   n: () => (/* binding */ createObject)
/* harmony export */ });
function createObject(keys, values) {
    return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
}
//# sourceMappingURL=createObject.js.map

/***/ }),

/***/ 87492:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   O: () => (/* binding */ captureError),
/* harmony export */   x: () => (/* binding */ errorContext)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5828);

var context = null;
function errorContext(cb) {
    if (_config__WEBPACK_IMPORTED_MODULE_0__/* .config */ .v.useDeprecatedSynchronousErrorHandling) {
        var isRoot = !context;
        if (isRoot) {
            context = { errorThrown: false, error: null };
        }
        cb();
        if (isRoot) {
            var _a = context, errorThrown = _a.errorThrown, error = _a.error;
            context = null;
            if (errorThrown) {
                throw error;
            }
        }
    }
    else {
        cb();
    }
}
function captureError(err) {
    if (_config__WEBPACK_IMPORTED_MODULE_0__/* .config */ .v.useDeprecatedSynchronousErrorHandling && context) {
        context.errorThrown = true;
        context.error = err;
    }
}
//# sourceMappingURL=errorContext.js.map

/***/ }),

/***/ 89221:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ executeSchedule)
/* harmony export */ });
function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
    if (delay === void 0) { delay = 0; }
    if (repeat === void 0) { repeat = false; }
    var scheduleSubscription = scheduler.schedule(function () {
        work();
        if (repeat) {
            parentSubscription.add(this.schedule(null, delay));
        }
        else {
            this.unsubscribe();
        }
    }, delay);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) {
        return scheduleSubscription;
    }
}
//# sourceMappingURL=executeSchedule.js.map

/***/ }),

/***/ 64616:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   y: () => (/* binding */ identity)
/* harmony export */ });
function identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map

/***/ }),

/***/ 41894:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ isArrayLike)
/* harmony export */ });
var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
//# sourceMappingURL=isArrayLike.js.map

/***/ }),

/***/ 43322:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ isAsyncIterable)
/* harmony export */ });
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60093);

function isAsyncIterable(obj) {
    return Symbol.asyncIterator && (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}
//# sourceMappingURL=isAsyncIterable.js.map

/***/ }),

/***/ 60093:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: () => (/* binding */ isFunction)
/* harmony export */ });
function isFunction(value) {
    return typeof value === 'function';
}
//# sourceMappingURL=isFunction.js.map

/***/ }),

/***/ 69861:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ isInteropObservable)
/* harmony export */ });
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4164);
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60093);


function isInteropObservable(input) {
    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(input[_symbol_observable__WEBPACK_IMPORTED_MODULE_1__/* .observable */ .L]);
}
//# sourceMappingURL=isInteropObservable.js.map

/***/ }),

/***/ 67781:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   T: () => (/* binding */ isIterable)
/* harmony export */ });
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48124);
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60093);


function isIterable(input) {
    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(input === null || input === void 0 ? void 0 : input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_1__/* .iterator */ .h]);
}
//# sourceMappingURL=isIterable.js.map

/***/ }),

/***/ 11817:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   t: () => (/* binding */ isPromise)
/* harmony export */ });
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60093);

function isPromise(value) {
    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(value === null || value === void 0 ? void 0 : value.then);
}
//# sourceMappingURL=isPromise.js.map

/***/ }),

/***/ 53652:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   L: () => (/* binding */ isReadableStreamLike),
/* harmony export */   Q: () => (/* binding */ readableStreamLikeToAsyncGenerator)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60093);


function readableStreamLikeToAsyncGenerator(readableStream) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__asyncGenerator */ .FC)(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
        var reader, _a, value, done;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__generator */ .Jh)(this, function (_b) {
            switch (_b.label) {
                case 0:
                    reader = readableStream.getReader();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, , 9, 10]);
                    _b.label = 2;
                case 2:
                    if (false) {}
                    return [4, (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__await */ .qq)(reader.read())];
                case 3:
                    _a = _b.sent(), value = _a.value, done = _a.done;
                    if (!done) return [3, 5];
                    return [4, (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__await */ .qq)(void 0)];
                case 4: return [2, _b.sent()];
                case 5: return [4, (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__await */ .qq)(value)];
                case 6: return [4, _b.sent()];
                case 7:
                    _b.sent();
                    return [3, 2];
                case 8: return [3, 10];
                case 9:
                    reader.releaseLock();
                    return [7];
                case 10: return [2];
            }
        });
    });
}
function isReadableStreamLike(obj) {
    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(obj === null || obj === void 0 ? void 0 : obj.getReader);
}
//# sourceMappingURL=isReadableStreamLike.js.map

/***/ }),

/***/ 98972:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   K: () => (/* binding */ isScheduler)
/* harmony export */ });
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60093);

function isScheduler(value) {
    return value && (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(value.schedule);
}
//# sourceMappingURL=isScheduler.js.map

/***/ }),

/***/ 59251:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ hasLift),
/* harmony export */   e: () => (/* binding */ operate)
/* harmony export */ });
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60093);

function hasLift(source) {
    return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
    return function (source) {
        if (hasLift(source)) {
            return source.lift(function (liftedSource) {
                try {
                    return init(liftedSource, this);
                }
                catch (err) {
                    this.error(err);
                }
            });
        }
        throw new TypeError('Unable to lift unknown Observable type');
    };
}
//# sourceMappingURL=lift.js.map

/***/ }),

/***/ 36876:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ mapOneOrManyArgs)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99938);
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);


var isArray = Array.isArray;
function callOrApply(fn, args) {
    return isArray(args) ? fn.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__spreadArray */ .ev)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__/* .__read */ .CR)(args))) : fn(args);
}
function mapOneOrManyArgs(fn) {
    return (0,_operators_map__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(function (args) { return callOrApply(fn, args); });
}
//# sourceMappingURL=mapOneOrManyArgs.js.map

/***/ }),

/***/ 96236:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ noop)
/* harmony export */ });
function noop() { }
//# sourceMappingURL=noop.js.map

/***/ }),

/***/ 51932:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ pipeFromArray)
/* harmony export */ });
/* unused harmony export pipe */
/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64616);

function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
function pipeFromArray(fns) {
    if (fns.length === 0) {
        return _identity__WEBPACK_IMPORTED_MODULE_0__/* .identity */ .y;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
//# sourceMappingURL=pipe.js.map

/***/ }),

/***/ 51576:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   h: () => (/* binding */ reportUnhandledError)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5828);
/* harmony import */ var _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12424);


function reportUnhandledError(err) {
    _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_0__/* .timeoutProvider */ .z.setTimeout(function () {
        var onUnhandledError = _config__WEBPACK_IMPORTED_MODULE_1__/* .config */ .v.onUnhandledError;
        if (onUnhandledError) {
            onUnhandledError(err);
        }
        else {
            throw err;
        }
    });
}
//# sourceMappingURL=reportUnhandledError.js.map

/***/ }),

/***/ 9843:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ createInvalidObservableTypeError)
/* harmony export */ });
function createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}
//# sourceMappingURL=throwUnobservableError.js.map

/***/ }),

/***/ 65908:
/***/ ((__unused_webpack_module, exports) => {

// Copyright 2019-2023 @polkadot/wasm-crypto-wasm authors & contributors
// SPDX-License-Identifier: Apache-2.0

// Generated as part of the build, do not edit

exports.lY = 171008;

exports.JH = 339468;

exports.aI = '';


/***/ }),

/***/ 13563:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   K: () => (/* binding */ validateBasic),
/* harmony export */   M: () => (/* binding */ wNAF)
/* harmony export */ });
/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80373);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44503);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// Abelian group utilities


const _0n = BigInt(0);
const _1n = BigInt(1);
// Elliptic curve multiplication of Point by scalar. Fragile.
// Scalars should always be less than curve order: this should be checked inside of a curve itself.
// Creates precomputation tables for fast multiplication:
// - private scalar is split by fixed size windows of W bits
// - every window point is collected from window's table & added to accumulator
// - since windows are different, same point inside tables won't be accessed more than once per calc
// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
// - +1 window is neccessary for wNAF
// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
// windows to be in different memory locations
function wNAF(c, bits) {
    const constTimeNegate = (condition, item) => {
        const neg = item.negate();
        return condition ? neg : item;
    };
    const opts = (W) => {
        const windows = Math.ceil(bits / W) + 1; // +1, because
        const windowSize = 2 ** (W - 1); // -1 because we skip zero
        return { windows, windowSize };
    };
    return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder(elm, n) {
            let p = c.ZERO;
            let d = elm;
            while (n > _0n) {
                if (n & _1n)
                    p = p.add(d);
                d = d.double();
                n >>= _1n;
            }
            return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W) {
            const { windows, windowSize } = opts(W);
            const points = [];
            let p = elm;
            let base = p;
            for (let window = 0; window < windows; window++) {
                base = p;
                points.push(base);
                // =1, because we skip zero
                for (let i = 1; i < windowSize; i++) {
                    base = base.add(p);
                    points.push(base);
                }
                p = base.double();
            }
            return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W, precomputes, n) {
            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
            // But need to carefully remove other checks before wNAF. ORDER == bits here
            const { windows, windowSize } = opts(W);
            let p = c.ZERO;
            let f = c.BASE;
            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
            const maxNumber = 2 ** W;
            const shiftBy = BigInt(W);
            for (let window = 0; window < windows; window++) {
                const offset = window * windowSize;
                // Extract W bits.
                let wbits = Number(n & mask);
                // Shift number by W bits.
                n >>= shiftBy;
                // If the bits are bigger than max size, we'll split those.
                // +224 => 256 - 32
                if (wbits > windowSize) {
                    wbits -= maxNumber;
                    n += _1n;
                }
                // This code was first written with assumption that 'f' and 'p' will never be infinity point:
                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
                // there is negate now: it is possible that negated element from low value
                // would be the same as high element, which will create carry into next window.
                // It's not obvious how this can fail, but still worth investigating later.
                // Check if we're onto Zero point.
                // Add random point inside current window to f.
                const offset1 = offset;
                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero
                const cond1 = window % 2 !== 0;
                const cond2 = wbits < 0;
                if (wbits === 0) {
                    // The most important part for const-time getPublicKey
                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));
                }
                else {
                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));
                }
            }
            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
            // Even if the variable is still unused, there are some checks which will
            // throw an exception, so compiler needs to prove they won't happen, which is hard.
            // At this point there is a way to F be infinity-point even if p is not,
            // which makes it less const-time: around 1 bigint multiply.
            return { p, f };
        },
        wNAFCached(P, precomputesMap, n, transform) {
            // @ts-ignore
            const W = P._WINDOW_SIZE || 1;
            // Calculate precomputes on a first run, reuse them after
            let comp = precomputesMap.get(P);
            if (!comp) {
                comp = this.precomputeWindow(P, W);
                if (W !== 1) {
                    precomputesMap.set(P, transform(comp));
                }
            }
            return this.wNAF(W, comp, n);
        },
    };
}
function validateBasic(curve) {
    (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__/* .validateField */ .OP)(curve.Fp);
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .validateObject */ .FF)(curve, {
        n: 'bigint',
        h: 'bigint',
        Gx: 'field',
        Gy: 'field',
    }, {
        nBitLength: 'isSafeInteger',
        nByteLength: 'isSafeInteger',
    });
    // Set defaults
    return Object.freeze({
        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_0__/* .nLength */ .kK)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER },
    });
}
//# sourceMappingURL=curve.js.map

/***/ }),

/***/ 80373:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OP: () => (/* binding */ validateField),
/* harmony export */   PS: () => (/* binding */ getMinHashLength),
/* harmony export */   U_: () => (/* binding */ invert),
/* harmony export */   Us: () => (/* binding */ mapHashToField),
/* harmony export */   gN: () => (/* binding */ Field),
/* harmony export */   kK: () => (/* binding */ nLength),
/* harmony export */   oA: () => (/* binding */ pow2),
/* harmony export */   wQ: () => (/* binding */ mod)
/* harmony export */ });
/* unused harmony exports pow, tonelliShanks, FpSqrt, isNegativeLE, FpPow, FpInvertBatch, FpDiv, FpIsSquare, FpSqrtOdd, FpSqrtEven, hashToPrivateScalar, getFieldBytesLength */
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44503);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// Utilities for modular arithmetics and finite fields

// prettier-ignore
const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);
// prettier-ignore
const _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
// prettier-ignore
const _9n = BigInt(9), _16n = BigInt(16);
// Calculates a modulo b
function mod(a, b) {
    const result = a % b;
    return result >= _0n ? result : b + result;
}
/**
 * Efficiently raise num to power and do modular division.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 * @example
 * pow(2n, 6n, 11n) // 64n % 11n == 9n
 */
// TODO: use field version && remove
function pow(num, power, modulo) {
    if (modulo <= _0n || power < _0n)
        throw new Error('Expected power/modulo > 0');
    if (modulo === _1n)
        return _0n;
    let res = _1n;
    while (power > _0n) {
        if (power & _1n)
            res = (res * num) % modulo;
        num = (num * num) % modulo;
        power >>= _1n;
    }
    return res;
}
// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
function pow2(x, power, modulo) {
    let res = x;
    while (power-- > _0n) {
        res *= res;
        res %= modulo;
    }
    return res;
}
// Inverses number over modulo
function invert(number, modulo) {
    if (number === _0n || modulo <= _0n) {
        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
    }
    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
    // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
    let a = mod(number, modulo);
    let b = modulo;
    // prettier-ignore
    let x = _0n, y = _1n, u = _1n, v = _0n;
    while (a !== _0n) {
        // JIT applies optimization if those two lines follow each other
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        // prettier-ignore
        b = a, a = r, x = u, y = v, u = m, v = n;
    }
    const gcd = b;
    if (gcd !== _1n)
        throw new Error('invert: does not exist');
    return mod(x, modulo);
}
/**
 * Tonelli-Shanks square root search algorithm.
 * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
 * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
 * Will start an infinite loop if field order P is not prime.
 * @param P field order
 * @returns function that takes field Fp (created from P) and number n
 */
function tonelliShanks(P) {
    // Legendre constant: used to calculate Legendre symbol (a | p),
    // which denotes the value of a^((p-1)/2) (mod p).
    // (a | p) ≡ 1    if a is a square (mod p)
    // (a | p) ≡ -1   if a is not a square (mod p)
    // (a | p) ≡ 0    if a ≡ 0 (mod p)
    const legendreC = (P - _1n) / _2n;
    let Q, S, Z;
    // Step 1: By factoring out powers of 2 from p - 1,
    // find q and s such that p - 1 = q*(2^s) with q odd
    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)
        ;
    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)
        ;
    // Fast-path
    if (S === 1) {
        const p1div4 = (P + _1n) / _4n;
        return function tonelliFast(Fp, n) {
            const root = Fp.pow(n, p1div4);
            if (!Fp.eql(Fp.sqr(root), n))
                throw new Error('Cannot find square root');
            return root;
        };
    }
    // Slow-path
    const Q1div2 = (Q + _1n) / _2n;
    return function tonelliSlow(Fp, n) {
        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
            throw new Error('Cannot find square root');
        let r = S;
        // TODO: will fail at Fp2/etc
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
        let x = Fp.pow(n, Q1div2); // first guess at the square root
        let b = Fp.pow(n, Q); // first guess at the fudge factor
        while (!Fp.eql(b, Fp.ONE)) {
            if (Fp.eql(b, Fp.ZERO))
                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
            // Find m such b^(2^m)==1
            let m = 1;
            for (let t2 = Fp.sqr(b); m < r; m++) {
                if (Fp.eql(t2, Fp.ONE))
                    break;
                t2 = Fp.sqr(t2); // t2 *= t2
            }
            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)
            g = Fp.sqr(ge); // g = ge * ge
            x = Fp.mul(x, ge); // x *= ge
            b = Fp.mul(b, g); // b *= g
            r = m;
        }
        return x;
    };
}
function FpSqrt(P) {
    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
    // P ≡ 3 (mod 4)
    // √n = n^((P+1)/4)
    if (P % _4n === _3n) {
        // Not all roots possible!
        // const ORDER =
        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
        // const NUM = 72057594037927816n;
        const p1div4 = (P + _1n) / _4n;
        return function sqrt3mod4(Fp, n) {
            const root = Fp.pow(n, p1div4);
            // Throw if root**2 != n
            if (!Fp.eql(Fp.sqr(root), n))
                throw new Error('Cannot find square root');
            return root;
        };
    }
    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
    if (P % _8n === _5n) {
        const c1 = (P - _5n) / _8n;
        return function sqrt5mod8(Fp, n) {
            const n2 = Fp.mul(n, _2n);
            const v = Fp.pow(n2, c1);
            const nv = Fp.mul(n, v);
            const i = Fp.mul(Fp.mul(nv, _2n), v);
            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
            if (!Fp.eql(Fp.sqr(root), n))
                throw new Error('Cannot find square root');
            return root;
        };
    }
    // P ≡ 9 (mod 16)
    if (P % _16n === _9n) {
        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start
        // Means we cannot use sqrt for constants at all!
        //
        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F
        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F
        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F
        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic
        // sqrt = (x) => {
        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4
        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1
        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1
        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1
        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x
        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x
        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x
        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x
        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x
        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2
        // }
    }
    // Other cases: Tonelli-Shanks algorithm
    return tonelliShanks(P);
}
// Little-endian check for first LE bit (last BE bit);
const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;
// prettier-ignore
const FIELD_FIELDS = [
    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',
    'eql', 'add', 'sub', 'mul', 'pow', 'div',
    'addN', 'subN', 'mulN', 'sqrN'
];
function validateField(field) {
    const initial = {
        ORDER: 'bigint',
        MASK: 'bigint',
        BYTES: 'isSafeInteger',
        BITS: 'isSafeInteger',
    };
    const opts = FIELD_FIELDS.reduce((map, val) => {
        map[val] = 'function';
        return map;
    }, initial);
    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .validateObject */ .FF)(field, opts);
}
// Generic field functions
/**
 * Same as `pow` but for Fp: non-constant-time.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 */
function FpPow(f, num, power) {
    // Should have same speed as pow for bigints
    // TODO: benchmark!
    if (power < _0n)
        throw new Error('Expected power > 0');
    if (power === _0n)
        return f.ONE;
    if (power === _1n)
        return num;
    let p = f.ONE;
    let d = num;
    while (power > _0n) {
        if (power & _1n)
            p = f.mul(p, d);
        d = f.sqr(d);
        power >>= _1n;
    }
    return p;
}
/**
 * Efficiently invert an array of Field elements.
 * `inv(0)` will return `undefined` here: make sure to throw an error.
 */
function FpInvertBatch(f, nums) {
    const tmp = new Array(nums.length);
    // Walk from first to last, multiply them by each other MOD p
    const lastMultiplied = nums.reduce((acc, num, i) => {
        if (f.is0(num))
            return acc;
        tmp[i] = acc;
        return f.mul(acc, num);
    }, f.ONE);
    // Invert last element
    const inverted = f.inv(lastMultiplied);
    // Walk from last to first, multiply them by inverted each other MOD p
    nums.reduceRight((acc, num, i) => {
        if (f.is0(num))
            return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num);
    }, inverted);
    return tmp;
}
function FpDiv(f, lhs, rhs) {
    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));
}
// This function returns True whenever the value x is a square in the field F.
function FpIsSquare(f) {
    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic
    return (x) => {
        const p = f.pow(x, legendreConst);
        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
    };
}
// CURVE.n lengths
function nLength(n, nBitLength) {
    // Bit size, byte size of CURVE.n
    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
}
/**
 * Initializes a finite field over prime. **Non-primes are not supported.**
 * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
 * Major performance optimizations:
 * * a) denormalized operations like mulN instead of mul
 * * b) same object shape: never add or remove keys
 * * c) Object.freeze
 * @param ORDER prime positive bigint
 * @param bitLen how many bits the field consumes
 * @param isLE (def: false) if encoding / decoding should be in little-endian
 * @param redef optional faster redefinitions of sqrt and other methods
 */
function Field(ORDER, bitLen, isLE = false, redef = {}) {
    if (ORDER <= _0n)
        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
    if (BYTES > 2048)
        throw new Error('Field lengths over 2048 bytes are not supported');
    const sqrtP = FpSqrt(ORDER);
    const f = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .bitMask */ .dQ)(BITS),
        ZERO: _0n,
        ONE: _1n,
        create: (num) => mod(num, ORDER),
        isValid: (num) => {
            if (typeof num !== 'bigint')
                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible
        },
        is0: (num) => num === _0n,
        isOdd: (num) => (num & _1n) === _1n,
        neg: (num) => mod(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod(num * num, ORDER),
        add: (lhs, rhs) => mod(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
        pow: (num, power) => FpPow(f, num, power),
        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert(num, ORDER),
        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
        invertBatch: (lst) => FpInvertBatch(f, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c) => (c ? b : a),
        toBytes: (num) => (isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .numberToBytesLE */ .S5)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .numberToBytesBE */ .tL)(num, BYTES)),
        fromBytes: (bytes) => {
            if (bytes.length !== BYTES)
                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .bytesToNumberLE */ .ty)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(bytes);
        },
    });
    return Object.freeze(f);
}
function FpSqrtOdd(Fp, elm) {
    if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? root : Fp.neg(root);
}
function FpSqrtEven(Fp, elm) {
    if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? Fp.neg(root) : root;
}
/**
 * "Constant-time" private key generation utility.
 * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).
 * Which makes it slightly more biased, less secure.
 * @deprecated use mapKeyToField instead
 */
function hashToPrivateScalar(hash, groupOrder, isLE = false) {
    hash = ensureBytes('privateHash', hash);
    const hashLen = hash.length;
    const minLen = nLength(groupOrder).nByteLength + 8;
    if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);
    return mod(num, groupOrder - _1n) + _1n;
}
/**
 * Returns total number of bytes consumed by the field element.
 * For example, 32 bytes for usual 256-bit weierstrass curve.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of field
 */
function getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== 'bigint')
        throw new Error('field order must be bigint');
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
}
/**
 * Returns minimal amount of bytes that can be safely reduced
 * by field order.
 * Should be 2^-128 for 128-bit curve such as P256.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of target hash
 */
function getMinHashLength(fieldOrder) {
    const length = getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
}
/**
 * "Constant-time" private key generation utility.
 * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
 * and convert them into private scalar, with the modulo bias being negligible.
 * Needs at least 48 bytes of input for 32-byte private key.
 * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
 * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
 * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
 * @param hash hash output from SHA3 or a similar function
 * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
 * @param isLE interpret hash bytes as LE num
 * @returns valid private scalar
 */
function mapHashToField(key, fieldOrder, isLE = false) {
    const len = key.length;
    const fieldLen = getFieldBytesLength(fieldOrder);
    const minLen = getMinHashLength(fieldOrder);
    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
    if (len < 16 || len < minLen || len > 1024)
        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .bytesToNumberLE */ .ty)(key);
    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0
    const reduced = mod(num, fieldOrder - _1n) + _1n;
    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .numberToBytesLE */ .S5)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .numberToBytesBE */ .tL)(reduced, fieldLen);
}
//# sourceMappingURL=modular.js.map

/***/ }),

/***/ 44503:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FF: () => (/* binding */ validateObject),
/* harmony export */   S5: () => (/* binding */ numberToBytesLE),
/* harmony export */   _t: () => (/* binding */ isBytes),
/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),
/* harmony export */   ci: () => (/* binding */ bytesToHex),
/* harmony export */   dQ: () => (/* binding */ bitMask),
/* harmony export */   eV: () => (/* binding */ concatBytes),
/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),
/* harmony export */   n$: () => (/* binding */ createHmacDrbg),
/* harmony export */   ql: () => (/* binding */ ensureBytes),
/* harmony export */   tL: () => (/* binding */ numberToBytesBE),
/* harmony export */   ty: () => (/* binding */ bytesToNumberLE)
/* harmony export */ });
/* unused harmony exports numberToHexUnpadded, hexToNumber, numberToVarBytesBE, equalBytes, utf8ToBytes, bitLen, bitGet, bitSet */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// 100 lines of code in the file are duplicated from noble-hashes (utils).
// This is OK: `abstract` directory does not use noble-hashes.
// User may opt-in into using different hashing library. This way, noble-hashes
// won't be included into their bundle.
const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
function isBytes(a) {
    return (a instanceof Uint8Array ||
        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
}
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */
function bytesToHex(bytes) {
    if (!isBytes(bytes))
        throw new Error('Uint8Array expected');
    // pre-caching improves the speed 6x
    let hex = '';
    for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
    }
    return hex;
}
function numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
}
function hexToNumber(hex) {
    if (typeof hex !== 'string')
        throw new Error('hex string expected, got ' + typeof hex);
    // Big Endian
    return BigInt(hex === '' ? '0' : `0x${hex}`);
}
// We use optimized technique to convert hex string to byte array
const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
function asciiToBase16(char) {
    if (char >= asciis._0 && char <= asciis._9)
        return char - asciis._0;
    if (char >= asciis._A && char <= asciis._F)
        return char - (asciis._A - 10);
    if (char >= asciis._a && char <= asciis._f)
        return char - (asciis._a - 10);
    return;
}
/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */
function hexToBytes(hex) {
    if (typeof hex !== 'string')
        throw new Error('hex string expected, got ' + typeof hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === undefined || n2 === undefined) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
    }
    return array;
}
// BE: Big Endian, LE: Little Endian
function bytesToNumberBE(bytes) {
    return hexToNumber(bytesToHex(bytes));
}
function bytesToNumberLE(bytes) {
    if (!isBytes(bytes))
        throw new Error('Uint8Array expected');
    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
}
function numberToBytesBE(n, len) {
    return hexToBytes(n.toString(16).padStart(len * 2, '0'));
}
function numberToBytesLE(n, len) {
    return numberToBytesBE(n, len).reverse();
}
// Unpadded, rarely used
function numberToVarBytesBE(n) {
    return hexToBytes(numberToHexUnpadded(n));
}
/**
 * Takes hex string or Uint8Array, converts to Uint8Array.
 * Validates output length.
 * Will throw error for other types.
 * @param title descriptive title for an error e.g. 'private key'
 * @param hex hex string or Uint8Array
 * @param expectedLength optional, will compare to result array's length
 * @returns
 */
function ensureBytes(title, hex, expectedLength) {
    let res;
    if (typeof hex === 'string') {
        try {
            res = hexToBytes(hex);
        }
        catch (e) {
            throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
        }
    }
    else if (isBytes(hex)) {
        // Uint8Array.from() instead of hash.slice() because node.js Buffer
        // is instance of Uint8Array, and its slice() creates **mutable** copy
        res = Uint8Array.from(hex);
    }
    else {
        throw new Error(`${title} must be hex string or Uint8Array`);
    }
    const len = res.length;
    if (typeof expectedLength === 'number' && len !== expectedLength)
        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
    return res;
}
/**
 * Copies several Uint8Arrays into one.
 */
function concatBytes(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        if (!isBytes(a))
            throw new Error('Uint8Array expected');
        sum += a.length;
    }
    let res = new Uint8Array(sum);
    let pad = 0;
    for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
// Compares 2 u8a-s in kinda constant time
function equalBytes(a, b) {
    if (a.length !== b.length)
        return false;
    let diff = 0;
    for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b[i];
    return diff === 0;
}
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */
function utf8ToBytes(str) {
    if (typeof str !== 'string')
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
// Bit operations
/**
 * Calculates amount of bits in a bigint.
 * Same as `n.toString(2).length`
 */
function bitLen(n) {
    let len;
    for (len = 0; n > _0n; n >>= _1n, len += 1)
        ;
    return len;
}
/**
 * Gets single bit at position.
 * NOTE: first bit position is 0 (same as arrays)
 * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
 */
function bitGet(n, pos) {
    return (n >> BigInt(pos)) & _1n;
}
/**
 * Sets single bit at position.
 */
const bitSet = (n, pos, value) => {
    return n | ((value ? _1n : _0n) << BigInt(pos));
};
/**
 * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
 * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
 */
const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;
// DRBG
const u8n = (data) => new Uint8Array(data); // creates Uint8Array
const u8fr = (arr) => Uint8Array.from(arr); // another shortcut
/**
 * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
 * @returns function that will call DRBG until 2nd arg returns something meaningful
 * @example
 *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
 *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
 */
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== 'number' || hashLen < 2)
        throw new Error('hashLen must be a number');
    if (typeof qByteLen !== 'number' || qByteLen < 2)
        throw new Error('qByteLen must be a number');
    if (typeof hmacFn !== 'function')
        throw new Error('hmacFn must be a function');
    // Step B, Step C: set hashLen to 8*ceil(hlen/8)
    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
    let i = 0; // Iterations counter, will throw when over 1000
    const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
    };
    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)
    const reseed = (seed = u8n()) => {
        // HMAC-DRBG reseed() function. Steps D-G
        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)
        v = h(); // v = hmac(k || v)
        if (seed.length === 0)
            return;
        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)
        v = h(); // v = hmac(k || v)
    };
    const gen = () => {
        // HMAC-DRBG generate() function
        if (i++ >= 1000)
            throw new Error('drbg: tried 1000 values');
        let len = 0;
        const out = [];
        while (len < qByteLen) {
            v = h();
            const sl = v.slice();
            out.push(sl);
            len += v.length;
        }
        return concatBytes(...out);
    };
    const genUntil = (seed, pred) => {
        reset();
        reseed(seed); // Steps D-G
        let res = undefined; // Step H: grind until k is in [1..n-1]
        while (!(res = pred(gen())))
            reseed();
        reset();
        return res;
    };
    return genUntil;
}
// Validating curves and fields
const validatorFns = {
    bigint: (val) => typeof val === 'bigint',
    function: (val) => typeof val === 'function',
    boolean: (val) => typeof val === 'boolean',
    string: (val) => typeof val === 'string',
    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),
    isSafeInteger: (val) => Number.isSafeInteger(val),
    array: (val) => Array.isArray(val),
    field: (val, object) => object.Fp.isValid(val),
    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),
};
// type Record<K extends string | number | symbol, T> = { [P in K]: T; }
function validateObject(object, validators, optValidators = {}) {
    const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns[type];
        if (typeof checkVal !== 'function')
            throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === undefined)
            return;
        if (!checkVal(val, object)) {
            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
        }
    };
    for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
    for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
    return object;
}
// validate type tests
// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
// // Should fail type-check
// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 56181:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  kA: () => (/* binding */ secp256k1)
});

// UNUSED EXPORTS: encodeToCurve, hashToCurve, schnorr

// EXTERNAL MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/sha256.js
var esm_sha256 = __webpack_require__(79769);
// EXTERNAL MODULE: ./node_modules/.pnpm/@noble+curves@1.3.0/node_modules/@noble/curves/esm/abstract/modular.js
var modular = __webpack_require__(80373);
// EXTERNAL MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/hmac.js
var hmac = __webpack_require__(75423);
// EXTERNAL MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/utils.js + 1 modules
var utils = __webpack_require__(82478);
// EXTERNAL MODULE: ./node_modules/.pnpm/@noble+curves@1.3.0/node_modules/@noble/curves/esm/abstract/utils.js
var abstract_utils = __webpack_require__(44503);
// EXTERNAL MODULE: ./node_modules/.pnpm/@noble+curves@1.3.0/node_modules/@noble/curves/esm/abstract/curve.js
var abstract_curve = __webpack_require__(13563);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@noble+curves@1.3.0/node_modules/@noble/curves/esm/abstract/weierstrass.js
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// Short Weierstrass curve. The formula is: y² = x³ + ax + b




function validatePointOpts(curve) {
    const opts = (0,abstract_curve/* validateBasic */.K)(curve);
    abstract_utils/* validateObject */.FF(opts, {
        a: 'field',
        b: 'field',
    }, {
        allowedPrivateKeyLengths: 'array',
        wrapPrivateKey: 'boolean',
        isTorsionFree: 'function',
        clearCofactor: 'function',
        allowInfinityPoint: 'boolean',
        fromBytes: 'function',
        toBytes: 'function',
    });
    const { endo, Fp, a } = opts;
    if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');
        }
        if (typeof endo !== 'object' ||
            typeof endo.beta !== 'bigint' ||
            typeof endo.splitScalar !== 'function') {
            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');
        }
    }
    return Object.freeze({ ...opts });
}
// ASN.1 DER encoding utilities
const { bytesToNumberBE: b2n, hexToBytes: h2b } = abstract_utils;
const DER = {
    // asn.1 DER encoding utils
    Err: class DERErr extends Error {
        constructor(m = '') {
            super(m);
        }
    },
    _parseInt(data) {
        const { Err: E } = DER;
        if (data.length < 2 || data[0] !== 0x02)
            throw new E('Invalid signature integer tag');
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len)
            throw new E('Invalid signature integer: wrong length');
        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
        // since we always use positive integers here. It must always be empty:
        // - add zero byte if exists
        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
        if (res[0] & 0b10000000)
            throw new E('Invalid signature integer: negative');
        if (res[0] === 0x00 && !(res[1] & 0b10000000))
            throw new E('Invalid signature integer: unnecessary leading zero');
        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left
    },
    toSig(hex) {
        // parse DER signature
        const { Err: E } = DER;
        const data = typeof hex === 'string' ? h2b(hex) : hex;
        if (!abstract_utils/* isBytes */._t(data))
            throw new Error('ui8a expected');
        let l = data.length;
        if (l < 2 || data[0] != 0x30)
            throw new E('Invalid signature tag');
        if (data[1] !== l - 2)
            throw new E('Invalid signature: incorrect length');
        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
        if (rBytesLeft.length)
            throw new E('Invalid signature: left bytes after parsing');
        return { r, s };
    },
    hexFromSig(sig) {
        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);
        const h = (num) => {
            const hex = num.toString(16);
            return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice(h(sig.s));
        const r = slice(h(sig.r));
        const shl = s.length / 2;
        const rhl = r.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
    },
};
// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);
function weierstrassPoints(opts) {
    const CURVE = validatePointOpts(opts);
    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ
    const toBytes = CURVE.toBytes ||
        ((_c, point, _isCompressed) => {
            const a = point.toAffine();
            return abstract_utils/* concatBytes */.eV(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));
        });
    const fromBytes = CURVE.fromBytes ||
        ((bytes) => {
            // const head = bytes[0];
            const tail = bytes.subarray(1);
            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x, y };
        });
    /**
     * y² = x³ + ax + b: Short weierstrass curve formula
     * @returns y²
     */
    function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x); // x * x
        const x3 = Fp.mul(x2, x); // x2 * x
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
    }
    // Validate whether the passed curve params are valid.
    // We check if curve equation works for generator point.
    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
    // ProjectivePoint class has not been initialized yet.
    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error('bad generator point: equation left != right');
    // Valid group elements reside in range 1..n-1
    function isWithinCurveOrder(num) {
        return typeof num === 'bigint' && _0n < num && num < CURVE.n;
    }
    function assertGE(num) {
        if (!isWithinCurveOrder(num))
            throw new Error('Expected valid bigint: 0 < bigint < curve.n');
    }
    // Validates if priv key is valid and converts it to bigint.
    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
    function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key !== 'bigint') {
            if (abstract_utils/* isBytes */._t(key))
                key = abstract_utils/* bytesToHex */.ci(key);
            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
            if (typeof key !== 'string' || !lengths.includes(key.length))
                throw new Error('Invalid key');
            key = key.padStart(nByteLength * 2, '0');
        }
        let num;
        try {
            num =
                typeof key === 'bigint'
                    ? key
                    : abstract_utils.bytesToNumberBE((0,abstract_utils/* ensureBytes */.ql)('private key', key, nByteLength));
        }
        catch (error) {
            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey)
            num = modular/* mod */.wQ(num, n); // disabled by default, enabled for BLS
        assertGE(num); // num in range [1..N-1]
        return num;
    }
    const pointPrecomputes = new Map();
    function assertPrjPoint(other) {
        if (!(other instanceof Point))
            throw new Error('ProjectivePoint expected');
    }
    /**
     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
     * Default Point works in 2d / affine coordinates: (x, y)
     * We're doing calculations in projective, because its operations don't require costly inversion.
     */
    class Point {
        constructor(px, py, pz) {
            this.px = px;
            this.py = py;
            this.pz = pz;
            if (px == null || !Fp.isValid(px))
                throw new Error('x required');
            if (py == null || !Fp.isValid(py))
                throw new Error('y required');
            if (pz == null || !Fp.isValid(pz))
                throw new Error('z required');
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
            const { x, y } = p || {};
            if (!p || !Fp.isValid(x) || !Fp.isValid(y))
                throw new Error('invalid affine point');
            if (p instanceof Point)
                throw new Error('projective point not allowed');
            const is0 = (i) => Fp.eql(i, Fp.ZERO);
            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
            if (is0(x) && is0(y))
                return Point.ZERO;
            return new Point(x, y, Fp.ONE);
        }
        get x() {
            return this.toAffine().x;
        }
        get y() {
            return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
            const toInv = Fp.invertBatch(points.map((p) => p.pz));
            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
            const P = Point.fromAffine(fromBytes((0,abstract_utils/* ensureBytes */.ql)('pointHex', hex)));
            P.assertValidity();
            return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
            this._WINDOW_SIZE = windowSize;
            pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
            if (this.is0()) {
                // (0, 1, 0) aka ZERO is invalid in most contexts.
                // In BLS, ZERO can be serialized, so we allow it.
                // (0, 0, 0) is wrong representation of ZERO and is always invalid.
                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
                    return;
                throw new Error('bad point: ZERO');
            }
            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
            const { x, y } = this.toAffine();
            // Check if x, y are valid field elements
            if (!Fp.isValid(x) || !Fp.isValid(y))
                throw new Error('bad point: x or y not FE');
            const left = Fp.sqr(y); // y²
            const right = weierstrassEquation(x); // x³ + ax + b
            if (!Fp.eql(left, right))
                throw new Error('bad point: equation left != right');
            if (!this.isTorsionFree())
                throw new Error('bad point: not in prime-order subgroup');
        }
        hasEvenY() {
            const { y } = this.toAffine();
            if (Fp.isOdd)
                return !Fp.isOdd(y);
            throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
            assertPrjPoint(other);
            const { px: X1, py: Y1, pz: Z1 } = this;
            const { px: X2, py: Y2, pz: Z2 } = other;
            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
            return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
            return new Point(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
            const { a, b } = CURVE;
            const b3 = Fp.mul(b, _3n);
            const { px: X1, py: Y1, pz: Z1 } = this;
            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
            let t0 = Fp.mul(X1, X1); // step 1
            let t1 = Fp.mul(Y1, Y1);
            let t2 = Fp.mul(Z1, Z1);
            let t3 = Fp.mul(X1, Y1);
            t3 = Fp.add(t3, t3); // step 5
            Z3 = Fp.mul(X1, Z1);
            Z3 = Fp.add(Z3, Z3);
            X3 = Fp.mul(a, Z3);
            Y3 = Fp.mul(b3, t2);
            Y3 = Fp.add(X3, Y3); // step 10
            X3 = Fp.sub(t1, Y3);
            Y3 = Fp.add(t1, Y3);
            Y3 = Fp.mul(X3, Y3);
            X3 = Fp.mul(t3, X3);
            Z3 = Fp.mul(b3, Z3); // step 15
            t2 = Fp.mul(a, t2);
            t3 = Fp.sub(t0, t2);
            t3 = Fp.mul(a, t3);
            t3 = Fp.add(t3, Z3);
            Z3 = Fp.add(t0, t0); // step 20
            t0 = Fp.add(Z3, t0);
            t0 = Fp.add(t0, t2);
            t0 = Fp.mul(t0, t3);
            Y3 = Fp.add(Y3, t0);
            t2 = Fp.mul(Y1, Z1); // step 25
            t2 = Fp.add(t2, t2);
            t0 = Fp.mul(t2, t3);
            X3 = Fp.sub(X3, t0);
            Z3 = Fp.mul(t2, t1);
            Z3 = Fp.add(Z3, Z3); // step 30
            Z3 = Fp.add(Z3, Z3);
            return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
            assertPrjPoint(other);
            const { px: X1, py: Y1, pz: Z1 } = this;
            const { px: X2, py: Y2, pz: Z2 } = other;
            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
            const a = CURVE.a;
            const b3 = Fp.mul(CURVE.b, _3n);
            let t0 = Fp.mul(X1, X2); // step 1
            let t1 = Fp.mul(Y1, Y2);
            let t2 = Fp.mul(Z1, Z2);
            let t3 = Fp.add(X1, Y1);
            let t4 = Fp.add(X2, Y2); // step 5
            t3 = Fp.mul(t3, t4);
            t4 = Fp.add(t0, t1);
            t3 = Fp.sub(t3, t4);
            t4 = Fp.add(X1, Z1);
            let t5 = Fp.add(X2, Z2); // step 10
            t4 = Fp.mul(t4, t5);
            t5 = Fp.add(t0, t2);
            t4 = Fp.sub(t4, t5);
            t5 = Fp.add(Y1, Z1);
            X3 = Fp.add(Y2, Z2); // step 15
            t5 = Fp.mul(t5, X3);
            X3 = Fp.add(t1, t2);
            t5 = Fp.sub(t5, X3);
            Z3 = Fp.mul(a, t4);
            X3 = Fp.mul(b3, t2); // step 20
            Z3 = Fp.add(X3, Z3);
            X3 = Fp.sub(t1, Z3);
            Z3 = Fp.add(t1, Z3);
            Y3 = Fp.mul(X3, Z3);
            t1 = Fp.add(t0, t0); // step 25
            t1 = Fp.add(t1, t0);
            t2 = Fp.mul(a, t2);
            t4 = Fp.mul(b3, t4);
            t1 = Fp.add(t1, t2);
            t2 = Fp.sub(t0, t2); // step 30
            t2 = Fp.mul(a, t2);
            t4 = Fp.add(t4, t2);
            t0 = Fp.mul(t1, t4);
            Y3 = Fp.add(Y3, t0);
            t0 = Fp.mul(t5, t4); // step 35
            X3 = Fp.mul(t3, X3);
            X3 = Fp.sub(X3, t0);
            t0 = Fp.mul(t3, t1);
            Z3 = Fp.mul(t5, Z3);
            Z3 = Fp.add(Z3, t0); // step 40
            return new Point(X3, Y3, Z3);
        }
        subtract(other) {
            return this.add(other.negate());
        }
        is0() {
            return this.equals(Point.ZERO);
        }
        wNAF(n) {
            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
                const toInv = Fp.invertBatch(comp.map((p) => p.pz));
                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
            });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(n) {
            const I = Point.ZERO;
            if (n === _0n)
                return I;
            assertGE(n); // Will throw on 0
            if (n === _1n)
                return this;
            const { endo } = CURVE;
            if (!endo)
                return wnaf.unsafeLadder(this, n);
            // Apply endomorphism
            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let k1p = I;
            let k2p = I;
            let d = this;
            while (k1 > _0n || k2 > _0n) {
                if (k1 & _1n)
                    k1p = k1p.add(d);
                if (k2 & _1n)
                    k2p = k2p.add(d);
                d = d.double();
                k1 >>= _1n;
                k2 >>= _1n;
            }
            if (k1neg)
                k1p = k1p.negate();
            if (k2neg)
                k2p = k2p.negate();
            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
            assertGE(scalar);
            let n = scalar;
            let point, fake; // Fake point is used to const-time mult
            const { endo } = CURVE;
            if (endo) {
                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
                let { p: k1p, f: f1p } = this.wNAF(k1);
                let { p: k2p, f: f2p } = this.wNAF(k2);
                k1p = wnaf.constTimeNegate(k1neg, k1p);
                k2p = wnaf.constTimeNegate(k2neg, k2p);
                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                point = k1p.add(k2p);
                fake = f1p.add(f2p);
            }
            else {
                const { p, f } = this.wNAF(n);
                point = p;
                fake = f;
            }
            // Normalize `z` for both points, but return only real one
            return Point.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b) {
            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
            const mul = (P, a // Select faster multiply() method
            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));
            const sum = mul(this, a).add(mul(Q, b));
            return sum.is0() ? undefined : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
            const { px: x, py: y, pz: z } = this;
            const is0 = this.is0();
            // If invZ was 0, we return zero point. However we still want to execute
            // all operations, so we replace invZ with a random number, 1.
            if (iz == null)
                iz = is0 ? Fp.ONE : Fp.inv(z);
            const ax = Fp.mul(x, iz);
            const ay = Fp.mul(y, iz);
            const zz = Fp.mul(z, iz);
            if (is0)
                return { x: Fp.ZERO, y: Fp.ZERO };
            if (!Fp.eql(zz, Fp.ONE))
                throw new Error('invZ was invalid');
            return { x: ax, y: ay };
        }
        isTorsionFree() {
            const { h: cofactor, isTorsionFree } = CURVE;
            if (cofactor === _1n)
                return true; // No subgroups, always torsion-free
            if (isTorsionFree)
                return isTorsionFree(Point, this);
            throw new Error('isTorsionFree() has not been declared for the elliptic curve');
        }
        clearCofactor() {
            const { h: cofactor, clearCofactor } = CURVE;
            if (cofactor === _1n)
                return this; // Fast-path
            if (clearCofactor)
                return clearCofactor(Point, this);
            return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
            this.assertValidity();
            return toBytes(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
            return abstract_utils/* bytesToHex */.ci(this.toRawBytes(isCompressed));
        }
    }
    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
    const _bits = CURVE.nBitLength;
    const wnaf = (0,abstract_curve/* wNAF */.M)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
    // Validate if generator point is on curve
    return {
        CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder,
    };
}
function validateOpts(curve) {
    const opts = (0,abstract_curve/* validateBasic */.K)(curve);
    abstract_utils/* validateObject */.FF(opts, {
        hash: 'hash',
        hmac: 'function',
        randomBytes: 'function',
    }, {
        bits2int: 'function',
        bits2int_modN: 'function',
        lowS: 'boolean',
    });
    return Object.freeze({ lowS: true, ...opts });
}
function weierstrass(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { Fp, n: CURVE_ORDER } = CURVE;
    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
    function isValidFieldElement(num) {
        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE
    }
    function modN(a) {
        return modular/* mod */.wQ(a, CURVE_ORDER);
    }
    function invN(a) {
        return modular/* invert */.U_(a, CURVE_ORDER);
    }
    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
            const a = point.toAffine();
            const x = Fp.toBytes(a.x);
            const cat = abstract_utils/* concatBytes */.eV;
            if (isCompressed) {
                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);
            }
            else {
                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));
            }
        },
        fromBytes(bytes) {
            const len = bytes.length;
            const head = bytes[0];
            const tail = bytes.subarray(1);
            // this.assertValidity() is done inside of fromHex
            if (len === compressedLen && (head === 0x02 || head === 0x03)) {
                const x = abstract_utils.bytesToNumberBE(tail);
                if (!isValidFieldElement(x))
                    throw new Error('Point is not on curve');
                const y2 = weierstrassEquation(x); // y² = x³ + ax + b
                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
                const isYOdd = (y & _1n) === _1n;
                // ECDSA
                const isHeadOdd = (head & 1) === 1;
                if (isHeadOdd !== isYOdd)
                    y = Fp.neg(y);
                return { x, y };
            }
            else if (len === uncompressedLen && head === 0x04) {
                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                return { x, y };
            }
            else {
                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
            }
        },
    });
    const numToNByteStr = (num) => abstract_utils/* bytesToHex */.ci(abstract_utils/* numberToBytesBE */.tL(num, CURVE.nByteLength));
    function isBiggerThanHalfOrder(number) {
        const HALF = CURVE_ORDER >> _1n;
        return number > HALF;
    }
    function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
    }
    // slice bytes num
    const slcNum = (b, from, to) => abstract_utils.bytesToNumberBE(b.slice(from, to));
    /**
     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
     */
    class Signature {
        constructor(r, s, recovery) {
            this.r = r;
            this.s = s;
            this.recovery = recovery;
            this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
            const l = CURVE.nByteLength;
            hex = (0,abstract_utils/* ensureBytes */.ql)('compactSignature', hex, l * 2);
            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
            const { r, s } = DER.toSig((0,abstract_utils/* ensureBytes */.ql)('DER', hex));
            return new Signature(r, s);
        }
        assertValidity() {
            // can use assertGE here
            if (!isWithinCurveOrder(this.r))
                throw new Error('r must be 0 < r < CURVE.n');
            if (!isWithinCurveOrder(this.s))
                throw new Error('s must be 0 < s < CURVE.n');
        }
        addRecoveryBit(recovery) {
            return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
            const { r, s, recovery: rec } = this;
            const h = bits2int_modN((0,abstract_utils/* ensureBytes */.ql)('msgHash', msgHash)); // Truncate hash
            if (rec == null || ![0, 1, 2, 3].includes(rec))
                throw new Error('recovery id invalid');
            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
            if (radj >= Fp.ORDER)
                throw new Error('recovery id 2 or 3 invalid');
            const prefix = (rec & 1) === 0 ? '02' : '03';
            const R = Point.fromHex(prefix + numToNByteStr(radj));
            const ir = invN(radj); // r^-1
            const u1 = modN(-h * ir); // -hr^-1
            const u2 = modN(s * ir); // sr^-1
            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
            if (!Q)
                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked
            Q.assertValidity();
            return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
            return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
            return abstract_utils.hexToBytes(this.toDERHex());
        }
        toDERHex() {
            return DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
            return abstract_utils.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
            return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
    }
    const utils = {
        isValidPrivateKey(privateKey) {
            try {
                normPrivateKeyToScalar(privateKey);
                return true;
            }
            catch (error) {
                return false;
            }
        },
        normPrivateKeyToScalar: normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
            const length = modular/* getMinHashLength */.PS(CURVE.n);
            return modular/* mapHashToField */.Us(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point.BASE) {
            point._setWindowSize(windowSize);
            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
            return point;
        },
    };
    /**
     * Computes public key for a private key. Checks for validity of the private key.
     * @param privateKey private key
     * @param isCompressed whether to return compact (default), or full key
     * @returns Public key, full when isCompressed=false; short when isCompressed=true
     */
    function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    /**
     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
     */
    function isProbPub(item) {
        const arr = abstract_utils/* isBytes */._t(item);
        const str = typeof item === 'string';
        const len = (arr || str) && item.length;
        if (arr)
            return len === compressedLen || len === uncompressedLen;
        if (str)
            return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point)
            return true;
        return false;
    }
    /**
     * ECDH (Elliptic Curve Diffie Hellman).
     * Computes shared public key from private key and public key.
     * Checks: 1) private key validity 2) shared key is on-curve.
     * Does NOT hash the result.
     * @param privateA private key
     * @param publicB different public key
     * @param isCompressed whether to return compact (default), or full key
     * @returns shared public key
     */
    function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
            throw new Error('first arg must be private key');
        if (!isProbPub(publicB))
            throw new Error('second arg must be public key');
        const b = Point.fromHex(publicB); // check for being on-curve
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    }
    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
    const bits2int = CURVE.bits2int ||
        function (bytes) {
            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
            // for some cases, since bytes.length * 8 is not actual bitLength.
            const num = abstract_utils.bytesToNumberBE(bytes); // check for == u8 done here
            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
            return delta > 0 ? num >> BigInt(delta) : num;
        };
    const bits2int_modN = CURVE.bits2int_modN ||
        function (bytes) {
            return modN(bits2int(bytes)); // can't use bytesToNumberBE here
        };
    // NOTE: pads output with zero as per spec
    const ORDER_MASK = abstract_utils/* bitMask */.dQ(CURVE.nBitLength);
    /**
     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
     */
    function int2octets(num) {
        if (typeof num !== 'bigint')
            throw new Error('bigint expected');
        if (!(_0n <= num && num < ORDER_MASK))
            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        // works with order, can have different size than numToField!
        return abstract_utils/* numberToBytesBE */.tL(num, CURVE.nByteLength);
    }
    // Steps A, D of RFC6979 3.2
    // Creates RFC6979 seed; converts msg/privKey to numbers.
    // Used only in sign, not in verify.
    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
    // Also it can be bigger for P224 + SHA256
    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (['recovered', 'canonical'].some((k) => k in opts))
            throw new Error('sign() legacy options not supported');
        const { hash, randomBytes } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default
        if (lowS == null)
            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
        msgHash = (0,abstract_utils/* ensureBytes */.ql)('msgHash', msgHash);
        if (prehash)
            msgHash = (0,abstract_utils/* ensureBytes */.ql)('prehashed msgHash', hash(msgHash));
        // We can't later call bits2octets, since nested bits2int is broken for curves
        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
        const seedArgs = [int2octets(d), int2octets(h1int)];
        // extraEntropy. RFC6979 3.6: additional k' (optional).
        if (ent != null) {
            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
            seedArgs.push((0,abstract_utils/* ensureBytes */.ql)('extraEntropy', e)); // check for being bytes
        }
        const seed = abstract_utils/* concatBytes */.eV(...seedArgs); // Step D of RFC6979 3.2
        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
        // Converts signature params into point w r/s, checks result for validity.
        function k2sig(kBytes) {
            // RFC 6979 Section 3.2, step 3: k = bits2int(T)
            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
            if (!isWithinCurveOrder(k))
                return; // Important: all mod() calls here must be done over N
            const ik = invN(k); // k^-1 mod n
            const q = Point.BASE.multiply(k).toAffine(); // q = Gk
            const r = modN(q.x); // r = q.x mod n
            if (r === _0n)
                return;
            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
            const s = modN(ik * modN(m + r * d)); // Not using blinding here
            if (s === _0n)
                return;
            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)
            let normS = s;
            if (lowS && isBiggerThanHalfOrder(s)) {
                normS = normalizeS(s); // if lowS was passed, ensure s is always
                recovery ^= 1; // // in the bottom half of N
            }
            return new Signature(r, normS, recovery); // use normS, not s
        }
        return { seed, k2sig };
    }
    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
    /**
     * Signs message hash with a private key.
     * ```
     * sign(m, d, k) where
     *   (x, y) = G × k
     *   r = x mod n
     *   s = (m + dr)/k mod n
     * ```
     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
     * @param privKey private key
     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
     * @returns signature with recovery param
     */
    function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
        const C = CURVE;
        const drbg = abstract_utils/* createHmacDrbg */.n$(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig); // Steps B, C, D, E, F, G
    }
    // Enable precomputes. Slows down first publicKey computation by 20ms.
    Point.BASE._setWindowSize(8);
    // utils.precompute(8, ProjectivePoint.BASE)
    /**
     * Verifies a signature against message hash and public key.
     * Rejects lowS signatures by default: to override,
     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
     *
     * ```
     * verify(r, s, h, P) where
     *   U1 = hs^-1 mod n
     *   U2 = rs^-1 mod n
     *   R = U1⋅G - U2⋅P
     *   mod(R.x, n) == r
     * ```
     */
    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature;
        msgHash = (0,abstract_utils/* ensureBytes */.ql)('msgHash', msgHash);
        publicKey = (0,abstract_utils/* ensureBytes */.ql)('publicKey', publicKey);
        if ('strict' in opts)
            throw new Error('options.strict was renamed to lowS');
        const { lowS, prehash } = opts;
        let _sig = undefined;
        let P;
        try {
            if (typeof sg === 'string' || abstract_utils/* isBytes */._t(sg)) {
                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
                // Since DER can also be 2*nByteLength bytes, we check for it first.
                try {
                    _sig = Signature.fromDER(sg);
                }
                catch (derError) {
                    if (!(derError instanceof DER.Err))
                        throw derError;
                    _sig = Signature.fromCompact(sg);
                }
            }
            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {
                const { r, s } = sg;
                _sig = new Signature(r, s);
            }
            else {
                throw new Error('PARSE');
            }
            P = Point.fromHex(publicKey);
        }
        catch (error) {
            if (error.message === 'PARSE')
                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
            return false;
        }
        if (lowS && _sig.hasHighS())
            return false;
        if (prehash)
            msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
        const is = invN(s); // s^-1
        const u1 = modN(h * is); // u1 = hs^-1 mod n
        const u2 = modN(r * is); // u2 = rs^-1 mod n
        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
        if (!R)
            return false;
        const v = modN(R.x);
        return v === r;
    }
    return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify,
        ProjectivePoint: Point,
        Signature,
        utils,
    };
}
/**
 * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.
 * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.
 * b = True and y = sqrt(u / v) if (u / v) is square in F, and
 * b = False and y = sqrt(Z * (u / v)) otherwise.
 * @param Fp
 * @param Z
 * @returns
 */
function SWUFpSqrtRatio(Fp, Z) {
    // Generic implementation
    const q = Fp.ORDER;
    let l = _0n;
    for (let o = q - _1n; o % _2n === _0n; o /= _2n)
        l += _1n;
    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.
    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.
    // 2n ** c1 == 2n << (c1-1)
    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);
    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic
    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic
    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic
    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic
    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2
    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)
    let sqrtRatio = (u, v) => {
        let tv1 = c6; // 1. tv1 = c6
        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4
        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2
        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v
        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3
        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3
        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2
        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v
        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u
        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2
        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5
        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1
        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7
        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1
        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)
        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)
        // 17. for i in (c1, c1 - 1, ..., 2):
        for (let i = c1; i > _1n; i--) {
            let tv5 = i - _2n; // 18.    tv5 = i - 2
            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5
            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5
            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1
            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1
            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1
            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1
            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)
            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)
        }
        return { isValid: isQR, value: tv3 };
    };
    if (Fp.ORDER % _4n === _3n) {
        // sqrt_ratio_3mod4(u, v)
        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic
        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)
        sqrtRatio = (u, v) => {
            let tv1 = Fp.sqr(v); // 1. tv1 = v^2
            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v
            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2
            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1
            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2
            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2
            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v
            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u
            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)
            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2
        };
    }
    // No curves uses that
    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8
    return sqrtRatio;
}
/**
 * Simplified Shallue-van de Woestijne-Ulas Method
 * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2
 */
function weierstrass_mapToCurveSimpleSWU(Fp, opts) {
    mod.validateField(Fp);
    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
        throw new Error('mapToCurveSimpleSWU: invalid opts');
    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
    if (!Fp.isOdd)
        throw new Error('Fp.isOdd is not implemented!');
    // Input: u, an element of F.
    // Output: (x, y), a point on E.
    return (u) => {
        // prettier-ignore
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u); // 1.  tv1 = u^2
        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1
        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2
        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1
        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1
        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)
        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4
        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2
        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2
        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6
        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5
        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3
        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4
        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6
        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5
        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3
        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)
        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1
        y = Fp.mul(y, value); // 20.   y = y * y1
        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)
        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)
        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)
        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)
        x = Fp.div(x, tv4); // 25.   x = x / tv4
        return { x, y };
    };
}
//# sourceMappingURL=weierstrass.js.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@noble+curves@1.3.0/node_modules/@noble/curves/esm/_shortw_utils.js
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */



// connects noble-curves to noble-hashes
function getHash(hash) {
    return {
        hash,
        hmac: (key, ...msgs) => (0,hmac/* hmac */.b)(hash, key, (0,utils/* concatBytes */.eV)(...msgs)),
        randomBytes: utils/* randomBytes */.O6,
    };
}
function createCurve(curveDef, defHash) {
    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });
    return Object.freeze({ ...create(defHash), create });
}
//# sourceMappingURL=_shortw_utils.js.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@noble+curves@1.3.0/node_modules/@noble/curves/esm/secp256k1.js
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */







const secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');
const secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');
const secp256k1_1n = BigInt(1);
const secp256k1_2n = BigInt(2);
const divNearest = (a, b) => (a + b / secp256k1_2n) / b;
/**
 * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
 * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
 */
function sqrtMod(y) {
    const P = secp256k1P;
    // prettier-ignore
    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
    // prettier-ignore
    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
    const b2 = (y * y * y) % P; // x^3, 11
    const b3 = (b2 * b2 * y) % P; // x^7
    const b6 = ((0,modular/* pow2 */.oA)(b3, _3n, P) * b3) % P;
    const b9 = ((0,modular/* pow2 */.oA)(b6, _3n, P) * b3) % P;
    const b11 = ((0,modular/* pow2 */.oA)(b9, secp256k1_2n, P) * b2) % P;
    const b22 = ((0,modular/* pow2 */.oA)(b11, _11n, P) * b11) % P;
    const b44 = ((0,modular/* pow2 */.oA)(b22, _22n, P) * b22) % P;
    const b88 = ((0,modular/* pow2 */.oA)(b44, _44n, P) * b44) % P;
    const b176 = ((0,modular/* pow2 */.oA)(b88, _88n, P) * b88) % P;
    const b220 = ((0,modular/* pow2 */.oA)(b176, _44n, P) * b44) % P;
    const b223 = ((0,modular/* pow2 */.oA)(b220, _3n, P) * b3) % P;
    const t1 = ((0,modular/* pow2 */.oA)(b223, _23n, P) * b22) % P;
    const t2 = ((0,modular/* pow2 */.oA)(t1, _6n, P) * b2) % P;
    const root = (0,modular/* pow2 */.oA)(t2, secp256k1_2n, P);
    if (!Fp.eql(Fp.sqr(root), y))
        throw new Error('Cannot find square root');
    return root;
}
const Fp = (0,modular/* Field */.gN)(secp256k1P, undefined, undefined, { sqrt: sqrtMod });
const secp256k1 = createCurve({
    a: BigInt(0), // equation params: a, b
    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
    n: secp256k1N, // Curve order, total count of valid points in the field
    // Base point (x, y) aka generator point
    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
    h: BigInt(1), // Cofactor
    lowS: true, // Allow only low-S signatures by default in sign() and verify()
    /**
     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
     */
    endo: {
        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
        splitScalar: (k) => {
            const n = secp256k1N;
            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
            const b1 = -secp256k1_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
            const b2 = a1;
            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)
            const c1 = divNearest(b2 * k, n);
            const c2 = divNearest(-b1 * k, n);
            let k1 = (0,modular/* mod */.wQ)(k - c1 * a1 - c2 * a2, n);
            let k2 = (0,modular/* mod */.wQ)(-c1 * b1 - c2 * b2, n);
            const k1neg = k1 > POW_2_128;
            const k2neg = k2 > POW_2_128;
            if (k1neg)
                k1 = n - k1;
            if (k2neg)
                k2 = n - k2;
            if (k1 > POW_2_128 || k2 > POW_2_128) {
                throw new Error('splitScalar: Endomorphism failed, k=' + k);
            }
            return { k1neg, k1, k2neg, k2 };
        },
    },
}, esm_sha256/* sha256 */.J);
// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
const secp256k1_0n = BigInt(0);
const fe = (x) => typeof x === 'bigint' && secp256k1_0n < x && x < secp256k1P;
const ge = (x) => typeof x === 'bigint' && secp256k1_0n < x && x < secp256k1N;
/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */
const TAGGED_HASH_PREFIXES = {};
function taggedHash(tag, ...messages) {
    let tagP = TAGGED_HASH_PREFIXES[tag];
    if (tagP === undefined) {
        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = concatBytes(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
    }
    return sha256(concatBytes(tagP, ...messages));
}
// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03
const pointToBytes = (point) => point.toRawBytes(true).slice(1);
const numTo32b = (n) => numberToBytesBE(n, 32);
const modP = (x) => mod(x, secp256k1P);
const modN = (x) => mod(x, secp256k1N);
const Point = secp256k1.ProjectivePoint;
const GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
// Calculate point, scalar and bytes
function schnorrGetExtPubKey(priv) {
    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey
    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside
    const scalar = p.hasEvenY() ? d_ : modN(-d_);
    return { scalar: scalar, bytes: pointToBytes(p) };
}
/**
 * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.
 * @returns valid point checked for being on-curve
 */
function lift_x(x) {
    if (!fe(x))
        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.
    const xx = modP(x * x);
    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.
    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.
    if (y % secp256k1_2n !== secp256k1_0n)
        y = modP(-y); // Return the unique point P such that x(P) = x and
    const p = new Point(x, y, secp256k1_1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.
    p.assertValidity();
    return p;
}
/**
 * Create tagged hash, convert it to bigint, reduce modulo-n.
 */
function challenge(...args) {
    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));
}
/**
 * Schnorr public key is just `x` coordinate of Point as per BIP340.
 */
function schnorrGetPublicKey(privateKey) {
    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)
}
/**
 * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.
 * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.
 */
function schnorrSign(message, privateKey, auxRand = randomBytes(32)) {
    const m = ensureBytes('message', message);
    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder
    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array
    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)
    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)
    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n
    if (k_ === secp256k1_0n)
        throw new Error('sign failed: k is zero'); // Fail if k' = 0.
    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.
    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.
    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).
    sig.set(rx, 0);
    sig.set(numTo32b(modN(k + e * d)), 32);
    // If Verify(bytes(P), m, sig) (see below) returns failure, abort
    if (!schnorrVerify(sig, m, px))
        throw new Error('sign: Invalid signature produced');
    return sig;
}
/**
 * Verifies Schnorr signature.
 * Will swallow errors & return false except for initial type validation of arguments.
 */
function schnorrVerify(signature, message, publicKey) {
    const sig = ensureBytes('signature', signature, 64);
    const m = ensureBytes('message', message);
    const pub = ensureBytes('publicKey', publicKey, 32);
    try {
        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails
        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.
        if (!fe(r))
            return false;
        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.
        if (!ge(s))
            return false;
        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n
        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P
        if (!R || !R.hasEvenY() || R.toAffine().x !== r)
            return false; // -eP == (n-e)P
        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.
    }
    catch (error) {
        return false;
    }
}
const schnorr = /* @__PURE__ */ (/* unused pure expression or super */ null && ((() => ({
    getPublicKey: schnorrGetPublicKey,
    sign: schnorrSign,
    verify: schnorrVerify,
    utils: {
        randomPrivateKey: secp256k1.utils.randomPrivateKey,
        lift_x,
        pointToBytes,
        numberToBytesBE,
        bytesToNumberBE,
        taggedHash,
        mod,
    },
}))()));
const isoMap = /* @__PURE__ */ (/* unused pure expression or super */ null && ((() => isogenyMap(Fp, [
    // xNum
    [
        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',
        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',
        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',
        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',
    ],
    // xDen
    [
        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',
        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',
        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1
    ],
    // yNum
    [
        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',
        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',
        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',
        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',
    ],
    // yDen
    [
        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',
        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',
        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',
        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1
    ],
].map((i) => i.map((j) => BigInt(j)))))()));
const mapSWU = /* @__PURE__ */ (/* unused pure expression or super */ null && ((() => mapToCurveSimpleSWU(Fp, {
    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),
    B: BigInt('1771'),
    Z: Fp.create(BigInt('-11')),
}))()));
const htf = /* @__PURE__ */ (/* unused pure expression or super */ null && ((() => createHasher(secp256k1.ProjectivePoint, (scalars) => {
    const { x, y } = mapSWU(Fp.create(scalars[0]));
    return isoMap(x, y);
}, {
    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',
    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',
    p: Fp.ORDER,
    m: 1,
    k: 128,
    expand: 'xmd',
    hash: sha256,
}))()));
const hashToCurve = /* @__PURE__ */ (/* unused pure expression or super */ null && ((() => htf.hashToCurve)()));
const encodeToCurve = /* @__PURE__ */ (/* unused pure expression or super */ null && ((() => htf.encodeToCurve)()));
//# sourceMappingURL=secp256k1.js.map

/***/ }),

/***/ 76871:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Gg: () => (/* binding */ exists),
/* harmony export */   J8: () => (/* binding */ output),
/* harmony export */   Rx: () => (/* binding */ number),
/* harmony export */   aI: () => (/* binding */ bytes),
/* harmony export */   vp: () => (/* binding */ hash)
/* harmony export */ });
/* unused harmony export bool */
function number(n) {
    if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`Wrong positive integer: ${n}`);
}
function bool(b) {
    if (typeof b !== 'boolean')
        throw new Error(`Expected boolean, not ${b}`);
}
// copied from utils
function isBytes(a) {
    return (a instanceof Uint8Array ||
        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
}
function bytes(b, ...lengths) {
    if (!isBytes(b))
        throw new Error('Expected Uint8Array');
    if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
function hash(hash) {
    if (typeof hash !== 'function' || typeof hash.create !== 'function')
        throw new Error('Hash should be wrapped by utils.wrapConstructor');
    number(hash.outputLen);
    number(hash.blockLen);
}
function exists(instance, checkFinished = true) {
    if (instance.destroyed)
        throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished)
        throw new Error('Hash#digest() has already been called');
}
function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
}

const assert = { number, bool, bytes, hash, exists, output };
/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (assert)));
//# sourceMappingURL=_assert.js.map

/***/ }),

/***/ 3957:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   N: () => (/* binding */ SHA2)
/* harmony export */ });
/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76871);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82478);


// Polyfill for Safari 14
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function')
        return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number((value >> _32n) & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
// Base SHA2 class (RFC 6234)
class SHA2 extends _utils_js__WEBPACK_IMPORTED_MODULE_0__/* .Hash */ .kb {
    constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .createView */ .GL)(this.buffer);
    }
    update(data) {
        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__/* .exists */ .Gg)(this);
        const { view, buffer, blockLen } = this;
        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .toBytes */ .O0)(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .createView */ .GL)(data);
                for (; blockLen <= len - pos; pos += blockLen)
                    this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__/* .exists */ .Gg)(this);
        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__/* .output */ .J8)(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 0b10000000;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .createView */ .GL)(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
        if (len % 4)
            throw new Error('_sha2: outputLen should be aligned to 32bit');
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
            throw new Error('_sha2: outputLen bigger than state');
        for (let i = 0; i < outLen; i++)
            oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
            to.buffer.set(buffer);
        return to;
    }
}
//# sourceMappingURL=_sha2.js.map

/***/ }),

/***/ 32173:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EP: () => (/* binding */ rotlSH),
/* harmony export */   SD: () => (/* binding */ rotlBH),
/* harmony export */   Vl: () => (/* binding */ split),
/* harmony export */   ZP: () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   gm: () => (/* binding */ rotlSL),
/* harmony export */   mk: () => (/* binding */ rotlBL)
/* harmony export */ });
/* unused harmony exports fromBig, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, add, add3L, add3H, add4L, add4H, add5H, add5L */
const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
const _32n = /* @__PURE__ */ BigInt(32);
// We are not using BigUint64Array, because they are extremely slow as per 2022
function fromBig(n, le = false) {
    if (le)
        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
}
const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
// for Shift in [0, 32)
const shrSH = (h, _l, s) => h >>> s;
const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (_h, l) => l;
const rotr32L = (h, _l) => h;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
}
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
// prettier-ignore

// prettier-ignore
const u64 = {
    fromBig, split, toBig,
    shrSH, shrSL,
    rotrSH, rotrSL, rotrBH, rotrBL,
    rotr32H, rotr32L,
    rotlSH, rotlSL, rotlBH, rotlBL,
    add, add3L, add3H, add4L, add4H, add5H, add5L,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64);
//# sourceMappingURL=_u64.js.map

/***/ }),

/***/ 75423:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ hmac)
/* harmony export */ });
/* unused harmony export HMAC */
/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76871);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82478);


// HMAC (RFC 2104)
class HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__/* .Hash */ .kb {
    constructor(hash, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__/* .hash */ .vp)(hash);
        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__/* .toBytes */ .O0)(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== 'function')
            throw new Error('Expected instance of class which extends utils.Hash');
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        // blockLen can be bigger than outputLen
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
            pad[i] ^= 0x36;
        this.iHash.update(pad);
        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
        this.oHash = hash.create();
        // Undo internal XOR && apply outer XOR
        for (let i = 0; i < pad.length; i++)
            pad[i] ^= 0x36 ^ 0x5c;
        this.oHash.update(pad);
        pad.fill(0);
    }
    update(buf) {
        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__/* .exists */ .Gg)(this);
        this.iHash.update(buf);
        return this;
    }
    digestInto(out) {
        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__/* .exists */ .Gg)(this);
        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__/* .bytes */ .aI)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
    }
    digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
    }
    _cloneInto(to) {
        // Create new instance without calling constructor since key already in state and we don't know it.
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
    }
    destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
    }
}
/**
 * HMAC: RFC2104 message authentication code.
 * @param hash - function that would be used e.g. sha256
 * @param key - message key
 * @param message - message data
 */
const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
hmac.create = (hash, key) => new HMAC(hash, key);
//# sourceMappingURL=hmac.js.map

/***/ }),

/***/ 79769:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   J: () => (/* binding */ sha256)
/* harmony export */ });
/* unused harmony export sha224 */
/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3957);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82478);


// SHA2-256 need to try 2^128 hashes to execute birthday attack.
// BTC network is doing 2^67 hashes/sec as per early 2023.
// Choice: a ? b : c
const Chi = (a, b, c) => (a & b) ^ (~a & c);
// Majority function, true if any two inpust is true
const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K = /* @__PURE__ */ new Uint32Array([
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
]);
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// prettier-ignore
const IV = /* @__PURE__ */ new Uint32Array([
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
class SHA256 extends _sha2_js__WEBPACK_IMPORTED_MODULE_0__/* .SHA2 */ .N {
    constructor() {
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4)
            SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .rotr */ .np)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .rotr */ .np)(W15, 18) ^ (W15 >>> 3);
            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .rotr */ .np)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .rotr */ .np)(W2, 19) ^ (W2 >>> 10);
            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .rotr */ .np)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .rotr */ .np)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .rotr */ .np)(E, 25);
            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .rotr */ .np)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .rotr */ .np)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .rotr */ .np)(A, 22);
            const T2 = (sigma0 + Maj(A, B, C)) | 0;
            H = G;
            G = F;
            F = E;
            E = (D + T1) | 0;
            D = C;
            C = B;
            B = A;
            A = (T1 + T2) | 0;
        }
        // Add the compressed chunk to the current hash value
        A = (A + this.A) | 0;
        B = (B + this.B) | 0;
        C = (C + this.C) | 0;
        D = (D + this.D) | 0;
        E = (E + this.E) | 0;
        F = (F + this.F) | 0;
        G = (G + this.G) | 0;
        H = (H + this.H) | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
}
// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
class SHA224 extends (/* unused pure expression or super */ null && (SHA256)) {
    constructor() {
        super();
        this.A = 0xc1059ed8 | 0;
        this.B = 0x367cd507 | 0;
        this.C = 0x3070dd17 | 0;
        this.D = 0xf70e5939 | 0;
        this.E = 0xffc00b31 | 0;
        this.F = 0x68581511 | 0;
        this.G = 0x64f98fa7 | 0;
        this.H = 0xbefa4fa4 | 0;
        this.outputLen = 28;
    }
}
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */
const sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .wrapConstructor */ .hE)(() => new SHA256());
const sha224 = /* @__PURE__ */ (/* unused pure expression or super */ null && (wrapConstructor(() => new SHA224())));
//# sourceMappingURL=sha256.js.map

/***/ }),

/***/ 82478:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  kb: () => (/* binding */ Hash),
  eV: () => (/* binding */ concatBytes),
  GL: () => (/* binding */ createView),
  O6: () => (/* binding */ randomBytes),
  np: () => (/* binding */ rotr),
  O0: () => (/* binding */ toBytes),
  Jq: () => (/* binding */ u32),
  hE: () => (/* binding */ wrapConstructor),
  K$: () => (/* binding */ wrapConstructorWithOpts)
});

// UNUSED EXPORTS: asyncLoop, bytesToHex, checkOpts, hexToBytes, isLE, nextTick, u8, utf8ToBytes, wrapXOFConstructorWithOpts

;// CONCATENATED MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/crypto.js
const crypto_crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;
//# sourceMappingURL=crypto.js.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/utils.js
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
// node.js versions earlier than v19 don't declare it in global scope.
// For node.js, package.json#exports field mapping rewrites import
// from `crypto` to `cryptoNode`, which imports native module.
// Makes the utils un-importable in browsers without a bundler.
// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.

// Cast array to different type
const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
function isBytes(a) {
    return (a instanceof Uint8Array ||
        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
}
// Cast array to view
const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
// The rotate right (circular right shift) operation for uint32
const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
// big-endian hardware is rare. Just in case someone still decides to run hashes:
// early-throw an error because we don't support BE yet.
// Other libraries would silently corrupt the data instead of throwing an error,
// when they don't support it.
const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
if (!isLE)
    throw new Error('Non little-endian hardware is not supported');
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */
function bytesToHex(bytes) {
    if (!isBytes(bytes))
        throw new Error('Uint8Array expected');
    // pre-caching improves the speed 6x
    let hex = '';
    for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
    }
    return hex;
}
// We use optimized technique to convert hex string to byte array
const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
function asciiToBase16(char) {
    if (char >= asciis._0 && char <= asciis._9)
        return char - asciis._0;
    if (char >= asciis._A && char <= asciis._F)
        return char - (asciis._A - 10);
    if (char >= asciis._a && char <= asciis._f)
        return char - (asciis._a - 10);
    return;
}
/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */
function hexToBytes(hex) {
    if (typeof hex !== 'string')
        throw new Error('hex string expected, got ' + typeof hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === undefined || n2 === undefined) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
    }
    return array;
}
// There is no setImmediate in browser and setTimeout is slow.
// call of async fn will return Promise, which will be fullfiled only on
// next scheduler queue processing step and this is exactly what we need.
const nextTick = async () => { };
// Returns control to thread each 'tick' ms to avoid blocking
async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for (let i = 0; i < iters; i++) {
        cb(i);
        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
            continue;
        await nextTick();
        ts += diff;
    }
}
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */
function utf8ToBytes(str) {
    if (typeof str !== 'string')
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */
function toBytes(data) {
    if (typeof data === 'string')
        data = utf8ToBytes(data);
    if (!isBytes(data))
        throw new Error(`expected Uint8Array, got ${typeof data}`);
    return data;
}
/**
 * Copies several Uint8Arrays into one.
 */
function concatBytes(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        if (!isBytes(a))
            throw new Error('Uint8Array expected');
        sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
// For runtime check if class implements interface
class Hash {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
}
const toStr = {}.toString;
function checkOpts(defaults, opts) {
    if (opts !== undefined && toStr.call(opts) !== '[object Object]')
        throw new Error('Options should be object or undefined');
    const merged = Object.assign(defaults, opts);
    return merged;
}
function wrapConstructor(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
}
function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
}
/**
 * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
 */
function randomBytes(bytesLength = 32) {
    if (crypto_crypto && typeof crypto_crypto.getRandomValues === 'function') {
        return crypto_crypto.getRandomValues(new Uint8Array(bytesLength));
    }
    throw new Error('crypto.getRandomValues must be defined');
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 28352:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   S: () => (/* binding */ accountId)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5035);
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82628);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);




/**
 * @name accountId
 * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.
 * @description  An [[AccountId]]
 */
function accountId(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (address) => {
        const decoded = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isU8a */ .U)(address)
            ? address
            : (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_2__/* .decodeAddress */ .m)((address || '').toString());
        if (decoded.length > 8) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(api.registry.createType('AccountId', decoded));
        }
        const accountIndex = api.registry.createType('AccountIndex', decoded);
        return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .map */ .U)((a) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .assertReturn */ .k8)(a, 'Unable to retrieve accountId')));
    });
}


/***/ }),

/***/ 29161:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: () => (/* binding */ _flags),
/* harmony export */   i: () => (/* binding */ flags)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(73092);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);



function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
    const addrStr = address?.toString();
    const isIncluded = (id) => id.toString() === addrStr;
    return {
        isCouncil: (electionsMembers?.map((r) => Array.isArray(r) ? r[0] : r.who) || councilMembers || []).some(isIncluded),
        isSociety: (societyMembers || []).some(isIncluded),
        isSudo: sudoKey?.toString() === addrStr,
        isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
    };
}
function _flags(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => {
        const results = [undefined, [], [], [], undefined];
        const calls = [
            (api.query.elections || api.query['phragmenElection'] || api.query['electionsPhragmen'])?.members,
            api.query.council?.members,
            api.query.technicalCommittee?.members,
            api.query.society?.members,
            api.query.sudo?.key
        ];
        const filtered = calls.filter((c) => c);
        if (!filtered.length) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(results);
        }
        return api.queryMulti(filtered).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)((values) => {
            let resultIndex = -1;
            for (let i = 0, count = calls.length; i < count; i++) {
                if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(calls[i])) {
                    results[i] = values[++resultIndex];
                }
            }
            return results;
        }));
    });
}
/**
 * @name info
 * @description Returns account membership flags
 */
function flags(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (address) => api.derive.accounts._flags().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)((r) => parseFlags(address, r))));
}


/***/ }),

/***/ 46575:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ idAndIndex)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85296);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82628);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);




/**
 * @name idAndIndex
 * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.
 * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {
 *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);
 * });
 * ```
 */
function idAndIndex(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (address) => {
        try {
            // yes, this can fail, don't care too much, catch will catch it
            const decoded = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isU8a */ .U)(address)
                ? address
                : (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_2__/* .decodeAddress */ .m)((address || '').toString());
            if (decoded.length > 8) {
                const accountId = api.registry.createType('AccountId', decoded);
                return api.derive.accounts.idToIndex(accountId).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)((accountIndex) => [accountId, accountIndex]));
            }
            const accountIndex = api.registry.createType('AccountIndex', decoded);
            return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)((accountId) => [accountId, accountIndex]));
        }
        catch {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)([undefined, undefined]);
        }
    });
}


/***/ }),

/***/ 43645:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   p: () => (/* binding */ idToIndex)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


/**
 * @name idToIndex
 * @param {( AccountId | string )} accountId - An accounts Id in different formats.
 * @returns Returns the corresponding AccountIndex.
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
 * api.derive.accounts.idToIndex(ALICE, (accountIndex) => {
 *   console.log(`The AccountIndex of ${ALICE} is ${accountIndex}`);
 * });
 * ```
 */
function idToIndex(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (accountId) => api.derive.accounts.indexes().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((indexes) => indexes[accountId.toString()])));
}


/***/ }),

/***/ 60675:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AP: () => (/* binding */ hasIdentityMulti),
/* harmony export */   hX: () => (/* binding */ hasIdentity),
/* harmony export */   rD: () => (/* binding */ _identity),
/* harmony export */   yR: () => (/* binding */ identity)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(96918);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91873);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(14911);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(39762);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(29617);



const UNDEF_HEX = { toHex: () => undefined };
function dataAsString(data) {
    return data.isRaw
        ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .u8aToString */ .z)(data.asRaw.toU8a(true))
        : data.isNone
            ? undefined
            : data.toHex();
}
function extractOther(additional) {
    return additional.reduce((other, [_key, _value]) => {
        const key = dataAsString(_key);
        const value = dataAsString(_value);
        if (key && value) {
            other[key] = value;
        }
        return other;
    }, {});
}
function extractIdentity(identityOfOpt, superOf) {
    if (!identityOfOpt?.isSome) {
        return { judgements: [] };
    }
    const { info, judgements } = identityOfOpt.unwrap();
    const topDisplay = dataAsString(info.display);
    return {
        display: (superOf && dataAsString(superOf[1])) || topDisplay,
        displayParent: superOf && topDisplay,
        email: dataAsString(info.email),
        image: dataAsString(info.image),
        judgements,
        legal: dataAsString(info.legal),
        other: extractOther(info.additional),
        parent: superOf?.[0],
        pgp: info.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
        riot: dataAsString(info.riot),
        twitter: dataAsString(info.twitter),
        web: dataAsString(info.web)
    };
}
function getParent(api, identityOfOpt, superOfOpt) {
    if (identityOfOpt?.isSome) {
        // this identity has something set
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)([identityOfOpt, undefined]);
    }
    else if (superOfOpt?.isSome) {
        const superOf = superOfOpt.unwrap();
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .combineLatest */ .a)([
            api.derive.accounts._identity(superOf[0]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)(([info]) => info)),
            (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(superOf)
        ]);
    }
    // nothing of value returned
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)([undefined, undefined]);
}
function _identity(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_4__/* .memo */ .X)(instanceId, (accountId) => accountId && api.query.identity?.identityOf
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .combineLatest */ .a)([
            api.query.identity.identityOf(accountId),
            api.query.identity.superOf(accountId)
        ])
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)([undefined, undefined]));
}
/**
 * @name identity
 * @description Returns identity info for an account
 */
function identity(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_4__/* .memo */ .X)(instanceId, (accountId) => api.derive.accounts._identity(accountId).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .switchMap */ .w)(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
}
const hasIdentity = /*#__PURE__*/ (0,_util_index_js__WEBPACK_IMPORTED_MODULE_6__/* .firstMemo */ .u)((api, accountId) => api.derive.accounts.hasIdentityMulti([accountId]));
function hasIdentityMulti(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_4__/* .memo */ .X)(instanceId, (accountIds) => api.query.identity?.identityOf
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .combineLatest */ .a)([
            api.query.identity.identityOf.multi(accountIds),
            api.query.identity.superOf.multi(accountIds)
        ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)(([identities, supers]) => identities.map((identityOfOpt, index) => {
            const superOfOpt = supers[index];
            const parentId = superOfOpt && superOfOpt.isSome
                ? superOfOpt.unwrap()[0].toString()
                : undefined;
            let display;
            if (identityOfOpt && identityOfOpt.isSome) {
                const value = dataAsString(identityOfOpt.unwrap().info.display);
                if (value && !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .isHex */ .vq)(value)) {
                    display = value;
                }
            }
            return { display, hasIdentity: !!(display || parentId), parentId };
        })))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(accountIds.map(() => ({ hasIdentity: false }))));
}


/***/ }),

/***/ 93144:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _flags: () => (/* reexport safe */ _flags_js__WEBPACK_IMPORTED_MODULE_1__.B),
/* harmony export */   _identity: () => (/* reexport safe */ _identity_js__WEBPACK_IMPORTED_MODULE_3__.rD),
/* harmony export */   accountId: () => (/* reexport safe */ _accountId_js__WEBPACK_IMPORTED_MODULE_0__.S),
/* harmony export */   flags: () => (/* reexport safe */ _flags_js__WEBPACK_IMPORTED_MODULE_1__.i),
/* harmony export */   hasIdentity: () => (/* reexport safe */ _identity_js__WEBPACK_IMPORTED_MODULE_3__.hX),
/* harmony export */   hasIdentityMulti: () => (/* reexport safe */ _identity_js__WEBPACK_IMPORTED_MODULE_3__.AP),
/* harmony export */   idAndIndex: () => (/* reexport safe */ _idAndIndex_js__WEBPACK_IMPORTED_MODULE_2__.f),
/* harmony export */   idToIndex: () => (/* reexport safe */ _idToIndex_js__WEBPACK_IMPORTED_MODULE_4__.p),
/* harmony export */   identity: () => (/* reexport safe */ _identity_js__WEBPACK_IMPORTED_MODULE_3__.yR),
/* harmony export */   indexToId: () => (/* reexport safe */ _indexToId_js__WEBPACK_IMPORTED_MODULE_6__.G),
/* harmony export */   indexes: () => (/* reexport safe */ _indexes_js__WEBPACK_IMPORTED_MODULE_5__.R),
/* harmony export */   info: () => (/* reexport safe */ _info_js__WEBPACK_IMPORTED_MODULE_7__.u)
/* harmony export */ });
/* harmony import */ var _accountId_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28352);
/* harmony import */ var _flags_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29161);
/* harmony import */ var _idAndIndex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(46575);
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60675);
/* harmony import */ var _idToIndex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(43645);
/* harmony import */ var _indexes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(67866);
/* harmony import */ var _indexToId_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(92427);
/* harmony import */ var _info_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(32359);










/***/ }),

/***/ 92427:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ indexToId)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


/**
 * @name indexToId
 * @param {( AccountIndex | string )} accountIndex - An accounts index in different formats.
 * @returns Returns the corresponding AccountId.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.indexToId('F7Hs', (accountId) => {
 *   console.log(`The AccountId of F7Hs is ${accountId}`);
 * });
 * ```
 */
function indexToId(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (accountIndex) => api.query.indices
        ? api.query.indices.accounts(accountIndex).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((optResult) => optResult.unwrapOr([])[0]))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(undefined));
}


/***/ }),

/***/ 67866:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ indexes)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(81711);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39762);


let indicesCache = null;
function queryAccounts(api) {
    return api.query.indices.accounts.entries().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)((entries) => entries.reduce((indexes, [key, idOpt]) => {
        if (idOpt.isSome) {
            indexes[idOpt.unwrap()[0].toString()] = api.registry.createType('AccountIndex', key.args[0]);
        }
        return indexes;
    }, {})));
}
/**
 * @name indexes
 * @returns Returns all the indexes on the system.
 * @description This is an unwieldly query since it loops through
 * all of the enumsets and returns all of the values found. This could be up to 32k depending
 * on the number of active accounts in the system
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.indexes((indexes) => {
 *   console.log('All existing AccountIndexes', indexes);
 * });
 * ```
 */
function indexes(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_1__/* .memo */ .X)(instanceId, () => indicesCache
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(indicesCache)
        : (api.query.indices
            ? queryAccounts(api).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .startWith */ .O)({}))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)({})).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)((indices) => {
            indicesCache = indices;
            return indices;
        })));
}


/***/ }),

/***/ 32359:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ info)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(94331);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(91873);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39762);



function retrieveNick(api, accountId) {
    return (accountId && api.query['nicks']?.['nameOf']
        ? api.query['nicks']['nameOf'](accountId)
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_0__.of)(undefined)).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((nameOf) => nameOf?.isSome
        ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aToString */ .z)(nameOf.unwrap()[0]).substring(0, api.consts['nicks']['maxLength'].toNumber())
        : undefined));
}
/**
 * @name info
 * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname
 */
function info(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .memo */ .X)(instanceId, (address) => api.derive.accounts.idAndIndex(address).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .switchMap */ .w)(([accountId, accountIndex]) => (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .combineLatest */ .a)([
        (0,rxjs__WEBPACK_IMPORTED_MODULE_0__.of)({ accountId, accountIndex }),
        api.derive.accounts.identity(accountId),
        retrieveNick(api, accountId)
    ])), (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(([{ accountId, accountIndex }, identity, nickname]) => ({
        accountId, accountIndex, identity, nickname
    }))));
}


/***/ }),

/***/ 68297:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasProposals: () => (/* binding */ hasProposals),
/* harmony export */   members: () => (/* binding */ members),
/* harmony export */   prime: () => (/* binding */ prime),
/* harmony export */   proposal: () => (/* binding */ proposal),
/* harmony export */   proposalCount: () => (/* binding */ proposalCount),
/* harmony export */   proposalHashes: () => (/* binding */ proposalHashes),
/* harmony export */   proposals: () => (/* binding */ proposals)
/* harmony export */ });
/* harmony import */ var _collective_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66433);
/* harmony import */ var _collective_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51286);
/* harmony import */ var _collective_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(77631);

const members = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_0__/* .members */ .T)('allianceMotion');
const hasProposals = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .hasProposals */ .To)('allianceMotion');
const proposal = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .proposal */ .oL)('allianceMotion');
const proposalCount = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .proposalCount */ .P6)('allianceMotion');
const proposalHashes = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .proposalHashes */ .iB)('allianceMotion');
const proposals = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .proposals */ .$O)('allianceMotion');
const prime = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_2__/* .prime */ .F)('allianceMotion');


/***/ }),

/***/ 90011:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $6: () => (/* binding */ all),
/* harmony export */   U2: () => (/* binding */ get),
/* harmony export */   pV: () => (/* binding */ _getIds)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(96918);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38252);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(54556);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(51306);




function orderBags(ids, bags) {
    const sorted = ids
        .map((id, index) => ({
        bag: bags[index].unwrapOr(null),
        id,
        key: id.toString()
    }))
        .sort((a, b) => b.id.cmp(a.id));
    const max = sorted.length - 1;
    return sorted.map((entry, index) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .objectSpread */ .Z)(entry, {
        bagLower: index === max
            ? _polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .BN_ZERO */ .nw
            : sorted[index + 1].id,
        bagUpper: entry.id,
        index
    }));
}
function _getIds(instanceId, api) {
    const query = (0,_util_js__WEBPACK_IMPORTED_MODULE_2__/* .getQueryInterface */ .e)(api);
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .memo */ .X)(instanceId, (_ids) => {
        const ids = _ids.map((id) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .bnToBn */ .G)(id));
        return ids.length
            ? query.listBags.multi(ids).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)((bags) => orderBags(ids, bags)))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)([]);
    });
}
function all(instanceId, api) {
    const query = (0,_util_js__WEBPACK_IMPORTED_MODULE_2__/* .getQueryInterface */ .e)(api);
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .memo */ .X)(instanceId, () => query.listBags.keys().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .switchMap */ .w)((keys) => api.derive.bagsList._getIds(keys.map(({ args: [id] }) => id))), (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)((list) => list.filter(({ bag }) => bag))));
}
function get(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .memo */ .X)(instanceId, (id) => api.derive.bagsList._getIds([(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .bnToBn */ .G)(id)]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)((bags) => bags[0])));
}


/***/ }),

/***/ 6015:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   i: () => (/* binding */ getExpanded),
/* harmony export */   j: () => (/* binding */ expand)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96918);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);



function expand(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (bag) => api.derive.bagsList.listNodes(bag.bag).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((nodes) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({ nodes }, bag))));
}
function getExpanded(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (id) => api.derive.bagsList.get(id).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .switchMap */ .w)((bag) => api.derive.bagsList.expand(bag))));
}


/***/ }),

/***/ 59808:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _getIds: () => (/* reexport safe */ _get_js__WEBPACK_IMPORTED_MODULE_0__.pV),
/* harmony export */   all: () => (/* reexport safe */ _get_js__WEBPACK_IMPORTED_MODULE_0__.$6),
/* harmony export */   expand: () => (/* reexport safe */ _getExpanded_js__WEBPACK_IMPORTED_MODULE_1__.j),
/* harmony export */   get: () => (/* reexport safe */ _get_js__WEBPACK_IMPORTED_MODULE_0__.U2),
/* harmony export */   getExpanded: () => (/* reexport safe */ _getExpanded_js__WEBPACK_IMPORTED_MODULE_1__.i),
/* harmony export */   listNodes: () => (/* reexport safe */ _listNodes_js__WEBPACK_IMPORTED_MODULE_2__.e)
/* harmony export */ });
/* harmony import */ var _get_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(90011);
/* harmony import */ var _getExpanded_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6015);
/* harmony import */ var _listNodes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(58569);





/***/ }),

/***/ 58569:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   e: () => (/* binding */ listNodes)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81505);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(81083);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(28296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(85296);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(92901);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51306);




function traverseLinks(api, head) {
    const subject = new rxjs__WEBPACK_IMPORTED_MODULE_0__/* .BehaviorSubject */ .X(head);
    const query = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__/* .getQueryInterface */ .e)(api);
    return subject.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)((account) => query.listNodes(account)), (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .tap */ .b)((node) => {
        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .nextTick */ .Y)(() => {
            node.isSome && node.value.next.isSome
                ? subject.next(node.unwrap().next.unwrap())
                : subject.complete();
        });
    }), (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .toArray */ .q)(), // toArray since we want to startSubject to be completed
    (0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .map */ .U)((all) => all.map((o) => o.unwrap())));
}
function listNodes(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_7__/* .memo */ .X)(instanceId, (bag) => bag && bag.head.isSome
        ? traverseLinks(api, bag.head.unwrap())
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)([]));
}


/***/ }),

/***/ 51306:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   e: () => (/* binding */ getQueryInterface)
/* harmony export */ });
function getQueryInterface(api) {
    return (
    // latest substrate & polkadot
    api.query.voterList ||
        // previous substrate
        api.query['voterBagsList'] ||
        api.query['bagsList']);
}


/***/ }),

/***/ 23376:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   J: () => (/* binding */ account)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(96918);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(73092);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(39762);



function zeroBalance(api) {
    return api.registry.createType('Balance');
}
function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
    const votingBalance = api.registry.createType('Balance', freeBalance.toBn());
    return {
        freeBalance,
        frozenFee,
        frozenMisc,
        reservedBalance,
        votingBalance
    };
}
function calcBalances(api, [accountId, [accountNonce, [primary, ...additional]]]) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .objectSpread */ .Z)({
        accountId,
        accountNonce,
        additional: additional.map((b) => getBalance(api, b))
    }, getBalance(api, primary));
}
function queryBalancesFree(api, accountId) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        api.query.balances['freeBalance'](accountId),
        api.query.balances['reservedBalance'](accountId),
        api.query.system['accountNonce'](accountId)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(([freeBalance, reservedBalance, accountNonce]) => [
        accountNonce,
        [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]
    ]));
}
function queryNonceOnly(api, accountId) {
    const fill = (nonce) => [
        nonce,
        [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
    ];
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(api.query.system.account)
        ? api.query.system.account(accountId).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(({ nonce }) => fill(nonce)))
        : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(api.query.system['accountNonce'])
            ? api.query.system['accountNonce'](accountId).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)((nonce) => fill(nonce)))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)(fill(api.registry.createType('Index')));
}
function queryBalancesAccount(api, accountId, modules = ['balances']) {
    const balances = modules
        .map((m) => api.derive[m]?.customAccount || api.query[m]?.account)
        .filter((q) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(q));
    const extract = (nonce, data) => [
        nonce,
        data.map(({ feeFrozen, free, miscFrozen, reserved }) => [free, reserved, feeFrozen, miscFrozen])
    ];
    // NOTE this is for the first case where we do have instances specified
    return balances.length
        ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(api.query.system.account)
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
                api.query.system.account(accountId),
                ...balances.map((c) => c(accountId))
            ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(([{ nonce }, ...balances]) => extract(nonce, balances)))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
                api.query.system['accountNonce'](accountId),
                ...balances.map((c) => c(accountId))
            ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(([nonce, ...balances]) => extract(nonce, balances)))
        : queryNonceOnly(api, accountId);
}
function querySystemAccount(api, accountId) {
    // AccountInfo is current, support old, eg. Edgeware
    return api.query.system.account(accountId).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)((infoOrTuple) => {
        const data = infoOrTuple.nonce
            ? infoOrTuple.data
            : infoOrTuple[1];
        const nonce = infoOrTuple.nonce || infoOrTuple[0];
        if (!data || data.isEmpty) {
            return [
                nonce,
                [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
            ];
        }
        const { feeFrozen, free, miscFrozen, reserved } = data;
        return [
            nonce,
            [[free, reserved, feeFrozen, miscFrozen]]
        ];
    }));
}
/**
 * @name account
 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
 * @returns An object containing the results of various balance queries
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = 'F7Hs';
 *
 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
 * });
 * ```
 */
function account(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');
    const nonDefaultBalances = balanceInstances && balanceInstances[0] !== 'balances';
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_5__/* .memo */ .X)(instanceId, (address) => api.derive.accounts.accountId(address).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .switchMap */ .w)((accountId) => (accountId
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
            (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)(accountId),
            nonDefaultBalances
                ? queryBalancesAccount(api, accountId, balanceInstances)
                : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(api.query.system?.account)
                    ? querySystemAccount(api, accountId)
                    : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(api.query.balances?.account)
                        ? queryBalancesAccount(api, accountId)
                        : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(api.query.balances?.['freeBalance'])
                            ? queryBalancesFree(api, accountId)
                            : queryNonceOnly(api, accountId)
        ])
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)([api.registry.createType('AccountId'), [
                api.registry.createType('Index'),
                [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
            ]]))), (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)((result) => calcBalances(api, result))));
}


/***/ }),

/***/ 71245:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $: () => (/* binding */ all)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(96918);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39098);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(91449);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38252);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(73092);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(39762);



const VESTING_ID = '0x76657374696e6720';
function calcLocked(api, bestNumber, locks) {
    let lockedBalance = api.registry.createType('Balance');
    let lockedBreakdown = [];
    let vestingLocked = api.registry.createType('Balance');
    let allLocked = false;
    if (Array.isArray(locks)) {
        // only get the locks that are valid until passed the current block
        lockedBreakdown = locks.filter(({ until }) => !until || (bestNumber && until.gt(bestNumber)));
        allLocked = lockedBreakdown.some(({ amount }) => amount && amount.isMax());
        vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({ id }) => id.eq(VESTING_ID)).reduce((result, { amount }) => result.iadd(amount), new _polkadot_util__WEBPACK_IMPORTED_MODULE_0__(0)));
        // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699
        const notAll = lockedBreakdown.filter(({ amount }) => amount && !amount.isMax());
        if (notAll.length) {
            lockedBalance = api.registry.createType('Balance', (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .bnMax */ .x)(...notAll.map(({ amount }) => amount)));
        }
    }
    return { allLocked, lockedBalance, lockedBreakdown, vestingLocked };
}
function calcShared(api, bestNumber, data, locks) {
    const { allLocked, lockedBalance, lockedBreakdown, vestingLocked } = calcLocked(api, bestNumber, locks);
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({}, data, {
        availableBalance: api.registry.createType('Balance', allLocked ? 0 : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .bnMax */ .x)(new _polkadot_util__WEBPACK_IMPORTED_MODULE_0__(0), data?.freeBalance ? data.freeBalance.sub(lockedBalance) : new _polkadot_util__WEBPACK_IMPORTED_MODULE_0__(0))),
        lockedBalance,
        lockedBreakdown,
        vestingLocked
    });
}
function calcVesting(bestNumber, shared, _vesting) {
    // Calculate the vesting balances,
    //  - offset = balance locked at startingBlock
    //  - perBlock is the unlock amount
    const vesting = _vesting || [];
    const isVesting = !shared.vestingLocked.isZero();
    const vestedBalances = vesting.map(({ locked, perBlock, startingBlock }) => bestNumber.gt(startingBlock)
        ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .bnMin */ .N)(locked, perBlock.mul(bestNumber.sub(startingBlock)))
        : _polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .BN_ZERO */ .nw);
    const vestedBalance = vestedBalances.reduce((all, value) => all.iadd(value), new _polkadot_util__WEBPACK_IMPORTED_MODULE_0__(0));
    const vestingTotal = vesting.reduce((all, { locked }) => all.iadd(locked), new _polkadot_util__WEBPACK_IMPORTED_MODULE_0__(0));
    return {
        isVesting,
        vestedBalance,
        vestedClaimable: isVesting
            ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance))
            : _polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .BN_ZERO */ .nw,
        vesting: vesting
            .map(({ locked, perBlock, startingBlock }, index) => ({
            endBlock: locked.div(perBlock).iadd(startingBlock),
            locked,
            perBlock,
            startingBlock,
            vested: vestedBalances[index]
        }))
            .filter(({ locked }) => !locked.isZero()),
        vestingTotal
    };
}
function calcBalances(api, result) {
    const [data, [vesting, allLocks, namedReserves], bestNumber] = result;
    const shared = calcShared(api, bestNumber, data, allLocks[0]);
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)(shared, calcVesting(bestNumber, shared, vesting), {
        accountId: data.accountId,
        accountNonce: data.accountNonce,
        additional: allLocks
            .slice(1)
            .map((l, index) => calcShared(api, bestNumber, data.additional[index], l)),
        namedReserves
    });
}
function queryOld(api, accountId) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .combineLatest */ .a)([
        api.query.balances.locks(accountId),
        api.query.balances['vesting'](accountId)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)(([locks, optVesting]) => {
        let vestingNew = null;
        if (optVesting.isSome) {
            const { offset: locked, perBlock, startingBlock } = optVesting.unwrap();
            vestingNew = api.registry.createType('VestingInfo', { locked, perBlock, startingBlock });
        }
        return [
            vestingNew
                ? [vestingNew]
                : null,
            [locks],
            []
        ];
    }));
}
const isNonNullable = (nullable) => !!nullable;
function createCalls(calls) {
    return [
        calls.map((c) => !c),
        calls.filter(isNonNullable)
    ];
}
function queryCurrent(api, accountId, balanceInstances = ['balances']) {
    const [lockEmpty, lockQueries] = createCalls(balanceInstances.map((m) => api.derive[m]?.customLocks || api.query[m]?.locks));
    const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map((m) => api.query[m]?.reserves));
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .combineLatest */ .a)([
        api.query.vesting?.vesting
            ? api.query.vesting.vesting(accountId)
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(api.registry.createType('Option<VestingInfo>')),
        lockQueries.length
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .combineLatest */ .a)(lockQueries.map((c) => c(accountId)))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)([]),
        reserveQueries.length
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .combineLatest */ .a)(reserveQueries.map((c) => c(accountId)))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)([])
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)(([opt, locks, reserves]) => {
        let offsetLock = -1;
        let offsetReserve = -1;
        const vesting = opt.unwrapOr(null);
        return [
            vesting
                ? Array.isArray(vesting)
                    ? vesting
                    : [vesting]
                : null,
            lockEmpty.map((e) => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offsetLock]),
            reserveEmpty.map((e) => e ? api.registry.createType('Vec<PalletBalancesReserveData>') : reserves[++offsetReserve])
        ];
    }));
}
/**
 * @name all
 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
 * @returns An object containing the results of various balance queries
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = 'F7Hs';
 *
 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
 * });
 * ```
 */
function all(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_7__/* .memo */ .X)(instanceId, (address) => (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .combineLatest */ .a)([
        api.derive.balances.account(address),
        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .isFunction */ .m)(api.query.system?.account) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .isFunction */ .m)(api.query.balances?.account)
            ? queryCurrent(api, address, balanceInstances)
            : queryOld(api, address)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_9__/* .switchMap */ .w)(([account, locks]) => (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .combineLatest */ .a)([
        (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(account),
        (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(locks),
        api.derive.chain.bestNumber()
    ])), (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)((result) => calcBalances(api, result))));
}


/***/ }),

/***/ 90567:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   account: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_0__.J),
/* harmony export */   all: () => (/* reexport safe */ _all_js__WEBPACK_IMPORTED_MODULE_2__.$),
/* harmony export */   votingBalance: () => (/* binding */ votingBalance),
/* harmony export */   votingBalances: () => (/* reexport safe */ _votingBalances_js__WEBPACK_IMPORTED_MODULE_1__.n)
/* harmony export */ });
/* harmony import */ var _all_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(71245);
/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23376);
/* harmony import */ var _votingBalances_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52440);



const votingBalance = _all_js__WEBPACK_IMPORTED_MODULE_2__/* .all */ .$;



/***/ }),

/***/ 52440:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   n: () => (/* binding */ votingBalances)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(94331);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


function votingBalances(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (addresses) => !addresses?.length
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)([])
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .combineLatest */ .a)(addresses.map((accountId) => api.derive.balances.account(accountId))));
}


/***/ }),

/***/ 40333:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ bounties)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _helpers_filterBountyProposals_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(97611);



function parseResult([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
    const bounties = [];
    maybeBounties.forEach((bounty, index) => {
        if (bounty.isSome) {
            bounties.push({
                bounty: bounty.unwrap(),
                description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
                index: ids[index],
                proposals: bountyProposals.filter((bountyProposal) => bountyProposal.proposal && ids[index].eq(bountyProposal.proposal.args[0]))
            });
        }
    });
    return bounties;
}
function bounties(instanceId, api) {
    const bountyBase = api.query.bounties || api.query.treasury;
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => bountyBase.bounties
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
            bountyBase.bountyCount(),
            api.query.council
                ? api.query.council.proposalCount()
                : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(0)
        ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .switchMap */ .w)(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
            bountyBase.bounties.keys(),
            api.derive.council
                ? api.derive.council.proposals()
                : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)([])
        ])), (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .switchMap */ .w)(([keys, proposals]) => {
            const ids = keys.map(({ args: [id] }) => id);
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
                bountyBase.bounties.multi(ids),
                bountyBase.bountyDescriptions.multi(ids),
                (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(ids),
                (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)((0,_helpers_filterBountyProposals_js__WEBPACK_IMPORTED_MODULE_4__/* .filterBountiesProposals */ ._)(api, proposals))
            ]);
        }), (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)(parseResult))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(parseResult([[], [], [], []])));
}


/***/ }),

/***/ 97611:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _: () => (/* binding */ filterBountiesProposals)
/* harmony export */ });
function filterBountiesProposals(api, allProposals) {
    const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
    const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
    return allProposals.filter((proposal) => bountyProposalCalls.find((bountyCall) => proposal.proposal && bountyCall.is(proposal.proposal)));
}


/***/ }),

/***/ 6469:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bounties: () => (/* reexport safe */ _bounties_js__WEBPACK_IMPORTED_MODULE_0__.b)
/* harmony export */ });
/* harmony import */ var _bounties_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40333);



/***/ }),

/***/ 34874:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   vB: () => (/* binding */ getAvailableDerives)
/* harmony export */ });
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(95680);
/* harmony import */ var _derive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(24217);





const checks = {
    allianceMotion: {
        instances: ['allianceMotion'],
        methods: []
    },
    bagsList: {
        instances: ['voterBagsList', 'voterList', 'bagsList'],
        methods: [],
        withDetect: true
    },
    contracts: {
        instances: ['contracts'],
        methods: []
    },
    council: {
        instances: ['council'],
        methods: [],
        withDetect: true
    },
    crowdloan: {
        instances: ['crowdloan'],
        methods: []
    },
    democracy: {
        instances: ['democracy'],
        methods: []
    },
    elections: {
        instances: ['phragmenElection', 'electionsPhragmen', 'elections', 'council'],
        methods: [],
        withDetect: true
    },
    imOnline: {
        instances: ['imOnline'],
        methods: []
    },
    membership: {
        instances: ['membership'],
        methods: []
    },
    parachains: {
        instances: ['parachains', 'registrar'],
        methods: []
    },
    session: {
        instances: ['session'],
        methods: []
    },
    society: {
        instances: ['society'],
        methods: []
    },
    staking: {
        instances: ['staking'],
        methods: ['erasRewardPoints']
    },
    technicalCommittee: {
        instances: ['technicalCommittee'],
        methods: [],
        withDetect: true
    },
    treasury: {
        instances: ['treasury'],
        methods: []
    }
};
function getModuleInstances(api, specName, moduleName) {
    return api.registry.getModuleInstances(specName, moduleName) || [];
}
/**
 * Returns an object that will inject `api` into all the functions inside
 * `allSections`, and keep the object architecture of `allSections`.
 */
/** @internal */
function injectFunctions(instanceId, api, derives) {
    const result = {};
    const names = Object.keys(derives);
    const keys = Object.keys(api.query);
    const specName = api.runtimeVersion.specName;
    const filterKeys = (q) => keys.includes(q);
    const filterInstances = (q) => getModuleInstances(api, specName, q).some(filterKeys);
    const filterMethods = (all) => (m) => all.some((q) => keys.includes(q) && api.query[q][m]);
    const getKeys = (s) => Object.keys(derives[s]);
    const creator = (s, m) => derives[s][m](instanceId, api);
    const isIncluded = (c) => (!checks[c] || ((checks[c].instances.some(filterKeys) && (!checks[c].methods.length ||
        checks[c].methods.every(filterMethods(checks[c].instances)))) ||
        (checks[c].withDetect &&
            checks[c].instances.some(filterInstances))));
    for (let i = 0, count = names.length; i < count; i++) {
        const name = names[i];
        isIncluded(name) &&
            (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .lazyDeriveSection */ .L)(result, name, getKeys, creator);
    }
    return result;
}
/** @internal */
function getAvailableDerives(instanceId, api, custom = {}) {
    return {
        ...injectFunctions(instanceId, api, _derive_js__WEBPACK_IMPORTED_MODULE_1__/* .derive */ .s),
        ...injectFunctions(instanceId, api, custom)
    };
}


/***/ }),

/***/ 17227:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   O: () => (/* binding */ bestNumber)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59326);

/**
 * @name bestNumber
 * @returns The latest block number.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumber((blockNumber) => {
 *   console.log(`the current best block is #${blockNumber}`);
 * });
 * ```
 */
const bestNumber = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_0__/* .createBlockNumberDerive */ .a)((api) => api.rpc.chain.subscribeNewHeads());


/***/ }),

/***/ 59659:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ bestNumberFinalized)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59326);

/**
 * @name bestNumberFinalized
 * @returns A BlockNumber
 * @description Get the latest finalized block number.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumberFinalized((blockNumber) => {
 *   console.log(`the current finalized block is #${blockNumber}`);
 * });
 * ```
 */
const bestNumberFinalized = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_0__/* .createBlockNumberDerive */ .a)((api) => api.rpc.chain.subscribeFinalizedHeads());


/***/ }),

/***/ 90094:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ bestNumberLag)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


/**
 * @name bestNumberLag
 * @returns A number of blocks
 * @description Calculates the lag between finalized head and best head
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumberLag((lag) => {
 *   console.log(`finalized is ${lag} blocks behind head`);
 * });
 * ```
 */
function bestNumberLag(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        api.derive.chain.bestNumber(),
        api.derive.chain.bestNumberFinalized()
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(([bestNumber, bestNumberFinalized]) => api.registry.createType('BlockNumber', bestNumber.sub(bestNumberFinalized)))));
}


/***/ }),

/***/ 3386:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Q: () => (/* binding */ getBlock)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(79606);
/* harmony import */ var _type_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(92281);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(59326);




/**
 * @name getBlock
 * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
 * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author
 * @example
 * <BR>
 *
 * ```javascript
 * const { author, block } = await api.derive.chain.getBlock('0x123...456');
 *
 * console.log(`block #${block.header.number} was authored by ${author}`);
 * ```
 */
function getBlock(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (blockHash) => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        api.rpc.chain.getBlock(blockHash),
        api.queryAt(blockHash)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)(([signedBlock, queryAt]) => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(signedBlock),
        queryAt.system.events(),
        (0,_util_js__WEBPACK_IMPORTED_MODULE_4__/* .getAuthorDetails */ .w)(api, signedBlock.block.header, blockHash)
    ])), (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)(([signedBlock, events, [, validators, author]]) => (0,_type_index_js__WEBPACK_IMPORTED_MODULE_6__/* .createSignedBlockExtended */ .i)(events.registry, signedBlock, events, validators, author))));
}


/***/ }),

/***/ 57355:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: () => (/* binding */ getBlockByNumber)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96918);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


function getBlockByNumber(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (blockNumber) => api.rpc.chain.getBlockHash(blockNumber).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)((h) => api.derive.chain.getBlock(h))));
}


/***/ }),

/***/ 82423:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ getHeader)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var _type_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(56932);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59326);




/**
 * @name getHeader
 * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
 * @returns An array containing the block header and the block author
 * @description Get a specific block header and extend it with the author
 * @example
 * <BR>
 *
 * ```javascript
 * const { author, number } = await api.derive.chain.getHeader('0x123...456');
 *
 * console.log(`block #${number} was authored by ${author}`);
 * ```
 */
function getHeader(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (blockHash) => api.rpc.chain.getHeader(blockHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)((header) => (0,_util_js__WEBPACK_IMPORTED_MODULE_2__/* .getAuthorDetails */ .w)(api, header, blockHash)), (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)(([header, validators, author]) => (0,_type_index_js__WEBPACK_IMPORTED_MODULE_4__/* .createHeaderExtended */ .U)((validators || header).registry, header, validators, author))));
}


/***/ }),

/***/ 36512:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _getHeaderRange: () => (/* reexport safe */ _subscribeFinalizedHeads_js__WEBPACK_IMPORTED_MODULE_7__.o),
/* harmony export */   bestNumber: () => (/* reexport safe */ _bestNumber_js__WEBPACK_IMPORTED_MODULE_0__.O),
/* harmony export */   bestNumberFinalized: () => (/* reexport safe */ _bestNumberFinalized_js__WEBPACK_IMPORTED_MODULE_1__.b),
/* harmony export */   bestNumberLag: () => (/* reexport safe */ _bestNumberLag_js__WEBPACK_IMPORTED_MODULE_2__.f),
/* harmony export */   getBlock: () => (/* reexport safe */ _getBlock_js__WEBPACK_IMPORTED_MODULE_3__.Q),
/* harmony export */   getBlockByNumber: () => (/* reexport safe */ _getBlockByNumber_js__WEBPACK_IMPORTED_MODULE_4__.B),
/* harmony export */   getHeader: () => (/* reexport safe */ _getHeader_js__WEBPACK_IMPORTED_MODULE_5__.P),
/* harmony export */   subscribeFinalizedBlocks: () => (/* reexport safe */ _subscribeFinalizedBlocks_js__WEBPACK_IMPORTED_MODULE_6__.F),
/* harmony export */   subscribeFinalizedHeads: () => (/* reexport safe */ _subscribeFinalizedHeads_js__WEBPACK_IMPORTED_MODULE_7__.I),
/* harmony export */   subscribeNewBlocks: () => (/* reexport safe */ _subscribeNewBlocks_js__WEBPACK_IMPORTED_MODULE_8__.A),
/* harmony export */   subscribeNewHeads: () => (/* reexport safe */ _subscribeNewHeads_js__WEBPACK_IMPORTED_MODULE_9__.Y)
/* harmony export */ });
/* harmony import */ var _bestNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17227);
/* harmony import */ var _bestNumberFinalized_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59659);
/* harmony import */ var _bestNumberLag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(90094);
/* harmony import */ var _getBlock_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3386);
/* harmony import */ var _getBlockByNumber_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(57355);
/* harmony import */ var _getHeader_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(82423);
/* harmony import */ var _subscribeFinalizedBlocks_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(48618);
/* harmony import */ var _subscribeFinalizedHeads_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(21385);
/* harmony import */ var _subscribeNewBlocks_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(5287);
/* harmony import */ var _subscribeNewHeads_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(28645);












/***/ }),

/***/ 48618:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   F: () => (/* binding */ subscribeFinalizedBlocks)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96918);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


/**
 * @name subscribeFinalizedBlocks
 * @returns The finalized block & events for that block
 */
function subscribeFinalizedBlocks(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.derive.chain.subscribeFinalizedHeads().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}


/***/ }),

/***/ 21385:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I: () => (/* binding */ subscribeFinalizedHeads),
/* harmony export */   o: () => (/* binding */ _getHeaderRange)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


/**
 * Returns a header range from startHash to to (not including) endHash, i.e. lastBlock.parentHash === endHash
 */
function _getHeaderRange(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (startHash, endHash, prev = []) => api.rpc.chain.getHeader(startHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)((header) => header.parentHash.eq(endHash)
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)([header, ...prev])
        : api.derive.chain._getHeaderRange(header.parentHash, endHash, [header, ...prev]))));
}
/**
 * @name subscribeFinalizedHeads
 * @description An observable of the finalized block headers. Unlike the base
 * chain.subscribeFinalizedHeads this does not skip any headers. Since finalization
 * may skip specific blocks (finalization happens in terms of chains), this version
 * of the derive tracks missing headers (since last  retrieved) and provides them
 * to the caller
 */
function subscribeFinalizedHeads(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => {
        let prevHash = null;
        return api.rpc.chain.subscribeFinalizedHeads().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)((header) => {
            const endHash = prevHash;
            const startHash = header.parentHash;
            prevHash = header.createdAtHash = header.hash;
            return endHash === null || startHash.eq(endHash)
                ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(header)
                : api.derive.chain._getHeaderRange(startHash, endHash, [header]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)((headers) => (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .from */ .D)(headers)));
        }));
    });
}


/***/ }),

/***/ 5287:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ subscribeNewBlocks)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96918);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


/**
 * @name subscribeNewBlocks
 * @returns The latest block & events for that block
 */
function subscribeNewBlocks(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.derive.chain.subscribeNewHeads().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}


/***/ }),

/***/ 28645:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Y: () => (/* binding */ subscribeNewHeads)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var _type_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(56932);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59326);




/**
 * @name subscribeNewHeads
 * @returns A header with the current header (including extracted author)
 * @description An observable of the current block header and it's author
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.subscribeNewHeads((header) => {
 *   console.log(`block #${header.number} was authored by ${header.author}`);
 * });
 * ```
 */
function subscribeNewHeads(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.rpc.chain.subscribeNewHeads().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)((header) => (0,_util_js__WEBPACK_IMPORTED_MODULE_2__/* .getAuthorDetails */ .w)(api, header)), (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)(([header, validators, author]) => {
        header.createdAtHash = header.hash;
        return (0,_type_index_js__WEBPACK_IMPORTED_MODULE_4__/* .createHeaderExtended */ .U)(header.registry, header, validators, author);
    })));
}


/***/ }),

/***/ 59326:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createBlockNumberDerive),
/* harmony export */   w: () => (/* binding */ getAuthorDetails)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2740);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(96918);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(44180);


function createBlockNumberDerive(fn) {
    return (instanceId, api) => (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => fn(api).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(_util_index_js__WEBPACK_IMPORTED_MODULE_2__/* .unwrapBlockNumber */ .E)));
}
/** @internal */
function getAuthorDetailsWithAt(header, queryAt) {
    const validators = queryAt.session?.validators
        ? queryAt.session.validators()
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(null);
    // nimbus consensus stores the session key of the block author in header logs
    const { logs: [log] } = header.digest;
    const loggedAuthor = (log && ((log.isConsensus && log.asConsensus[0].isNimbus && log.asConsensus[1]) ||
        (log.isPreRuntime && log.asPreRuntime[0].isNimbus && log.asPreRuntime[1])));
    if (loggedAuthor) {
        // use the author mapping pallet, if available (ie: moonbeam, moonriver), to map session (nimbus) key to author (collator/validator) key
        if (queryAt['authorMapping']?.['mappingWithDeposit']) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .combineLatest */ .a)([
                (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(header),
                validators,
                queryAt['authorMapping']['mappingWithDeposit'](loggedAuthor).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((o) => o.unwrapOr({ account: null }).account))
            ]);
        }
        // fall back to session and parachain staking pallets, if available (ie: manta, calamari), to map session (nimbus) key to author (collator) key
        if (queryAt['parachainStaking']?.['selectedCandidates'] && queryAt.session?.nextKeys) {
            const loggedHex = loggedAuthor.toHex();
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .combineLatest */ .a)([
                (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(header),
                validators,
                queryAt['parachainStaking']['selectedCandidates']().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .mergeMap */ .z)((selectedCandidates) => (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .combineLatest */ .a)([
                    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(selectedCandidates),
                    queryAt.session.nextKeys.multi(selectedCandidates).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((nextKeys) => nextKeys.findIndex((o) => o.unwrapOrDefault().nimbus.toHex() === loggedHex)))
                ])), (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(([selectedCandidates, index]) => index === -1
                    ? null
                    : selectedCandidates[index]))
            ]);
        }
    }
    // normal operation, non-mapping
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .combineLatest */ .a)([
        (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(header),
        validators,
        (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(null)
    ]);
}
function getAuthorDetails(api, header, blockHash) {
    // For on-chain state, we need to retrieve it as per the start
    // of the block being constructed, i.e. session validators would
    // be at the point of the block construction, not when all operations
    // has been supplied.
    //
    // However for the first block (no parentHash available), we would
    // just use the as-is
    return api.queryAt(header.parentHash.isEmpty
        ? blockHash || header.hash
        : header.parentHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .switchMap */ .w)((queryAt) => getAuthorDetailsWithAt(header, queryAt)));
}


/***/ }),

/***/ 16063:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A1: () => (/* binding */ withSection),
/* harmony export */   OC: () => (/* binding */ callMethod)
/* harmony export */ });
/* unused harmony export getInstance */
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73092);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);



function getInstance(api, section) {
    const instances = api.registry.getModuleInstances(api.runtimeVersion.specName, section);
    const name = instances?.length
        ? instances[0]
        : section;
    return api.query[name];
}
function withSection(section, fn) {
    return (instanceId, api) => (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, fn(getInstance(api, section), api, instanceId));
}
function callMethod(method, empty) {
    return (section) => withSection(section, (query) => () => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(query?.[method])
        ? query[method]()
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(empty));
}


/***/ }),

/***/ 66433:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   T: () => (/* binding */ members)
/* harmony export */ });
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16063);

const members = /*#__PURE__*/ (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__/* .callMethod */ .OC)('members', []);


/***/ }),

/***/ 77631:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   F: () => (/* binding */ prime)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85296);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73092);
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16063);



function prime(section) {
    return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__/* .withSection */ .A1)(section, (query) => () => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(query?.prime)
        ? query.prime().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)((o) => o.unwrapOr(null)))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(null));
}


/***/ }),

/***/ 51286:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $O: () => (/* binding */ proposals),
/* harmony export */   P6: () => (/* binding */ proposalCount),
/* harmony export */   To: () => (/* binding */ hasProposals),
/* harmony export */   iB: () => (/* binding */ proposalHashes),
/* harmony export */   oL: () => (/* binding */ proposal)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(92646);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(96918);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73092);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(29617);
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(16063);




function parse(api, [hashes, proposals, votes]) {
    return proposals.map((o, index) => ({
        hash: api.registry.createType('Hash', hashes[index]),
        proposal: o && o.isSome
            ? o.unwrap()
            : null,
        votes: votes[index].unwrapOr(null)
    }));
}
function _proposalsFrom(api, query, hashes) {
    return ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(query?.proposals) && hashes.length
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
            (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(hashes),
            // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
            // however we have had cases on Edgeware where the indices have moved around after an
            // upgrade, which results in invalid on-chain data
            query.proposalOf.multi(hashes).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .catchError */ .K)(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(hashes.map(() => null)))),
            query.voting.multi(hashes)
        ])
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)([[], [], []])).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .map */ .U)((r) => parse(api, r)));
}
function hasProposals(section) {
    return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__/* .withSection */ .A1)(section, (query) => () => (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(query?.proposals)));
}
function proposals(section) {
    return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__/* .withSection */ .A1)(section, (query, api) => () => api.derive[section].proposalHashes().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .switchMap */ .w)((all) => _proposalsFrom(api, query, all))));
}
function proposal(section) {
    return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__/* .withSection */ .A1)(section, (query, api) => (hash) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(query?.proposals)
        ? (0,_util_index_js__WEBPACK_IMPORTED_MODULE_7__/* .firstObservable */ .U)(_proposalsFrom(api, query, [hash]))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null));
}
const proposalCount = /*#__PURE__*/ (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__/* .callMethod */ .OC)('proposalCount', null);
const proposalHashes = /*#__PURE__*/ (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__/* .callMethod */ .OC)('proposals', []);


/***/ }),

/***/ 10622:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   J: () => (/* binding */ fees)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39762);


function queryConstants(api) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__.of)([
        // deprecated
        api.consts.contracts['callBaseFee'] || api.registry.createType('Balance'),
        api.consts.contracts['contractFee'] || api.registry.createType('Balance'),
        api.consts.contracts['creationFee'] || api.registry.createType('Balance'),
        api.consts.contracts['transactionBaseFee'] || api.registry.createType('Balance'),
        api.consts.contracts['transactionByteFee'] || api.registry.createType('Balance'),
        api.consts.contracts['transferFee'] || api.registry.createType('Balance'),
        // current
        api.consts.contracts['rentByteFee'] || api.registry.createType('Balance'),
        api.consts.contracts['rentDepositOffset'] || api.registry.createType('Balance'),
        api.consts.contracts['surchargeReward'] || api.registry.createType('Balance'),
        api.consts.contracts['tombstoneDeposit'] || api.registry.createType('Balance')
    ]);
}
/**
 * @name fees
 * @returns An object containing the combined results of the queries for
 * all relevant contract fees as declared in the substrate chain spec.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.contracts.fees(([creationFee, transferFee]) => {
 *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);
 * });
 * ```
 */
function fees(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_1__/* .memo */ .X)(instanceId, () => {
        return queryConstants(api).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
            callBaseFee,
            contractFee,
            creationFee,
            rentByteFee,
            rentDepositOffset,
            surchargeReward,
            tombstoneDeposit,
            transactionBaseFee,
            transactionByteFee,
            transferFee
        })));
    });
}


/***/ }),

/***/ 15282:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fees: () => (/* reexport safe */ _fees_js__WEBPACK_IMPORTED_MODULE_0__.J)
/* harmony export */ });
/* harmony import */ var _fees_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10622);



/***/ }),

/***/ 17618:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasProposals: () => (/* binding */ hasProposals),
/* harmony export */   members: () => (/* binding */ members),
/* harmony export */   prime: () => (/* binding */ prime),
/* harmony export */   proposal: () => (/* binding */ proposal),
/* harmony export */   proposalCount: () => (/* binding */ proposalCount),
/* harmony export */   proposalHashes: () => (/* binding */ proposalHashes),
/* harmony export */   proposals: () => (/* binding */ proposals),
/* harmony export */   votes: () => (/* reexport safe */ _votes_js__WEBPACK_IMPORTED_MODULE_0__.T),
/* harmony export */   votesOf: () => (/* reexport safe */ _votesOf_js__WEBPACK_IMPORTED_MODULE_1__.e)
/* harmony export */ });
/* harmony import */ var _collective_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66433);
/* harmony import */ var _collective_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(51286);
/* harmony import */ var _collective_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(77631);
/* harmony import */ var _votes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91368);
/* harmony import */ var _votesOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11183);



const members = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_2__/* .members */ .T)('council');
const hasProposals = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_3__/* .hasProposals */ .To)('council');
const proposal = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_3__/* .proposal */ .oL)('council');
const proposalCount = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_3__/* .proposalCount */ .P6)('council');
const proposalHashes = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_3__/* .proposalHashes */ .iB)('council');
const proposals = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_3__/* .proposals */ .$O)('council');
const prime = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_4__/* .prime */ .F)('council');


/***/ }),

/***/ 91368:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   T: () => (/* binding */ votes)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85296);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(39762);


function isVoter(value) {
    return !Array.isArray(value);
}
function retrieveStakeOf(elections) {
    return elections['stakeOf'].entries().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)((entries) => entries.map(([{ args: [accountId] }, stake]) => [accountId, stake])));
}
function retrieveVoteOf(elections) {
    return elections['votesOf'].entries().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)((entries) => entries.map(([{ args: [accountId] }, votes]) => [accountId, votes])));
}
function retrievePrev(api, elections) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        retrieveStakeOf(elections),
        retrieveVoteOf(elections)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)(([stakes, votes]) => {
        const result = [];
        votes.forEach(([voter, votes]) => {
            result.push([voter, { stake: api.registry.createType('Balance'), votes }]);
        });
        stakes.forEach(([staker, stake]) => {
            const entry = result.find(([voter]) => voter.eq(staker));
            if (entry) {
                entry[1].stake = stake;
            }
            else {
                result.push([staker, { stake, votes: [] }]);
            }
        });
        return result;
    }));
}
function retrieveCurrent(elections) {
    return elections.voting.entries().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)((entries) => entries.map(([{ args: [accountId] }, value]) => [
        accountId,
        isVoter(value)
            ? { stake: value.stake, votes: value.votes }
            : { stake: value[0], votes: value[1] }
    ])));
}
function votes(instanceId, api) {
    const elections = api.query.elections || api.query['phragmenElection'] || api.query['electionsPhragmen'];
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_2__/* .memo */ .X)(instanceId, () => elections
        ? elections['stakeOf']
            ? retrievePrev(api, elections)
            : retrieveCurrent(elections)
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)([]));
}


/***/ }),

/***/ 11183:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   e: () => (/* binding */ votesOf)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


function votesOf(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (accountId) => api.derive.council.votes().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((votes) => (votes.find(([from]) => from.eq(accountId)) ||
        [null, { stake: api.registry.createType('Balance'), votes: [] }])[1])));
}


/***/ }),

/***/ 48843:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: () => (/* binding */ childKey)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(93173);
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(89753);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39762);




function createChildKey(info) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .u8aToHex */ .c)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .u8aConcat */ .e)(':child_storage:default:', (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_2__/* .blake2AsU8a */ .b)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .u8aConcat */ .e)('crowdloan', (info.fundIndex || info.trieIndex).toU8a()))));
}
function childKey(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .memo */ .X)(instanceId, (paraId) => api.query['crowdloan']['funds'](paraId).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .map */ .U)((optInfo) => optInfo.isSome
        ? createChildKey(optInfo.unwrap())
        : null)));
}


/***/ }),

/***/ 78310:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   d: () => (/* binding */ contributions)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(64818);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(81711);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(81505);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(81083);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(28296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(94331);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(92901);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(71833);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(73092);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38136);




const PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)
function _getUpdates(api, paraId) {
    let added = [];
    let removed = [];
    return api.query.system.events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .switchMap */ .w)((events) => {
        const changes = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__/* .extractContributed */ .t)(paraId, events);
        if (changes.added.length || changes.removed.length) {
            added = added.concat(...changes.added);
            removed = removed.concat(...changes.removed);
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)({ added, addedDelta: changes.added, blockHash: events.createdAtHash?.toHex() || '-', removed, removedDelta: changes.removed });
        }
        return rxjs__WEBPACK_IMPORTED_MODULE_3__/* .EMPTY */ .E;
    }), (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .startWith */ .O)({ added, addedDelta: [], blockHash: '-', removed, removedDelta: [] }));
}
function _eventTriggerAll(api, paraId) {
    return api.query.system.events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .switchMap */ .w)((events) => {
        const items = events.filter(({ event: { data: [eventParaId], method, section } }) => section === 'crowdloan' &&
            ['AllRefunded', 'Dissolved', 'PartiallyRefunded'].includes(method) &&
            eventParaId.eq(paraId));
        return items.length
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(events.createdAtHash?.toHex() || '-')
            : rxjs__WEBPACK_IMPORTED_MODULE_3__/* .EMPTY */ .E;
    }), (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .startWith */ .O)('-'));
}
function _getKeysPaged(api, childKey) {
    const subject = new rxjs__WEBPACK_IMPORTED_MODULE_5__/* .BehaviorSubject */ .X(undefined);
    return subject.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .switchMap */ .w)((startKey) => api.rpc.childstate.getKeysPaged(childKey, '0x', PAGE_SIZE_K, startKey)), (0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .tap */ .b)((keys) => {
        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .nextTick */ .Y)(() => {
            keys.length === PAGE_SIZE_K
                ? subject.next(keys[PAGE_SIZE_K - 1].toHex())
                : subject.complete();
        });
    }), (0,rxjs__WEBPACK_IMPORTED_MODULE_8__/* .toArray */ .q)(), // toArray since we want to startSubject to be completed
    (0,rxjs__WEBPACK_IMPORTED_MODULE_9__/* .map */ .U)((keyArr) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_10__/* .arrayFlatten */ .a)(keyArr)));
}
function _getAll(api, paraId, childKey) {
    return _eventTriggerAll(api, paraId).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .switchMap */ .w)(() => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__/* .isFunction */ .m)(api.rpc.childstate.getKeysPaged)
        ? _getKeysPaged(api, childKey)
        : api.rpc.childstate.getKeys(childKey, '0x')), (0,rxjs__WEBPACK_IMPORTED_MODULE_9__/* .map */ .U)((keys) => keys.map((k) => k.toHex())));
}
function _contributions(api, paraId, childKey) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_12__/* .combineLatest */ .a)([
        _getAll(api, paraId, childKey),
        _getUpdates(api, paraId)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_9__/* .map */ .U)(([keys, { added, blockHash, removed }]) => {
        const contributorsMap = {};
        keys.forEach((k) => {
            contributorsMap[k] = true;
        });
        added.forEach((k) => {
            contributorsMap[k] = true;
        });
        removed.forEach((k) => {
            delete contributorsMap[k];
        });
        return {
            blockHash,
            contributorsHex: Object.keys(contributorsMap)
        };
    }));
}
function contributions(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_13__/* .memo */ .X)(instanceId, (paraId) => api.derive.crowdloan.childKey(paraId).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .switchMap */ .w)((childKey) => childKey
        ? _contributions(api, paraId, childKey)
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)({ blockHash: '-', contributorsHex: [] }))));
}


/***/ }),

/***/ 24488:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   childKey: () => (/* reexport safe */ _childKey_js__WEBPACK_IMPORTED_MODULE_0__.r),
/* harmony export */   contributions: () => (/* reexport safe */ _contributions_js__WEBPACK_IMPORTED_MODULE_1__.d),
/* harmony export */   ownContributions: () => (/* reexport safe */ _ownContributions_js__WEBPACK_IMPORTED_MODULE_2__.i)
/* harmony export */ });
/* harmony import */ var _childKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48843);
/* harmony import */ var _contributions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(78310);
/* harmony import */ var _ownContributions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(30860);





/***/ }),

/***/ 30860:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   i: () => (/* binding */ ownContributions)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(64818);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(81711);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(85296);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(38136);




function _getValues(api, childKey, keys) {
    // We actually would love to use multi-keys https://github.com/paritytech/substrate/issues/9203
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)(keys.map((k) => api.rpc.childstate.getStorage(childKey, k))).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((values) => values
        .map((v) => api.registry.createType('Option<StorageData>', v))
        .map((o) => o.isSome
        ? api.registry.createType('Balance', o.unwrap())
        : api.registry.createType('Balance'))
        .reduce((all, b, index) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)(all, { [keys[index]]: b }), {})));
}
function _watchOwnChanges(api, paraId, childkey, keys) {
    return api.query.system.events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .switchMap */ .w)((events) => {
        const changes = (0,_util_js__WEBPACK_IMPORTED_MODULE_4__/* .extractContributed */ .t)(paraId, events);
        const filtered = keys.filter((k) => changes.added.includes(k) ||
            changes.removed.includes(k));
        return filtered.length
            ? _getValues(api, childkey, filtered)
            : rxjs__WEBPACK_IMPORTED_MODULE_5__/* .EMPTY */ .E;
    }), (0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .startWith */ .O)({}));
}
function _contributions(api, paraId, childKey, keys) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)([
        _getValues(api, childKey, keys),
        _watchOwnChanges(api, paraId, childKey, keys)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(([all, latest]) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({}, all, latest)));
}
function ownContributions(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_7__/* .memo */ .X)(instanceId, (paraId, keys) => api.derive.crowdloan.childKey(paraId).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .switchMap */ .w)((childKey) => childKey && keys.length
        ? _contributions(api, paraId, childKey, keys)
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)({}))));
}


/***/ }),

/***/ 38136:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   t: () => (/* binding */ extractContributed)
/* harmony export */ });
function extractContributed(paraId, events) {
    const added = [];
    const removed = [];
    return events
        .filter(({ event: { data: [, eventParaId], method, section } }) => section === 'crowdloan' &&
        ['Contributed', 'Withdrew'].includes(method) &&
        eventParaId.eq(paraId))
        .reduce((result, { event: { data: [accountId], method } }) => {
        if (method === 'Contributed') {
            result.added.push(accountId.toHex());
        }
        else {
            result.removed.push(accountId.toHex());
        }
        return result;
    }, { added, blockHash: events.createdAtHash?.toHex() || '-', removed });
}


/***/ }),

/***/ 20778:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ dispatchQueue)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(92646);
/* harmony import */ var _polkadot_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96317);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37173);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(73092);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(85037);





const DEMOCRACY_ID = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .stringToHex */ .$)('democrac');
function isMaybeHashedOrBounded(call) {
    // check for enum
    return call instanceof _polkadot_types__WEBPACK_IMPORTED_MODULE_1__/* .Enum */ .x;
}
function isBounded(call) {
    // check for type
    return call.isInline || call.isLegacy || call.isLookup;
}
function queryQueue(api) {
    return api.query.democracy['dispatchQueue']().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)((dispatches) => (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .combineLatest */ .a)([
        (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)(dispatches),
        api.derive.democracy.preimages(dispatches.map(([, hash]) => hash))
    ])), (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)(([dispatches, images]) => dispatches.map(([at, imageHash, index], dispatchIndex) => ({
        at,
        image: images[dispatchIndex],
        imageHash: (0,_util_js__WEBPACK_IMPORTED_MODULE_6__/* .getImageHashBounded */ .hr)(imageHash),
        index
    }))));
}
function schedulerEntries(api) {
    // We don't get entries, but rather we get the keys (triggered via finished referendums) and
    // the subscribe to those keys - this means we pickup when the schedulers actually executes
    // at a block, the entry for that block will become empty
    return api.derive.democracy.referendumsFinished().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)(() => api.query.scheduler.agenda.keys()), (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)((keys) => {
        const blockNumbers = keys.map(({ args: [blockNumber] }) => blockNumber);
        return blockNumbers.length
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .combineLatest */ .a)([
                (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)(blockNumbers),
                // this should simply be api.query.scheduler.agenda.multi,
                // however we have had cases on Darwinia where the indices have moved around after an
                // upgrade, which results in invalid on-chain data
                api.query.scheduler.agenda.multi(blockNumbers).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .catchError */ .K)(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)(blockNumbers.map(() => []))))
            ])
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)([[], []]);
    }));
}
function queryScheduler(api) {
    return schedulerEntries(api).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)(([blockNumbers, agendas]) => {
        const result = [];
        blockNumbers.forEach((at, index) => {
            (agendas[index] || []).filter((o) => o.isSome).forEach((o) => {
                const scheduled = o.unwrap();
                if (scheduled.maybeId.isSome) {
                    const id = scheduled.maybeId.unwrap().toHex();
                    if (id.startsWith(DEMOCRACY_ID)) {
                        const imageHash = isMaybeHashedOrBounded(scheduled.call)
                            ? isBounded(scheduled.call)
                                ? (0,_util_js__WEBPACK_IMPORTED_MODULE_6__/* .getImageHashBounded */ .hr)(scheduled.call)
                                : scheduled.call.isHash
                                    ? scheduled.call.asHash.toHex()
                                    : scheduled.call.asValue.args[0].toHex()
                            : scheduled.call.args[0].toHex();
                        result.push({ at, imageHash, index: api.registry.createType('(u64, ReferendumIndex)', id)[1] });
                    }
                }
            });
        });
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .combineLatest */ .a)([
            (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)(result),
            result.length
                ? api.derive.democracy.preimages(result.map(({ imageHash }) => imageHash))
                : (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)([])
        ]);
    }), (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)(([infos, images]) => infos.map((info, index) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .objectSpread */ .Z)({ image: images[index] }, info))));
}
function dispatchQueue(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_9__/* .memo */ .X)(instanceId, () => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_10__/* .isFunction */ .m)(api.query.scheduler?.agenda)
        ? queryScheduler(api)
        : api.query.democracy['dispatchQueue']
            ? queryQueue(api)
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)([]));
}


/***/ }),

/***/ 70733:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _referendumInfo: () => (/* reexport safe */ _referendumsInfo_js__WEBPACK_IMPORTED_MODULE_9__.jt),
/* harmony export */   _referendumVotes: () => (/* reexport safe */ _referendumsInfo_js__WEBPACK_IMPORTED_MODULE_9__.iu),
/* harmony export */   _referendumsVotes: () => (/* reexport safe */ _referendumsInfo_js__WEBPACK_IMPORTED_MODULE_9__.kJ),
/* harmony export */   dispatchQueue: () => (/* reexport safe */ _dispatchQueue_js__WEBPACK_IMPORTED_MODULE_0__.g),
/* harmony export */   locks: () => (/* reexport safe */ _locks_js__WEBPACK_IMPORTED_MODULE_1__.K),
/* harmony export */   nextExternal: () => (/* reexport safe */ _nextExternal_js__WEBPACK_IMPORTED_MODULE_2__.P),
/* harmony export */   preimage: () => (/* reexport safe */ _preimages_js__WEBPACK_IMPORTED_MODULE_3__.u),
/* harmony export */   preimages: () => (/* reexport safe */ _preimages_js__WEBPACK_IMPORTED_MODULE_3__.A),
/* harmony export */   proposals: () => (/* reexport safe */ _proposals_js__WEBPACK_IMPORTED_MODULE_4__.$),
/* harmony export */   referendumIds: () => (/* reexport safe */ _referendumIds_js__WEBPACK_IMPORTED_MODULE_5__.v),
/* harmony export */   referendums: () => (/* reexport safe */ _referendums_js__WEBPACK_IMPORTED_MODULE_6__.y),
/* harmony export */   referendumsActive: () => (/* reexport safe */ _referendumsActive_js__WEBPACK_IMPORTED_MODULE_7__.X),
/* harmony export */   referendumsFinished: () => (/* reexport safe */ _referendumsFinished_js__WEBPACK_IMPORTED_MODULE_8__.L),
/* harmony export */   referendumsInfo: () => (/* reexport safe */ _referendumsInfo_js__WEBPACK_IMPORTED_MODULE_9__.tP),
/* harmony export */   sqrtElectorate: () => (/* reexport safe */ _sqrtElectorate_js__WEBPACK_IMPORTED_MODULE_10__.u)
/* harmony export */ });
/* harmony import */ var _dispatchQueue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(20778);
/* harmony import */ var _locks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(46134);
/* harmony import */ var _nextExternal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(88419);
/* harmony import */ var _preimages_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(65834);
/* harmony import */ var _proposals_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(89269);
/* harmony import */ var _referendumIds_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(93040);
/* harmony import */ var _referendums_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(90090);
/* harmony import */ var _referendumsActive_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(52389);
/* harmony import */ var _referendumsFinished_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(80415);
/* harmony import */ var _referendumsInfo_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(4722);
/* harmony import */ var _sqrtElectorate_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(77948);













/***/ }),

/***/ 46134:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   K: () => (/* binding */ locks)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(96918);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38252);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(34644);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(39762);



const LOCKUPS = [0, 1, 2, 4, 8, 16, 32];
function parseEnd(api, vote, { approved, end }) {
    return [
        end,
        (approved.isTrue && vote.isAye) || (approved.isFalse && vote.isNay)
            ? end.add((api.consts.democracy.voteLockingPeriod ||
                api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index]))
            : _polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw
    ];
}
function parseLock(api, [referendumId, accountVote], referendum) {
    const { balance, vote } = accountVote.asStandard;
    const [referendumEnd, unlockAt] = referendum.isFinished
        ? parseEnd(api, vote, referendum.asFinished)
        : [_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw, _polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw];
    return { balance, isDelegated: false, isFinished: referendum.isFinished, referendumEnd, referendumId, unlockAt, vote };
}
function delegateLocks(api, { balance, conviction, target }) {
    return api.derive.democracy.locks(target).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((available) => available.map(({ isFinished, referendumEnd, referendumId, unlockAt, vote }) => ({
        balance,
        isDelegated: true,
        isFinished,
        referendumEnd,
        referendumId,
        unlockAt: unlockAt.isZero()
            ? unlockAt
            : referendumEnd.add((api.consts.democracy.voteLockingPeriod ||
                api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
        vote: api.registry.createType('Vote', { aye: vote.isAye, conviction })
    }))));
}
function directLocks(api, { votes }) {
    if (!votes.length) {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)([]);
    }
    return api.query.democracy.referendumInfoOf.multi(votes.map(([referendumId]) => referendumId)).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((referendums) => votes
        .map((vote, index) => [vote, referendums[index].unwrapOr(null)])
        .filter((item) => !!item[1] && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isUndefined */ .o)(item[1].end) && item[0][1].isStandard)
        .map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
}
function locks(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_4__/* .memo */ .X)(instanceId, (accountId) => api.query.democracy.votingOf
        ? api.query.democracy.votingOf(accountId).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .switchMap */ .w)((voting) => voting.isDirect
            ? directLocks(api, voting.asDirect)
            : voting.isDelegating
                ? delegateLocks(api, voting.asDelegating)
                : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)([])))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)([]));
}


/***/ }),

/***/ 88419:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ nextExternal)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(96918);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85037);



function withImage(api, nextOpt) {
    if (nextOpt.isNone) {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__.of)(null);
    }
    const [hash, threshold] = nextOpt.unwrap();
    return api.derive.democracy.preimage(hash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((image) => ({
        image,
        imageHash: (0,_util_js__WEBPACK_IMPORTED_MODULE_2__/* .getImageHashBounded */ .hr)(hash),
        threshold
    })));
}
function nextExternal(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .memo */ .X)(instanceId, () => api.query.democracy?.nextExternal
        ? api.query.democracy.nextExternal().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .switchMap */ .w)((nextOpt) => withImage(api, nextOpt)))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_0__.of)(null));
}


/***/ }),

/***/ 65834:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ preimages),
/* harmony export */   u: () => (/* binding */ preimage)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(85296);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38252);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(73092);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(39762);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(29617);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85037);




function getUnrequestedTicket(status) {
    return status.ticket || status.deposit;
}
function getRequestedTicket(status) {
    return (status.maybeTicket || status.deposit).unwrapOrDefault();
}
function isDemocracyPreimage(api, imageOpt) {
    return !!imageOpt && !api.query.democracy['dispatchQueue'];
}
function constructProposal(api, [bytes, proposer, balance, at]) {
    let proposal;
    try {
        proposal = api.registry.createType('Call', bytes.toU8a(true));
    }
    catch (error) {
        console.error(error);
    }
    return { at, balance, proposal, proposer };
}
function parseDemocracy(api, imageOpt) {
    if (imageOpt.isNone) {
        return;
    }
    if (isDemocracyPreimage(api, imageOpt)) {
        const status = imageOpt.unwrap();
        if (status.isMissing) {
            return;
        }
        const { data, deposit, provider, since } = status.asAvailable;
        return constructProposal(api, [data, provider, deposit, since]);
    }
    return constructProposal(api, imageOpt.unwrap());
}
function parseImage(api, [proposalHash, status, bytes]) {
    if (!status) {
        return undefined;
    }
    const [proposer, balance] = status.isUnrequested
        ? getUnrequestedTicket(status.asUnrequested)
        : getRequestedTicket(status.asRequested);
    let proposal;
    if (bytes) {
        try {
            proposal = api.registry.createType('Call', bytes.toU8a(true));
        }
        catch (error) {
            console.error(error);
        }
    }
    return { at: _polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw, balance, proposal, proposalHash, proposer };
}
function getDemocracyImages(api, bounded) {
    const hashes = bounded.map((b) => (0,_util_js__WEBPACK_IMPORTED_MODULE_1__/* .getImageHashBounded */ .hr)(b));
    return api.query.democracy['preimages'].multi(hashes).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)((images) => images.map((imageOpt) => parseDemocracy(api, imageOpt))));
}
function getImages(api, bounded) {
    const hashes = bounded.map((b) => (0,_util_js__WEBPACK_IMPORTED_MODULE_1__/* .getImageHashBounded */ .hr)(b));
    const bytesType = api.registry.lookup.getTypeDef(api.query.preimage.preimageFor.creator.meta.type.asMap.key).type;
    return api.query.preimage.statusFor.multi(hashes).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .switchMap */ .w)((optStatus) => {
        const statuses = optStatus.map((o) => o.unwrapOr(null));
        const keys = statuses
            .map((s, i) => s
            ? bytesType === 'H256'
                // first generation
                ? hashes[i]
                // current generation (H256,u32)
                : s.isRequested
                    ? [hashes[i], s.asRequested.len.unwrapOr(0)]
                    : [hashes[i], s.asUnrequested.len]
            : null)
            .filter((p) => !!p);
        return api.query.preimage.preimageFor.multi(keys).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)((optBytes) => {
            let ptr = -1;
            return statuses
                .map((s, i) => s
                ? [hashes[i], s, optBytes[++ptr].unwrapOr(null)]
                : [hashes[i], null, null])
                .map((v) => parseImage(api, v));
        }));
    }));
}
function preimages(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_4__/* .memo */ .X)(instanceId, (hashes) => hashes.length
        ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isFunction */ .m)(api.query.democracy['preimages'])
            ? getDemocracyImages(api, hashes)
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isFunction */ .m)(api.query.preimage.preimageFor)
                ? getImages(api, hashes)
                : (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)([])
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)([]));
}
const preimage = /*#__PURE__*/ (0,_util_index_js__WEBPACK_IMPORTED_MODULE_7__/* .firstMemo */ .u)((api, hash) => api.derive.democracy.preimages([hash]));


/***/ }),

/***/ 89269:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $: () => (/* binding */ proposals)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73092);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85037);




function isNewDepositors(depositors) {
    // Detect balance...
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(depositors[1].mul);
}
function parse([proposals, images, optDepositors]) {
    return proposals
        .filter(([, , proposer], index) => !!(optDepositors[index]?.isSome) && !proposer.isEmpty)
        .map(([index, hash, proposer], proposalIndex) => {
        const depositors = optDepositors[proposalIndex].unwrap();
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .objectSpread */ .Z)({
            image: images[proposalIndex],
            imageHash: (0,_util_js__WEBPACK_IMPORTED_MODULE_2__/* .getImageHashBounded */ .hr)(hash),
            index,
            proposer
        }, isNewDepositors(depositors)
            ? { balance: depositors[1], seconds: depositors[0] }
            : { balance: depositors[0], seconds: depositors[1] });
    });
}
function proposals(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .memo */ .X)(instanceId, () => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(api.query.democracy?.publicProps)
        ? api.query.democracy.publicProps().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .switchMap */ .w)((proposals) => proposals.length
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .combineLatest */ .a)([
                (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(proposals),
                api.derive.democracy.preimages(proposals.map(([, hash]) => hash)),
                api.query.democracy.depositOf.multi(proposals.map(([index]) => index))
            ])
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)([[], [], []])), (0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .map */ .U)(parse))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)([]));
}


/***/ }),

/***/ 93040:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   v: () => (/* binding */ referendumIds)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


function referendumIds(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.query.democracy?.lowestUnbaked
        ? api.queryMulti([
            api.query.democracy.lowestUnbaked,
            api.query.democracy.referendumCount
        ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(([first, total]) => total.gt(first)
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            ? [...Array(total.sub(first).toNumber())].map((_, i) => first.addn(i))
            : []))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)([]));
}


/***/ }),

/***/ 90090:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   y: () => (/* binding */ referendums)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(53472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);



function referendums(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.derive.democracy.referendumsActive().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)((referendums) => referendums.length
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .combineLatest */ .a)([
            (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(referendums),
            api.derive.democracy._referendumsVotes(referendums)
        ])
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)([[], []])), (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .map */ .U)(([referendums, votes]) => referendums.map((referendum, index) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .objectSpread */ .Z)({}, referendum, votes[index])))));
}


/***/ }),

/***/ 52389:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   X: () => (/* binding */ referendumsActive)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


function referendumsActive(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.derive.democracy.referendumIds().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)((ids) => ids.length
        ? api.derive.democracy.referendumsInfo(ids)
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)([]))));
}


/***/ }),

/***/ 80415:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   L: () => (/* binding */ referendumsFinished)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


function referendumsFinished(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.derive.democracy.referendumIds().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)((ids) => api.query.democracy.referendumInfoOf.multi(ids)), (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)((infos) => infos
        .map((o) => o.unwrapOr(null))
        .filter((info) => !!info && info.isFinished)
        .map((info) => info.asFinished))));
}


/***/ }),

/***/ 4722:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   iu: () => (/* binding */ _referendumVotes),
/* harmony export */   jt: () => (/* binding */ _referendumInfo),
/* harmony export */   kJ: () => (/* binding */ _referendumsVotes),
/* harmony export */   tP: () => (/* binding */ referendumsInfo)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(73092);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(85037);




function votesPrev(api, referendumId) {
    return api.query.democracy['votersFor'](referendumId).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .switchMap */ .w)((votersFor) => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(votersFor),
        votersFor.length
            ? api.query.democracy['voteOf'].multi(votersFor.map((accountId) => [referendumId, accountId]))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)([]),
        api.derive.balances.votingBalances(votersFor)
    ])), (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({
        accountId,
        balance: balances[index].votingBalance || api.registry.createType('Balance'),
        isDelegating: false,
        vote: votes[index] || api.registry.createType('Vote')
    }))));
}
function extractVotes(mapped, referendumId) {
    return mapped
        .filter(([, voting]) => voting.isDirect)
        .map(([accountId, voting]) => [
        accountId,
        voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))
    ])
        .filter(([, directVotes]) => !!directVotes.length)
        .reduce((result, [accountId, votes]) => 
    // FIXME We are ignoring split votes
    votes.reduce((result, [, vote]) => {
        if (vote.isStandard) {
            result.push((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .objectSpread */ .Z)({
                accountId,
                isDelegating: false
            }, vote.asStandard));
        }
        return result;
    }, result), []);
}
function votesCurr(api, referendumId) {
    return api.query.democracy.votingOf.entries().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)((allVoting) => {
        const mapped = allVoting.map(([{ args: [accountId] }, voting]) => [accountId, voting]);
        const votes = extractVotes(mapped, referendumId);
        const delegations = mapped
            .filter(([, voting]) => voting.isDelegating)
            .map(([accountId, voting]) => [accountId, voting.asDelegating]);
        // add delegations
        delegations.forEach(([accountId, { balance, conviction, target }]) => {
            // Are we delegating to a delegator
            const toDelegator = delegations.find(([accountId]) => accountId.eq(target));
            const to = votes.find(({ accountId }) => accountId.eq(toDelegator ? toDelegator[0] : target));
            // this delegation has a target
            if (to) {
                votes.push({
                    accountId,
                    balance,
                    isDelegating: true,
                    vote: api.registry.createType('Vote', { aye: to.vote.isAye, conviction })
                });
            }
        });
        return votes;
    }));
}
function _referendumVotes(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_5__/* .memo */ .X)(instanceId, (referendum) => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        api.derive.democracy.sqrtElectorate(),
        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .isFunction */ .m)(api.query.democracy.votingOf)
            ? votesCurr(api, referendum.index)
            : votesPrev(api, referendum.index)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)(([sqrtElectorate, votes]) => (0,_util_js__WEBPACK_IMPORTED_MODULE_7__/* .calcVotes */ .pn)(sqrtElectorate, referendum, votes))));
}
function _referendumsVotes(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_5__/* .memo */ .X)(instanceId, (referendums) => referendums.length
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)(referendums.map((referendum) => api.derive.democracy._referendumVotes(referendum)))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)([]));
}
function _referendumInfo(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_5__/* .memo */ .X)(instanceId, (index, info) => {
        const status = (0,_util_js__WEBPACK_IMPORTED_MODULE_7__/* .getStatus */ .lR)(info);
        return status
            ? api.derive.democracy.preimage(status.proposal ||
                status.proposalHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)((image) => ({
                image,
                imageHash: (0,_util_js__WEBPACK_IMPORTED_MODULE_7__/* .getImageHash */ .Uc)(status),
                index: api.registry.createType('ReferendumIndex', index),
                status
            })))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null);
    });
}
function referendumsInfo(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_5__/* .memo */ .X)(instanceId, (ids) => ids.length
        ? api.query.democracy.referendumInfoOf.multi(ids).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .switchMap */ .w)((infos) => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)((infos) => infos.filter((r) => !!r)))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)([]));
}


/***/ }),

/***/ 77948:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ sqrtElectorate)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(83097);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);



function sqrtElectorate(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.query.balances.totalIssuance().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .bnSqrt */ .D)));
}


/***/ }),

/***/ 85037:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Uc: () => (/* binding */ getImageHash),
/* harmony export */   hr: () => (/* binding */ getImageHashBounded),
/* harmony export */   lR: () => (/* binding */ getStatus),
/* harmony export */   pn: () => (/* binding */ calcVotes)
/* harmony export */ });
/* unused harmony exports compareRationals, calcPassing */
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(83097);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39098);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(37173);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(26048);

function isOldInfo(info) {
    return !!info.proposalHash;
}
function isCurrentStatus(status) {
    return !!status.tally;
}
function compareRationals(n1, d1, n2, d2) {
    while (true) {
        const q1 = n1.div(d1);
        const q2 = n2.div(d2);
        if (q1.lt(q2)) {
            return true;
        }
        else if (q2.lt(q1)) {
            return false;
        }
        const r1 = n1.mod(d1);
        const r2 = n2.mod(d2);
        if (r2.isZero()) {
            return false;
        }
        else if (r1.isZero()) {
            return true;
        }
        n1 = d2;
        n2 = d1;
        d1 = r2;
        d2 = r1;
    }
}
function calcPassingOther(threshold, sqrtElectorate, { votedAye, votedNay, votedTotal }) {
    const sqrtVoters = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .bnSqrt */ .D)(votedTotal);
    return sqrtVoters.isZero()
        ? false
        : threshold.isSuperMajorityApprove
            ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate)
            : compareRationals(votedNay, sqrtElectorate, votedAye, sqrtVoters);
}
function calcPassing(threshold, sqrtElectorate, state) {
    return threshold.isSimpleMajority
        ? state.votedAye.gt(state.votedNay)
        : calcPassingOther(threshold, sqrtElectorate, state);
}
function calcVotesPrev(votesFor) {
    return votesFor.reduce((state, derived) => {
        const { balance, vote } = derived;
        const isDefault = vote.conviction.index === 0;
        const counted = balance
            .muln(isDefault ? 1 : vote.conviction.index)
            .divn(isDefault ? 10 : 1);
        if (vote.isAye) {
            state.allAye.push(derived);
            state.voteCountAye++;
            state.votedAye.iadd(counted);
        }
        else {
            state.allNay.push(derived);
            state.voteCountNay++;
            state.votedNay.iadd(counted);
        }
        state.voteCount++;
        state.votedTotal.iadd(counted);
        return state;
    }, { allAye: [], allNay: [], voteCount: 0, voteCountAye: 0, voteCountNay: 0, votedAye: new _polkadot_util__WEBPACK_IMPORTED_MODULE_1__(0), votedNay: new _polkadot_util__WEBPACK_IMPORTED_MODULE_1__(0), votedTotal: new _polkadot_util__WEBPACK_IMPORTED_MODULE_1__(0) });
}
function calcVotesCurrent(tally, votes) {
    const allAye = [];
    const allNay = [];
    votes.forEach((derived) => {
        if (derived.vote.isAye) {
            allAye.push(derived);
        }
        else {
            allNay.push(derived);
        }
    });
    return {
        allAye,
        allNay,
        voteCount: allAye.length + allNay.length,
        voteCountAye: allAye.length,
        voteCountNay: allNay.length,
        votedAye: tally.ayes,
        votedNay: tally.nays,
        votedTotal: tally.turnout
    };
}
function calcVotes(sqrtElectorate, referendum, votes) {
    const state = isCurrentStatus(referendum.status)
        ? calcVotesCurrent(referendum.status.tally, votes)
        : calcVotesPrev(votes);
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({}, state, {
        isPassing: calcPassing(referendum.status.threshold, sqrtElectorate, state),
        votes
    });
}
function getStatus(info) {
    if (info.isNone) {
        return null;
    }
    const unwrapped = info.unwrap();
    return isOldInfo(unwrapped)
        ? unwrapped
        : unwrapped.isOngoing
            ? unwrapped.asOngoing
            // done, we don't include it here... only currently active
            : null;
}
function getImageHashBounded(hash) {
    return hash.isLegacy
        ? hash.asLegacy.hash_.toHex()
        : hash.isLookup
            ? hash.asLookup.hash_.toHex()
            // for inline, use the actual Bytes hash
            : hash.isInline
                ? hash.asInline.hash.toHex()
                : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isString */ .H)(hash)
                    ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .isHex */ .vq)(hash)
                        ? hash
                        : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .stringToHex */ .$)(hash)
                    : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .isU8a */ .U)(hash)
                        ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .u8aToHex */ .c)(hash)
                        : hash.toHex();
}
function getImageHash(status) {
    return getImageHashBounded(status.proposal ||
        status.proposalHash);
}


/***/ }),

/***/ 24217:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   s: () => (/* binding */ derive)
/* harmony export */ });
/* harmony import */ var _accounts_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(93144);
/* harmony import */ var _alliance_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68297);
/* harmony import */ var _bagsList_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59808);
/* harmony import */ var _balances_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(90567);
/* harmony import */ var _bounties_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6469);
/* harmony import */ var _chain_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(36512);
/* harmony import */ var _contracts_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(15282);
/* harmony import */ var _council_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(17618);
/* harmony import */ var _crowdloan_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(24488);
/* harmony import */ var _democracy_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(70733);
/* harmony import */ var _elections_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(35543);
/* harmony import */ var _imOnline_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(68733);
/* harmony import */ var _membership_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(49070);
/* harmony import */ var _parachains_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(39163);
/* harmony import */ var _session_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(54378);
/* harmony import */ var _society_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(95956);
/* harmony import */ var _staking_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(45332);
/* harmony import */ var _technicalCommittee_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(52167);
/* harmony import */ var _treasury_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(95707);
/* harmony import */ var _tx_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(82246);




















const derive = { accounts: _accounts_index_js__WEBPACK_IMPORTED_MODULE_0__, alliance: _alliance_index_js__WEBPACK_IMPORTED_MODULE_1__, bagsList: _bagsList_index_js__WEBPACK_IMPORTED_MODULE_2__, balances: _balances_index_js__WEBPACK_IMPORTED_MODULE_3__, bounties: _bounties_index_js__WEBPACK_IMPORTED_MODULE_4__, chain: _chain_index_js__WEBPACK_IMPORTED_MODULE_5__, contracts: _contracts_index_js__WEBPACK_IMPORTED_MODULE_6__, council: _council_index_js__WEBPACK_IMPORTED_MODULE_7__, crowdloan: _crowdloan_index_js__WEBPACK_IMPORTED_MODULE_8__, democracy: _democracy_index_js__WEBPACK_IMPORTED_MODULE_9__, elections: _elections_index_js__WEBPACK_IMPORTED_MODULE_10__, imOnline: _imOnline_index_js__WEBPACK_IMPORTED_MODULE_11__, membership: _membership_index_js__WEBPACK_IMPORTED_MODULE_12__, parachains: _parachains_index_js__WEBPACK_IMPORTED_MODULE_13__, session: _session_index_js__WEBPACK_IMPORTED_MODULE_14__, society: _society_index_js__WEBPACK_IMPORTED_MODULE_15__, staking: _staking_index_js__WEBPACK_IMPORTED_MODULE_16__, technicalCommittee: _technicalCommittee_index_js__WEBPACK_IMPORTED_MODULE_17__, treasury: _treasury_index_js__WEBPACK_IMPORTED_MODULE_18__, tx: _tx_index_js__WEBPACK_IMPORTED_MODULE_19__ };


/***/ }),

/***/ 35543:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   info: () => (/* reexport safe */ _info_js__WEBPACK_IMPORTED_MODULE_0__.u)
/* harmony export */ });
/* harmony import */ var _info_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29494);



/***/ }),

/***/ 29494:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ info)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(53472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(39762);



function isSeatHolder(value) {
    return !Array.isArray(value);
}
function isCandidateTuple(value) {
    return Array.isArray(value);
}
function getAccountTuple(value) {
    return isSeatHolder(value)
        ? [value.who, value.stake]
        : value;
}
function getCandidate(value) {
    return isCandidateTuple(value)
        ? value[0]
        : value;
}
function sortAccounts([, balanceA], [, balanceB]) {
    return balanceB.cmp(balanceA);
}
function getConstants(api, elections) {
    return elections
        ? {
            candidacyBond: api.consts[elections].candidacyBond,
            desiredRunnersUp: api.consts[elections].desiredRunnersUp,
            desiredSeats: api.consts[elections].desiredMembers,
            termDuration: api.consts[elections].termDuration,
            votingBond: api.consts[elections]['votingBond'],
            votingBondBase: api.consts[elections].votingBondBase,
            votingBondFactor: api.consts[elections].votingBondFactor
        }
        : {};
}
function getModules(api) {
    const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName, 'council') || ['council'];
    const elections = api.query['phragmenElection']
        ? 'phragmenElection'
        : api.query['electionsPhragmen']
            ? 'electionsPhragmen'
            : api.query.elections
                ? 'elections'
                : null;
    return [council, elections];
}
function queryAll(api, council, elections) {
    return api.queryMulti([
        api.query[council].members,
        api.query[elections].candidates,
        api.query[elections].members,
        api.query[elections].runnersUp
    ]);
}
function queryCouncil(api, council) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)([
        api.query[council].members(),
        (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)([]),
        (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)([]),
        (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)([])
    ]);
}
/**
 * @name info
 * @returns An object containing the combined results of the storage queries for
 * all relevant election module properties.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.elections.info(({ members, candidates }) => {
 *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);
 * });
 * ```
 */
function info(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_2__/* .memo */ .X)(instanceId, () => {
        const [council, elections] = getModules(api);
        return (elections
            ? queryAll(api, council, elections)
            : queryCouncil(api, council)).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)(([councilMembers, candidates, members, runnersUp]) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .objectSpread */ .Z)({}, getConstants(api, elections), {
            candidateCount: api.registry.createType('u32', candidates.length),
            candidates: candidates.map(getCandidate),
            members: members.length
                ? members.map(getAccountTuple).sort(sortAccounts)
                : councilMembers.map((a) => [a, api.registry.createType('Balance')]),
            runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
        })));
    });
}


/***/ }),

/***/ 68733:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   receivedHeartbeats: () => (/* reexport safe */ _receivedHeartbeats_js__WEBPACK_IMPORTED_MODULE_0__.O)
/* harmony export */ });
/* harmony import */ var _receivedHeartbeats_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75917);



/***/ }),

/***/ 75917:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   O: () => (/* binding */ receivedHeartbeats)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38252);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39762);



function mapResult([result, validators, heartbeats, numBlocks]) {
    validators.forEach((validator, index) => {
        const validatorId = validator.toString();
        const blockCount = numBlocks[index];
        const hasMessage = !heartbeats[index].isEmpty;
        const prev = result[validatorId];
        if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
            result[validatorId] = {
                blockCount,
                hasMessage,
                isOnline: hasMessage || blockCount.gt(_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw)
            };
        }
    });
    return result;
}
/**
 * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session
 */
function receivedHeartbeats(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_1__/* .memo */ .X)(instanceId, () => api.query.imOnline?.receivedHeartbeats
        ? api.derive.staking.overview().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)(({ currentIndex, validators }) => (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .combineLatest */ .a)([
            (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)({}),
            (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)(validators),
            api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])),
            api.query.imOnline.authoredBlocks.multi(validators.map((address) => [currentIndex, address]))
        ])), (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)(mapResult))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)({}));
}


/***/ }),

/***/ 49070:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasProposals: () => (/* binding */ hasProposals),
/* harmony export */   members: () => (/* binding */ members),
/* harmony export */   prime: () => (/* binding */ prime),
/* harmony export */   proposal: () => (/* binding */ proposal),
/* harmony export */   proposalCount: () => (/* binding */ proposalCount),
/* harmony export */   proposalHashes: () => (/* binding */ proposalHashes),
/* harmony export */   proposals: () => (/* binding */ proposals)
/* harmony export */ });
/* harmony import */ var _collective_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66433);
/* harmony import */ var _collective_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51286);
/* harmony import */ var _collective_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(77631);

const members = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_0__/* .members */ .T)('membership');
const hasProposals = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .hasProposals */ .To)('membership');
const proposal = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .proposal */ .oL)('membership');
const proposalCount = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .proposalCount */ .P6)('membership');
const proposalHashes = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .proposalHashes */ .iB)('membership');
const proposals = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .proposals */ .$O)('membership');
const prime = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_2__/* .prime */ .F)('membership');


/***/ }),

/***/ 39163:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   info: () => (/* reexport safe */ _info_js__WEBPACK_IMPORTED_MODULE_0__.u),
/* harmony export */   overview: () => (/* reexport safe */ _overview_js__WEBPACK_IMPORTED_MODULE_1__.G)
/* harmony export */ });
/* harmony import */ var _info_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1040);
/* harmony import */ var _overview_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(78374);




/***/ }),

/***/ 1040:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ info)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85296);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43549);




function parseActive(id, active) {
    const found = active.find(([paraId]) => paraId === id);
    if (found && found[1].isSome) {
        const [collatorId, retriable] = found[1].unwrap();
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .objectSpread */ .Z)({ collatorId }, retriable.isWithRetries
            ? {
                isRetriable: true,
                retries: retriable.asWithRetries.toNumber()
            }
            : {
                isRetriable: false,
                retries: 0
            });
    }
    return null;
}
function parseCollators(id, collatorQueue) {
    return collatorQueue.map((queue) => {
        const found = queue.find(([paraId]) => paraId === id);
        return found ? found[1] : null;
    });
}
function parse(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {
    if (info.isNone) {
        return null;
    }
    return {
        active: parseActive(id, active),
        didUpdate: (0,_util_js__WEBPACK_IMPORTED_MODULE_1__/* .didUpdateToBool */ .p)(didUpdate, id),
        heads,
        id,
        info: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .objectSpread */ .Z)({ id }, info.unwrap()),
        pendingSwapId: pendingSwap.unwrapOr(null),
        relayDispatchQueue,
        retryCollators: parseCollators(id, retryQueue),
        selectedCollators: parseCollators(id, selectedThreads)
    };
}
function info(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_2__/* .memo */ .X)(instanceId, (id) => api.query['registrar'] && api.query['parachains']
        ? api.queryMulti([
            api.query['registrar']['active'],
            api.query['registrar']['retryQueue'],
            api.query['registrar']['selectedThreads'],
            api.query['parachains']['didUpdate'],
            [api.query['registrar']['paras'], id],
            [api.query['registrar']['pendingSwap'], id],
            [api.query['parachains']['heads'], id],
            [api.query['parachains']['relayDispatchQueue'], id]
        ])
            .pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)((result) => parse(api.registry.createType('ParaId', id), result)))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)(null));
}


/***/ }),

/***/ 78374:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ overview)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43549);




function parse([ids, didUpdate, relayDispatchQueueSizes, infos, pendingSwaps]) {
    return ids.map((id, index) => ({
        didUpdate: (0,_util_js__WEBPACK_IMPORTED_MODULE_0__/* .didUpdateToBool */ .p)(didUpdate, id),
        id,
        info: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .objectSpread */ .Z)({ id }, infos[index].unwrapOr(null)),
        pendingSwapId: pendingSwaps[index].unwrapOr(null),
        relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
    }));
}
function overview(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_2__/* .memo */ .X)(instanceId, () => api.query['registrar']?.['parachains'] && api.query['parachains']
        ? api.query['registrar']['parachains']().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .switchMap */ .w)((paraIds) => (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .combineLatest */ .a)([
            (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(paraIds),
            api.query['parachains']['didUpdate'](),
            api.query['parachains']['relayDispatchQueueSize'].multi(paraIds),
            api.query['registrar']['paras'].multi(paraIds),
            api.query['registrar']['pendingSwap'].multi(paraIds)
        ])), (0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .map */ .U)(parse))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)([]));
}


/***/ }),

/***/ 43549:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   p: () => (/* binding */ didUpdateToBool)
/* harmony export */ });
function didUpdateToBool(didUpdate, id) {
    return didUpdate.isSome
        ? didUpdate.unwrap().some((paraId) => paraId.eq(id))
        : false;
}


/***/ }),

/***/ 54378:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   eraLength: () => (/* reexport safe */ _progress_js__WEBPACK_IMPORTED_MODULE_2__.sC),
/* harmony export */   eraProgress: () => (/* reexport safe */ _progress_js__WEBPACK_IMPORTED_MODULE_2__.eC),
/* harmony export */   indexes: () => (/* reexport safe */ _indexes_js__WEBPACK_IMPORTED_MODULE_0__.R),
/* harmony export */   info: () => (/* reexport safe */ _info_js__WEBPACK_IMPORTED_MODULE_1__.u),
/* harmony export */   progress: () => (/* reexport safe */ _progress_js__WEBPACK_IMPORTED_MODULE_2__.YD),
/* harmony export */   sessionProgress: () => (/* reexport safe */ _progress_js__WEBPACK_IMPORTED_MODULE_2__.ND)
/* harmony export */ });
/* harmony import */ var _indexes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91932);
/* harmony import */ var _info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17820);
/* harmony import */ var _progress_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(22772);





/***/ }),

/***/ 91932:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ indexes)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85296);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(39762);


function parse([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
    return {
        activeEra,
        activeEraStart,
        currentEra,
        currentIndex,
        validatorCount
    };
}
function queryStaking(api) {
    return api.queryMulti([
        api.query.session.currentIndex,
        api.query.staking.activeEra,
        api.query.staking.currentEra,
        api.query.staking.validatorCount
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)(([currentIndex, activeOpt, currentEra, validatorCount]) => {
        const { index, start } = activeOpt.unwrapOrDefault();
        return parse([
            currentIndex,
            index,
            start,
            currentEra.unwrapOrDefault(),
            validatorCount
        ]);
    }));
}
function querySession(api) {
    return api.query.session.currentIndex().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)((currentIndex) => parse([
        currentIndex,
        api.registry.createType('EraIndex'),
        api.registry.createType('Option<Moment>'),
        api.registry.createType('EraIndex'),
        api.registry.createType('u32')
    ])));
}
function empty(api) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(parse([
        api.registry.createType('SessionIndex', 1),
        api.registry.createType('EraIndex'),
        api.registry.createType('Option<Moment>'),
        api.registry.createType('EraIndex'),
        api.registry.createType('u32')
    ]));
}
function indexes(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_2__/* .memo */ .X)(instanceId, () => api.query.session
        ? api.query.staking
            ? queryStaking(api)
            : querySession(api)
        : empty(api));
}


/***/ }),

/***/ 17820:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ info)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);



/**
 * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
 */
function info(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.derive.session.indexes().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((indexes) => {
        const sessionLength = api.consts?.babe?.epochDuration || api.registry.createType('u64', 1);
        const sessionsPerEra = api.consts?.staking?.sessionsPerEra || api.registry.createType('SessionIndex', 1);
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({
            eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(sessionLength)),
            isEpoch: !!api.query.babe,
            sessionLength,
            sessionsPerEra
        }, indexes);
    })));
}


/***/ }),

/***/ 22772:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ND: () => (/* binding */ sessionProgress),
/* harmony export */   YD: () => (/* binding */ progress),
/* harmony export */   eC: () => (/* binding */ eraProgress),
/* harmony export */   sC: () => (/* binding */ eraLength)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(85296);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);



function withProgressField(field) {
    return (instanceId, api) => (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.derive.session.progress().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((info) => info[field])));
}
function createDerive(api, info, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
    const epochStartSlot = epochIndex.mul(info.sessionLength).iadd(epochOrGenesisStartSlot);
    const sessionProgress = currentSlot.sub(epochStartSlot);
    const eraProgress = info.currentIndex.sub(activeEraStartSessionIndex).imul(info.sessionLength).iadd(sessionProgress);
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({
        eraProgress: api.registry.createType('BlockNumber', eraProgress),
        sessionProgress: api.registry.createType('BlockNumber', sessionProgress)
    }, info);
}
function queryAura(api) {
    return api.derive.session.info().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((info) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({
        eraProgress: api.registry.createType('BlockNumber'),
        sessionProgress: api.registry.createType('BlockNumber')
    }, info)));
}
function queryBabe(api) {
    return api.derive.session.info().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .switchMap */ .w)((info) => (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .combineLatest */ .a)([
        (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(info),
        // we may have no staking, but have babe (permissioned)
        api.query.staking?.erasStartSessionIndex
            ? api.queryMulti([
                api.query.babe.currentSlot,
                api.query.babe.epochIndex,
                api.query.babe.genesisSlot,
                [api.query.staking.erasStartSessionIndex, info.activeEra]
            ])
            : api.queryMulti([
                api.query.babe.currentSlot,
                api.query.babe.epochIndex,
                api.query.babe.genesisSlot
            ])
    ])), (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(([info, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [
        info, [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType('SessionIndex', 1)]
    ]));
}
/**
 * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
 */
function progress(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.query.babe
        ? queryBabe(api).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(([info, slots]) => createDerive(api, info, slots)))
        : queryAura(api));
}
const eraLength = /*#__PURE__*/ withProgressField('eraLength');
const eraProgress = /*#__PURE__*/ withProgressField('eraProgress');
const sessionProgress = /*#__PURE__*/ withProgressField('sessionProgress');


/***/ }),

/***/ 46109:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   W: () => (/* binding */ candidates)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(39762);


function getPrev(api) {
    return api.query.society.candidates().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .switchMap */ .w)((candidates) => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(candidates),
        api.query.society['suspendedCandidates'].multi(candidates.map(({ who }) => who))
    ])), (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)(([candidates, suspended]) => candidates.map(({ kind, value, who }, index) => ({
        accountId: who,
        isSuspended: suspended[index].isSome,
        kind,
        value
    }))));
}
function getCurr(api) {
    return api.query.society.candidates.entries().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)((entries) => entries
        .filter(([, opt]) => opt.isSome)
        .map(([{ args: [accountId] }, opt]) => [accountId, opt.unwrap()])
        // FIXME We are missing the new fields from the candidate record
        .map(([accountId, { bid, kind }]) => ({
        accountId,
        isSuspended: false,
        kind,
        value: bid
    }))));
}
/**
 * @description Get the candidate info for a society
 */
function candidates(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_4__/* .memo */ .X)(instanceId, () => api.query.society['suspendedCandidates'] && api.query.society.candidates.creator.meta.type.isPlain
        ? getPrev(api)
        : getCurr(api));
}


/***/ }),

/***/ 95956:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _members: () => (/* reexport safe */ _members_js__WEBPACK_IMPORTED_MODULE_3__.L),
/* harmony export */   candidates: () => (/* reexport safe */ _candidates_js__WEBPACK_IMPORTED_MODULE_0__.W),
/* harmony export */   info: () => (/* reexport safe */ _info_js__WEBPACK_IMPORTED_MODULE_1__.u),
/* harmony export */   member: () => (/* reexport safe */ _member_js__WEBPACK_IMPORTED_MODULE_2__.f),
/* harmony export */   members: () => (/* reexport safe */ _members_js__WEBPACK_IMPORTED_MODULE_3__.T)
/* harmony export */ });
/* harmony import */ var _candidates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46109);
/* harmony import */ var _info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(64298);
/* harmony import */ var _member_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99012);
/* harmony import */ var _members_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(59249);






/***/ }),

/***/ 64298:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ info)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


/**
 * @description Get the overall info for a society
 */
function info(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        api.query.society.bids(),
        api.query.society['defender']
            ? api.query.society['defender']()
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(undefined),
        api.query.society.founder(),
        api.query.society.head(),
        api.query.society['maxMembers']
            ? api.query.society['maxMembers']()
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(undefined),
        api.query.society.pot()
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)(([bids, defender, founder, head, maxMembers, pot]) => ({
        bids,
        defender: defender?.unwrapOr(undefined),
        founder: founder.unwrapOr(undefined),
        hasDefender: (defender?.isSome && head.isSome && !head.eq(defender)) || false,
        head: head.unwrapOr(undefined),
        maxMembers,
        pot
    }))));
}


/***/ }),

/***/ 99012:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ member)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


/**
 * @description Get the member info for a society
 */
function member(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (accountId) => api.derive.society._members([accountId]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)(([result]) => result)));
}


/***/ }),

/***/ 59249:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   L: () => (/* binding */ _members),
/* harmony export */   T: () => (/* binding */ members)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(96918);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39762);


function _membersPrev(api, accountIds) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)([
        (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(accountIds),
        api.query.society.payouts.multi(accountIds),
        api.query.society['strikes'].multi(accountIds),
        api.query.society.defenderVotes.multi(accountIds),
        api.query.society.suspendedMembers.multi(accountIds),
        api.query.society['vouching'].multi(accountIds)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({
        accountId,
        isDefenderVoter: defenderVotes[index].isSome,
        isSuspended: suspended[index].isTrue,
        payouts: payouts[index],
        strikes: strikes[index],
        vote: defenderVotes[index].unwrapOr(undefined),
        vouching: vouching[index].unwrapOr(undefined)
    }))));
}
function _membersCurr(api, accountIds) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)([
        (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(accountIds),
        api.query.society.members.multi(accountIds),
        api.query.society.payouts.multi(accountIds),
        api.query.society.defenderVotes.multi(accountIds),
        api.query.society.suspendedMembers.multi(accountIds)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(([accountIds, members, payouts, defenderVotes, suspendedMembers]) => accountIds
        .map((accountId, index) => members[index].isSome
        ? {
            accountId,
            isDefenderVoter: defenderVotes[index].isSome
                ? defenderVotes[index].unwrap().approve.isTrue
                : false,
            isSuspended: suspendedMembers[index].isSome,
            member: members[index].unwrap(),
            payouts: payouts[index].payouts
        }
        : null)
        .filter((m) => !!m)
        .map(({ accountId, isDefenderVoter, isSuspended, member, payouts }) => ({
        accountId,
        isDefenderVoter,
        isSuspended,
        payouts,
        strikes: member.strikes,
        vouching: member.vouching.unwrapOr(undefined)
    }))));
}
function _members(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .memo */ .X)(instanceId, (accountIds) => api.query.society.members.creator.meta.type.isMap
        ? _membersCurr(api, accountIds)
        : _membersPrev(api, accountIds));
}
/**
 * @description Get the member info for a society
 */
function members(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .memo */ .X)(instanceId, () => api.query.society.members.creator.meta.type.isMap
        ? api.query.society.members.keys().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .switchMap */ .w)((keys) => api.derive.society._members(keys.map(({ args: [accountId] }) => accountId))))
        : api.query.society.members().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .switchMap */ .w)((members) => api.derive.society._members(members))));
}


/***/ }),

/***/ 76439:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   J: () => (/* binding */ account),
/* harmony export */   M: () => (/* binding */ accounts)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38252);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39098);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39762);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(29617);



const QUERY_OPTS = {
    withDestination: true,
    withLedger: true,
    withNominations: true,
    withPrefs: true
};
function groupByEra(list) {
    return list.reduce((map, { era, value }) => {
        const key = era.toString();
        map[key] = (map[key] || _polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw).add(value.unwrap());
        return map;
    }, {});
}
function calculateUnlocking(api, stakingLedger, sessionInfo) {
    const results = Object
        .entries(groupByEra((stakingLedger?.unlocking || []).filter(({ era }) => era.unwrap().gt(sessionInfo.activeEra))))
        .map(([eraString, value]) => ({
        remainingEras: new _polkadot_util__WEBPACK_IMPORTED_MODULE_1__(eraString).isub(sessionInfo.activeEra),
        value: api.registry.createType('Balance', value)
    }));
    return results.length
        ? results
        : undefined;
}
function redeemableSum(api, stakingLedger, sessionInfo) {
    return api.registry.createType('Balance', (stakingLedger?.unlocking || []).reduce((total, { era, value }) => {
        // aligns with https://github.com/paritytech/substrate/blob/fdfdc73f9e64dc47934b72eb9af3e1989e4ba699/frame/staking/src/pallet/mod.rs#L973-L975
        // (ensure currentEra >= era passed, as per https://github.com/paritytech/substrate/blob/fdfdc73f9e64dc47934b72eb9af3e1989e4ba699/frame/staking/src/lib.rs#L477-L494)
        // NOTE: Previously we used activeEra >= era, which is incorrect for the last session
        return era.unwrap().gt(sessionInfo.currentEra)
            ? total
            : total.iadd(value.unwrap());
    }, new _polkadot_util__WEBPACK_IMPORTED_MODULE_1__(0)));
}
function parseResult(api, sessionInfo, keys, query) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({}, keys, query, {
        redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),
        unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)
    });
}
/**
 * @description From a list of stashes, fill in all the relevant staking details
 */
function accounts(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .memo */ .X)(instanceId, (accountIds, opts = QUERY_OPTS) => api.derive.session.info().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .switchMap */ .w)((sessionInfo) => (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .combineLatest */ .a)([
        api.derive.staking.keysMulti(accountIds),
        api.derive.staking.queryMulti(accountIds, opts)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .map */ .U)(([keys, queries]) => queries.map((q, index) => parseResult(api, sessionInfo, keys[index], q)))))));
}
/**
 * @description From a stash, retrieve the controllerId and fill in all the relevant staking details
 */
const account = /*#__PURE__*/ (0,_util_index_js__WEBPACK_IMPORTED_MODULE_7__/* .firstMemo */ .u)((api, accountId, opts) => api.derive.staking.accounts([accountId], opts));


/***/ }),

/***/ 4254:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G9: () => (/* binding */ setEraCache),
/* harmony export */   HU: () => (/* binding */ getEraCache),
/* harmony export */   Qk: () => (/* binding */ getEraMultiCache),
/* harmony export */   kG: () => (/* binding */ setEraMultiCache),
/* harmony export */   tX: () => (/* binding */ filterCachedEras)
/* harmony export */ });
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48314);

function getEraCache(CACHE_KEY, era, withActive) {
    const cacheKey = `${CACHE_KEY}-${era.toString()}`;
    return [
        cacheKey,
        withActive
            ? undefined
            : _util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .deriveCache */ .G.get(cacheKey)
    ];
}
function getEraMultiCache(CACHE_KEY, eras, withActive) {
    const cached = withActive
        ? []
        : eras
            .map((e) => _util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .deriveCache */ .G.get(`${CACHE_KEY}-${e.toString()}`))
            .filter((v) => !!v);
    return cached;
}
function setEraCache(cacheKey, withActive, value) {
    !withActive && _util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .deriveCache */ .G.set(cacheKey, value);
    return value;
}
function setEraMultiCache(CACHE_KEY, withActive, values) {
    !withActive && values.forEach((v) => _util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .deriveCache */ .G.set(`${CACHE_KEY}-${v.era.toString()}`, v));
    return values;
}
function filterCachedEras(eras, cached, query) {
    return eras
        .map((e) => cached.find(({ era }) => e.eq(era)) ||
        query.find(({ era }) => e.eq(era)))
        .filter((e) => !!e);
}


/***/ }),

/***/ 99422:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   e: () => (/* binding */ currentPoints)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96918);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


/**
 * @description Retrieve the staking overview, including elected and points earned
 */
function currentPoints(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.derive.session.indexes().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)(({ activeEra }) => api.query.staking.erasRewardPoints(activeEra))));
}


/***/ }),

/***/ 69041:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   W: () => (/* binding */ electedInfo)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71833);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39762);



const DEFAULT_FLAGS = { withController: true, withExposure: true, withPrefs: true };
function combineAccounts(nextElected, validators) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .arrayFlatten */ .a)([nextElected, validators.filter((v) => !nextElected.find((n) => n.eq(v)))]);
}
function electedInfo(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_1__/* .memo */ .X)(instanceId, (flags = DEFAULT_FLAGS) => api.derive.staking.validators().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)(({ nextElected, validators }) => api.derive.staking.queryMulti(combineAccounts(nextElected, validators), flags).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)((info) => ({
        info,
        nextElected,
        validators
    }))))));
}


/***/ }),

/***/ 30525:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Lc: () => (/* binding */ _eraExposure),
/* harmony export */   MY: () => (/* binding */ erasExposure),
/* harmony export */   Vb: () => (/* binding */ _erasExposure),
/* harmony export */   bj: () => (/* binding */ eraExposure)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4254);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9696);




const CACHE_KEY = 'eraExposure';
function mapStakers(era, stakers) {
    const nominators = {};
    const validators = {};
    stakers.forEach(([key, exposure]) => {
        const validatorId = key.args[1].toString();
        validators[validatorId] = exposure;
        exposure.others.forEach(({ who }, validatorIndex) => {
            const nominatorId = who.toString();
            nominators[nominatorId] = nominators[nominatorId] || [];
            nominators[nominatorId].push({ validatorId, validatorIndex });
        });
    });
    return { era, nominators, validators };
}
function _eraExposure(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (era, withActive = false) => {
        const [cacheKey, cached] = (0,_cache_js__WEBPACK_IMPORTED_MODULE_1__/* .getEraCache */ .HU)(CACHE_KEY, era, withActive);
        return cached
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(cached)
            : api.query.staking.erasStakersClipped.entries(era).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)((r) => (0,_cache_js__WEBPACK_IMPORTED_MODULE_1__/* .setEraCache */ .G9)(cacheKey, withActive, mapStakers(era, r))));
    });
}
const eraExposure = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_4__/* .singleEra */ .K2)('_eraExposure');
const _erasExposure = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_4__/* .combineEras */ .cu)('_eraExposure');
const erasExposure = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_4__/* .erasHistoricApply */ .A)('_erasExposure');


/***/ }),

/***/ 25794:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   F: () => (/* binding */ erasHistoric)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(38252);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);



function erasHistoric(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (withActive) => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        api.query.staking.activeEra(),
        api.consts.staking.historyDepth
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(api.consts.staking.historyDepth)
            : api.query.staking['historyDepth']()
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)(([activeEraOpt, historyDepth]) => {
        const result = [];
        const max = historyDepth.toNumber();
        const activeEra = activeEraOpt.unwrapOrDefault().index;
        let lastEra = activeEra;
        while (lastEra.gte(_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .BN_ZERO */ .nw) && (result.length < max)) {
            if ((lastEra !== activeEra) || (withActive === true)) {
                result.push(api.registry.createType('EraIndex', lastEra));
            }
            lastEra = lastEra.sub(_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .BN_ONE */ .If);
        }
        // go from oldest to newest
        return result.reverse();
    })));
}


/***/ }),

/***/ 56384:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   i: () => (/* binding */ erasPoints),
/* harmony export */   m: () => (/* binding */ _erasPoints)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38252);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39762);
/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4254);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9696);





const CACHE_KEY = 'eraPoints';
function mapValidators({ individual }) {
    return [...individual.entries()]
        .filter(([, points]) => points.gt(_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw))
        .reduce((result, [validatorId, points]) => {
        result[validatorId.toString()] = points;
        return result;
    }, {});
}
function mapPoints(eras, points) {
    return eras.map((era, index) => ({
        era,
        eraPoints: points[index].total,
        validators: mapValidators(points[index])
    }));
}
function _erasPoints(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_1__/* .memo */ .X)(instanceId, (eras, withActive) => {
        if (!eras.length) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)([]);
        }
        const cached = (0,_cache_js__WEBPACK_IMPORTED_MODULE_3__/* .getEraMultiCache */ .Qk)(CACHE_KEY, eras, withActive);
        const remaining = (0,_util_js__WEBPACK_IMPORTED_MODULE_4__/* .filterEras */ .NT)(eras, cached);
        return !remaining.length
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(cached)
            : api.query.staking.erasRewardPoints.multi(remaining).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)((p) => (0,_cache_js__WEBPACK_IMPORTED_MODULE_3__/* .filterCachedEras */ .tX)(eras, cached, (0,_cache_js__WEBPACK_IMPORTED_MODULE_3__/* .setEraMultiCache */ .kG)(CACHE_KEY, withActive, mapPoints(remaining, p)))));
    });
}
const erasPoints = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_4__/* .erasHistoricApply */ .A)('_erasPoints');


/***/ }),

/***/ 5457:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Gv: () => (/* binding */ _erasPrefs),
/* harmony export */   Zo: () => (/* binding */ _eraPrefs),
/* harmony export */   eI: () => (/* binding */ eraPrefs),
/* harmony export */   tI: () => (/* binding */ erasPrefs)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4254);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9696);




const CACHE_KEY = 'eraPrefs';
function mapPrefs(era, all) {
    const validators = {};
    all.forEach(([key, prefs]) => {
        validators[key.args[1].toString()] = prefs;
    });
    return { era, validators };
}
function _eraPrefs(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (era, withActive) => {
        const [cacheKey, cached] = (0,_cache_js__WEBPACK_IMPORTED_MODULE_1__/* .getEraCache */ .HU)(CACHE_KEY, era, withActive);
        return cached
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(cached)
            : api.query.staking.erasValidatorPrefs.entries(era).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)((r) => (0,_cache_js__WEBPACK_IMPORTED_MODULE_1__/* .setEraCache */ .G9)(cacheKey, withActive, mapPrefs(era, r))));
    });
}
const eraPrefs = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_4__/* .singleEra */ .K2)('_eraPrefs');
const _erasPrefs = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_4__/* .combineEras */ .cu)('_eraPrefs');
const erasPrefs = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_4__/* .erasHistoricApply */ .A)('_erasPrefs');


/***/ }),

/***/ 30610:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ _erasRewards),
/* harmony export */   I: () => (/* binding */ erasRewards)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4254);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9696);




const CACHE_KEY = 'eraRewards';
function mapRewards(eras, optRewards) {
    return eras.map((era, index) => ({
        era,
        eraReward: optRewards[index].unwrapOrDefault()
    }));
}
function _erasRewards(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (eras, withActive) => {
        if (!eras.length) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)([]);
        }
        const cached = (0,_cache_js__WEBPACK_IMPORTED_MODULE_2__/* .getEraMultiCache */ .Qk)(CACHE_KEY, eras, withActive);
        const remaining = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__/* .filterEras */ .NT)(eras, cached);
        if (!remaining.length) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(cached);
        }
        return api.query.staking.erasValidatorReward.multi(remaining).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .map */ .U)((r) => (0,_cache_js__WEBPACK_IMPORTED_MODULE_2__/* .filterCachedEras */ .tX)(eras, cached, (0,_cache_js__WEBPACK_IMPORTED_MODULE_2__/* .setEraMultiCache */ .kG)(CACHE_KEY, withActive, mapRewards(remaining, r)))));
    });
}
const erasRewards = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_3__/* .erasHistoricApply */ .A)('_erasRewards');


/***/ }),

/***/ 33276:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   X9: () => (/* binding */ eraSlashes),
/* harmony export */   a7: () => (/* binding */ _eraSlashes),
/* harmony export */   hq: () => (/* binding */ _erasSlashes),
/* harmony export */   o8: () => (/* binding */ erasSlashes)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4254);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9696);




const CACHE_KEY = 'eraSlashes';
function mapSlashes(era, noms, vals) {
    const nominators = {};
    const validators = {};
    noms.forEach(([key, optBalance]) => {
        nominators[key.args[1].toString()] = optBalance.unwrap();
    });
    vals.forEach(([key, optRes]) => {
        validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
    });
    return { era, nominators, validators };
}
function _eraSlashes(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (era, withActive) => {
        const [cacheKey, cached] = (0,_cache_js__WEBPACK_IMPORTED_MODULE_1__/* .getEraCache */ .HU)(CACHE_KEY, era, withActive);
        return cached
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(cached)
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .combineLatest */ .a)([
                api.query.staking.nominatorSlashInEra.entries(era),
                api.query.staking.validatorSlashInEra.entries(era)
            ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .map */ .U)(([n, v]) => (0,_cache_js__WEBPACK_IMPORTED_MODULE_1__/* .setEraCache */ .G9)(cacheKey, withActive, mapSlashes(era, n, v))));
    });
}
const eraSlashes = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_5__/* .singleEra */ .K2)('_eraSlashes');
const _erasSlashes = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_5__/* .combineEras */ .cu)('_eraSlashes');
const erasSlashes = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_5__/* .erasHistoricApply */ .A)('_erasSlashes');


/***/ }),

/***/ 45332:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _eraExposure: () => (/* reexport safe */ _erasExposure_js__WEBPACK_IMPORTED_MODULE_3__.Lc),
/* harmony export */   _eraPrefs: () => (/* reexport safe */ _erasPrefs_js__WEBPACK_IMPORTED_MODULE_6__.Zo),
/* harmony export */   _eraSlashes: () => (/* reexport safe */ _erasSlashes_js__WEBPACK_IMPORTED_MODULE_8__.a7),
/* harmony export */   _erasExposure: () => (/* reexport safe */ _erasExposure_js__WEBPACK_IMPORTED_MODULE_3__.Vb),
/* harmony export */   _erasPoints: () => (/* reexport safe */ _erasPoints_js__WEBPACK_IMPORTED_MODULE_5__.m),
/* harmony export */   _erasPrefs: () => (/* reexport safe */ _erasPrefs_js__WEBPACK_IMPORTED_MODULE_6__.Gv),
/* harmony export */   _erasRewards: () => (/* reexport safe */ _erasRewards_js__WEBPACK_IMPORTED_MODULE_7__.A),
/* harmony export */   _erasSlashes: () => (/* reexport safe */ _erasSlashes_js__WEBPACK_IMPORTED_MODULE_8__.hq),
/* harmony export */   _ownExposures: () => (/* reexport safe */ _ownExposure_js__WEBPACK_IMPORTED_MODULE_11__.oM),
/* harmony export */   _ownSlashes: () => (/* reexport safe */ _ownSlashes_js__WEBPACK_IMPORTED_MODULE_12__.MY),
/* harmony export */   _stakerExposures: () => (/* reexport safe */ _stakerExposure_js__WEBPACK_IMPORTED_MODULE_14__.sD),
/* harmony export */   _stakerPoints: () => (/* reexport safe */ _stakerPoints_js__WEBPACK_IMPORTED_MODULE_15__._),
/* harmony export */   _stakerPrefs: () => (/* reexport safe */ _stakerPrefs_js__WEBPACK_IMPORTED_MODULE_16__.y),
/* harmony export */   _stakerRewards: () => (/* reexport safe */ _stakerRewards_js__WEBPACK_IMPORTED_MODULE_17__.lW),
/* harmony export */   _stakerRewardsEras: () => (/* reexport safe */ _stakerRewards_js__WEBPACK_IMPORTED_MODULE_17__.I_),
/* harmony export */   _stakerSlashes: () => (/* reexport safe */ _stakerSlashes_js__WEBPACK_IMPORTED_MODULE_18__.z),
/* harmony export */   account: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_0__.J),
/* harmony export */   accounts: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_0__.M),
/* harmony export */   currentPoints: () => (/* reexport safe */ _currentPoints_js__WEBPACK_IMPORTED_MODULE_1__.e),
/* harmony export */   electedInfo: () => (/* reexport safe */ _electedInfo_js__WEBPACK_IMPORTED_MODULE_2__.W),
/* harmony export */   eraExposure: () => (/* reexport safe */ _erasExposure_js__WEBPACK_IMPORTED_MODULE_3__.bj),
/* harmony export */   eraPrefs: () => (/* reexport safe */ _erasPrefs_js__WEBPACK_IMPORTED_MODULE_6__.eI),
/* harmony export */   eraSlashes: () => (/* reexport safe */ _erasSlashes_js__WEBPACK_IMPORTED_MODULE_8__.X9),
/* harmony export */   erasExposure: () => (/* reexport safe */ _erasExposure_js__WEBPACK_IMPORTED_MODULE_3__.MY),
/* harmony export */   erasHistoric: () => (/* reexport safe */ _erasHistoric_js__WEBPACK_IMPORTED_MODULE_4__.F),
/* harmony export */   erasPoints: () => (/* reexport safe */ _erasPoints_js__WEBPACK_IMPORTED_MODULE_5__.i),
/* harmony export */   erasPrefs: () => (/* reexport safe */ _erasPrefs_js__WEBPACK_IMPORTED_MODULE_6__.tI),
/* harmony export */   erasRewards: () => (/* reexport safe */ _erasRewards_js__WEBPACK_IMPORTED_MODULE_7__.I),
/* harmony export */   erasSlashes: () => (/* reexport safe */ _erasSlashes_js__WEBPACK_IMPORTED_MODULE_8__.o8),
/* harmony export */   keys: () => (/* reexport safe */ _keys_js__WEBPACK_IMPORTED_MODULE_9__.X),
/* harmony export */   keysMulti: () => (/* reexport safe */ _keys_js__WEBPACK_IMPORTED_MODULE_9__.Y),
/* harmony export */   nextElected: () => (/* reexport safe */ _validators_js__WEBPACK_IMPORTED_MODULE_20__.Q),
/* harmony export */   overview: () => (/* reexport safe */ _overview_js__WEBPACK_IMPORTED_MODULE_10__.G),
/* harmony export */   ownExposure: () => (/* reexport safe */ _ownExposure_js__WEBPACK_IMPORTED_MODULE_11__.RJ),
/* harmony export */   ownExposures: () => (/* reexport safe */ _ownExposure_js__WEBPACK_IMPORTED_MODULE_11__.sj),
/* harmony export */   ownSlash: () => (/* reexport safe */ _ownSlashes_js__WEBPACK_IMPORTED_MODULE_12__.sk),
/* harmony export */   ownSlashes: () => (/* reexport safe */ _ownSlashes_js__WEBPACK_IMPORTED_MODULE_12__.YO),
/* harmony export */   query: () => (/* reexport safe */ _query_js__WEBPACK_IMPORTED_MODULE_13__.I),
/* harmony export */   queryMulti: () => (/* reexport safe */ _query_js__WEBPACK_IMPORTED_MODULE_13__.h),
/* harmony export */   stakerExposure: () => (/* reexport safe */ _stakerExposure_js__WEBPACK_IMPORTED_MODULE_14__.If),
/* harmony export */   stakerExposures: () => (/* reexport safe */ _stakerExposure_js__WEBPACK_IMPORTED_MODULE_14__._u),
/* harmony export */   stakerPoints: () => (/* reexport safe */ _stakerPoints_js__WEBPACK_IMPORTED_MODULE_15__.D),
/* harmony export */   stakerPrefs: () => (/* reexport safe */ _stakerPrefs_js__WEBPACK_IMPORTED_MODULE_16__.X),
/* harmony export */   stakerRewards: () => (/* reexport safe */ _stakerRewards_js__WEBPACK_IMPORTED_MODULE_17__.oD),
/* harmony export */   stakerRewardsMulti: () => (/* reexport safe */ _stakerRewards_js__WEBPACK_IMPORTED_MODULE_17__.Ns),
/* harmony export */   stakerRewardsMultiEras: () => (/* reexport safe */ _stakerRewards_js__WEBPACK_IMPORTED_MODULE_17__.Lf),
/* harmony export */   stakerSlashes: () => (/* reexport safe */ _stakerSlashes_js__WEBPACK_IMPORTED_MODULE_18__.t),
/* harmony export */   stashes: () => (/* reexport safe */ _stashes_js__WEBPACK_IMPORTED_MODULE_19__.f),
/* harmony export */   validators: () => (/* reexport safe */ _validators_js__WEBPACK_IMPORTED_MODULE_20__.z),
/* harmony export */   waitingInfo: () => (/* reexport safe */ _waitingInfo_js__WEBPACK_IMPORTED_MODULE_21__.u)
/* harmony export */ });
/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(76439);
/* harmony import */ var _currentPoints_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(99422);
/* harmony import */ var _electedInfo_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(69041);
/* harmony import */ var _erasExposure_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(30525);
/* harmony import */ var _erasHistoric_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(25794);
/* harmony import */ var _erasPoints_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(56384);
/* harmony import */ var _erasPrefs_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5457);
/* harmony import */ var _erasRewards_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(30610);
/* harmony import */ var _erasSlashes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(33276);
/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(56011);
/* harmony import */ var _overview_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(4670);
/* harmony import */ var _ownExposure_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(30711);
/* harmony import */ var _ownSlashes_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(54120);
/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(64869);
/* harmony import */ var _stakerExposure_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(30461);
/* harmony import */ var _stakerPoints_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(91082);
/* harmony import */ var _stakerPrefs_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(12968);
/* harmony import */ var _stakerRewards_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(84994);
/* harmony import */ var _stakerSlashes_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(47808);
/* harmony import */ var _stashes_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(4448);
/* harmony import */ var _validators_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(53748);
/* harmony import */ var _waitingInfo_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(38081);
























/***/ }),

/***/ 56011:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   X: () => (/* binding */ keys),
/* harmony export */   Y: () => (/* binding */ keysMulti)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29617);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39762);


function extractsIds(stashId, queuedKeys, nextKeys) {
    const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [undefined, []])[1];
    const nextSessionIds = nextKeys.unwrapOr([]);
    return {
        nextSessionIds: Array.isArray(nextSessionIds)
            ? nextSessionIds
            : [...nextSessionIds.values()],
        sessionIds: Array.isArray(sessionIds)
            ? sessionIds
            : [...sessionIds.values()]
    };
}
const keys = /*#__PURE__*/ (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .firstMemo */ .u)((api, stashId) => api.derive.staking.keysMulti([stashId]));
function keysMulti(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_1__/* .memo */ .X)(instanceId, (stashIds) => stashIds.length
        ? api.query.session.queuedKeys().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)((queuedKeys) => (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .combineLatest */ .a)([
            (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)(queuedKeys),
            api.consts['session']?.['dedupKeyPrefix']
                ? api.query.session.nextKeys.multi(stashIds.map((s) => [api.consts['session']['dedupKeyPrefix'], s]))
                : (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .combineLatest */ .a)(stashIds.map((s) => api.query.session.nextKeys(s)))
        ])), (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .map */ .U)(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index]))))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)([]));
}


/***/ }),

/***/ 4670:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ overview)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(53472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);



/**
 * @description Retrieve the staking overview, including elected and points earned
 */
function overview(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        api.derive.session.indexes(),
        api.derive.staking.validators()
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(([indexes, { nextElected, validators }]) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .objectSpread */ .Z)({}, indexes, {
        nextElected,
        validators
    }))));
}


/***/ }),

/***/ 30711:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RJ: () => (/* binding */ ownExposure),
/* harmony export */   oM: () => (/* binding */ _ownExposures),
/* harmony export */   sj: () => (/* binding */ ownExposures)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85296);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(29617);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9696);



function _ownExposures(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (accountId, eras, _withActive) => eras.length
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
            (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)(eras.map((e) => api.query.staking.erasStakersClipped(e, accountId))),
            (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)(eras.map((e) => api.query.staking.erasStakers(e, accountId)))
        ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(([clp, exp]) => eras.map((era, index) => ({ clipped: clp[index], era, exposure: exp[index] }))))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)([]));
}
const ownExposure = /*#__PURE__*/ (0,_util_index_js__WEBPACK_IMPORTED_MODULE_4__/* .firstMemo */ .u)((api, accountId, era) => api.derive.staking._ownExposures(accountId, [era], true));
const ownExposures = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_5__/* .erasHistoricApplyAccount */ .Jr)('_ownExposures');


/***/ }),

/***/ 54120:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MY: () => (/* binding */ _ownSlashes),
/* harmony export */   YO: () => (/* binding */ ownSlashes),
/* harmony export */   sk: () => (/* binding */ ownSlash)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85296);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(29617);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9696);



function _ownSlashes(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (accountId, eras, _withActive) => eras.length
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
            (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)(eras.map((e) => api.query.staking.validatorSlashInEra(e, accountId))),
            (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)(eras.map((e) => api.query.staking.nominatorSlashInEra(e, accountId)))
        ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(([vals, noms]) => eras.map((era, index) => ({
            era,
            total: vals[index].isSome
                ? vals[index].unwrap()[1]
                : noms[index].unwrapOrDefault()
        }))))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)([]));
}
const ownSlash = /*#__PURE__*/ (0,_util_index_js__WEBPACK_IMPORTED_MODULE_4__/* .firstMemo */ .u)((api, accountId, era) => api.derive.staking._ownSlashes(accountId, [era], true));
const ownSlashes = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_5__/* .erasHistoricApplyAccount */ .Jr)('_ownSlashes');


/***/ }),

/***/ 64869:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I: () => (/* binding */ query),
/* harmony export */   h: () => (/* binding */ queryMulti)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96918);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(29617);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(39762);


function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
    return {
        accountId: stashId,
        controllerId: controllerIdOpt?.unwrapOr(null) || null,
        exposure,
        nominators: nominatorsOpt.isSome
            ? nominatorsOpt.unwrap().targets
            : [],
        rewardDestination,
        stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
        stashId,
        validatorPrefs
    };
}
function getLedgers(api, optIds, { withLedger = false }) {
    const ids = optIds
        .filter((o) => withLedger && !!o && o.isSome)
        .map((o) => o.unwrap());
    const emptyLed = api.registry.createType('Option<StakingLedger>');
    return (ids.length
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)(ids.map((s) => api.query.staking.ledger(s)))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)([])).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)((optLedgers) => {
        let offset = -1;
        return optIds.map((o) => o && o.isSome
            ? optLedgers[++offset] || emptyLed
            : emptyLed);
    }));
}
function getStashInfo(api, stashIds, activeEra, { withController, withDestination, withExposure, withLedger, withNominations, withPrefs }) {
    const emptyNoms = api.registry.createType('Option<Nominations>');
    const emptyRewa = api.registry.createType('RewardDestination');
    const emptyExpo = api.registry.createType('Exposure');
    const emptyPrefs = api.registry.createType('ValidatorPrefs');
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)([
        withController || withLedger
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)(stashIds.map((s) => api.query.staking.bonded(s)))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(stashIds.map(() => null)),
        withNominations
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)(stashIds.map((s) => api.query.staking.nominators(s)))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(stashIds.map(() => emptyNoms)),
        withDestination
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)(stashIds.map((s) => api.query.staking.payee(s)))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(stashIds.map(() => emptyRewa)),
        withPrefs
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)(stashIds.map((s) => api.query.staking.validators(s)))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(stashIds.map(() => emptyPrefs)),
        withExposure
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)(stashIds.map((s) => api.query.staking.erasStakers(activeEra, s)))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(stashIds.map(() => emptyExpo))
    ]);
}
function getBatch(api, activeEra, stashIds, flags) {
    return getStashInfo(api, stashIds, activeEra, flags).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .switchMap */ .w)(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)((stakingLedgerOpts) => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
}
/**
 * @description From a stash, retrieve the controllerId and all relevant details
 */
const query = /*#__PURE__*/ (0,_util_index_js__WEBPACK_IMPORTED_MODULE_4__/* .firstMemo */ .u)((api, accountId, flags) => api.derive.staking.queryMulti([accountId], flags));
function queryMulti(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_5__/* .memo */ .X)(instanceId, (accountIds, flags) => api.derive.session.indexes().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .switchMap */ .w)(({ activeEra }) => {
        const stashIds = accountIds.map((a) => api.registry.createType('AccountId', a));
        return stashIds.length
            ? getBatch(api, activeEra, stashIds, flags)
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)([]);
    })));
}


/***/ }),

/***/ 30461:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   If: () => (/* binding */ stakerExposure),
/* harmony export */   _u: () => (/* binding */ stakerExposures),
/* harmony export */   sD: () => (/* binding */ _stakerExposures)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96918);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(29617);


function _stakerExposures(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (accountIds, eras, withActive = false) => {
        const stakerIds = accountIds.map((a) => api.registry.createType('AccountId', a).toString());
        return api.derive.staking._erasExposure(eras, withActive).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((exposures) => stakerIds.map((stakerId) => exposures.map(({ era, nominators: allNominators, validators: allValidators }) => {
            const isValidator = !!allValidators[stakerId];
            const validators = {};
            const nominating = allNominators[stakerId] || [];
            if (isValidator) {
                validators[stakerId] = allValidators[stakerId];
            }
            else if (nominating) {
                nominating.forEach(({ validatorId }) => {
                    validators[validatorId] = allValidators[validatorId];
                });
            }
            return { era, isEmpty: !Object.keys(validators).length, isValidator, nominating, validators };
        }))));
    });
}
function stakerExposures(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)((eras) => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
}
const stakerExposure = /*#__PURE__*/ (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .firstMemo */ .u)((api, accountId, withActive) => api.derive.staking.stakerExposures([accountId], withActive));


/***/ }),

/***/ 91082:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ stakerPoints),
/* harmony export */   _: () => (/* binding */ _stakerPoints)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9696);



function _stakerPoints(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (accountId, eras, withActive) => {
        const stakerId = api.registry.createType('AccountId', accountId).toString();
        return api.derive.staking._erasPoints(eras, withActive).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((points) => points.map(({ era, eraPoints, validators }) => ({
            era,
            eraPoints,
            points: validators[stakerId] || api.registry.createType('RewardPoint')
        }))));
    });
}
const stakerPoints = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_2__/* .erasHistoricApplyAccount */ .Jr)('_stakerPoints');


/***/ }),

/***/ 12968:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   X: () => (/* binding */ stakerPrefs),
/* harmony export */   y: () => (/* binding */ _stakerPrefs)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9696);



function _stakerPrefs(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (accountId, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map((e) => [e, accountId])).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((all) => all.map((validatorPrefs, index) => ({
        era: eras[index],
        validatorPrefs
    })))));
}
const stakerPrefs = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_2__/* .erasHistoricApplyAccount */ .Jr)('_stakerPrefs');


/***/ }),

/***/ 84994:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I_: () => (/* binding */ _stakerRewardsEras),
/* harmony export */   Lf: () => (/* binding */ stakerRewardsMultiEras),
/* harmony export */   Ns: () => (/* binding */ stakerRewardsMulti),
/* harmony export */   lW: () => (/* binding */ _stakerRewards),
/* harmony export */   oD: () => (/* binding */ stakerRewards)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38252);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53472);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(39762);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(29617);



function extractCompatRewards(ledger) {
    return ledger
        ? (ledger.legacyClaimedRewards ||
            ledger.claimedRewards)
        : [];
}
function parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {
    return exposures.map(({ era, isEmpty, isValidator, nominating, validators: eraValidators }) => {
        const { eraPoints, validators: allValPoints } = erasPoints.find((p) => p.era.eq(era)) || { eraPoints: _polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw, validators: {} };
        const { eraReward } = erasRewards.find((r) => r.era.eq(era)) || { eraReward: api.registry.createType('Balance') };
        const { validators: allValPrefs } = erasPrefs.find((p) => p.era.eq(era)) || { validators: {} };
        const validators = {};
        const stakerId = stashId.toString();
        Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
            const valPoints = allValPoints[validatorId] || _polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw;
            const valComm = allValPrefs[validatorId]?.commission.unwrap() || _polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw;
            const expTotal = exposure.total?.unwrap() || _polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw;
            let avail = _polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw;
            let value;
            if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
                avail = eraReward.mul(valPoints).div(eraPoints);
                const valCut = valComm.mul(avail).div(_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_BILLION */ .ed);
                let staked;
                if (validatorId === stakerId) {
                    staked = exposure.own.unwrap();
                }
                else {
                    const stakerExp = exposure.others.find(({ who }) => who.eq(stakerId));
                    staked = stakerExp
                        ? stakerExp.value.unwrap()
                        : _polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw;
                }
                value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : _polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .BN_ZERO */ .nw);
            }
            validators[validatorId] = {
                total: api.registry.createType('Balance', avail),
                value: api.registry.createType('Balance', value)
            };
        });
        return {
            era,
            eraReward,
            isEmpty,
            isValidator,
            nominating,
            validators
        };
    });
}
function allUniqValidators(rewards) {
    return rewards.reduce(([all, perStash], rewards) => {
        const uniq = [];
        perStash.push(uniq);
        rewards.forEach(({ validators }) => Object.keys(validators).forEach((validatorId) => {
            if (!uniq.includes(validatorId)) {
                uniq.push(validatorId);
                if (!all.includes(validatorId)) {
                    all.push(validatorId);
                }
            }
        }));
        return [all, perStash];
    }, [[], []]);
}
function removeClaimed(validators, queryValidators, reward) {
    const rm = [];
    Object.keys(reward.validators).forEach((validatorId) => {
        const index = validators.indexOf(validatorId);
        if (index !== -1) {
            const valLedger = queryValidators[index].stakingLedger;
            if (extractCompatRewards(valLedger).some((e) => reward.era.eq(e))) {
                rm.push(validatorId);
            }
        }
    });
    rm.forEach((validatorId) => {
        delete reward.validators[validatorId];
    });
}
function filterRewards(eras, valInfo, { rewards, stakingLedger }) {
    const filter = eras.filter((e) => !extractCompatRewards(stakingLedger).some((s) => s.eq(e)));
    const validators = valInfo.map(([v]) => v);
    const queryValidators = valInfo.map(([, q]) => q);
    return rewards
        .filter(({ isEmpty }) => !isEmpty)
        .filter((reward) => {
        if (!filter.some((e) => reward.era.eq(e))) {
            return false;
        }
        removeClaimed(validators, queryValidators, reward);
        return true;
    })
        .filter(({ validators }) => Object.keys(validators).length !== 0)
        .map((reward) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .objectSpread */ .Z)({}, reward, {
        nominators: reward.nominating.filter((n) => reward.validators[n.validatorId])
    }));
}
function _stakerRewardsEras(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_2__/* .memo */ .X)(instanceId, (eras, withActive = false) => (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .combineLatest */ .a)([
        api.derive.staking._erasPoints(eras, withActive),
        api.derive.staking._erasPrefs(eras, withActive),
        api.derive.staking._erasRewards(eras, withActive)
    ]));
}
function _stakerRewards(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_2__/* .memo */ .X)(instanceId, (accountIds, eras, withActive = false) => (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .combineLatest */ .a)([
        api.derive.staking.queryMulti(accountIds, { withLedger: true }),
        api.derive.staking._stakerExposures(accountIds, eras, withActive),
        api.derive.staking._stakerRewardsEras(eras, withActive)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .switchMap */ .w)(([queries, exposures, erasResult]) => {
        const allRewards = queries.map(({ stakingLedger, stashId }, index) => (!stashId || !stakingLedger)
            ? []
            : parseRewards(api, stashId, erasResult, exposures[index]));
        if (withActive) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(allRewards);
        }
        const [allValidators, stashValidators] = allUniqValidators(allRewards);
        return api.derive.staking.queryMulti(allValidators, { withLedger: true }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .map */ .U)((queriedVals) => queries.map(({ stakingLedger }, index) => filterRewards(eras, stashValidators[index]
            .map((validatorId) => [
            validatorId,
            queriedVals.find((q) => q.accountId.eq(validatorId))
        ])
            .filter((v) => !!v[1]), {
            rewards: allRewards[index],
            stakingLedger
        }))));
    })));
}
const stakerRewards = /*#__PURE__*/ (0,_util_index_js__WEBPACK_IMPORTED_MODULE_7__/* .firstMemo */ .u)((api, accountId, withActive) => api.derive.staking.erasHistoric(withActive).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .switchMap */ .w)((eras) => api.derive.staking._stakerRewards([accountId], eras, withActive))));
function stakerRewardsMultiEras(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_2__/* .memo */ .X)(instanceId, (accountIds, eras) => accountIds.length && eras.length
        ? api.derive.staking._stakerRewards(accountIds, eras, false)
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)([]));
}
function stakerRewardsMulti(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_2__/* .memo */ .X)(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .switchMap */ .w)((eras) => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
}


/***/ }),

/***/ 47808:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   t: () => (/* binding */ stakerSlashes),
/* harmony export */   z: () => (/* binding */ _stakerSlashes)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9696);



function _stakerSlashes(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (accountId, eras, withActive) => {
        const stakerId = api.registry.createType('AccountId', accountId).toString();
        return api.derive.staking._erasSlashes(eras, withActive).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .map */ .U)((slashes) => slashes.map(({ era, nominators, validators }) => ({
            era,
            total: nominators[stakerId] || validators[stakerId] || api.registry.createType('Balance')
        }))));
    });
}
const stakerSlashes = /*#__PURE__*/ (0,_util_js__WEBPACK_IMPORTED_MODULE_2__/* .erasHistoricApplyAccount */ .Jr)('_stakerSlashes');


/***/ }),

/***/ 4448:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ stashes)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81711);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(96918);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56072);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39762);


function onBondedEvent(api) {
    let current = Date.now();
    return api.query.system.events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)((events) => {
        current = events.filter(({ event, phase }) => {
            try {
                return phase.isApplyExtrinsic &&
                    event.section === 'staking' &&
                    event.method === 'Bonded';
            }
            catch {
                return false;
            }
        })
            ? Date.now()
            : current;
        return current;
    }), (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .startWith */ .O)(current), (0,_util_index_js__WEBPACK_IMPORTED_MODULE_2__/* .drr */ .h)({ skipTimeout: true }));
}
/**
 * @description Retrieve the list of all validator stashes
 */
function stashes(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .memo */ .X)(instanceId, () => onBondedEvent(api).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .switchMap */ .w)(() => api.query.staking.validators.keys()), (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)((keys) => keys.map(({ args: [v] }) => v).filter((a) => a))));
}


/***/ }),

/***/ 9696:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ erasHistoricApply),
/* harmony export */   Jr: () => (/* binding */ erasHistoricApplyAccount),
/* harmony export */   K2: () => (/* binding */ singleEra),
/* harmony export */   NT: () => (/* binding */ filterEras),
/* harmony export */   cu: () => (/* binding */ combineEras)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81505);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(81083);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(28296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(94331);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94742);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(92901);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(71833);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(39762);



const ERA_CHUNK_SIZE = 14;
function chunkEras(eras, fn) {
    const chunked = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .arrayChunk */ .Z)(eras, ERA_CHUNK_SIZE);
    let index = 0;
    const subject = new rxjs__WEBPACK_IMPORTED_MODULE_1__/* .BehaviorSubject */ .X(chunked[index]);
    return subject.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)(fn), (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .tap */ .b)(() => {
        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .nextTick */ .Y)(() => {
            index++;
            index === chunked.length
                ? subject.complete()
                : subject.next(chunked[index]);
        });
    }), (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .toArray */ .q)(), (0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .map */ .U)(_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .arrayFlatten */ .a));
}
function filterEras(eras, list) {
    return eras.filter((e) => !list.some(({ era }) => e.eq(era)));
}
function erasHistoricApply(fn) {
    return (instanceId, api) => 
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    (0,_util_index_js__WEBPACK_IMPORTED_MODULE_8__/* .memo */ .X)(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)((e) => api.derive.staking[fn](e, withActive))));
}
function erasHistoricApplyAccount(fn) {
    return (instanceId, api) => 
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    (0,_util_index_js__WEBPACK_IMPORTED_MODULE_8__/* .memo */ .X)(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)((e) => api.derive.staking[fn](accountId, e, withActive))));
}
function singleEra(fn) {
    return (instanceId, api) => 
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    (0,_util_index_js__WEBPACK_IMPORTED_MODULE_8__/* .memo */ .X)(instanceId, (era) => api.derive.staking[fn](era, true));
}
function combineEras(fn) {
    return (instanceId, api) => 
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    (0,_util_index_js__WEBPACK_IMPORTED_MODULE_8__/* .memo */ .X)(instanceId, (eras, withActive) => !eras.length
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.of)([])
        : chunkEras(eras, (eras) => (0,rxjs__WEBPACK_IMPORTED_MODULE_10__/* .combineLatest */ .a)(eras.map((e) => api.derive.staking[fn](e, withActive)))));
}


/***/ }),

/***/ 53748:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Q: () => (/* binding */ nextElected),
/* harmony export */   z: () => (/* binding */ validators)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85296);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


function nextElected(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => api.query.staking.erasStakers
        ? api.derive.session.indexes().pipe(
        // only populate for next era in the last session, so track both here - entries are not
        // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
        (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .switchMap */ .w)(({ currentEra }) => api.query.staking.erasStakers.keys(currentEra)), (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)((keys) => keys.map(({ args: [, accountId] }) => accountId)))
        : api.query.staking['currentElected']());
}
/**
 * @description Retrieve latest list of validators
 */
function validators(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, () => 
    // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
    // in all actual real-world deployed chains, it does create some confusion for limited template chains
    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .combineLatest */ .a)([
        api.query.session
            ? api.query.session.validators()
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)([]),
        api.query.staking
            ? api.derive.staking.nextElected()
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)([])
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(([validators, nextElected]) => ({
        nextElected: nextElected.length
            ? nextElected
            : validators,
        validators
    }))));
}


/***/ }),

/***/ 38081:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ waitingInfo)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


const DEFAULT_FLAGS = { withController: true, withPrefs: true };
function waitingInfo(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (flags = DEFAULT_FLAGS) => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        api.derive.staking.validators(),
        api.derive.staking.stashes()
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)(([{ nextElected }, stashes]) => {
        const elected = nextElected.map((a) => a.toString());
        const waiting = stashes.filter((v) => !elected.includes(v.toString()));
        return api.derive.staking.queryMulti(waiting, flags).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)((info) => ({
            info,
            waiting
        })));
    })));
}


/***/ }),

/***/ 52167:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasProposals: () => (/* binding */ hasProposals),
/* harmony export */   members: () => (/* binding */ members),
/* harmony export */   prime: () => (/* binding */ prime),
/* harmony export */   proposal: () => (/* binding */ proposal),
/* harmony export */   proposalCount: () => (/* binding */ proposalCount),
/* harmony export */   proposalHashes: () => (/* binding */ proposalHashes),
/* harmony export */   proposals: () => (/* binding */ proposals)
/* harmony export */ });
/* harmony import */ var _collective_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66433);
/* harmony import */ var _collective_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51286);
/* harmony import */ var _collective_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(77631);

const members = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_0__/* .members */ .T)('technicalCommittee');
const hasProposals = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .hasProposals */ .To)('technicalCommittee');
const proposal = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .proposal */ .oL)('technicalCommittee');
const proposalCount = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .proposalCount */ .P6)('technicalCommittee');
const proposalHashes = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .proposalHashes */ .iB)('technicalCommittee');
const proposals = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_1__/* .proposals */ .$O)('technicalCommittee');
const prime = /*#__PURE__*/ (0,_collective_index_js__WEBPACK_IMPORTED_MODULE_2__/* .prime */ .F)('technicalCommittee');


/***/ }),

/***/ 95707:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   proposals: () => (/* reexport safe */ _proposals_js__WEBPACK_IMPORTED_MODULE_0__.$)
/* harmony export */ });
/* harmony import */ var _proposals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(89831);



/***/ }),

/***/ 89831:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $: () => (/* binding */ proposals)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(96918);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39762);


function parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount }) {
    const approvals = [];
    const proposals = [];
    const councilTreasury = councilProposals.filter(({ proposal }) => proposal && (api.tx.treasury.approveProposal.is(proposal) ||
        api.tx.treasury.rejectProposal.is(proposal)));
    allIds.forEach((id, index) => {
        if (allProposals[index].isSome) {
            const council = councilTreasury
                .filter(({ proposal }) => proposal && id.eq(proposal.args[0]))
                .sort((a, b) => a.proposal && b.proposal
                ? a.proposal.method.localeCompare(b.proposal.method)
                : a.proposal
                    ? -1
                    : 1);
            const isApproval = approvalIds.some((approvalId) => approvalId.eq(id));
            const derived = { council, id, proposal: allProposals[index].unwrap() };
            if (isApproval) {
                approvals.push(derived);
            }
            else {
                proposals.push(derived);
            }
        }
    });
    return { approvals, proposalCount, proposals };
}
function retrieveProposals(api, proposalCount, approvalIds) {
    const proposalIds = [];
    const count = proposalCount.toNumber();
    for (let index = 0; index < count; index++) {
        if (!approvalIds.some((id) => id.eqn(index))) {
            proposalIds.push(api.registry.createType('ProposalIndex', index));
        }
    }
    const allIds = [...proposalIds, ...approvalIds];
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)([
        api.query.treasury.proposals.multi(allIds),
        api.derive.council
            ? api.derive.council.proposals()
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)([])
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .map */ .U)(([allProposals, councilProposals]) => parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount })));
}
/**
 * @description Retrieve all active and approved treasury proposals, along with their info
 */
function proposals(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_3__/* .memo */ .X)(instanceId, () => api.query.treasury
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .combineLatest */ .a)([
            api.query.treasury.proposalCount(),
            api.query.treasury.approvals()
        ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .switchMap */ .w)(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds)))
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)({
            approvals: [],
            proposalCount: api.registry.createType('ProposalIndex'),
            proposals: []
        }));
}


/***/ }),

/***/ 5600:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NX: () => (/* binding */ FALLBACK_MAX_HASH_COUNT),
/* harmony export */   bT: () => (/* binding */ MORTAL_PERIOD),
/* harmony export */   gg: () => (/* binding */ FALLBACK_PERIOD),
/* harmony export */   lN: () => (/* binding */ MAX_FINALITY_LAG)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39098);

const FALLBACK_MAX_HASH_COUNT = 250;
const FALLBACK_PERIOD = new _polkadot_util__WEBPACK_IMPORTED_MODULE_0__(6 * 1000);
const MAX_FINALITY_LAG = new _polkadot_util__WEBPACK_IMPORTED_MODULE_0__(5);
const MORTAL_PERIOD = new _polkadot_util__WEBPACK_IMPORTED_MODULE_0__(5 * 60 * 1000);


/***/ }),

/***/ 79596:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ events)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79606);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39762);


function events(instanceId, api) {
    return (0,_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .memo */ .X)(instanceId, (blockHash) => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        api.rpc.chain.getBlock(blockHash),
        api.queryAt(blockHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)((queryAt) => queryAt.system.events()))
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .map */ .U)(([block, events]) => ({ block, events }))));
}


/***/ }),

/***/ 82246:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   events: () => (/* reexport safe */ _events_js__WEBPACK_IMPORTED_MODULE_0__.U),
/* harmony export */   signingInfo: () => (/* reexport safe */ _signingInfo_js__WEBPACK_IMPORTED_MODULE_1__.y)
/* harmony export */ });
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79596);
/* harmony import */ var _signingInfo_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13024);




/***/ }),

/***/ 13024:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   y: () => (/* binding */ signingInfo)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(92646);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(34644);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(52906);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(44180);
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5600);




function latestNonce(api, address) {
    return api.derive.balances.account(address).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)(({ accountNonce }) => accountNonce));
}
function nextNonce(api, address) {
    return api.rpc.system?.accountNextIndex
        ? api.rpc.system.accountNextIndex(address)
        : latestNonce(api, address);
}
function signingHeader(api) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        api.rpc.chain.getHeader().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)((header) => 
        // check for chains at genesis (until block 1 is produced, e.g. 6s), since
        // we do need to allow transactions at chain start (also dev/seal chains)
        header.parentHash.isEmpty
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(header)
            // in the case of the current block, we use the parent to minimize the
            // impact of forks on the system, but not completely remove it
            : api.rpc.chain.getHeader(header.parentHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .catchError */ .K)(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(header))))),
        api.rpc.chain.getFinalizedHead().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .switchMap */ .w)((hash) => api.rpc.chain.getHeader(hash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .catchError */ .K)(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(null)))))
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)(([current, finalized]) => 
    // determine the hash to use, current when lag > max, else finalized
    !finalized || (0,_util_index_js__WEBPACK_IMPORTED_MODULE_5__/* .unwrapBlockNumber */ .E)(current).sub((0,_util_index_js__WEBPACK_IMPORTED_MODULE_5__/* .unwrapBlockNumber */ .E)(finalized)).gt(_constants_js__WEBPACK_IMPORTED_MODULE_6__/* .MAX_FINALITY_LAG */ .lN)
        ? current
        : finalized));
}
function signingInfo(_instanceId, api) {
    // no memo, we want to do this fresh on each run
    return (address, nonce, era) => (0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .combineLatest */ .a)([
        // retrieve nonce if none was specified
        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .isUndefined */ .o)(nonce)
            ? latestNonce(api, address)
            : nonce === -1
                ? nextNonce(api, address)
                : (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(api.registry.createType('Index', nonce)),
        // if no era (create) or era > 0 (mortal), do block retrieval
        ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .isUndefined */ .o)(era) || ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .isNumber */ .h)(era) && era > 0))
            ? signingHeader(api)
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(null)
    ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)(([nonce, header]) => ({
        header,
        mortalLength: Math.min(api.consts.system?.blockHashCount?.toNumber() || _constants_js__WEBPACK_IMPORTED_MODULE_6__/* .FALLBACK_MAX_HASH_COUNT */ .NX, _constants_js__WEBPACK_IMPORTED_MODULE_6__/* .MORTAL_PERIOD */ .bT
            .div(api.consts.babe?.expectedBlockTime ||
            api.consts.timestamp?.minimumPeriod.muln(2) ||
            _constants_js__WEBPACK_IMPORTED_MODULE_6__/* .FALLBACK_PERIOD */ .gg)
            .iadd(_constants_js__WEBPACK_IMPORTED_MODULE_6__/* .MAX_FINALITY_LAG */ .lN)
            .toNumber()),
        nonce
    })));
}


/***/ }),

/***/ 56932:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ createHeaderExtended)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56749);

function createHeaderExtended(registry, header, validators, author) {
    // an instance of the base extrinsic for us to extend
    const HeaderBase = registry.createClass('Header');
    class Implementation extends HeaderBase {
        __internal__author;
        constructor(registry, header, validators, author) {
            super(registry, header);
            this.__internal__author = author || (0,_util_js__WEBPACK_IMPORTED_MODULE_0__/* .extractAuthor */ .R)(this.digest, validators || []);
            this.createdAtHash = header?.createdAtHash;
        }
        /**
         * @description Convenience method, returns the author for the block
         */
        get author() {
            return this.__internal__author;
        }
    }
    return new Implementation(registry, header, validators, author);
}


/***/ }),

/***/ 92281:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   i: () => (/* binding */ createSignedBlockExtended)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56749);

function mapExtrinsics(extrinsics, records) {
    return extrinsics.map((extrinsic, index) => {
        let dispatchError;
        let dispatchInfo;
        const events = records
            .filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index))
            .map(({ event }) => {
            if (event.section === 'system') {
                if (event.method === 'ExtrinsicSuccess') {
                    dispatchInfo = event.data[0];
                }
                else if (event.method === 'ExtrinsicFailed') {
                    dispatchError = event.data[0];
                    dispatchInfo = event.data[1];
                }
            }
            return event;
        });
        return { dispatchError, dispatchInfo, events, extrinsic };
    });
}
function createSignedBlockExtended(registry, block, events, validators, author) {
    // an instance of the base extrinsic for us to extend
    const SignedBlockBase = registry.createClass('SignedBlock');
    class Implementation extends SignedBlockBase {
        __internal__author;
        __internal__events;
        __internal__extrinsics;
        constructor(registry, block, events, validators, author) {
            super(registry, block);
            this.__internal__author = author || (0,_util_js__WEBPACK_IMPORTED_MODULE_0__/* .extractAuthor */ .R)(this.block.header.digest, validators || []);
            this.__internal__events = events || [];
            this.__internal__extrinsics = mapExtrinsics(this.block.extrinsics, this.__internal__events);
            this.createdAtHash = block?.createdAtHash;
        }
        /**
         * @description Convenience method, returns the author for the block
         */
        get author() {
            return this.__internal__author;
        }
        /**
         * @description Convenience method, returns the events associated with the block
         */
        get events() {
            return this.__internal__events;
        }
        /**
         * @description Returns the extrinsics and their events, mapped
         */
        get extrinsics() {
            return this.__internal__extrinsics;
        }
    }
    return new Implementation(registry, block, events, validators, author);
}


/***/ }),

/***/ 56749:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ extractAuthor)
/* harmony export */ });
function extractAuthor(digest, sessionValidators) {
    const [citem] = digest.logs.filter((e) => e.isConsensus);
    const [pitem] = digest.logs.filter((e) => e.isPreRuntime);
    const [sitem] = digest.logs.filter((e) => e.isSeal);
    let accountId;
    try {
        // This is critical to be first for BABE (before Consensus)
        // If not first, we end up dropping the author at session-end
        if (pitem) {
            const [engine, data] = pitem.asPreRuntime;
            accountId = engine.extractAuthor(data, sessionValidators);
        }
        if (!accountId && citem) {
            const [engine, data] = citem.asConsensus;
            accountId = engine.extractAuthor(data, sessionValidators);
        }
        // SEAL, still used in e.g. Kulupu for pow
        if (!accountId && sitem) {
            const [engine, data] = sitem.asSeal;
            accountId = engine.extractAuthor(data, sessionValidators);
        }
    }
    catch {
        // ignore
    }
    return accountId;
}


/***/ }),

/***/ 44180:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ unwrapBlockNumber)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96759);

function unwrapBlockNumber(hdr) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isCompact */ .f)(hdr.number)
        ? hdr.number.unwrap()
        : hdr.number;
}


/***/ }),

/***/ 48314:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ deriveCache)
/* harmony export */ });
/* unused harmony export setDeriveCache */
/* harmony import */ var _cacheImpl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24714);

const CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1000);
let deriveCache;
function wrapCache(keyStart, cache) {
    return {
        del: (partial) => cache.del(`${keyStart}${partial}`),
        forEach: cache.forEach,
        get: (partial) => {
            const key = `${keyStart}${partial}`;
            const cached = cache.get(key);
            if (cached) {
                cached.x = Date.now();
                cache.set(key, cached);
                return cached.v;
            }
            return undefined;
        },
        set: (partial, v) => {
            cache.set(`${keyStart}${partial}`, { v, x: Date.now() });
        }
    };
}
function clearCache(cache) {
    // clear all expired values
    const now = Date.now();
    const all = [];
    cache.forEach((key, { x }) => {
        ((now - x) > CHACHE_EXPIRY) && all.push(key);
    });
    // don't do delete inside loop, just in-case
    all.forEach((key) => cache.del(key));
}
function setDeriveCache(prefix = '', cache) {
    deriveCache = cache
        ? wrapCache(`derive:${prefix}:`, cache)
        : _cacheImpl_js__WEBPACK_IMPORTED_MODULE_0__/* .deriveNoopCache */ .R;
    if (cache) {
        clearCache(cache);
    }
}
setDeriveCache();



/***/ }),

/***/ 24714:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ deriveNoopCache)
/* harmony export */ });
/* unused harmony export deriveMapCache */
const mapCache = new Map();
const deriveMapCache = {
    del: (key) => {
        mapCache.delete(key);
    },
    forEach: (cb) => {
        for (const [k, v] of mapCache.entries()) {
            cb(k, v);
        }
    },
    get: (key) => {
        return mapCache.get(key);
    },
    set: (key, value) => {
        mapCache.set(key, value);
    }
};
const deriveNoopCache = {
    del: () => undefined,
    forEach: () => undefined,
    get: () => undefined,
    set: (_, value) => value
};


/***/ }),

/***/ 29617:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ firstObservable),
/* harmony export */   u: () => (/* binding */ firstMemo)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39762);


function firstObservable(obs) {
    return obs.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__/* .map */ .U)(([a]) => a));
}
function firstMemo(fn) {
    return (instanceId, api) => (0,_polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_1__/* .memo */ .X)(instanceId, (...args) => firstObservable(fn(api, ...args)));
}


/***/ }),

/***/ 95680:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   L: () => (/* binding */ lazyDeriveSection)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56810);

function lazyDeriveSection(result, section, getKeys, creator) {
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .lazyMethod */ .W)(result, section, () => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .lazyMethods */ .G)({}, getKeys(section), (method) => creator(section, method)));
}


/***/ }),

/***/ 31250:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _: () => (/* binding */ Decorate)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(85472);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(81505);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(94331);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(81083);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(28296);
/* harmony import */ var _polkadot_api_derive__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(34874);
/* harmony import */ var _polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(79431);
/* harmony import */ var _polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(39762);
/* harmony import */ var _polkadot_rpc_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(68884);
/* harmony import */ var _polkadot_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(18484);
/* harmony import */ var _polkadot_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(90884);
/* harmony import */ var _polkadot_types__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(58416);
/* harmony import */ var _polkadot_types__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(87997);
/* harmony import */ var _polkadot_types_known__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(55597);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63985);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5035);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39098);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(96566);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(56810);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(36600);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(93173);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(45155);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(92901);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(94742);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(71833);
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(89753);
/* harmony import */ var _submittable_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(52596);
/* harmony import */ var _util_augmentObject_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(91620);
/* harmony import */ var _util_decorate_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(3076);
/* harmony import */ var _util_validate_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(68501);
/* harmony import */ var _Events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17950);
/* harmony import */ var _find_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(50604);














const PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)
const PAGE_SIZE_V = 250; // limited since the data may be > 16MB (e.g. misfiring elections)
const PAGE_SIZE_Q = 50; // queue of pending storage queries (mapped together, next tick)
const l = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .k)('api/init');
let instanceCounter = 0;
function getAtQueryFn(api, { method, section }) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .assertReturn */ .k8)(api.rx.query[section] && api.rx.query[section][method], () => `query.${section}.${method} is not available in this version of the metadata`);
}
class Decorate extends _Events_js__WEBPACK_IMPORTED_MODULE_2__/* .Events */ .z {
    __internal__instanceId;
    __internal__runtimeLog = {};
    __internal__registry;
    __internal__storageGetQ = [];
    __internal__storageSubQ = [];
    // HACK Use BN import so decorateDerive works... yes, wtf.
    __phantom = new _polkadot_util__WEBPACK_IMPORTED_MODULE_3__(0);
    _type;
    _call = {};
    _consts = {};
    _derive;
    _errors = {};
    _events = {};
    _extrinsics;
    _extrinsicType = _polkadot_types__WEBPACK_IMPORTED_MODULE_4__/* .GenericExtrinsic */ .Y.LATEST_EXTRINSIC_VERSION;
    _genesisHash;
    _isConnected;
    _isReady = false;
    _query = {};
    _queryMulti;
    _rpc;
    _rpcCore;
    _runtimeMap = {};
    _runtimeChain;
    _runtimeMetadata;
    _runtimeVersion;
    _rx = { call: {}, consts: {}, query: {}, tx: {} };
    _options;
    /**
     * This is the one and only method concrete children classes need to implement.
     * It's a higher-order function, which takes one argument
     * `method: Method extends (...args: any[]) => Observable<any>`
     * (and one optional `options`), and should return the user facing method.
     * For example:
     * - For ApiRx, `decorateMethod` should just be identity, because the input
     * function is already an Observable
     * - For ApiPromise, `decorateMethod` should return a function that takes all
     * the parameters from `method`, adds an optional `callback` argument, and
     * returns a Promise.
     *
     * We could easily imagine other user-facing interfaces, which are simply
     * implemented by transforming the Observable to Stream/Iterator/Kefir/Bacon
     * via `decorateMethod`.
     */
    _decorateMethod;
    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHeads((header) => {
     *   console.log(`new block #${header.number.toNumber()}`);
     * });
     * ```
     */
    constructor(options, type, decorateMethod) {
        super();
        this.__internal__instanceId = `${++instanceCounter}`;
        this.__internal__registry = options.source?.registry || options.registry || new _polkadot_types__WEBPACK_IMPORTED_MODULE_5__/* .TypeRegistry */ .P();
        this._rx.callAt = (blockHash, knownVersion) => (0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .from */ .D)(this.at(blockHash, knownVersion)).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .map */ .U)((a) => a.rx.call));
        this._rx.queryAt = (blockHash, knownVersion) => (0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .from */ .D)(this.at(blockHash, knownVersion)).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .map */ .U)((a) => a.rx.query));
        this._rx.registry = this.__internal__registry;
        this._decorateMethod = decorateMethod;
        this._options = options;
        this._type = type;
        const provider = options.source
            ? options.source._rpcCore.provider.isClonable
                ? options.source._rpcCore.provider.clone()
                : options.source._rpcCore.provider
            : (options.provider || new _polkadot_rpc_provider__WEBPACK_IMPORTED_MODULE_8__/* .WsProvider */ .U());
        // The RPC interface decorates the known interfaces on init
        this._rpcCore = new _polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_9__/* .RpcCore */ .mk(this.__internal__instanceId, this.__internal__registry, {
            isPedantic: this._options.isPedantic,
            provider,
            userRpc: this._options.rpc
        });
        this._isConnected = new rxjs__WEBPACK_IMPORTED_MODULE_10__/* .BehaviorSubject */ .X(this._rpcCore.provider.isConnected);
        this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
    }
    /**
     * @description Return the current used registry
     */
    get registry() {
        return this.__internal__registry;
    }
    /**
     * @description Creates an instance of a type as registered
     */
    createType(type, ...params) {
        return this.__internal__registry.createType(type, ...params);
    }
    /**
     * @description Register additional user-defined of chain-specific types in the type registry
     */
    registerTypes(types) {
        types && this.__internal__registry.register(types);
    }
    /**
     * @returns `true` if the API operates with subscriptions
     */
    get hasSubscriptions() {
        return this._rpcCore.provider.hasSubscriptions;
    }
    /**
     * @returns `true` if the API decorate multi-key queries
     */
    get supportMulti() {
        return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
    }
    _emptyDecorated(registry, blockHash) {
        return {
            call: {},
            consts: {},
            errors: {},
            events: {},
            query: {},
            registry,
            rx: {
                call: {},
                query: {}
            },
            tx: (0,_submittable_index_js__WEBPACK_IMPORTED_MODULE_11__/* .createSubmittable */ .v)(this._type, this._rx, this._decorateMethod, registry, blockHash)
        };
    }
    _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
        if (!decoratedApi) {
            decoratedApi = this._emptyDecorated(registry.registry, blockHash);
        }
        if (fromEmpty || !registry.decoratedMeta) {
            registry.decoratedMeta = (0,_polkadot_types__WEBPACK_IMPORTED_MODULE_12__.expandMetadata)(registry.registry, registry.metadata);
        }
        const runtime = this._decorateCalls(registry, this._decorateMethod, blockHash);
        const runtimeRx = this._decorateCalls(registry, this._rxDecorateMethod, blockHash);
        const storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);
        const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);
        (0,_util_augmentObject_js__WEBPACK_IMPORTED_MODULE_13__/* .augmentObject */ .f)('consts', registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
        (0,_util_augmentObject_js__WEBPACK_IMPORTED_MODULE_13__/* .augmentObject */ .f)('errors', registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
        (0,_util_augmentObject_js__WEBPACK_IMPORTED_MODULE_13__/* .augmentObject */ .f)('events', registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
        (0,_util_augmentObject_js__WEBPACK_IMPORTED_MODULE_13__/* .augmentObject */ .f)('query', storage, decoratedApi.query, fromEmpty);
        (0,_util_augmentObject_js__WEBPACK_IMPORTED_MODULE_13__/* .augmentObject */ .f)('query', storageRx, decoratedApi.rx.query, fromEmpty);
        (0,_util_augmentObject_js__WEBPACK_IMPORTED_MODULE_13__/* .augmentObject */ .f)('call', runtime, decoratedApi.call, fromEmpty);
        (0,_util_augmentObject_js__WEBPACK_IMPORTED_MODULE_13__/* .augmentObject */ .f)('call', runtimeRx, decoratedApi.rx.call, fromEmpty);
        decoratedApi.findCall = (callIndex) => (0,_find_js__WEBPACK_IMPORTED_MODULE_14__/* .findCall */ .A)(registry.registry, callIndex);
        decoratedApi.findError = (errorIndex) => (0,_find_js__WEBPACK_IMPORTED_MODULE_14__/* .findError */ .H)(registry.registry, errorIndex);
        decoratedApi.queryMulti = blockHash
            ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash)
            : this._decorateMulti(this._decorateMethod);
        decoratedApi.runtimeVersion = registry.runtimeVersion;
        return {
            createdAt: blockHash,
            decoratedApi,
            decoratedMeta: registry.decoratedMeta
        };
    }
    _injectMetadata(registry, fromEmpty = false) {
        // clear the decoration, we are redoing it here
        if (fromEmpty || !registry.decoratedApi) {
            registry.decoratedApi = this._emptyDecorated(registry.registry);
        }
        const { decoratedApi, decoratedMeta } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);
        this._call = decoratedApi.call;
        this._consts = decoratedApi.consts;
        this._errors = decoratedApi.errors;
        this._events = decoratedApi.events;
        this._query = decoratedApi.query;
        this._rx.call = decoratedApi.rx.call;
        this._rx.query = decoratedApi.rx.query;
        const tx = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
        const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
        if (fromEmpty || !this._extrinsics) {
            this._extrinsics = tx;
            this._rx.tx = rxtx;
        }
        else {
            (0,_util_augmentObject_js__WEBPACK_IMPORTED_MODULE_13__/* .augmentObject */ .f)('tx', tx, this._extrinsics, false);
            (0,_util_augmentObject_js__WEBPACK_IMPORTED_MODULE_13__/* .augmentObject */ .f)(null, rxtx, this._rx.tx, false);
        }
        (0,_util_augmentObject_js__WEBPACK_IMPORTED_MODULE_13__/* .augmentObject */ .f)(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
        this.emit('decorated');
    }
    /**
     * @deprecated
     * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
     */
    injectMetadata(metadata, fromEmpty, registry) {
        this._injectMetadata({ counter: 0, metadata, registry: registry || this.__internal__registry, runtimeVersion: this.__internal__registry.createType('RuntimeVersionPartial') }, fromEmpty);
    }
    _decorateFunctionMeta(input, output) {
        output.meta = input.meta;
        output.method = input.method;
        output.section = input.section;
        output.toJSON = input.toJSON;
        if (input.callIndex) {
            output.callIndex = input.callIndex;
        }
        return output;
    }
    // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
    // manner to cater for both old and new:
    //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
    //   - when non-zero, remove anything that is not in the array (we don't do this)
    _filterRpc(methods, additional) {
        // add any specific user-base RPCs
        if (Object.keys(additional).length !== 0) {
            this._rpcCore.addUserInterfaces(additional);
            // re-decorate, only adding any new additional interfaces
            this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
            this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
        }
        // extract the actual sections from the methods (this is useful when
        // we try and create mappings to runtime names via a hash mapping)
        const sectionMap = {};
        for (let i = 0, count = methods.length; i < count; i++) {
            const [section] = methods[i].split('_');
            sectionMap[section] = true;
        }
        // convert the actual section names into an easy name lookup
        const sections = Object.keys(sectionMap);
        for (let i = 0, count = sections.length; i < count; i++) {
            const nameA = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_15__/* .stringUpperFirst */ .k)(sections[i]);
            const nameB = `${nameA}Api`;
            this._runtimeMap[(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_16__/* .blake2AsHex */ .$)(nameA, 64)] = nameA;
            this._runtimeMap[(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_16__/* .blake2AsHex */ .$)(nameB, 64)] = nameB;
        }
        // finally we filter the actual methods to expose
        this._filterRpcMethods(methods);
    }
    _filterRpcMethods(exposed) {
        const hasResults = exposed.length !== 0;
        const allKnown = [...this._rpcCore.mapping.entries()];
        const allKeys = [];
        const count = allKnown.length;
        for (let i = 0; i < count; i++) {
            const [, { alias, endpoint, method, pubsub, section }] = allKnown[i];
            allKeys.push(`${section}_${method}`);
            if (pubsub) {
                allKeys.push(`${section}_${pubsub[1]}`);
                allKeys.push(`${section}_${pubsub[2]}`);
            }
            if (alias) {
                allKeys.push(...alias);
            }
            if (endpoint) {
                allKeys.push(endpoint);
            }
        }
        const unknown = exposed.filter((k) => !allKeys.includes(k) &&
            !k.includes('_unstable_'));
        if (unknown.length && !this._options.noInitWarn) {
            l.warn(`RPC methods not decorated: ${unknown.join(', ')}`);
        }
        // loop through all entries we have (populated in decorate) and filter as required
        // only remove when we have results and method missing, or with no results if optional
        for (let i = 0; i < count; i++) {
            const [k, { method, section }] = allKnown[i];
            if (hasResults && !exposed.includes(k) && k !== 'rpc_methods') {
                if (this._rpc[section]) {
                    delete this._rpc[section][method];
                    delete this._rx.rpc[section][method];
                }
            }
        }
    }
    _rpcSubmitter(decorateMethod) {
        const method = (method, ...params) => {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .from */ .D)(this._rpcCore.provider.send(method, params));
        };
        return decorateMethod(method);
    }
    _decorateRpc(rpc, decorateMethod, input = this._rpcSubmitter(decorateMethod)) {
        const out = input;
        const decorateFn = (section, method) => {
            const source = rpc[section][method];
            const fn = decorateMethod(source, { methodName: method });
            fn.meta = source.meta;
            fn.raw = decorateMethod(source.raw, { methodName: method });
            return fn;
        };
        for (let s = 0, scount = rpc.sections.length; s < scount; s++) {
            const section = rpc.sections[s];
            if (!Object.prototype.hasOwnProperty.call(out, section)) {
                const methods = Object.keys(rpc[section]);
                const decorateInternal = (method) => decorateFn(section, method);
                for (let m = 0, mcount = methods.length; m < mcount; m++) {
                    const method = methods[m];
                    //  skip subscriptions where we have a non-subscribe interface
                    if (this.hasSubscriptions || !(method.startsWith('subscribe') || method.startsWith('unsubscribe'))) {
                        if (!Object.prototype.hasOwnProperty.call(out, section)) {
                            out[section] = {};
                        }
                        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_17__/* .lazyMethod */ .W)(out[section], method, decorateInternal);
                    }
                }
            }
        }
        return out;
    }
    // add all definition entries
    _addRuntimeDef(result, additional) {
        if (!additional) {
            return;
        }
        const entries = Object.entries(additional);
        for (let j = 0, ecount = entries.length; j < ecount; j++) {
            const [key, defs] = entries[j];
            if (result[key]) {
                // we have this one already, step through for new versions or
                // new methods and add those as applicable
                for (let k = 0, dcount = defs.length; k < dcount; k++) {
                    const def = defs[k];
                    const prev = result[key].find(({ version }) => def.version === version);
                    if (prev) {
                        // interleave the new methods with the old - last definition wins
                        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_18__/* .objectSpread */ .Z)(prev.methods, def.methods);
                    }
                    else {
                        // we don't have this specific version, add it
                        result[key].push(def);
                    }
                }
            }
            else {
                // we don't have this runtime definition, add it as-is
                result[key] = defs;
            }
        }
    }
    // extract all runtime definitions
    _getRuntimeDefs(registry, specName, chain = '') {
        const result = {};
        const defValues = Object.values(_polkadot_types__WEBPACK_IMPORTED_MODULE_19__);
        // options > chain/spec > built-in, apply in reverse order with
        // methods overriding previous definitions (or interleave missing)
        for (let i = 0, count = defValues.length; i < count; i++) {
            this._addRuntimeDef(result, defValues[i].runtime);
        }
        this._addRuntimeDef(result, (0,_polkadot_types_known__WEBPACK_IMPORTED_MODULE_20__/* .getSpecRuntime */ .eH)(registry, chain, specName));
        this._addRuntimeDef(result, this._options.runtime);
        return Object.entries(result);
    }
    // pre-metadata decoration
    _decorateCalls({ registry, runtimeVersion: { apis, specName, specVersion } }, decorateMethod, blockHash) {
        const result = {};
        const named = {};
        const hashes = {};
        const sections = this._getRuntimeDefs(registry, specName, this._runtimeChain);
        const older = [];
        const implName = `${specName.toString()}/${specVersion.toString()}`;
        const hasLogged = this.__internal__runtimeLog[implName] || false;
        this.__internal__runtimeLog[implName] = true;
        for (let i = 0, scount = sections.length; i < scount; i++) {
            const [_section, secs] = sections[i];
            const sectionHash = (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_16__/* .blake2AsHex */ .$)(_section, 64);
            const rtApi = apis.find(([a]) => a.eq(sectionHash));
            hashes[sectionHash] = true;
            if (rtApi) {
                const all = secs.map(({ version }) => version).sort();
                const sec = secs.find(({ version }) => rtApi[1].eq(version));
                if (sec) {
                    const section = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_21__/* .stringCamelCase */ .yZ)(_section);
                    const methods = Object.entries(sec.methods);
                    if (methods.length) {
                        if (!named[section]) {
                            named[section] = {};
                        }
                        for (let m = 0, mcount = methods.length; m < mcount; m++) {
                            const [_method, def] = methods[m];
                            const method = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_21__/* .stringCamelCase */ .yZ)(_method);
                            named[section][method] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_18__/* .objectSpread */ .Z)({ method, name: `${_section}_${_method}`, section, sectionHash }, def);
                        }
                    }
                }
                else {
                    older.push(`${_section}/${rtApi[1].toString()} (${all.join('/')} known)`);
                }
            }
        }
        // find the runtimes that we don't have hashes for
        const notFound = apis
            .map(([a, v]) => [a.toHex(), v.toString()])
            .filter(([a]) => !hashes[a])
            .map(([a, v]) => `${this._runtimeMap[a] || a}/${v}`);
        if (!this._options.noInitWarn && !hasLogged) {
            if (older.length) {
                l.warn(`${implName}: Not decorating runtime apis without matching versions: ${older.join(', ')}`);
            }
            if (notFound.length) {
                l.warn(`${implName}: Not decorating unknown runtime apis: ${notFound.join(', ')}`);
            }
        }
        const stateCall = blockHash
            ? (name, bytes) => this._rpcCore.state.call(name, bytes, blockHash)
            : (name, bytes) => this._rpcCore.state.call(name, bytes);
        const lazySection = (section) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_17__/* .lazyMethods */ .G)({}, Object.keys(named[section]), (method) => this._decorateCall(registry, named[section][method], stateCall, decorateMethod));
        const modules = Object.keys(named);
        for (let i = 0, count = modules.length; i < count; i++) {
            (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_17__/* .lazyMethod */ .W)(result, modules[i], lazySection);
        }
        return result;
    }
    _decorateCall(registry, def, stateCall, decorateMethod) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const decorated = decorateMethod((...args) => {
            if (args.length !== def.params.length) {
                throw new Error(`${def.name}:: Expected ${def.params.length} arguments, found ${args.length}`);
            }
            const bytes = registry.createType('Raw', (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_22__/* .u8aConcatStrict */ .d)(args.map((a, i) => registry.createTypeUnsafe(def.params[i].type, [a]).toU8a())));
            return stateCall(def.name, bytes).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .map */ .U)((r) => registry.createTypeUnsafe(def.type, [r])));
        });
        decorated.meta = def;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorated;
    }
    // only be called if supportMulti is true
    _decorateMulti(decorateMethod) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorateMethod((keys) => keys.length
            ? (this.hasSubscriptions
                ? this._rpcCore.state.subscribeStorage
                : this._rpcCore.state.queryStorageAt)(keys.map((args) => Array.isArray(args)
                ? args[0].creator.meta.type.isPlain
                    ? [args[0].creator]
                    : args[0].creator.meta.type.asMap.hashers.length === 1
                        ? [args[0].creator, args.slice(1)]
                        : [args[0].creator, ...args.slice(1)]
                : [args.creator]))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_23__.of)([]));
    }
    _decorateMultiAt(atApi, decorateMethod, blockHash) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorateMethod((calls) => calls.length
            ? this._rpcCore.state.queryStorageAt(calls.map((args) => {
                if (Array.isArray(args)) {
                    const { creator } = getAtQueryFn(atApi, args[0].creator);
                    return creator.meta.type.isPlain
                        ? [creator]
                        : creator.meta.type.asMap.hashers.length === 1
                            ? [creator, args.slice(1)]
                            : [creator, ...args.slice(1)];
                }
                return [getAtQueryFn(atApi, args.creator).creator];
            }), blockHash)
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_23__.of)([]));
    }
    _decorateExtrinsics({ tx }, decorateMethod) {
        const result = (0,_submittable_index_js__WEBPACK_IMPORTED_MODULE_11__/* .createSubmittable */ .v)(this._type, this._rx, decorateMethod);
        const lazySection = (section) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_17__/* .lazyMethods */ .G)({}, Object.keys(tx[section]), (method) => method.startsWith('$')
            ? tx[section][method]
            : this._decorateExtrinsicEntry(tx[section][method], result));
        const sections = Object.keys(tx);
        for (let i = 0, count = sections.length; i < count; i++) {
            (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_17__/* .lazyMethod */ .W)(result, sections[i], lazySection);
        }
        return result;
    }
    _decorateExtrinsicEntry(method, creator) {
        const decorated = (...params) => creator(method(...params));
        // pass through the `.is`
        decorated.is = (other) => method.is(other);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return this._decorateFunctionMeta(method, decorated);
    }
    _decorateStorage({ query, registry }, decorateMethod, blockHash) {
        const result = {};
        const lazySection = (section) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_17__/* .lazyMethods */ .G)({}, Object.keys(query[section]), (method) => blockHash
            ? this._decorateStorageEntryAt(registry, query[section][method], decorateMethod, blockHash)
            : this._decorateStorageEntry(query[section][method], decorateMethod));
        const sections = Object.keys(query);
        for (let i = 0, count = sections.length; i < count; i++) {
            (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_17__/* .lazyMethod */ .W)(result, sections[i], lazySection);
        }
        return result;
    }
    _decorateStorageEntry(creator, decorateMethod) {
        const getArgs = (args, registry) => (0,_util_validate_js__WEBPACK_IMPORTED_MODULE_24__/* .extractStorageArgs */ .s)(registry || this.__internal__registry, creator, args);
        const getQueryAt = (blockHash) => (0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .from */ .D)(this.at(blockHash)).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .map */ .U)((api) => getAtQueryFn(api, creator)));
        // Disable this where it occurs for each field we are decorating
        /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
        const decorated = this._decorateStorageCall(creator, decorateMethod);
        decorated.creator = creator;
        // eslint-disable-next-line deprecation/deprecation
        decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_25__/* .switchMap */ .w)((q) => q(...args))));
        decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));
        decorated.is = (key) => key.section === creator.section &&
            key.method === creator.method;
        decorated.key = (...args) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_26__/* .u8aToHex */ .c)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_27__/* .compactStripLength */ .o)(creator(...args))[1]);
        decorated.keyPrefix = (...args) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_26__/* .u8aToHex */ .c)(creator.keyPrefix(...args));
        decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
        // eslint-disable-next-line deprecation/deprecation
        decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_25__/* .switchMap */ .w)((q) => this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash))));
        // .keys() & .entries() only available on map types
        if (creator.iterKey && creator.meta.type.isMap) {
            decorated.entries = decorateMethod((0,_polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_28__/* .memo */ .X)(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, null, args)));
            // eslint-disable-next-line deprecation/deprecation
            decorated.entriesAt = decorateMethod((0,_polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_28__/* .memo */ .X)(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_25__/* .switchMap */ .w)((q) => this._retrieveMapEntries(q.creator, blockHash, args)))));
            decorated.entriesPaged = decorateMethod((0,_polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_28__/* .memo */ .X)(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, undefined, opts)));
            decorated.keys = decorateMethod((0,_polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_28__/* .memo */ .X)(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, null, args)));
            // eslint-disable-next-line deprecation/deprecation
            decorated.keysAt = decorateMethod((0,_polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_28__/* .memo */ .X)(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_25__/* .switchMap */ .w)((q) => this._retrieveMapKeys(q.creator, blockHash, args)))));
            decorated.keysPaged = decorateMethod((0,_polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_28__/* .memo */ .X)(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, undefined, opts)));
        }
        if (this.supportMulti && creator.meta.type.isMap) {
            // When using double map storage function, user need to pass double map key as an array
            decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1
                ? this._retrieveMulti(args.map((a) => [creator, [a]]))
                : this._retrieveMulti(args.map((a) => [creator, a])));
        }
        /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
        return this._decorateFunctionMeta(creator, decorated);
    }
    _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
        const getArgs = (args) => (0,_util_validate_js__WEBPACK_IMPORTED_MODULE_24__/* .extractStorageArgs */ .s)(registry, creator, args);
        // Disable this where it occurs for each field we are decorating
        /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
        const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
        decorated.creator = creator;
        decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));
        decorated.is = (key) => key.section === creator.section &&
            key.method === creator.method;
        decorated.key = (...args) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_26__/* .u8aToHex */ .c)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_27__/* .compactStripLength */ .o)(creator(...args))[1]);
        decorated.keyPrefix = (...keys) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_26__/* .u8aToHex */ .c)(creator.keyPrefix(...keys));
        decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash));
        // .keys() & .entries() only available on map types
        if (creator.iterKey && creator.meta.type.isMap) {
            decorated.entries = decorateMethod((0,_polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_28__/* .memo */ .X)(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, blockHash, args)));
            decorated.entriesPaged = decorateMethod((0,_polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_28__/* .memo */ .X)(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, blockHash, opts)));
            decorated.keys = decorateMethod((0,_polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_28__/* .memo */ .X)(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, blockHash, args)));
            decorated.keysPaged = decorateMethod((0,_polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_28__/* .memo */ .X)(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, blockHash, opts)));
        }
        if (this.supportMulti && creator.meta.type.isMap) {
            // When using double map storage function, user need to pass double map key as an array
            decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1
                ? this._retrieveMulti(args.map((a) => [creator, [a]]), blockHash)
                : this._retrieveMulti(args.map((a) => [creator, a]), blockHash));
        }
        /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
        return this._decorateFunctionMeta(creator, decorated);
    }
    _queueStorage(call, queue) {
        const query = queue === this.__internal__storageSubQ
            ? this._rpcCore.state.subscribeStorage
            : this._rpcCore.state.queryStorageAt;
        let queueIdx = queue.length - 1;
        let valueIdx = 0;
        let valueObs;
        // if we don't have queue entries yet,
        // or the current queue has fired (see from below),
        // or the current queue has the max entries,
        // then we create a new queue
        if (queueIdx === -1 || !queue[queueIdx] || queue[queueIdx][1].length === PAGE_SIZE_Q) {
            queueIdx++;
            valueObs = (0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .from */ .D)(
            // we delay the execution until the next tick, this allows
            // any queries made in this timeframe to be added to the same
            // queue for a single query
            new Promise((resolve) => {
                (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_29__/* .nextTick */ .Y)(() => {
                    // get all the calls in this instance, resolve with it
                    // and then clear the queue so we don't add more
                    // (anything after this will be added to a new queue)
                    const calls = queue[queueIdx][1];
                    delete queue[queueIdx];
                    resolve(calls);
                });
            })).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_25__/* .switchMap */ .w)((calls) => query(calls)));
            queue.push([valueObs, [call]]);
        }
        else {
            valueObs = queue[queueIdx][0];
            valueIdx = queue[queueIdx][1].length;
            queue[queueIdx][1].push(call);
        }
        return valueObs.pipe(
        // return the single value at this index
        (0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .map */ .U)((values) => values[valueIdx]));
    }
    // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
    // we make a subscription, alternatively we push this through a single-shot query
    _decorateStorageCall(creator, decorateMethod) {
        const memoed = (0,_polkadot_rpc_core__WEBPACK_IMPORTED_MODULE_28__/* .memo */ .X)(this.__internal__instanceId, (...args) => {
            const call = (0,_util_validate_js__WEBPACK_IMPORTED_MODULE_24__/* .extractStorageArgs */ .s)(this.__internal__registry, creator, args);
            if (!this.hasSubscriptions) {
                return this._rpcCore.state.getStorage(call);
            }
            return this._queueStorage(call, this.__internal__storageSubQ);
        });
        return decorateMethod(memoed, {
            methodName: creator.method,
            overrideNoSub: (...args) => this._queueStorage((0,_util_validate_js__WEBPACK_IMPORTED_MODULE_24__/* .extractStorageArgs */ .s)(this.__internal__registry, creator, args), this.__internal__storageGetQ)
        });
    }
    // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes
    _retrieveMulti(keys, blockHash) {
        if (!keys.length) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_23__.of)([]);
        }
        const query = this.hasSubscriptions && !blockHash
            ? this._rpcCore.state.subscribeStorage
            : this._rpcCore.state.queryStorageAt;
        if (keys.length <= PAGE_SIZE_V) {
            return blockHash
                ? query(keys, blockHash)
                : query(keys);
        }
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_30__/* .combineLatest */ .a)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_31__/* .arrayChunk */ .Z)(keys, PAGE_SIZE_V).map((k) => blockHash
            ? query(k, blockHash)
            : query(k))).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .map */ .U)(_polkadot_util__WEBPACK_IMPORTED_MODULE_32__/* .arrayFlatten */ .a));
    }
    _retrieveMapKeys({ iterKey, meta, method, section }, at, args) {
        if (!iterKey || !meta.type.isMap) {
            throw new Error('keys can only be retrieved on maps');
        }
        const headKey = iterKey(...args).toHex();
        const startSubject = new rxjs__WEBPACK_IMPORTED_MODULE_10__/* .BehaviorSubject */ .X(headKey);
        const query = at
            ? (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey, at)
            : (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey);
        const setMeta = (key) => key.setMeta(meta, section, method);
        return startSubject.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_25__/* .switchMap */ .w)(query), (0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .map */ .U)((keys) => keys.map(setMeta)), (0,rxjs__WEBPACK_IMPORTED_MODULE_33__/* .tap */ .b)((keys) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_29__/* .nextTick */ .Y)(() => {
            keys.length === PAGE_SIZE_K
                ? startSubject.next(keys[PAGE_SIZE_K - 1].toHex())
                : startSubject.complete();
        })), (0,rxjs__WEBPACK_IMPORTED_MODULE_34__/* .toArray */ .q)(), // toArray since we want to startSubject to be completed
        (0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .map */ .U)(_polkadot_util__WEBPACK_IMPORTED_MODULE_32__/* .arrayFlatten */ .a));
    }
    _retrieveMapKeysPaged({ iterKey, meta, method, section }, at, opts) {
        if (!iterKey || !meta.type.isMap) {
            throw new Error('keys can only be retrieved on maps');
        }
        const setMeta = (key) => key.setMeta(meta, section, method);
        const query = at
            ? (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at)
            : (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
        return query(iterKey(...opts.args).toHex()).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .map */ .U)((keys) => keys.map(setMeta)));
    }
    _retrieveMapEntries(entry, at, args) {
        const query = at
            ? (keys) => this._rpcCore.state.queryStorageAt(keys, at)
            : (keys) => this._rpcCore.state.queryStorageAt(keys);
        return this._retrieveMapKeys(entry, at, args).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_25__/* .switchMap */ .w)((keys) => keys.length
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_30__/* .combineLatest */ .a)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_31__/* .arrayChunk */ .Z)(keys, PAGE_SIZE_V).map(query)).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .map */ .U)((valsArr) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_32__/* .arrayFlatten */ .a)(valsArr).map((value, index) => [keys[index], value])))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_23__.of)([])));
    }
    _retrieveMapEntriesPaged(entry, at, opts) {
        const query = at
            ? (keys) => this._rpcCore.state.queryStorageAt(keys, at)
            : (keys) => this._rpcCore.state.queryStorageAt(keys);
        return this._retrieveMapKeysPaged(entry, at, opts).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_25__/* .switchMap */ .w)((keys) => keys.length
            ? query(keys).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .map */ .U)((valsArr) => valsArr.map((value, index) => [keys[index], value])))
            : (0,rxjs__WEBPACK_IMPORTED_MODULE_23__.of)([])));
    }
    _decorateDeriveRx(decorateMethod) {
        const specName = this._runtimeVersion?.specName.toString();
        // Pull in derive from api-derive
        const available = (0,_polkadot_api_derive__WEBPACK_IMPORTED_MODULE_35__/* .getAvailableDerives */ .vB)(this.__internal__instanceId, this._rx, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_18__/* .objectSpread */ .Z)({}, this._options.derives, this._options.typesBundle?.spec?.[specName || '']?.derives));
        return (0,_util_decorate_js__WEBPACK_IMPORTED_MODULE_36__/* .decorateDeriveSections */ .b)(decorateMethod, available);
    }
    _decorateDerive(decorateMethod) {
        return (0,_util_decorate_js__WEBPACK_IMPORTED_MODULE_36__/* .decorateDeriveSections */ .b)(decorateMethod, this._rx.derive);
    }
    /**
     * Put the `this.onCall` function of ApiRx here, because it is needed by
     * `api._rx`.
     */
    _rxDecorateMethod = (method) => {
        return method;
    };
}


/***/ }),

/***/ 17950:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ Events)
/* harmony export */ });
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73983);

class Events {
    __internal__eventemitter = new eventemitter3__WEBPACK_IMPORTED_MODULE_0__/* .EventEmitter */ .v();
    emit(type, ...args) {
        return this.__internal__eventemitter.emit(type, ...args);
    }
    /**
     * @description Attach an eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.on('connected', (): void => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.on('disconnected', (): void => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */
    on(type, handler) {
        this.__internal__eventemitter.on(type, handler);
        return this;
    }
    /**
     * @description Remove the given eventemitter handler
     *
     * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to unregister.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const handler = (): void => {
     *  console.log('Connected !);
     * };
     *
     * // Start listening
     * api.on('connected', handler);
     *
     * // Stop listening
     * api.off('connected', handler);
     * ```
     */
    off(type, handler) {
        this.__internal__eventemitter.removeListener(type, handler);
        return this;
    }
    /**
     * @description Attach an one-time eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.once('connected', (): void => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.once('disconnected', (): void => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */
    once(type, handler) {
        this.__internal__eventemitter.once(type, handler);
        return this;
    }
}


/***/ }),

/***/ 12361:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ Getters)
/* harmony export */ });
/* harmony import */ var _packageInfo_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(78955);
/* harmony import */ var _find_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50604);
/* harmony import */ var _Init_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80895);



function assertResult(value) {
    if (value === undefined) {
        throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");
    }
    return value;
}
class Getters extends _Init_js__WEBPACK_IMPORTED_MODULE_0__/* .Init */ .j {
    /**
     * @description Runtime call interfaces (currently untyped, only decorated via API options)
     */
    get call() {
        return assertResult(this._call);
    }
    /**
     * @description Contains the parameter types (constants) of all modules.
     *
     * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
     *
     * @example
     * <BR>
     *
     * ```javascript
     * console.log(api.consts.democracy.enactmentPeriod.toString())
     * ```
     */
    get consts() {
        return assertResult(this._consts);
    }
    /**
     * @description Derived results that are injected into the API, allowing for combinations of various query results.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumber((number) => {
     *   console.log('best number', number);
     * });
     * ```
     */
    get derive() {
        return assertResult(this._derive);
    }
    /**
     * @description Errors from metadata
     */
    get errors() {
        return assertResult(this._errors);
    }
    /**
     * @description Events from metadata
     */
    get events() {
        return assertResult(this._events);
    }
    /**
     * @description  Returns the version of extrinsics in-use on this chain
     */
    get extrinsicVersion() {
        return this._extrinsicType;
    }
    /**
     * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
     */
    get genesisHash() {
        return assertResult(this._genesisHash);
    }
    /**
     * @description true is the underlying provider is connected
     */
    get isConnected() {
        return this._isConnected.getValue();
    }
    /**
     * @description The library information name & version (from package.json)
     */
    get libraryInfo() {
        return `${_packageInfo_js__WEBPACK_IMPORTED_MODULE_1__/* .packageInfo */ .b.name} v${_packageInfo_js__WEBPACK_IMPORTED_MODULE_1__/* .packageInfo */ .b.version}`;
    }
    /**
     * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
     *
     * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.query.system.account(<accountId>, ([nonce, balance]) => {
     *   console.log('new free balance', balance.free, 'new nonce', nonce);
     * });
     * ```
     */
    get query() {
        return assertResult(this._query);
    }
    /**
     * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const unsub = await api.queryMulti(
     *   [
     *     // you can include the storage without any parameters
     *     api.query.balances.totalIssuance,
     *     // or you can pass parameters to the storage query
     *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
     *   ],
     *   ([existential, [, { free }]]) => {
     *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
     *
     *     unsub();
     *   }
     * );
     * ```
     */
    get queryMulti() {
        return assertResult(this._queryMulti);
    }
    /**
     * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
     *
     * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.rpc.chain.subscribeNewHeads((header) => {
     *   console.log('new header', header);
     * });
     * ```
     */
    get rpc() {
        return assertResult(this._rpc);
    }
    /**
     * @description Contains the chain information for the current node.
     */
    get runtimeChain() {
        return assertResult(this._runtimeChain);
    }
    /**
     * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
     */
    get runtimeMetadata() {
        return assertResult(this._runtimeMetadata);
    }
    /**
     * @description Contains the version information for the current runtime.
     */
    get runtimeVersion() {
        return assertResult(this._runtimeVersion);
    }
    /**
     * @description The underlying Rx API interface
     */
    get rx() {
        return assertResult(this._rx);
    }
    /**
     * @description Returns the underlying provider stats
     */
    get stats() {
        return this._rpcCore.stats;
    }
    /**
     * @description The type of this API instance, either 'rxjs' or 'promise'
     */
    get type() {
        return this._type;
    }
    /**
     * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.tx.balances
     *   .transferAllowDeath(<recipientId>, <balance>)
     *   .signAndSend(<keyPair>, ({status}) => {
     *     console.log('tx status', status.asFinalized.toHex());
     *   });
     * ```
     */
    get tx() {
        return assertResult(this._extrinsics);
    }
    /**
     * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
     */
    findCall(callIndex) {
        return (0,_find_js__WEBPACK_IMPORTED_MODULE_2__/* .findCall */ .A)(this.registry, callIndex);
    }
    /**
     * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
     */
    findError(errorIndex) {
        return (0,_find_js__WEBPACK_IMPORTED_MODULE_2__/* .findError */ .H)(this.registry, errorIndex);
    }
}


/***/ }),

/***/ 80895:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   j: () => (/* binding */ Init)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(67343);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(79606);
/* harmony import */ var _polkadot_types__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(90884);
/* harmony import */ var _polkadot_types__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(50270);
/* harmony import */ var _polkadot_types_known__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(55597);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63985);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12275);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5035);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(34644);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(38252);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(84061);
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(92782);
/* harmony import */ var _Decorate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(31250);






const KEEPALIVE_INTERVAL = 10000;
const WITH_VERSION_SHORTCUT = false;
const l = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .k)('api/init');
function textToString(t) {
    return t.toString();
}
class Init extends _Decorate_js__WEBPACK_IMPORTED_MODULE_1__/* .Decorate */ ._ {
    __internal__atLast = null;
    __internal__healthTimer = null;
    __internal__registries = [];
    __internal__updateSub = null;
    __internal__waitingRegistries = {};
    constructor(options, type, decorateMethod) {
        super(options, type, decorateMethod);
        // all injected types added to the registry for overrides
        this.registry.setKnownTypes(options);
        // We only register the types (global) if this is not a cloned instance.
        // Do right up-front, so we get in the user types before we are actually
        // doing anything on-chain, this ensures we have the overrides in-place
        if (!options.source) {
            this.registerTypes(options.types);
        }
        else {
            this.__internal__registries = options.source.__internal__registries;
        }
        this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
        this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);
        if (this.supportMulti) {
            this._queryMulti = this._decorateMulti(this._decorateMethod);
            this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
        }
        this._rx.signer = options.signer;
        this._rpcCore.setRegistrySwap((blockHash) => this.getBlockRegistry(blockHash));
        this._rpcCore.setResolveBlockHash((blockNumber) => (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .firstValueFrom */ .z)(this._rpcCore.chain.getBlockHash(blockNumber)));
        if (this.hasSubscriptions) {
            this._rpcCore.provider.on('disconnected', () => this.__internal__onProviderDisconnect());
            this._rpcCore.provider.on('error', (e) => this.__internal__onProviderError(e));
            this._rpcCore.provider.on('connected', () => this.__internal__onProviderConnect());
        }
        else if (!this._options.noInitWarn) {
            l.warn('Api will be available in a limited mode since the provider does not support subscriptions');
        }
        // If the provider was instantiated earlier, and has already emitted a
        // 'connected' event, then the `on('connected')` won't fire anymore. To
        // cater for this case, we call manually `this._onProviderConnect`.
        if (this._rpcCore.provider.isConnected) {
            this.__internal__onProviderConnect().catch(_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .noop */ .Z);
        }
    }
    /**
     * @description Decorates a registry based on the runtime version
     */
    _initRegistry(registry, chain, version, metadata, chainProps) {
        registry.clearCache();
        registry.setChainProperties(chainProps || this.registry.getChainProperties());
        registry.setKnownTypes(this._options);
        registry.register((0,_polkadot_types_known__WEBPACK_IMPORTED_MODULE_4__/* .getSpecTypes */ .kh)(registry, chain, version.specName, version.specVersion));
        registry.setHasher((0,_polkadot_types_known__WEBPACK_IMPORTED_MODULE_4__/* .getSpecHasher */ .ve)(registry, chain, version.specName));
        // for bundled types, pull through the aliases defined
        if (registry.knownTypes.typesBundle) {
            registry.knownTypes.typesAlias = (0,_polkadot_types_known__WEBPACK_IMPORTED_MODULE_4__/* .getSpecAlias */ .Xn)(registry, chain, version.specName);
        }
        registry.setMetadata(metadata, undefined, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .objectSpread */ .Z)({}, (0,_polkadot_types_known__WEBPACK_IMPORTED_MODULE_4__/* .getSpecExtensions */ .oR)(registry, chain, version.specName), this._options.signedExtensions), this._options.noInitWarn);
    }
    /**
     * @description Returns the default versioned registry
     */
    _getDefaultRegistry() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .assertReturn */ .k8)(this.__internal__registries.find(({ isDefault }) => isDefault), 'Initialization error, cannot find the default registry');
    }
    /**
     * @description Returns a decorated API instance at a specific point in time
     */
    async at(blockHash, knownVersion) {
        const u8aHash = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .u8aToU8a */ .Y)(blockHash);
        const u8aHex = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .u8aToHex */ .c)(u8aHash);
        const registry = await this.getBlockRegistry(u8aHash, knownVersion);
        if (!this.__internal__atLast || this.__internal__atLast[0] !== u8aHex) {
            // always create a new decoration - since we are pointing to a specific hash, this
            // means that all queries needs to use that hash (not a previous one already existing)
            this.__internal__atLast = [u8aHex, this._createDecorated(registry, true, null, u8aHash).decoratedApi];
        }
        return this.__internal__atLast[1];
    }
    async _createBlockRegistry(blockHash, header, version) {
        const registry = new _polkadot_types__WEBPACK_IMPORTED_MODULE_9__/* .TypeRegistry */ .P(blockHash);
        const metadata = new _polkadot_types__WEBPACK_IMPORTED_MODULE_10__/* .Metadata */ .S(registry, await (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .firstValueFrom */ .z)(this._rpcCore.state.getMetadata.raw(header.parentHash)));
        const runtimeChain = this._runtimeChain;
        if (!runtimeChain) {
            throw new Error('Invalid initializion order, runtimeChain is not available');
        }
        this._initRegistry(registry, runtimeChain, version, metadata);
        // add our new registry
        const result = { counter: 0, lastBlockHash: blockHash, metadata, registry, runtimeVersion: version };
        this.__internal__registries.push(result);
        return result;
    }
    _cacheBlockRegistryProgress(key, creator) {
        // look for waiting resolves
        let waiting = this.__internal__waitingRegistries[key];
        if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__/* .isUndefined */ .o)(waiting)) {
            // nothing waiting, construct new
            waiting = this.__internal__waitingRegistries[key] = new Promise((resolve, reject) => {
                creator()
                    .then((registry) => {
                    delete this.__internal__waitingRegistries[key];
                    resolve(registry);
                })
                    .catch((error) => {
                    delete this.__internal__waitingRegistries[key];
                    reject(error);
                });
            });
        }
        return waiting;
    }
    _getBlockRegistryViaVersion(blockHash, version) {
        if (version) {
            // check for pre-existing registries. We also check specName, e.g. it
            // could be changed like in Westmint with upgrade from shell -> westmint
            const existingViaVersion = this.__internal__registries.find(({ runtimeVersion: { specName, specVersion } }) => specName.eq(version.specName) &&
                specVersion.eq(version.specVersion));
            if (existingViaVersion) {
                existingViaVersion.counter++;
                existingViaVersion.lastBlockHash = blockHash;
                return existingViaVersion;
            }
        }
        return null;
    }
    async _getBlockRegistryViaHash(blockHash) {
        // ensure we have everything required
        if (!this._genesisHash || !this._runtimeVersion) {
            throw new Error('Cannot retrieve data on an uninitialized chain');
        }
        // We have to assume that on the RPC layer the calls used here does not call back into
        // the registry swap, so getHeader & getRuntimeVersion should not be historic
        const header = this.registry.createType('HeaderPartial', this._genesisHash.eq(blockHash)
            ? { number: _polkadot_util__WEBPACK_IMPORTED_MODULE_12__/* .BN_ZERO */ .nw, parentHash: this._genesisHash }
            : await (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .firstValueFrom */ .z)(this._rpcCore.chain.getHeader.raw(blockHash)));
        if (header.parentHash.isEmpty) {
            throw new Error('Unable to retrieve header and parent from supplied hash');
        }
        // get the runtime version, either on-chain or via an known upgrade history
        const [firstVersion, lastVersion] = (0,_polkadot_types_known__WEBPACK_IMPORTED_MODULE_4__/* .getUpgradeVersion */ .ur)(this._genesisHash, header.number);
        const version = this.registry.createType('RuntimeVersionPartial', WITH_VERSION_SHORTCUT && (firstVersion && (lastVersion ||
            firstVersion.specVersion.eq(this._runtimeVersion.specVersion)))
            ? { apis: firstVersion.apis, specName: this._runtimeVersion.specName, specVersion: firstVersion.specVersion }
            : await (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .firstValueFrom */ .z)(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
        return (
        // try to find via version
        this._getBlockRegistryViaVersion(blockHash, version) ||
            // return new or in-flight result
            await this._cacheBlockRegistryProgress(version.toHex(), () => this._createBlockRegistry(blockHash, header, version)));
    }
    /**
     * @description Sets up a registry based on the block hash defined
     */
    async getBlockRegistry(blockHash, knownVersion) {
        return (
        // try to find via blockHash
        this.__internal__registries.find(({ lastBlockHash }) => lastBlockHash && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__/* .u8aEq */ .S)(lastBlockHash, blockHash)) ||
            // try to find via version
            this._getBlockRegistryViaVersion(blockHash, knownVersion) ||
            // return new or in-flight result
            await this._cacheBlockRegistryProgress((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .u8aToHex */ .c)(blockHash), () => this._getBlockRegistryViaHash(blockHash)));
    }
    async _loadMeta() {
        // on re-connection to the same chain, we don't want to re-do everything from chain again
        if (this._isReady) {
            return true;
        }
        this._unsubscribeUpdates();
        // only load from on-chain if we are not a clone (default path), alternatively
        // just use the values from the source instance provided
        [this._genesisHash, this._runtimeMetadata] = this._options.source?._isReady
            ? await this._metaFromSource(this._options.source)
            : await this._metaFromChain(this._options.metadata);
        return this._initFromMeta(this._runtimeMetadata);
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async _metaFromSource(source) {
        this._extrinsicType = source.extrinsicVersion;
        this._runtimeChain = source.runtimeChain;
        this._runtimeVersion = source.runtimeVersion;
        // manually build a list of all available methods in this RPC, we are
        // going to filter on it to align the cloned RPC without making a call
        const sections = Object.keys(source.rpc);
        const rpcs = [];
        for (let s = 0, scount = sections.length; s < scount; s++) {
            const section = sections[s];
            const methods = Object.keys(source.rpc[section]);
            for (let m = 0, mcount = methods.length; m < mcount; m++) {
                rpcs.push(`${section}_${methods[m]}`);
            }
        }
        this._filterRpc(rpcs, (0,_polkadot_types_known__WEBPACK_IMPORTED_MODULE_4__/* .getSpecRpc */ .KM)(this.registry, source.runtimeChain, source.runtimeVersion.specName));
        return [source.genesisHash, source.runtimeMetadata];
    }
    // subscribe to metadata updates, inject the types on changes
    _subscribeUpdates() {
        if (this.__internal__updateSub || !this.hasSubscriptions) {
            return;
        }
        this.__internal__updateSub = this._rpcCore.state.subscribeRuntimeVersion().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_14__/* .switchMap */ .w)((version) => 
        // only retrieve the metadata when the on-chain version has been changed
        this._runtimeVersion?.specVersion.eq(version.specVersion)
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.of)(false)
            : this._rpcCore.state.getMetadata().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_16__/* .map */ .U)((metadata) => {
                l.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
                this._runtimeMetadata = metadata;
                this._runtimeVersion = version;
                this._rx.runtimeVersion = version;
                // update the default registry version
                const thisRegistry = this._getDefaultRegistry();
                const runtimeChain = this._runtimeChain;
                if (!runtimeChain) {
                    throw new Error('Invalid initializion order, runtimeChain is not available');
                }
                // setup the data as per the current versions
                thisRegistry.metadata = metadata;
                thisRegistry.runtimeVersion = version;
                this._initRegistry(this.registry, runtimeChain, version, metadata);
                this._injectMetadata(thisRegistry, true);
                return true;
            })))).subscribe();
    }
    async _metaFromChain(optMetadata) {
        const [genesisHash, runtimeVersion, chain, chainProps, rpcMethods, chainMetadata] = await Promise.all([
            (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .firstValueFrom */ .z)(this._rpcCore.chain.getBlockHash(0)),
            (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .firstValueFrom */ .z)(this._rpcCore.state.getRuntimeVersion()),
            (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .firstValueFrom */ .z)(this._rpcCore.system.chain()),
            (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .firstValueFrom */ .z)(this._rpcCore.system.properties()),
            (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .firstValueFrom */ .z)(this._rpcCore.rpc.methods()),
            optMetadata
                ? Promise.resolve(null)
                : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .firstValueFrom */ .z)(this._rpcCore.state.getMetadata())
        ]);
        // set our chain version & genesisHash as returned
        this._runtimeChain = chain;
        this._runtimeVersion = runtimeVersion;
        this._rx.runtimeVersion = runtimeVersion;
        // retrieve metadata, either from chain  or as pass-in via options
        const metadataKey = `${genesisHash.toHex() || '0x'}-${runtimeVersion.specVersion.toString()}`;
        const metadata = chainMetadata || (optMetadata?.[metadataKey]
            ? new _polkadot_types__WEBPACK_IMPORTED_MODULE_10__/* .Metadata */ .S(this.registry, optMetadata[metadataKey])
            : await (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .firstValueFrom */ .z)(this._rpcCore.state.getMetadata()));
        // initializes the registry & RPC
        this._initRegistry(this.registry, chain, runtimeVersion, metadata, chainProps);
        this._filterRpc(rpcMethods.methods.map(textToString), (0,_polkadot_types_known__WEBPACK_IMPORTED_MODULE_4__/* .getSpecRpc */ .KM)(this.registry, chain, runtimeVersion.specName));
        this._subscribeUpdates();
        // setup the initial registry, when we have none
        if (!this.__internal__registries.length) {
            this.__internal__registries.push({ counter: 0, isDefault: true, metadata, registry: this.registry, runtimeVersion });
        }
        // get unique types & validate
        metadata.getUniqTypes(this._options.throwOnUnknown || false);
        return [genesisHash, metadata];
    }
    _initFromMeta(metadata) {
        const runtimeVersion = this._runtimeVersion;
        if (!runtimeVersion) {
            throw new Error('Invalid initializion order, runtimeVersion is not available');
        }
        this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
        this._rx.extrinsicType = this._extrinsicType;
        this._rx.genesisHash = this._genesisHash;
        this._rx.runtimeVersion = runtimeVersion;
        // inject metadata and adjust the types as detected
        this._injectMetadata(this._getDefaultRegistry(), true);
        // derive is last, since it uses the decorated rx
        this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
        this._derive = this._decorateDerive(this._decorateMethod);
        return true;
    }
    _subscribeHealth() {
        this._unsubscribeHealth();
        // Only enable the health keepalive on WS, not needed on HTTP
        this.__internal__healthTimer = this.hasSubscriptions
            ? setInterval(() => {
                (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .firstValueFrom */ .z)(this._rpcCore.system.health.raw()).catch(_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .noop */ .Z);
            }, KEEPALIVE_INTERVAL)
            : null;
    }
    _unsubscribeHealth() {
        if (this.__internal__healthTimer) {
            clearInterval(this.__internal__healthTimer);
            this.__internal__healthTimer = null;
        }
    }
    _unsubscribeUpdates() {
        if (this.__internal__updateSub) {
            this.__internal__updateSub.unsubscribe();
            this.__internal__updateSub = null;
        }
    }
    _unsubscribe() {
        this._unsubscribeHealth();
        this._unsubscribeUpdates();
    }
    async __internal__onProviderConnect() {
        this._isConnected.next(true);
        this.emit('connected');
        try {
            const cryptoReady = this._options.initWasm === false
                ? true
                : await (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_17__/* .cryptoWaitReady */ .I)();
            const hasMeta = await this._loadMeta();
            this._subscribeHealth();
            if (hasMeta && !this._isReady && cryptoReady) {
                this._isReady = true;
                this.emit('ready', this);
            }
        }
        catch (_error) {
            const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
            l.error(error);
            this.emit('error', error);
        }
    }
    __internal__onProviderDisconnect() {
        this._isConnected.next(false);
        this._unsubscribe();
        this.emit('disconnected');
    }
    __internal__onProviderError(error) {
        this.emit('error', error);
    }
}


/***/ }),

/***/ 50604:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ findCall),
/* harmony export */   H: () => (/* binding */ findError)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42740);

function findCall(registry, callIndex) {
    return registry.findMetaCall((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .u8aToU8a */ .Y)(callIndex));
}
function findError(registry, errorIndex) {
    return registry.findMetaError((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .u8aToU8a */ .Y)(errorIndex));
}


/***/ }),

/***/ 4625:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   q: () => (/* binding */ ApiBase)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(42740);
/* harmony import */ var _Getters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12361);


class ApiBase extends _Getters_js__WEBPACK_IMPORTED_MODULE_0__/* .Getters */ .f {
    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHeads((header) => {
     *   console.log(`new block #${header.number.toNumber()}`);
     * });
     * ```
     */
    constructor(options = {}, type, decorateMethod) {
        super(options, type, decorateMethod);
    }
    /**
     * @description Connect from the underlying provider, halting all network traffic
     */
    connect() {
        return this._rpcCore.connect();
    }
    /**
     * @description Disconnect from the underlying provider, halting all network traffic
     */
    disconnect() {
        this._unsubscribe();
        return this._rpcCore.disconnect();
    }
    /**
     * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
     */
    setSigner(signer) {
        this._rx.signer = signer;
    }
    /**
     * @description Signs a raw signer payload, string or Uint8Array
     */
    async sign(address, data, { signer } = {}) {
        if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .H)(address)) {
            const _signer = signer || this._rx.signer;
            if (!_signer?.signRaw) {
                throw new Error('No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
            }
            return (await _signer.signRaw((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({ type: 'bytes' }, data, { address }))).signature;
        }
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .u8aToHex */ .c)(address.sign((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .u8aToU8a */ .Y)(data.data)));
    }
}


/***/ }),

/***/ 78955:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ packageInfo)
/* harmony export */ });
const packageInfo = { name: '@polkadot/api', path: ( true) ? new URL("file:///home/runner/work/nova-spektr/nova-spektr/node_modules/.pnpm/@polkadot+api@10.11.2/node_modules/@polkadot/api/packageInfo.js").pathname.substring(0, new URL("file:///home/runner/work/nova-spektr/nova-spektr/node_modules/.pnpm/@polkadot+api@10.11.2/node_modules/@polkadot/api/packageInfo.js").pathname.lastIndexOf('/') + 1) : 0, type: 'esm', version: '10.11.2' };


/***/ }),

/***/ 66223:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ ApiPromise)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12275);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(53472);
/* harmony import */ var _base_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4625);
/* harmony import */ var _Combinator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(53716);
/* harmony import */ var _decorateMethod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17752);




/**
 * # @polkadot/api/promise
 *
 * ## Overview
 *
 * @name ApiPromise
 * @description
 * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.
 *
 * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.
 *
 * @see [[ApiRx]]
 *
 * ## Usage
 *
 * Making rpc calls -
 * <BR>
 *
 * ```javascript
 * import ApiPromise from '@polkadot/api/promise';
 *
 * // initialise via static create
 * const api = await ApiPromise.create();
 *
 * // make a subscription to the network head
 * api.rpc.chain.subscribeNewHeads((header) => {
 *   console.log(`Chain is at #${header.number}`);
 * });
 * ```
 * <BR>
 *
 * Subscribing to chain state -
 * <BR>
 *
 * ```javascript
 * import { ApiPromise, WsProvider } from '@polkadot/api';
 *
 * // initialise a provider with a specific endpoint
 * const provider = new WsProvider('wss://example.com:9944')
 *
 * // initialise via isReady & new with specific provider
 * const api = await new ApiPromise({ provider }).isReady;
 *
 * // retrieve the block target time
 * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();
 * let last = 0;
 *
 * // subscribe to the current block timestamp, updates automatically (callback provided)
 * api.query.timestamp.now((timestamp) => {
 *   const elapsed = last
 *     ? `, ${timestamp.toNumber() - last}s since last`
 *     : '';
 *
 *   last = timestamp.toNumber();
 *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);
 * });
 * ```
 * <BR>
 *
 * Submitting a transaction -
 * <BR>
 *
 * ```javascript
 * import ApiPromise from '@polkadot/api/promise';
 *
 * ApiPromise.create().then((api) => {
 *   const [nonce] = await api.query.system.account(keyring.alice.address);
 *
 *   api.tx.balances
 *     // create transfer
 *     transfer(keyring.bob.address, 12345)
 *     // sign the transcation
 *     .sign(keyring.alice, { nonce })
 *     // send the transaction (optional status callback)
 *     .send((status) => {
 *       console.log(`current status ${status.type}`);
 *     })
 *     // retrieve the submitted extrinsic hash
 *     .then((hash) => {
 *       console.log(`submitted with hash ${hash}`);
 *     });
 * });
 * ```
 */
class ApiPromise extends _base_index_js__WEBPACK_IMPORTED_MODULE_0__/* .ApiBase */ .q {
    __internal__isReadyPromise;
    __internal__isReadyOrErrorPromise;
    /**
     * @description Creates an instance of the ApiPromise class
     * @param options Options to create an instance. This can be either [[ApiOptions]] or
     * an [[WsProvider]].
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * new Api().isReady.then((api) => {
     *   api.rpc.subscribeNewHeads((header) => {
     *     console.log(`new block #${header.number.toNumber()}`);
     *   });
     * });
     * ```
     */
    constructor(options) {
        super(options, 'promise', _decorateMethod_js__WEBPACK_IMPORTED_MODULE_1__/* .toPromiseMethod */ .x);
        this.__internal__isReadyPromise = new Promise((resolve) => {
            super.once('ready', () => resolve(this));
        });
        this.__internal__isReadyOrErrorPromise = new Promise((resolve, reject) => {
            const tracker = (0,_decorateMethod_js__WEBPACK_IMPORTED_MODULE_1__/* .promiseTracker */ .g)(resolve, reject);
            super.once('ready', () => tracker.resolve(this));
            super.once('error', (error) => tracker.reject(error));
        });
    }
    /**
     * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
     * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
     * provider (see the constructor arguments)
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * Api.create().then(async (api) => {
     *   const timestamp = await api.query.timestamp.now();
     *
     *   console.log(`lastest block timestamp ${timestamp}`);
     * });
     * ```
     */
    static create(options) {
        const instance = new ApiPromise(options);
        if (options && options.throwOnConnect) {
            return instance.isReadyOrError;
        }
        // Swallow any rejections on isReadyOrError
        // (in Node 15.x this creates issues, when not being looked at)
        instance.isReadyOrError.catch(_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .noop */ .Z);
        return instance.isReady;
    }
    /**
     * @description Promise that resolves the first time we are connected and loaded
     */
    get isReady() {
        return this.__internal__isReadyPromise;
    }
    /**
     * @description Promise that resolves if we can connect, or reject if there is an error
     */
    get isReadyOrError() {
        return this.__internal__isReadyOrErrorPromise;
    }
    /**
     * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
     */
    clone() {
        return new ApiPromise((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .objectSpread */ .Z)({}, this._options, { source: this }));
    }
    /**
     * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
     * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
     * @param callback A callback that will return an Array of all the values this combinator has been applied to
     * @example
     * <BR>
     *
     * ```javascript
     * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
     *
     * // combines values from balance & nonce as it updates
     * api.combineLatest([
     *   api.rpc.chain.subscribeNewHeads,
     *   (cb) => api.query.system.account(address, cb)
     * ], ([head, [balance, nonce]]) => {
     *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
     * });
     * ```
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async combineLatest(fns, callback) {
        const combinator = new _Combinator_js__WEBPACK_IMPORTED_MODULE_4__/* .Combinator */ .H(fns, callback);
        return () => {
            combinator.unsubscribe();
        };
    }
}


/***/ }),

/***/ 53716:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   H: () => (/* binding */ Combinator)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73092);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12275);

class Combinator {
    __internal__allHasFired = false;
    __internal__callback;
    __internal__fired = [];
    __internal__fns = [];
    __internal__isActive = true;
    __internal__results = [];
    __internal__subscriptions = [];
    constructor(fns, callback) {
        this.__internal__callback = callback;
        // eslint-disable-next-line @typescript-eslint/require-await
        this.__internal__subscriptions = fns.map(async (input, index) => {
            const [fn, ...args] = Array.isArray(input)
                ? input
                : [input];
            this.__internal__fired.push(false);
            this.__internal__fns.push(fn);
            // Not quite 100% how to have a variable number at the front here
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/ban-types
            return fn(...args, this._createCallback(index));
        });
    }
    _allHasFired() {
        this.__internal__allHasFired ||= this.__internal__fired.filter((hasFired) => !hasFired).length === 0;
        return this.__internal__allHasFired;
    }
    _createCallback(index) {
        return (value) => {
            this.__internal__fired[index] = true;
            this.__internal__results[index] = value;
            this._triggerUpdate();
        };
    }
    _triggerUpdate() {
        if (!this.__internal__isActive || !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(this.__internal__callback) || !this._allHasFired()) {
            return;
        }
        try {
            Promise
                .resolve(this.__internal__callback(this.__internal__results))
                .catch(_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .noop */ .Z);
        }
        catch {
            // swallow, we don't want the handler to trip us up
        }
    }
    unsubscribe() {
        if (!this.__internal__isActive) {
            return;
        }
        this.__internal__isActive = false;
        this.__internal__subscriptions.map(async (subscription) => {
            try {
                const unsubscribe = await subscription;
                if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(unsubscribe)) {
                    unsubscribe();
                }
            }
            catch {
                // ignore
            }
        });
    }
}


/***/ }),

/***/ 17752:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ promiseTracker),
/* harmony export */   x: () => (/* binding */ toPromiseMethod)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64818);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(92646);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(81083);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73092);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(92901);


function promiseTracker(resolve, reject) {
    let isCompleted = false;
    return {
        reject: (error) => {
            if (!isCompleted) {
                isCompleted = true;
                reject(error);
            }
            return rxjs__WEBPACK_IMPORTED_MODULE_0__/* .EMPTY */ .E;
        },
        resolve: (value) => {
            if (!isCompleted) {
                isCompleted = true;
                resolve(value);
            }
        }
    };
}
function extractArgs(args, needsCallback) {
    const actualArgs = args.slice();
    // If the last arg is a function, we pop it, put it into callback.
    // actualArgs will then hold the actual arguments to be passed to `method`
    const callback = (args.length && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(args[args.length - 1]))
        ? actualArgs.pop()
        : undefined;
    // When we need a subscription, ensure that a valid callback is actually passed
    if (needsCallback && !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(callback)) {
        throw new Error('Expected a callback to be passed with subscriptions');
    }
    return [actualArgs, callback];
}
function decorateCall(method, args) {
    return new Promise((resolve, reject) => {
        // single result tracker - either reject with Error or resolve with Codec result
        const tracker = promiseTracker(resolve, reject);
        // encoding errors reject immediately, any result unsubscribes and resolves
        const subscription = method(...args)
            .pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .catchError */ .K)((error) => tracker.reject(error)))
            .subscribe((result) => {
            tracker.resolve(result);
            (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .nextTick */ .Y)(() => subscription.unsubscribe());
        });
    });
}
function decorateSubscribe(method, args, resultCb) {
    return new Promise((resolve, reject) => {
        // either reject with error or resolve with unsubscribe callback
        const tracker = promiseTracker(resolve, reject);
        // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback
        const subscription = method(...args)
            .pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .catchError */ .K)((error) => tracker.reject(error)), (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .tap */ .b)(() => tracker.resolve(() => subscription.unsubscribe())))
            .subscribe((result) => {
            // queue result (back of queue to clear current)
            (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .nextTick */ .Y)(() => resultCb(result));
        });
    });
}
/**
 * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent
 */
function toPromiseMethod(method, options) {
    const needsCallback = !!(options?.methodName && options.methodName.includes('subscribe'));
    return function (...args) {
        const [actualArgs, resultCb] = extractArgs(args, needsCallback);
        return resultCb
            ? decorateSubscribe(method, actualArgs, resultCb)
            : decorateCall(options?.overrideNoSub || method, actualArgs);
    };
}


/***/ }),

/***/ 74356:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   h: () => (/* binding */ SubmittableResult)
/* harmony export */ });
const recordIdentity = (record) => record;
function filterAndApply(events, section, methods, onFound) {
    return events
        .filter(({ event }) => section === event.section &&
        methods.includes(event.method))
        .map((record) => onFound(record));
}
function getDispatchError({ event: { data: [dispatchError] } }) {
    return dispatchError;
}
function getDispatchInfo({ event: { data, method } }) {
    return method === 'ExtrinsicSuccess'
        ? data[0]
        : data[1];
}
function extractError(events = []) {
    return filterAndApply(events, 'system', ['ExtrinsicFailed'], getDispatchError)[0];
}
function extractInfo(events = []) {
    return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], getDispatchInfo)[0];
}
class SubmittableResult {
    dispatchError;
    dispatchInfo;
    internalError;
    events;
    status;
    txHash;
    txIndex;
    blockNumber;
    constructor({ blockNumber, dispatchError, dispatchInfo, events, internalError, status, txHash, txIndex }) {
        this.dispatchError = dispatchError || extractError(events);
        this.dispatchInfo = dispatchInfo || extractInfo(events);
        this.events = events || [];
        this.internalError = internalError;
        this.status = status;
        this.txHash = txHash;
        this.txIndex = txIndex;
        this.blockNumber = blockNumber;
    }
    get isCompleted() {
        return this.isError || this.status.isInBlock || this.status.isFinalized;
    }
    get isError() {
        return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
    }
    get isFinalized() {
        return this.status.isFinalized;
    }
    get isInBlock() {
        return this.status.isInBlock;
    }
    get isWarning() {
        return this.status.isRetracted;
    }
    /**
     * @description Filters EventRecords for the specified method & section (there could be multiple)
     */
    filterRecords(section, method) {
        return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);
    }
    /**
     * @description Finds an EventRecord for the specified method & section
     */
    findRecord(section, method) {
        return this.filterRecords(section, method)[0];
    }
    /**
     * @description Creates a human representation of the output
     */
    toHuman(isExtended) {
        return {
            dispatchError: this.dispatchError?.toHuman(),
            dispatchInfo: this.dispatchInfo?.toHuman(),
            events: this.events.map((e) => e.toHuman(isExtended)),
            internalError: this.internalError?.message.toString(),
            status: this.status.toHuman(isExtended)
        };
    }
}


/***/ }),

/***/ 72397:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   q: () => (/* binding */ createClass)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(96918);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(69248);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(79606);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(2740);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(85296);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(92646);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(81083);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52906);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73092);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16996);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12275);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(38589);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(40851);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(23057);
/* harmony import */ var _Result_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(74356);




function makeEraOptions(api, registry, partialOptions, { header, mortalLength, nonce }) {
    if (!header) {
        if (partialOptions.era && !partialOptions.blockHash) {
            throw new Error('Expected blockHash to be passed alongside non-immortal era options');
        }
        if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .h)(partialOptions.era)) {
            // since we have no header, it is immortal, remove any option overrides
            // so we only supply the genesisHash and no era to the construction
            delete partialOptions.era;
            delete partialOptions.blockHash;
        }
        return makeSignOptions(api, partialOptions, { nonce });
    }
    return makeSignOptions(api, partialOptions, {
        blockHash: header.hash,
        era: registry.createTypeUnsafe('ExtrinsicEra', [{
                current: header.number,
                period: partialOptions.era || mortalLength
            }]),
        nonce
    });
}
function makeSignAndSendOptions(partialOptions, statusCb) {
    let options = {};
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(partialOptions)) {
        statusCb = partialOptions;
    }
    else {
        options = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({}, partialOptions);
    }
    return [options, statusCb];
}
function makeSignOptions(api, partialOptions, extras) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({ blockHash: api.genesisHash, genesisHash: api.genesisHash }, partialOptions, extras, { runtimeVersion: api.runtimeVersion, signedExtensions: api.registry.signedExtensions, version: api.extrinsicType });
}
function optionsOrNonce(partialOptions = {}) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isBn */ .H)(partialOptions) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .h)(partialOptions)
        ? { nonce: partialOptions }
        : partialOptions;
}
function createClass({ api, apiType, blockHash, decorateMethod }) {
    // an instance of the base extrinsic for us to extend
    const ExtrinsicBase = api.registry.createClass('Extrinsic');
    class Submittable extends ExtrinsicBase {
        __internal__ignoreStatusCb;
        __internal__transformResult = (_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .identity */ .y);
        constructor(registry, extrinsic) {
            super(registry, extrinsic, { version: api.extrinsicType });
            this.__internal__ignoreStatusCb = apiType === 'rxjs';
        }
        get hasDryRun() {
            return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(api.rpc.system?.dryRun);
        }
        get hasPaymentInfo() {
            return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(api.call.transactionPaymentApi?.queryInfo);
        }
        // dry run an extrinsic
        dryRun(account, optionsOrHash) {
            if (!this.hasDryRun) {
                throw new Error('The system.dryRun RPC call is not available in your environment');
            }
            if (blockHash || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isString */ .H)(optionsOrHash) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .isU8a */ .U)(optionsOrHash)) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(() => this.__internal__observeSign(account, optionsOrHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .switchMap */ .w)(() => api.rpc.system.dryRun(this.toHex()))))();
        }
        // calculate the payment info for this transaction (if signed and submitted)
        paymentInfo(account, optionsOrHash) {
            if (!this.hasPaymentInfo) {
                throw new Error('The transactionPaymentApi.queryInfo runtime call is not available in your environment');
            }
            if (blockHash || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isString */ .H)(optionsOrHash) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .isU8a */ .U)(optionsOrHash)) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                return decorateMethod(() => api.callAt(blockHash || optionsOrHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .switchMap */ .w)((callAt) => {
                    const u8a = this.toU8a();
                    return callAt.transactionPaymentApi.queryInfo(u8a, u8a.length);
                })));
            }
            const [allOptions] = makeSignAndSendOptions(optionsOrHash);
            const address = (0,_util_index_js__WEBPACK_IMPORTED_MODULE_8__/* .isKeyringPair */ .v)(account) ? account.address : account.toString();
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_9__/* .first */ .P)(), (0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .switchMap */ .w)((signingInfo) => {
                // setup our options (same way as in signAndSend)
                const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo);
                const signOptions = makeSignOptions(api, eraOptions, {});
                // 1. Don't use the internal objects inside the new tx (hence toU8a)
                // 2. Don't override the data from existing signed extrinsics
                // 3. Ensure that this object stays intact, with no new sign after operation
                const u8a = api.tx(this.toU8a()).signFake(address, signOptions).toU8a();
                return api.call.transactionPaymentApi.queryInfo(u8a, u8a.length);
            })))();
        }
        // send implementation for both immediate Hash and statusCb variants
        send(statusCb) {
            const isSubscription = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(isSubscription
                ? this.__internal__observeSubscribe
                : this.__internal__observeSend)(statusCb);
        }
        /**
         * @description Signs a transaction, returning `this` to allow chaining. E.g.: `signAsync(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
         */
        signAsync(account, partialOptions) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(() => this.__internal__observeSign(account, partialOptions).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_10__/* .map */ .U)(() => this)))();
        }
        // signAndSend implementation for all 3 cases above
        signAndSend(account, partialOptions, optionalStatusCb) {
            const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
            const isSubscription = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
            return decorateMethod(() => this.__internal__observeSign(account, options).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .switchMap */ .w)((info) => isSubscription
                ? this.__internal__observeSubscribe(info)
                : this.__internal__observeSend(info))) // FIXME This is wrong, SubmittableResult is _not_ a codec
            )(statusCb);
        }
        // adds a transform to the result, applied before result is returned
        withResultTransform(transform) {
            this.__internal__transformResult = transform;
            return this;
        }
        __internal__observeSign = (account, partialOptions) => {
            const address = (0,_util_index_js__WEBPACK_IMPORTED_MODULE_8__/* .isKeyringPair */ .v)(account) ? account.address : account.toString();
            const options = optionsOrNonce(partialOptions);
            return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_9__/* .first */ .P)(), (0,rxjs__WEBPACK_IMPORTED_MODULE_11__/* .mergeMap */ .z)(async (signingInfo) => {
                const eraOptions = makeEraOptions(api, this.registry, options, signingInfo);
                let updateId = -1;
                if ((0,_util_index_js__WEBPACK_IMPORTED_MODULE_8__/* .isKeyringPair */ .v)(account)) {
                    this.sign(account, eraOptions);
                }
                else {
                    updateId = await this.__internal__signViaSigner(address, eraOptions, signingInfo.header);
                }
                return { options: eraOptions, updateId };
            }));
        };
        __internal__observeStatus = (txHash, status) => {
            if (!status.isFinalized && !status.isInBlock) {
                return (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.of)(this.__internal__transformResult(new _Result_js__WEBPACK_IMPORTED_MODULE_13__/* .SubmittableResult */ .h({
                    status,
                    txHash
                })));
            }
            const blockHash = status.isInBlock
                ? status.asInBlock
                : status.asFinalized;
            return api.derive.tx.events(blockHash).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_10__/* .map */ .U)(({ block, events }) => this.__internal__transformResult(new _Result_js__WEBPACK_IMPORTED_MODULE_13__/* .SubmittableResult */ .h({
                ...(0,_util_index_js__WEBPACK_IMPORTED_MODULE_14__/* .filterEvents */ .k)(txHash, block, events, status),
                status,
                txHash
            }))), (0,rxjs__WEBPACK_IMPORTED_MODULE_15__/* .catchError */ .K)((internalError) => (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.of)(this.__internal__transformResult(new _Result_js__WEBPACK_IMPORTED_MODULE_13__/* .SubmittableResult */ .h({
                internalError,
                status,
                txHash
            })))));
        };
        __internal__observeSend = (info) => {
            return api.rpc.author.submitExtrinsic(this).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_16__/* .tap */ .b)((hash) => {
                this.__internal__updateSigner(hash, info);
            }));
        };
        __internal__observeSubscribe = (info) => {
            const txHash = this.hash;
            return api.rpc.author.submitAndWatchExtrinsic(this).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__/* .switchMap */ .w)((status) => this.__internal__observeStatus(txHash, status)), (0,rxjs__WEBPACK_IMPORTED_MODULE_16__/* .tap */ .b)((status) => {
                this.__internal__updateSigner(status, info);
            }));
        };
        __internal__signViaSigner = async (address, options, header) => {
            const signer = options.signer || api.signer;
            if (!signer) {
                throw new Error('No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
            }
            const payload = this.registry.createTypeUnsafe('SignerPayload', [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({}, options, {
                    address,
                    blockNumber: header ? header.number : 0,
                    method: this.method
                })]);
            let result;
            if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(signer.signPayload)) {
                result = await signer.signPayload(payload.toPayload());
            }
            else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(signer.signRaw)) {
                result = await signer.signRaw(payload.toRaw());
            }
            else {
                throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');
            }
            // Here we explicitly call `toPayload()` again instead of working with an object
            // (reference) as passed to the signer. This means that we are sure that the
            // payload data is not modified from our inputs, but the signer
            super.addSignature(address, result.signature, payload.toPayload());
            return result.id;
        };
        __internal__updateSigner = (status, info) => {
            if (info && (info.updateId !== -1)) {
                const { options, updateId } = info;
                const signer = options.signer || api.signer;
                if (signer && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(signer.update)) {
                    signer.update(updateId, status);
                }
            }
        };
    }
    return Submittable;
}


/***/ }),

/***/ 52596:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   v: () => (/* binding */ createSubmittable)
/* harmony export */ });
/* harmony import */ var _createClass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(72397);

function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
    const Submittable = (0,_createClass_js__WEBPACK_IMPORTED_MODULE_0__/* .createClass */ .q)({ api, apiType, blockHash, decorateMethod });
    return (extrinsic) => new Submittable(registry || api.registry, extrinsic);
}


/***/ }),

/***/ 91620:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ augmentObject)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63985);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18754);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56810);

const l = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .k)('api/augment');
function logLength(type, values, and = []) {
    return values.length
        ? ` ${values.length} ${type}${and.length ? ' and' : ''}`
        : '';
}
function logValues(type, values) {
    return values.length
        ? `\n\t${type.padStart(7)}: ${values.sort().join(', ')}`
        : '';
}
function warn(prefix, type, [added, removed]) {
    if (added.length || removed.length) {
        l.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);
    }
}
function findSectionExcludes(a, b) {
    return a.filter((s) => !b.includes(s));
}
function findSectionIncludes(a, b) {
    return a.filter((s) => b.includes(s));
}
function extractSections(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = Object.keys(dst);
    return [
        findSectionExcludes(srcSections, dstSections),
        findSectionExcludes(dstSections, srcSections)
    ];
}
function findMethodExcludes(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
    const excludes = [];
    for (let s = 0, scount = dstSections.length; s < scount; s++) {
        const section = dstSections[s];
        const srcMethods = Object.keys(src[section]);
        const dstMethods = Object.keys(dst[section]);
        for (let d = 0, mcount = dstMethods.length; d < mcount; d++) {
            const method = dstMethods[d];
            if (!srcMethods.includes(method)) {
                excludes.push(`${section}.${method}`);
            }
        }
    }
    return excludes;
}
function extractMethods(src, dst) {
    return [
        findMethodExcludes(dst, src),
        findMethodExcludes(src, dst)
    ];
}
/**
 * @description Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is
 * already available, but rather just adds new missing items into the result object.
 * @internal
 */
function augmentObject(prefix, src, dst, fromEmpty = false) {
    fromEmpty && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .objectClear */ .n)(dst);
    // NOTE: This part is slightly problematic since it will get the
    // values for at least all the sections and the names of the methods
    // (Since methods won't be decorated before lazy, this _may_ be ok)
    if (prefix && Object.keys(dst).length) {
        warn(prefix, 'modules', extractSections(src, dst));
        warn(prefix, 'calls', extractMethods(src, dst));
    }
    const sections = Object.keys(src);
    for (let i = 0, count = sections.length; i < count; i++) {
        const section = sections[i];
        const methods = src[section];
        // We don't set here with a lazy interface, we decorate based
        // on the top-level structure (this bypasses adding lazy onto lazy)
        if (!dst[section]) {
            dst[section] = {};
        }
        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .lazyMethods */ .G)(dst[section], Object.keys(methods), (m) => methods[m]);
    }
    return dst;
}


/***/ }),

/***/ 3076:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ decorateDeriveSections)
/* harmony export */ });
/* harmony import */ var _polkadot_api_derive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(95680);

/**
 * This is a section decorator which keeps all type information.
 */
function decorateDeriveSections(decorateMethod, derives) {
    const getKeys = (s) => Object.keys(derives[s]);
    const creator = (s, m) => decorateMethod(derives[s][m]);
    const result = {};
    const names = Object.keys(derives);
    for (let i = 0, count = names.length; i < count; i++) {
        (0,_polkadot_api_derive__WEBPACK_IMPORTED_MODULE_0__/* .lazyDeriveSection */ .L)(result, names[i], getKeys, creator);
    }
    return result;
}


/***/ }),

/***/ 23057:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   k: () => (/* binding */ filterEvents)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96759);
/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3861);


function filterEvents(txHash, { block: { extrinsics, header } }, allEvents, status) {
    // extrinsics to hashes
    for (const [txIndex, x] of extrinsics.entries()) {
        if (x.hash.eq(txHash)) {
            return {
                blockNumber: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isCompact */ .f)(header.number) ? header.number.unwrap() : header.number,
                events: allEvents.filter(({ phase }) => phase.isApplyExtrinsic &&
                    phase.asApplyExtrinsic.eqn(txIndex)),
                txIndex
            };
        }
    }
    // if we do get the block after finalized, it _should_ be there
    // only warn on filtering with isInBlock (finalization finalizes after)
    if (status.isInBlock) {
        const allHashes = extrinsics.map((x) => x.hash.toHex());
        _logging_js__WEBPACK_IMPORTED_MODULE_1__.l.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(', ')}`);
    }
    return {};
}


/***/ }),

/***/ 40851:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   v: () => (/* binding */ isKeyringPair)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73092);

function isKeyringPair(account) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(account.sign);
}


/***/ }),

/***/ 3861:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   l: () => (/* binding */ l)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63985);

const l = /*#__PURE__*/ (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .k)('api/util');


/***/ }),

/***/ 68501:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   s: () => (/* binding */ extractStorageArgs)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34644);

function sig({ lookup }, { method, section }, args) {
    return `${section}.${method}(${args.map((a) => lookup.getTypeDef(a).type).join(', ')})`;
}
function extractStorageArgs(registry, creator, _args) {
    const args = _args.filter((a) => !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isUndefined */ .o)(a));
    if (creator.meta.type.isPlain) {
        if (args.length !== 0) {
            throw new Error(`${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
        }
    }
    else {
        const { hashers, key } = creator.meta.type.asMap;
        const keys = hashers.length === 1
            ? [key]
            : registry.lookup.getSiType(key).def.asTuple.map((t) => t);
        if (args.length !== keys.length) {
            throw new Error(`${sig(registry, creator, keys)} is a map, requiring ${keys.length} arguments, ${args.length} found`);
        }
    }
    // pass as tuple
    return [creator, args];
}


/***/ }),

/***/ 94646:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  oc: () => (/* binding */ availableNetworks),
  uG: () => (/* binding */ selectableNetworks)
});

// UNUSED EXPORTS: allNetworks

;// CONCATENATED MODULE: ./node_modules/.pnpm/@substrate+ss58-registry@1.44.0/node_modules/@substrate/ss58-registry/esm/index.js
// Copyright (C) 2021-2023 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* harmony default export */ const esm = ([
	{
		"prefix": 0,
		"network": "polkadot",
		"displayName": "Polkadot Relay Chain",
		"symbols": [
			"DOT"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://polkadot.network"
	},
	{
		"prefix": 1,
		"network": "BareSr25519",
		"displayName": "Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",
		"symbols": [],
		"decimals": [],
		"standardAccount": "Sr25519",
		"website": null
	},
	{
		"prefix": 2,
		"network": "kusama",
		"displayName": "Kusama Relay Chain",
		"symbols": [
			"KSM"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://kusama.network"
	},
	{
		"prefix": 3,
		"network": "BareEd25519",
		"displayName": "Bare 32-bit Ed25519 public key.",
		"symbols": [],
		"decimals": [],
		"standardAccount": "Ed25519",
		"website": null
	},
	{
		"prefix": 4,
		"network": "katalchain",
		"displayName": "Katal Chain",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 5,
		"network": "astar",
		"displayName": "Astar Network",
		"symbols": [
			"ASTR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://astar.network"
	},
	{
		"prefix": 6,
		"network": "bifrost",
		"displayName": "Bifrost",
		"symbols": [
			"BNC"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://bifrost.finance/"
	},
	{
		"prefix": 7,
		"network": "edgeware",
		"displayName": "Edgeware",
		"symbols": [
			"EDG"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://edgewa.re"
	},
	{
		"prefix": 8,
		"network": "karura",
		"displayName": "Karura",
		"symbols": [
			"KAR"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://karura.network/"
	},
	{
		"prefix": 9,
		"network": "reynolds",
		"displayName": "Laminar Reynolds Canary",
		"symbols": [
			"REY"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "http://laminar.network/"
	},
	{
		"prefix": 10,
		"network": "acala",
		"displayName": "Acala",
		"symbols": [
			"ACA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://acala.network/"
	},
	{
		"prefix": 11,
		"network": "laminar",
		"displayName": "Laminar",
		"symbols": [
			"LAMI"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "http://laminar.network/"
	},
	{
		"prefix": 12,
		"network": "polymesh",
		"displayName": "Polymesh",
		"symbols": [
			"POLYX"
		],
		"decimals": [
			6
		],
		"standardAccount": "*25519",
		"website": "https://polymath.network/"
	},
	{
		"prefix": 13,
		"network": "integritee",
		"displayName": "Integritee",
		"symbols": [
			"TEER"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://integritee.network"
	},
	{
		"prefix": 14,
		"network": "totem",
		"displayName": "Totem",
		"symbols": [
			"TOTEM"
		],
		"decimals": [
			0
		],
		"standardAccount": "*25519",
		"website": "https://totemaccounting.com"
	},
	{
		"prefix": 15,
		"network": "synesthesia",
		"displayName": "Synesthesia",
		"symbols": [
			"SYN"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://synesthesia.network/"
	},
	{
		"prefix": 16,
		"network": "kulupu",
		"displayName": "Kulupu",
		"symbols": [
			"KLP"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://kulupu.network/"
	},
	{
		"prefix": 17,
		"network": "dark",
		"displayName": "Dark Mainnet",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 18,
		"network": "darwinia",
		"displayName": "Darwinia Network",
		"symbols": [
			"RING"
		],
		"decimals": [
			18
		],
		"standardAccount": "secp256k1",
		"website": "https://darwinia.network"
	},
	{
		"prefix": 19,
		"network": "watr",
		"displayName": "Watr Protocol",
		"symbols": [
			"WATR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://www.watr.org"
	},
	{
		"prefix": 20,
		"network": "stafi",
		"displayName": "Stafi",
		"symbols": [
			"FIS"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://stafi.io"
	},
	{
		"prefix": 21,
		"network": "karmachain",
		"displayName": "Karmacoin",
		"symbols": [
			"KCOIN"
		],
		"decimals": [
			6
		],
		"standardAccount": "*25519",
		"website": "https://karmaco.in"
	},
	{
		"prefix": 22,
		"network": "dock-pos-mainnet",
		"displayName": "Dock Mainnet",
		"symbols": [
			"DCK"
		],
		"decimals": [
			6
		],
		"standardAccount": "*25519",
		"website": "https://dock.io"
	},
	{
		"prefix": 23,
		"network": "shift",
		"displayName": "ShiftNrg",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 24,
		"network": "zero",
		"displayName": "ZERO",
		"symbols": [
			"ZERO"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://zero.io"
	},
	{
		"prefix": 25,
		"network": "zero-alphaville",
		"displayName": "ZERO Alphaville",
		"symbols": [
			"ZERO"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://zero.io"
	},
	{
		"prefix": 26,
		"network": "jupiter",
		"displayName": "Jupiter",
		"symbols": [
			"jDOT"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://jupiter.patract.io"
	},
	{
		"prefix": 27,
		"network": "kabocha",
		"displayName": "Kabocha",
		"symbols": [
			"KAB"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://kabocha.network"
	},
	{
		"prefix": 28,
		"network": "subsocial",
		"displayName": "Subsocial",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 29,
		"network": "cord",
		"displayName": "CORD Network",
		"symbols": [
			"DHI",
			"WAY"
		],
		"decimals": [
			12,
			12
		],
		"standardAccount": "*25519",
		"website": "https://cord.network/"
	},
	{
		"prefix": 30,
		"network": "phala",
		"displayName": "Phala Network",
		"symbols": [
			"PHA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://phala.network"
	},
	{
		"prefix": 31,
		"network": "litentry",
		"displayName": "Litentry Network",
		"symbols": [
			"LIT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://litentry.com/"
	},
	{
		"prefix": 32,
		"network": "robonomics",
		"displayName": "Robonomics",
		"symbols": [
			"XRT"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://robonomics.network"
	},
	{
		"prefix": 33,
		"network": "datahighway",
		"displayName": "DataHighway",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 34,
		"network": "ares",
		"displayName": "Ares Protocol",
		"symbols": [
			"ARES"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://www.aresprotocol.com/"
	},
	{
		"prefix": 35,
		"network": "vln",
		"displayName": "Valiu Liquidity Network",
		"symbols": [
			"USDv"
		],
		"decimals": [
			15
		],
		"standardAccount": "*25519",
		"website": "https://valiu.com/"
	},
	{
		"prefix": 36,
		"network": "centrifuge",
		"displayName": "Centrifuge Chain",
		"symbols": [
			"CFG"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://centrifuge.io/"
	},
	{
		"prefix": 37,
		"network": "nodle",
		"displayName": "Nodle Chain",
		"symbols": [
			"NODL"
		],
		"decimals": [
			11
		],
		"standardAccount": "*25519",
		"website": "https://nodle.io/"
	},
	{
		"prefix": 38,
		"network": "kilt",
		"displayName": "KILT Spiritnet",
		"symbols": [
			"KILT"
		],
		"decimals": [
			15
		],
		"standardAccount": "*25519",
		"website": "https://kilt.io/"
	},
	{
		"prefix": 39,
		"network": "mathchain",
		"displayName": "MathChain mainnet",
		"symbols": [
			"MATH"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://mathwallet.org"
	},
	{
		"prefix": 40,
		"network": "mathchain-testnet",
		"displayName": "MathChain testnet",
		"symbols": [
			"MATH"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://mathwallet.org"
	},
	{
		"prefix": 41,
		"network": "polimec",
		"displayName": "Polimec Protocol",
		"symbols": [
			"PLMC"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://www.polimec.org/"
	},
	{
		"prefix": 42,
		"network": "substrate",
		"displayName": "Substrate",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": "https://substrate.io/"
	},
	{
		"prefix": 43,
		"network": "BareSecp256k1",
		"displayName": "Bare 32-bit ECDSA SECP-256k1 public key.",
		"symbols": [],
		"decimals": [],
		"standardAccount": "secp256k1",
		"website": null
	},
	{
		"prefix": 44,
		"network": "chainx",
		"displayName": "ChainX",
		"symbols": [
			"PCX"
		],
		"decimals": [
			8
		],
		"standardAccount": "*25519",
		"website": "https://chainx.org/"
	},
	{
		"prefix": 45,
		"network": "uniarts",
		"displayName": "UniArts Network",
		"symbols": [
			"UART",
			"UINK"
		],
		"decimals": [
			12,
			12
		],
		"standardAccount": "*25519",
		"website": "https://uniarts.me"
	},
	{
		"prefix": 46,
		"network": "reserved46",
		"displayName": "This prefix is reserved.",
		"symbols": [],
		"decimals": [],
		"standardAccount": null,
		"website": null
	},
	{
		"prefix": 47,
		"network": "reserved47",
		"displayName": "This prefix is reserved.",
		"symbols": [],
		"decimals": [],
		"standardAccount": null,
		"website": null
	},
	{
		"prefix": 48,
		"network": "neatcoin",
		"displayName": "Neatcoin Mainnet",
		"symbols": [
			"NEAT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://neatcoin.org"
	},
	{
		"prefix": 49,
		"network": "picasso",
		"displayName": "Picasso",
		"symbols": [
			"PICA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://picasso.composable.finance"
	},
	{
		"prefix": 50,
		"network": "composable",
		"displayName": "Composable Finance",
		"symbols": [
			"LAYR"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://composable.finance"
	},
	{
		"prefix": 51,
		"network": "oak",
		"displayName": "OAK Network",
		"symbols": [
			"OAK",
			"TUR"
		],
		"decimals": [
			10,
			10
		],
		"standardAccount": "*25519",
		"website": "https://oak.tech"
	},
	{
		"prefix": 52,
		"network": "KICO",
		"displayName": "KICO",
		"symbols": [
			"KICO"
		],
		"decimals": [
			14
		],
		"standardAccount": "*25519",
		"website": "https://dico.io"
	},
	{
		"prefix": 53,
		"network": "DICO",
		"displayName": "DICO",
		"symbols": [
			"DICO"
		],
		"decimals": [
			14
		],
		"standardAccount": "*25519",
		"website": "https://dico.io"
	},
	{
		"prefix": 54,
		"network": "cere",
		"displayName": "Cere Network",
		"symbols": [
			"CERE"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://cere.network"
	},
	{
		"prefix": 55,
		"network": "xxnetwork",
		"displayName": "xx network",
		"symbols": [
			"XX"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://xx.network"
	},
	{
		"prefix": 56,
		"network": "pendulum",
		"displayName": "Pendulum chain",
		"symbols": [
			"PEN"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://pendulumchain.org/"
	},
	{
		"prefix": 57,
		"network": "amplitude",
		"displayName": "Amplitude chain",
		"symbols": [
			"AMPE"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://pendulumchain.org/"
	},
	{
		"prefix": 63,
		"network": "hydradx",
		"displayName": "HydraDX",
		"symbols": [
			"HDX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://hydradx.io"
	},
	{
		"prefix": 64,
		"network": "ewx",
		"displayName": "Energy Web X",
		"symbols": [
			"EWT"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://www.energyweb.org"
	},
	{
		"prefix": 65,
		"network": "aventus",
		"displayName": "Aventus Mainnet",
		"symbols": [
			"AVT"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://aventus.io"
	},
	{
		"prefix": 66,
		"network": "crust",
		"displayName": "Crust Network",
		"symbols": [
			"CRU"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://crust.network"
	},
	{
		"prefix": 67,
		"network": "genshiro",
		"displayName": "Genshiro Network",
		"symbols": [
			"GENS",
			"EQD",
			"LPT0"
		],
		"decimals": [
			9,
			9,
			9
		],
		"standardAccount": "*25519",
		"website": "https://genshiro.equilibrium.io"
	},
	{
		"prefix": 68,
		"network": "equilibrium",
		"displayName": "Equilibrium Network",
		"symbols": [
			"EQ"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://equilibrium.io"
	},
	{
		"prefix": 69,
		"network": "sora",
		"displayName": "SORA Network",
		"symbols": [
			"XOR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://sora.org"
	},
	{
		"prefix": 71,
		"network": "p3d",
		"displayName": "3DP network",
		"symbols": [
			"P3D"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://3dpass.org"
	},
	{
		"prefix": 72,
		"network": "p3dt",
		"displayName": "3DP test network",
		"symbols": [
			"P3Dt"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://3dpass.org"
	},
	{
		"prefix": 73,
		"network": "zeitgeist",
		"displayName": "Zeitgeist",
		"symbols": [
			"ZTG"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://zeitgeist.pm"
	},
	{
		"prefix": 77,
		"network": "manta",
		"displayName": "Manta network",
		"symbols": [
			"MANTA"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://manta.network"
	},
	{
		"prefix": 78,
		"network": "calamari",
		"displayName": "Calamari: Manta Canary Network",
		"symbols": [
			"KMA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://manta.network"
	},
	{
		"prefix": 81,
		"network": "sora_dot_para",
		"displayName": "SORA Polkadot Parachain",
		"symbols": [
			"XOR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://sora.org"
	},
	{
		"prefix": 88,
		"network": "polkadex",
		"displayName": "Polkadex Mainnet",
		"symbols": [
			"PDEX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://polkadex.trade"
	},
	{
		"prefix": 89,
		"network": "polkadexparachain",
		"displayName": "Polkadex Parachain",
		"symbols": [
			"PDEX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://polkadex.trade"
	},
	{
		"prefix": 90,
		"network": "frequency",
		"displayName": "Frequency",
		"symbols": [
			"FRQCY"
		],
		"decimals": [
			8
		],
		"standardAccount": "*25519",
		"website": "https://www.frequency.xyz"
	},
	{
		"prefix": 92,
		"network": "anmol",
		"displayName": "Anmol Network",
		"symbols": [
			"ANML"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://anmol.network/"
	},
	{
		"prefix": 93,
		"network": "fragnova",
		"displayName": "Fragnova Network",
		"symbols": [
			"NOVA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://fragnova.com"
	},
	{
		"prefix": 98,
		"network": "polkasmith",
		"displayName": "PolkaSmith Canary Network",
		"symbols": [
			"PKS"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://polkafoundry.com"
	},
	{
		"prefix": 99,
		"network": "polkafoundry",
		"displayName": "PolkaFoundry Network",
		"symbols": [
			"PKF"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://polkafoundry.com"
	},
	{
		"prefix": 100,
		"network": "ibtida",
		"displayName": "Anmol Network Ibtida Canary network",
		"symbols": [
			"IANML"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://anmol.network/"
	},
	{
		"prefix": 101,
		"network": "origintrail-parachain",
		"displayName": "OriginTrail Parachain",
		"symbols": [
			"OTP"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://parachain.origintrail.io/"
	},
	{
		"prefix": 105,
		"network": "pontem-network",
		"displayName": "Pontem Network",
		"symbols": [
			"PONT"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://pontem.network"
	},
	{
		"prefix": 110,
		"network": "heiko",
		"displayName": "Heiko",
		"symbols": [
			"HKO"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://parallel.fi/"
	},
	{
		"prefix": 113,
		"network": "integritee-incognito",
		"displayName": "Integritee Incognito",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": "https://integritee.network"
	},
	{
		"prefix": 117,
		"network": "tinker",
		"displayName": "Tinker",
		"symbols": [
			"TNKR"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://invarch.network"
	},
	{
		"prefix": 126,
		"network": "joystream",
		"displayName": "Joystream",
		"symbols": [
			"JOY"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://www.joystream.org"
	},
	{
		"prefix": 128,
		"network": "clover",
		"displayName": "Clover Finance",
		"symbols": [
			"CLV"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://clover.finance"
	},
	{
		"prefix": 129,
		"network": "dorafactory-polkadot",
		"displayName": "Dorafactory Polkadot Network",
		"symbols": [
			"DORA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://dorafactory.org"
	},
	{
		"prefix": 131,
		"network": "litmus",
		"displayName": "Litmus Network",
		"symbols": [
			"LIT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://litentry.com/"
	},
	{
		"prefix": 136,
		"network": "altair",
		"displayName": "Altair",
		"symbols": [
			"AIR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://centrifuge.io/"
	},
	{
		"prefix": 137,
		"network": "vara",
		"displayName": "Vara Network",
		"symbols": [
			"VARA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://vara-network.io/"
	},
	{
		"prefix": 172,
		"network": "parallel",
		"displayName": "Parallel",
		"symbols": [
			"PARA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://parallel.fi/"
	},
	{
		"prefix": 252,
		"network": "social-network",
		"displayName": "Social Network",
		"symbols": [
			"NET"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://social.network"
	},
	{
		"prefix": 255,
		"network": "quartz_mainnet",
		"displayName": "QUARTZ by UNIQUE",
		"symbols": [
			"QTZ"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://unique.network"
	},
	{
		"prefix": 268,
		"network": "pioneer_network",
		"displayName": "Pioneer Network by Bit.Country",
		"symbols": [
			"NEER"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://bit.country"
	},
	{
		"prefix": 420,
		"network": "sora_kusama_para",
		"displayName": "SORA Kusama Parachain",
		"symbols": [
			"XOR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://sora.org"
	},
	{
		"prefix": 440,
		"network": "allfeat_network",
		"displayName": "Allfeat Network",
		"symbols": [
			"AFT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://allfeat.network"
	},
	{
		"prefix": 666,
		"network": "metaquity_network",
		"displayName": "Metaquity Network",
		"symbols": [
			"MQTY"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://metaquity.xyz/"
	},
	{
		"prefix": 789,
		"network": "geek",
		"displayName": "GEEK Network",
		"symbols": [
			"GEEK"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://geek.gl"
	},
	{
		"prefix": 995,
		"network": "ternoa",
		"displayName": "Ternoa",
		"symbols": [
			"CAPS"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://www.ternoa.network"
	},
	{
		"prefix": 1110,
		"network": "efinity",
		"displayName": "Efinity",
		"symbols": [
			"EFI"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://efinity.io/"
	},
	{
		"prefix": 1221,
		"network": "peaq",
		"displayName": "Peaq Network",
		"symbols": [
			"PEAQ"
		],
		"decimals": [
			18
		],
		"standardAccount": "Sr25519",
		"website": "https://www.peaq.network/"
	},
	{
		"prefix": 1222,
		"network": "krest",
		"displayName": "Krest Network",
		"symbols": [
			"KREST"
		],
		"decimals": [
			18
		],
		"standardAccount": "Sr25519",
		"website": "https://www.peaq.network/"
	},
	{
		"prefix": 1284,
		"network": "moonbeam",
		"displayName": "Moonbeam",
		"symbols": [
			"GLMR"
		],
		"decimals": [
			18
		],
		"standardAccount": "secp256k1",
		"website": "https://moonbeam.network"
	},
	{
		"prefix": 1285,
		"network": "moonriver",
		"displayName": "Moonriver",
		"symbols": [
			"MOVR"
		],
		"decimals": [
			18
		],
		"standardAccount": "secp256k1",
		"website": "https://moonbeam.network"
	},
	{
		"prefix": 1328,
		"network": "ajuna",
		"displayName": "Ajuna Network",
		"symbols": [
			"AJUN"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://ajuna.io"
	},
	{
		"prefix": 1337,
		"network": "bajun",
		"displayName": "Bajun Network",
		"symbols": [
			"BAJU"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://ajuna.io"
	},
	{
		"prefix": 1516,
		"network": "societal",
		"displayName": "Societal",
		"symbols": [
			"SCTL"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://www.sctl.xyz"
	},
	{
		"prefix": 1985,
		"network": "seals",
		"displayName": "Seals Network",
		"symbols": [
			"SEAL"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://seals.app"
	},
	{
		"prefix": 2007,
		"network": "kapex",
		"displayName": "Kapex",
		"symbols": [
			"KAPEX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://totemaccounting.com"
	},
	{
		"prefix": 2009,
		"network": "cloudwalk_mainnet",
		"displayName": "CloudWalk Network Mainnet",
		"symbols": [
			"CWN"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://explorer.mainnet.cloudwalk.io"
	},
	{
		"prefix": 2021,
		"network": "logion",
		"displayName": "logion network",
		"symbols": [
			"LGNT"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://logion.network"
	},
	{
		"prefix": 2032,
		"network": "interlay",
		"displayName": "Interlay",
		"symbols": [
			"INTR"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://interlay.io/"
	},
	{
		"prefix": 2092,
		"network": "kintsugi",
		"displayName": "Kintsugi",
		"symbols": [
			"KINT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://interlay.io/"
	},
	{
		"prefix": 2106,
		"network": "bitgreen",
		"displayName": "Bitgreen",
		"symbols": [
			"BBB"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://bitgreen.org/"
	},
	{
		"prefix": 2112,
		"network": "chainflip",
		"displayName": "Chainflip",
		"symbols": [
			"FLIP"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://chainflip.io/"
	},
	{
		"prefix": 2199,
		"network": "moonsama",
		"displayName": "Moonsama",
		"symbols": [
			"SAMA"
		],
		"decimals": [
			18
		],
		"standardAccount": "secp256k1",
		"website": "https://moonsama.com"
	},
	{
		"prefix": 2206,
		"network": "ICE",
		"displayName": "ICE Network",
		"symbols": [
			"ICY"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://icenetwork.io"
	},
	{
		"prefix": 2207,
		"network": "SNOW",
		"displayName": "SNOW: ICE Canary Network",
		"symbols": [
			"ICZ"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://icenetwork.io"
	},
	{
		"prefix": 2254,
		"network": "subspace_testnet",
		"displayName": "Subspace testnet",
		"symbols": [
			"tSSC"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://subspace.network"
	},
	{
		"prefix": 3333,
		"network": "peerplays",
		"displayName": "Peerplays",
		"symbols": [
			"PPY"
		],
		"decimals": [
			18
		],
		"standardAccount": "secp256k1",
		"website": "https://www.peerplays.com/"
	},
	{
		"prefix": 4006,
		"network": "tangle",
		"displayName": "Tangle Network",
		"symbols": [
			"TNT"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://www.webb.tools/"
	},
	{
		"prefix": 4450,
		"network": "g1",
		"displayName": "Ğ1",
		"symbols": [
			"G1"
		],
		"decimals": [
			2
		],
		"standardAccount": "*25519",
		"website": "https://duniter.org"
	},
	{
		"prefix": 5234,
		"network": "humanode",
		"displayName": "Humanode Network",
		"symbols": [
			"HMND"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://humanode.io"
	},
	{
		"prefix": 6094,
		"network": "subspace",
		"displayName": "Subspace",
		"symbols": [
			"SSC"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://subspace.network"
	},
	{
		"prefix": 7007,
		"network": "tidefi",
		"displayName": "Tidefi",
		"symbols": [
			"TDFY"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://tidefi.com"
	},
	{
		"prefix": 7013,
		"network": "gm",
		"displayName": "GM",
		"symbols": [
			"FREN",
			"GM",
			"GN"
		],
		"decimals": [
			12,
			0,
			0
		],
		"standardAccount": "*25519",
		"website": "https://gmordie.com"
	},
	{
		"prefix": 7306,
		"network": "krigan",
		"displayName": "Krigan Network",
		"symbols": [
			"KRGN"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://krigan.network"
	},
	{
		"prefix": 7391,
		"network": "unique_mainnet",
		"displayName": "Unique Network",
		"symbols": [
			"UNQ"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://unique.network"
	},
	{
		"prefix": 8866,
		"network": "golden_gate",
		"displayName": "Golden Gate",
		"symbols": [
			"GGX"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://ggxchain.io/"
	},
	{
		"prefix": 8883,
		"network": "sapphire_mainnet",
		"displayName": "Sapphire by Unique",
		"symbols": [
			"QTZ"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://unique.network"
	},
	{
		"prefix": 8886,
		"network": "golden_gate_sydney",
		"displayName": "Golden Gate Sydney",
		"symbols": [
			"GGXT"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://ggxchain.io/"
	},
	{
		"prefix": 9072,
		"network": "hashed",
		"displayName": "Hashed Network",
		"symbols": [
			"HASH"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://hashed.network"
	},
	{
		"prefix": 9807,
		"network": "dentnet",
		"displayName": "DENTNet",
		"symbols": [
			"DENTX"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://www.dentnet.io"
	},
	{
		"prefix": 9935,
		"network": "t3rn",
		"displayName": "t3rn",
		"symbols": [
			"TRN"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://t3rn.io/"
	},
	{
		"prefix": 10041,
		"network": "basilisk",
		"displayName": "Basilisk",
		"symbols": [
			"BSX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://bsx.fi"
	},
	{
		"prefix": 11330,
		"network": "cess-testnet",
		"displayName": "CESS Testnet",
		"symbols": [
			"TCESS"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://cess.cloud"
	},
	{
		"prefix": 11331,
		"network": "cess",
		"displayName": "CESS",
		"symbols": [
			"CESS"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://cess.cloud"
	},
	{
		"prefix": 11486,
		"network": "luhn",
		"displayName": "Luhn Network",
		"symbols": [
			"LUHN"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://luhn.network"
	},
	{
		"prefix": 11820,
		"network": "contextfree",
		"displayName": "Automata ContextFree",
		"symbols": [
			"CTX"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://ata.network"
	},
	{
		"prefix": 12155,
		"network": "impact",
		"displayName": "Impact Protocol Network",
		"symbols": [
			"BSTY"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://impactprotocol.network/"
	},
	{
		"prefix": 12191,
		"network": "nftmart",
		"displayName": "NFTMart",
		"symbols": [
			"NMT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://nftmart.io"
	},
	{
		"prefix": 13116,
		"network": "bittensor",
		"displayName": "Bittensor",
		"symbols": [
			"TAO"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://bittensor.com"
	},
	{
		"prefix": 14697,
		"network": "goro",
		"displayName": "GORO Network",
		"symbols": [
			"GORO"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://goro.network"
	}
]);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+networks@12.6.2/node_modules/@polkadot/networks/defaults/ledger.js
const knownLedger = {
    acala: 0x00000313,
    ajuna: 0x00000162,
    'aleph-node': 0x00000283,
    astar: 0x0000032a,
    bifrost: 0x00000314,
    'bifrost-kusama': 0x00000314,
    centrifuge: 0x000002eb,
    composable: 0x00000162,
    darwinia: 0x00000162,
    'dock-mainnet': 0x00000252,
    edgeware: 0x0000020b,
    enjin: 0x00000483,
    equilibrium: 0x05f5e0fd,
    genshiro: 0x05f5e0fc,
    hydradx: 0x00000162,
    'interlay-parachain': 0x00000162,
    karura: 0x000002ae,
    khala: 0x000001b2,
    kusama: 0x000001b2,
    matrixchain: 0x00000483,
    nodle: 0x000003eb,
    origintrail: 0x00000162,
    parallel: 0x00000162,
    pendulum: 0x00000162,
    phala: 0x00000162,
    picasso: 0x000001b2,
    polkadex: 0x0000031f,
    polkadot: 0x00000162,
    polymesh: 0x00000253,
    quartz: 0x00000277,
    sora: 0x00000269,
    stafi: 0x0000038b,
    statemine: 0x000001b2, // common-good on Kusama, shares derivation
    statemint: 0x00000162, // common-good on Polkadot, shares derivation
    ternoa: 0x00003e3,
    unique: 0x00000295,
    vtb: 0x000002b6,
    xxnetwork: 0x000007a3,
    zeitgeist: 0x00000162
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+networks@12.6.2/node_modules/@polkadot/networks/defaults/genesis.js
const knownGenesis = {
    acala: [
        '0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c'
    ],
    ajuna: [
        '0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee'
    ],
    'aleph-node': [
        '0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e'
    ],
    astar: [
        '0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6'
    ],
    basilisk: [
        '0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755'
    ],
    bifrost: [
        '0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b'
    ],
    'bifrost-kusama': [
        '0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed'
    ],
    bittensor: [
        '0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03'
    ],
    centrifuge: [
        '0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82',
        '0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5'
    ],
    cere: [
        '0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c'
    ],
    composable: [
        '0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d'
    ],
    darwinia: [
        '0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6'
    ],
    'dock-mainnet': [
        '0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae',
        '0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9'
    ],
    edgeware: [
        '0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b'
    ],
    enjin: [
        '0xd8761d3c88f26dc12875c00d3165f7d67243d56fc85b4cf19937601a7916e5a9'
    ],
    equilibrium: [
        '0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925'
    ],
    genshiro: [
        '0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243'
    ],
    hydradx: [
        '0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d', // HydraDX Parachain
        '0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc', // Snakenet Gen3-1
        '0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9', // Snakenet Gen3
        '0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047', // Snakenet Gen2
        '0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2' // Snakenet Gen1
    ],
    'interlay-parachain': [
        '0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72'
    ],
    karura: [
        '0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b'
    ],
    khala: [
        '0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d'
    ],
    kulupu: [
        '0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba'
    ],
    kusama: [
        '0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe', // Kusama CC3,
        '0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636', // Kusama CC2
        '0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf' // Kusama CC1
    ],
    matrixchain: [
        '0x3af4ff48ec76d2efc8476730f423ac07e25ad48f5f4c9dc39c778b164d808615'
    ],
    nodle: [
        '0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21'
    ],
    origintrail: [
        '0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174'
    ],
    p3d: [
        '0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66'
    ],
    parallel: [
        '0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97'
    ],
    pendulum: [
        '0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86'
    ],
    phala: [
        '0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736'
    ],
    picasso: [
        '0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc',
        '0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c'
    ],
    polkadex: [
        '0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c'
    ],
    polkadot: [
        '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3'
    ],
    polymesh: [
        '0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063'
    ],
    quartz: [
        '0xcd4d732201ebe5d6b014edda071c4203e16867305332301dc8d092044b28e554'
    ],
    rococo: [
        '0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e',
        '0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897',
        '0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770',
        '0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff',
        '0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a',
        '0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9',
        '0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779',
        '0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215',
        '0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9',
        '0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147',
        '0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd',
        '0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299'
    ],
    sora: [
        '0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5'
    ],
    stafi: [
        '0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80'
    ],
    statemine: [
        '0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a'
    ],
    statemint: [
        '0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f'
    ],
    subsocial: [
        '0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8'
    ],
    ternoa: [
        '0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e'
    ],
    unique: [
        '0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31'
    ],
    vtb: [
        '0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f',
        '0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa'
    ],
    westend: [
        '0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e'
    ],
    xxnetwork: [
        '0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa'
    ],
    zeitgeist: [
        '0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060'
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+networks@12.6.2/node_modules/@polkadot/networks/defaults/icons.js
const knownIcon = {
    centrifuge: 'polkadot',
    kusama: 'polkadot',
    polkadot: 'polkadot',
    sora: 'polkadot',
    statemine: 'polkadot',
    statemint: 'polkadot',
    westmint: 'polkadot'
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+networks@12.6.2/node_modules/@polkadot/networks/defaults/testnets.js
const knownTestnet = {
    '': true, // this is the default non-network entry
    'cess-testnet': true,
    'dock-testnet': true,
    jupiter: true,
    'mathchain-testnet': true,
    p3dt: true,
    subspace_testnet: true,
    'zero-alphaville': true
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+networks@12.6.2/node_modules/@polkadot/networks/interfaces.js


const UNSORTED = [0, 2, 42];
const TESTNETS = ['testnet'];
function toExpanded(o) {
    const network = o.network || '';
    const nameParts = network.replace(/_/g, '-').split('-');
    const n = o;
    // ledger additions
    n.slip44 = knownLedger[network];
    n.hasLedgerSupport = !!n.slip44;
    // general items
    n.genesisHash = knownGenesis[network] || [];
    n.icon = knownIcon[network] || 'substrate';
    // filtering
    n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
    n.isIgnored = n.isTestnet || (!(o.standardAccount &&
        o.decimals?.length &&
        o.symbols?.length) &&
        o.prefix !== 42);
    return n;
}
function filterSelectable({ genesisHash, prefix }) {
    return !!genesisHash.length || prefix === 42;
}
function filterAvailable(n) {
    return !n.isIgnored && !!n.network;
}
function sortNetworks(a, b) {
    const isUnSortedA = UNSORTED.includes(a.prefix);
    const isUnSortedB = UNSORTED.includes(b.prefix);
    return isUnSortedA === isUnSortedB
        ? isUnSortedA
            ? 0
            : a.displayName.localeCompare(b.displayName)
        : isUnSortedA
            ? -1
            : 1;
}
const allNetworks = esm.map(toExpanded);
const availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks);
const selectableNetworks = availableNetworks.filter(filterSelectable);


/***/ }),

/***/ 79431:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mk: () => (/* binding */ RpcCore)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(44950);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(98608);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(99500);
/* harmony import */ var _polkadot_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(28275);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63985);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73092);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85268);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(56810);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(59833);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(34644);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(93173);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(82025);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(43421);
/* harmony import */ var _util_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(56072);






const l = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .k)('rpc-core');
const EMPTY_META = {
    fallback: undefined,
    modifier: { isOptional: true },
    type: {
        asMap: { linked: { isTrue: false } },
        isMap: false
    }
};
/** @internal */
function logErrorMessage(method, { noErrorLog, params, type }, error) {
    if (noErrorLog) {
        return;
    }
    l.error(`${method}(${params.map(({ isOptional, name, type }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ')}): ${type}:: ${error.message}`);
}
function isTreatAsHex(key) {
    // :code is problematic - it does not have the length attached, which is
    // unlike all other storage entries where it is indeed properly encoded
    return ['0x3a636f6465'].includes(key.toHex());
}
/**
 * @name Rpc
 * @summary The API may use a HTTP or WebSockets provider.
 * @description It allows for querying a Polkadot Client Node.
 * WebSockets provider is recommended since HTTP provider only supports basic querying.
 *
 * ```mermaid
 * graph LR;
 *   A[Api] --> |WebSockets| B[WsProvider];
 *   B --> |endpoint| C[ws://127.0.0.1:9944]
 * ```
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Rpc from '@polkadot/rpc-core';
 * import { WsProvider } from '@polkadot/rpc-provider/ws';
 *
 * const provider = new WsProvider('ws://127.0.0.1:9944');
 * const rpc = new Rpc(provider);
 * ```
 */
class RpcCore {
    __internal__instanceId;
    __internal__isPedantic;
    __internal__registryDefault;
    __internal__storageCache = new Map();
    __internal__storageCacheHits = 0;
    __internal__storageCacheSize = 0;
    __internal__getBlockRegistry;
    __internal__getBlockHash;
    mapping = new Map();
    provider;
    sections = [];
    /**
     * @constructor
     * Default constructor for the core RPC handler
     * @param  {ProviderInterface} provider An API provider using any of the supported providers (HTTP, SC or WebSocket)
     */
    constructor(instanceId, registry, { isPedantic = true, provider, userRpc = {} }) {
        if (!provider || !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(provider.send)) {
            throw new Error('Expected Provider to API create');
        }
        this.__internal__instanceId = instanceId;
        this.__internal__isPedantic = isPedantic;
        this.__internal__registryDefault = registry;
        this.provider = provider;
        const sectionNames = Object.keys(_polkadot_types__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z);
        // these are the base keys (i.e. part of jsonrpc)
        this.sections.push(...sectionNames);
        // decorate all interfaces, defined and user on this instance
        this.addUserInterfaces(userRpc);
    }
    /**
     * @description Returns the connected status of a provider
     */
    get isConnected() {
        return this.provider.isConnected;
    }
    /**
     * @description Manually connect from the attached provider
     */
    connect() {
        return this.provider.connect();
    }
    /**
     * @description Manually disconnect from the attached provider
     */
    disconnect() {
        return this.provider.disconnect();
    }
    /**
     * @description Returns the underlying core stats, including those from teh provider
     */
    get stats() {
        const stats = this.provider.stats;
        return stats
            ? {
                ...stats,
                core: {
                    cacheHits: this.__internal__storageCacheHits,
                    cacheSize: this.__internal__storageCacheSize
                }
            }
            : undefined;
    }
    /**
     * @description Sets a registry swap (typically from Api)
     */
    setRegistrySwap(registrySwap) {
        this.__internal__getBlockRegistry = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .memoize */ .H)(registrySwap, {
            getInstanceId: () => this.__internal__instanceId
        });
    }
    /**
     * @description Sets a function to resolve block hash from block number
     */
    setResolveBlockHash(resolveBlockHash) {
        this.__internal__getBlockHash = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .memoize */ .H)(resolveBlockHash, {
            getInstanceId: () => this.__internal__instanceId
        });
    }
    addUserInterfaces(userRpc) {
        // add any extra user-defined sections
        this.sections.push(...Object.keys(userRpc).filter((k) => !this.sections.includes(k)));
        for (let s = 0, scount = this.sections.length; s < scount; s++) {
            const section = this.sections[s];
            const defs = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .objectSpread */ .Z)({}, _polkadot_types__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z[section], userRpc[section]);
            const methods = Object.keys(defs);
            for (let m = 0, mcount = methods.length; m < mcount; m++) {
                const method = methods[m];
                const def = defs[method];
                const jsonrpc = def.endpoint || `${section}_${method}`;
                if (!this.mapping.has(jsonrpc)) {
                    const isSubscription = !!def.pubsub;
                    if (!this[section]) {
                        this[section] = {};
                    }
                    this.mapping.set(jsonrpc, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .objectSpread */ .Z)({}, def, { isSubscription, jsonrpc, method, section }));
                    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .lazyMethod */ .W)(this[section], method, () => isSubscription
                        ? this._createMethodSubscribe(section, method, def)
                        : this._createMethodSend(section, method, def));
                }
            }
        }
    }
    _memomize(creator, def) {
        const memoOpts = { getInstanceId: () => this.__internal__instanceId };
        const memoized = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .memoize */ .H)(creator(true), memoOpts);
        memoized.raw = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .memoize */ .H)(creator(false), memoOpts);
        memoized.meta = def;
        return memoized;
    }
    _formatResult(isScale, registry, blockHash, method, def, params, result) {
        return isScale
            ? this._formatOutput(registry, blockHash, method, def, params, result)
            : result;
    }
    _createMethodSend(section, method, def) {
        const rpcName = def.endpoint || `${section}_${method}`;
        const hashIndex = def.params.findIndex(({ isHistoric }) => isHistoric);
        let memoized = null;
        // execute the RPC call, doing a registry swap for historic as applicable
        const callWithRegistry = async (isScale, values) => {
            const blockId = hashIndex === -1
                ? null
                : values[hashIndex];
            const blockHash = blockId && def.params[hashIndex].type === 'BlockNumber'
                ? await this.__internal__getBlockHash?.(blockId)
                : blockId;
            const { registry } = isScale && blockHash && this.__internal__getBlockRegistry
                ? await this.__internal__getBlockRegistry((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .u8aToU8a */ .Y)(blockHash))
                : { registry: this.__internal__registryDefault };
            const params = this._formatParams(registry, null, def, values);
            // only cache .at(<blockHash>) queries, e.g. where valid blockHash was supplied
            const result = await this.provider.send(rpcName, params.map((p) => p.toJSON()), !!blockHash);
            return this._formatResult(isScale, registry, blockHash, method, def, params, result);
        };
        const creator = (isScale) => (...values) => {
            const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
            return new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .Observable */ .y((observer) => {
                callWithRegistry(isScale, values)
                    .then((value) => {
                    observer.next(value);
                    observer.complete();
                })
                    .catch((error) => {
                    logErrorMessage(method, def, error);
                    observer.error(error);
                    observer.complete();
                });
                return () => {
                    // delete old results from cache
                    if (isScale) {
                        memoized?.unmemoize(...values);
                    }
                    else {
                        memoized?.raw.unmemoize(...values);
                    }
                };
            }).pipe(
            // eslint-disable-next-line deprecation/deprecation
            (0,rxjs__WEBPACK_IMPORTED_MODULE_8__/* .publishReplay */ ._)(1), // create a Replay(1)
            isDelayed
                ? (0,_util_index_js__WEBPACK_IMPORTED_MODULE_9__/* .refCountDelay */ .f)() // Unsubscribe after delay
                // eslint-disable-next-line deprecation/deprecation
                : (0,rxjs__WEBPACK_IMPORTED_MODULE_10__/* .refCount */ .x)());
        };
        memoized = this._memomize(creator, def);
        return memoized;
    }
    // create a subscriptor, it subscribes once and resolves with the id as subscribe
    _createSubscriber({ paramsJson, subName, subType, update }, errorHandler) {
        return new Promise((resolve, reject) => {
            this.provider
                .subscribe(subType, subName, paramsJson, update)
                .then(resolve)
                .catch((error) => {
                errorHandler(error);
                reject(error);
            });
        });
    }
    _createMethodSubscribe(section, method, def) {
        const [updateType, subMethod, unsubMethod] = def.pubsub;
        const subName = `${section}_${subMethod}`;
        const unsubName = `${section}_${unsubMethod}`;
        const subType = `${section}_${updateType}`;
        let memoized = null;
        const creator = (isScale) => (...values) => {
            return new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .Observable */ .y((observer) => {
                // Have at least an empty promise, as used in the unsubscribe
                let subscriptionPromise = Promise.resolve(null);
                const registry = this.__internal__registryDefault;
                const errorHandler = (error) => {
                    logErrorMessage(method, def, error);
                    observer.error(error);
                };
                try {
                    const params = this._formatParams(registry, null, def, values);
                    const update = (error, result) => {
                        if (error) {
                            logErrorMessage(method, def, error);
                            return;
                        }
                        try {
                            observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
                        }
                        catch (error) {
                            observer.error(error);
                        }
                    };
                    subscriptionPromise = this._createSubscriber({ paramsJson: params.map((p) => p.toJSON()), subName, subType, update }, errorHandler);
                }
                catch (error) {
                    errorHandler(error);
                }
                // Teardown logic
                return () => {
                    // Delete from cache, so old results don't hang around
                    if (isScale) {
                        memoized?.unmemoize(...values);
                    }
                    else {
                        memoized?.raw.unmemoize(...values);
                    }
                    // Unsubscribe from provider
                    subscriptionPromise
                        .then((subscriptionId) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__/* .isNull */ .F)(subscriptionId)
                        ? Promise.resolve(false)
                        : this.provider.unsubscribe(subType, unsubName, subscriptionId))
                        .catch((error) => logErrorMessage(method, def, error));
                };
            }).pipe((0,_util_index_js__WEBPACK_IMPORTED_MODULE_12__/* .drr */ .h)());
        };
        memoized = this._memomize(creator, def);
        return memoized;
    }
    _formatParams(registry, blockHash, def, inputs) {
        const count = inputs.length;
        const reqCount = def.params.filter(({ isOptional }) => !isOptional).length;
        if (count < reqCount || count > def.params.length) {
            throw new Error(`Expected ${def.params.length} parameters${reqCount === def.params.length ? '' : ` (${def.params.length - reqCount} optional)`}, ${count} found instead`);
        }
        const params = new Array(count);
        for (let i = 0; i < count; i++) {
            params[i] = registry.createTypeUnsafe(def.params[i].type, [inputs[i]], { blockHash });
        }
        return params;
    }
    _formatOutput(registry, blockHash, method, rpc, params, result) {
        if (rpc.type === 'StorageData') {
            const key = params[0];
            return this._formatStorageData(registry, blockHash, key, result);
        }
        else if (rpc.type === 'StorageChangeSet') {
            const keys = params[0];
            return keys
                ? this._formatStorageSet(registry, result.block, keys, result.changes)
                : registry.createType('StorageChangeSet', result);
        }
        else if (rpc.type === 'Vec<StorageChangeSet>') {
            const jsonSet = result;
            const count = jsonSet.length;
            const mapped = new Array(count);
            for (let i = 0; i < count; i++) {
                const { block, changes } = jsonSet[i];
                mapped[i] = [
                    registry.createType('BlockHash', block),
                    this._formatStorageSet(registry, block, params[0], changes)
                ];
            }
            // we only query at a specific block, not a range - flatten
            return method === 'queryStorageAt'
                ? mapped[0][1]
                : mapped;
        }
        return registry.createTypeUnsafe(rpc.type, [result], { blockHash });
    }
    _formatStorageData(registry, blockHash, key, value) {
        const isEmpty = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__/* .isNull */ .F)(value);
        // we convert to Uint8Array since it maps to the raw encoding, all
        // data will be correctly encoded (incl. numbers, excl. :code)
        const input = isEmpty
            ? null
            : isTreatAsHex(key)
                ? value
                : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .u8aToU8a */ .Y)(value);
        return this._newType(registry, blockHash, key, input, isEmpty);
    }
    _formatStorageSet(registry, blockHash, keys, changes) {
        // For StorageChangeSet, the changes has the [key, value] mappings
        const count = keys.length;
        const withCache = count !== 1;
        const values = new Array(count);
        // multiple return values (via state.storage subscription), decode the
        // values one at a time, all based on the supplied query types
        for (let i = 0; i < count; i++) {
            values[i] = this._formatStorageSetEntry(registry, blockHash, keys[i], changes, withCache, i);
        }
        return values;
    }
    _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
        const hexKey = key.toHex();
        const found = changes.find(([key]) => key === hexKey);
        const isNotFound = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__/* .isUndefined */ .o)(found);
        // if we don't find the value, this is our fallback
        //   - in the case of an array of values, fill the hole from the cache
        //   - if a single result value, don't fill - it is not an update hole
        //   - fallback to an empty option in all cases
        if (isNotFound && withCache) {
            const cached = this.__internal__storageCache.get(hexKey);
            if (cached) {
                this.__internal__storageCacheHits++;
                return cached;
            }
        }
        const value = isNotFound
            ? null
            : found[1];
        const isEmpty = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__/* .isNull */ .F)(value);
        const input = isEmpty || isTreatAsHex(key)
            ? value
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .u8aToU8a */ .Y)(value);
        const codec = this._newType(registry, blockHash, key, input, isEmpty, entryIndex);
        // store the retrieved result - the only issue with this cache is that there is no
        // clearing of it, so very long running processes (not just a couple of hours, longer)
        // will increase memory beyond what is allowed.
        this.__internal__storageCache.set(hexKey, codec);
        this.__internal__storageCacheSize++;
        return codec;
    }
    _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {
        // single return value (via state.getStorage), decode the value based on the
        // outputType that we have specified. Fallback to Raw on nothing
        const type = key.outputType || 'Raw';
        const meta = key.meta || EMPTY_META;
        const entryNum = entryIndex === -1
            ? ''
            : ` entry ${entryIndex}:`;
        try {
            return registry.createTypeUnsafe(type, [
                isEmpty
                    ? meta.fallback
                        // For old-style Linkage, we add an empty linkage at the end
                        ? type.includes('Linkage<')
                            ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_14__/* .u8aConcat */ .e)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_15__/* .hexToU8a */ .G)(meta.fallback.toHex()), new Uint8Array(2))
                            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_15__/* .hexToU8a */ .G)(meta.fallback.toHex())
                        : undefined
                    : meta.modifier.isOptional
                        ? registry.createTypeUnsafe(type, [input], { blockHash, isPedantic: this.__internal__isPedantic })
                        : input
            ], { blockHash, isFallback: isEmpty && !!meta.fallback, isOptional: meta.modifier.isOptional, isPedantic: this.__internal__isPedantic && !meta.modifier.isOptional });
        }
        catch (error) {
            throw new Error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}: ${error.message}`);
        }
    }
}


/***/ }),

/***/ 56072:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   h: () => (/* binding */ drr)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(92646);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(81083);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(64392);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(98608);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(99500);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53393);
/* harmony import */ var _refCountDelay_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(43421);



function CMP(a, b) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)({ t: a }) === (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)({ t: b });
}
function ERR(error) {
    throw error;
}
function NOOP() {
    // empty
}
/**
 * Shorthand for distinctUntilChanged(), publishReplay(1) and refCount().
 *
 * @ignore
 * @internal
 */
function drr({ delay, skipChange = false, skipTimeout = false } = {}) {
    return (source$) => source$.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__/* .catchError */ .K)(ERR), skipChange
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .tap */ .b)(NOOP)
        : (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .distinctUntilChanged */ .x)(CMP), 
    // eslint-disable-next-line deprecation/deprecation
    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .publishReplay */ ._)(1), skipTimeout
        // eslint-disable-next-line deprecation/deprecation
        ? (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .refCount */ .x)()
        : (0,_refCountDelay_js__WEBPACK_IMPORTED_MODULE_6__/* .refCountDelay */ .f)(delay));
}


/***/ }),

/***/ 39762:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   X: () => (/* binding */ memo)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44950);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85268);
/* harmony import */ var _drr_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56072);



/** @internal */
function memo(instanceId, inner) {
    const options = { getInstanceId: () => instanceId };
    const cached = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .memoize */ .H)((...params) => new rxjs__WEBPACK_IMPORTED_MODULE_1__/* .Observable */ .y((observer) => {
        const subscription = inner(...params).subscribe(observer);
        return () => {
            cached.unmemoize(...params);
            subscription.unsubscribe();
        };
    }).pipe((0,_drr_js__WEBPACK_IMPORTED_MODULE_2__/* .drr */ .h)()), options);
    return cached;
}


/***/ }),

/***/ 43421:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ refCountDelay)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21620);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44950);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(98607);

/** @internal */
function refCountDelay(delay = 1750) {
    return (source) => {
        // state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected
        let [state, refCount, connection, scheduler] = [0, 0, rxjs__WEBPACK_IMPORTED_MODULE_0__/* .Subscription */ .w0.EMPTY, rxjs__WEBPACK_IMPORTED_MODULE_0__/* .Subscription */ .w0.EMPTY];
        return new rxjs__WEBPACK_IMPORTED_MODULE_1__/* .Observable */ .y((ob) => {
            source.subscribe(ob);
            if (refCount++ === 0) {
                if (state === 1) {
                    scheduler.unsubscribe();
                }
                else {
                    // eslint-disable-next-line deprecation/deprecation
                    connection = source.connect();
                }
                state = 3;
            }
            return () => {
                if (--refCount === 0) {
                    if (state === 2) {
                        state = 0;
                        scheduler.unsubscribe();
                    }
                    else {
                        // state === 3
                        state = 1;
                        scheduler = rxjs__WEBPACK_IMPORTED_MODULE_2__/* .asapScheduler */ .E.schedule(() => {
                            state = 0;
                            connection.unsubscribe();
                        }, delay);
                    }
                }
            };
        });
    };
}


/***/ }),

/***/ 17669:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ RpcError)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73092);

const UNKNOWN = -99999;
function extend(that, name, value) {
    Object.defineProperty(that, name, {
        configurable: true,
        enumerable: false,
        value
    });
}
/**
 * @name RpcError
 * @summary Extension to the basic JS Error.
 * @description
 * The built-in JavaScript Error class is extended by adding a code to allow for Error categorization. In addition to the normal `stack`, `message`, the numeric `code` and `data` (any types) parameters are available on the object.
 * @example
 * <BR>
 *
 * ```javascript
 * const { RpcError } from '@polkadot/util');
 *
 * throw new RpcError('some message', RpcError.CODES.METHOD_NOT_FOUND); // => error.code = -32601
 * ```
 */
class RpcError extends Error {
    code;
    data;
    message;
    name;
    stack;
    constructor(message = '', code = UNKNOWN, data) {
        super();
        extend(this, 'message', String(message));
        extend(this, 'name', this.constructor.name);
        extend(this, 'data', data);
        extend(this, 'code', code);
        if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(Error.captureStackTrace)) {
            Error.captureStackTrace(this, this.constructor);
        }
        else {
            const { stack } = new Error(message);
            stack && extend(this, 'stack', stack);
        }
    }
    static CODES = {
        ASSERT: -90009,
        INVALID_JSONRPC: -99998,
        METHOD_NOT_FOUND: -32601, // Rust client
        UNKNOWN
    };
}


/***/ }),

/***/ 38578:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   K: () => (/* binding */ RpcCoder)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34644);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53393);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(52906);
/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(17669);


function formatErrorData(data) {
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isUndefined */ .o)(data)) {
        return '';
    }
    const formatted = `: ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .H)(data)
        ? data.replace(/Error\("/g, '').replace(/\("/g, '(').replace(/"\)/g, ')').replace(/\(/g, ', ').replace(/\)/g, '')
        : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .stringify */ .P)(data)}`;
    // We need some sort of cut-off here since these can be very large and
    // very nested, pick a number and trim the result display to it
    return formatted.length <= 256
        ? formatted
        : `${formatted.substring(0, 255)}…`;
}
function checkError(error) {
    if (error) {
        const { code, data, message } = error;
        throw new _error_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(`${code}: ${message}${formatErrorData(data)}`, code, data);
    }
}
/** @internal */
class RpcCoder {
    __internal__id = 0;
    decodeResponse(response) {
        if (!response || response.jsonrpc !== '2.0') {
            throw new Error('Invalid jsonrpc field in decoded object');
        }
        const isSubscription = !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isUndefined */ .o)(response.params) && !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isUndefined */ .o)(response.method);
        if (!(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .isNumber */ .h)(response.id) &&
            (!isSubscription || (!(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .isNumber */ .h)(response.params.subscription) &&
                !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .H)(response.params.subscription)))) {
            throw new Error('Invalid id field in decoded object');
        }
        checkError(response.error);
        if (response.result === undefined && !isSubscription) {
            throw new Error('No result found in jsonrpc response');
        }
        if (isSubscription) {
            checkError(response.params.error);
            return response.params.result;
        }
        return response.result;
    }
    encodeJson(method, params) {
        const [id, data] = this.encodeObject(method, params);
        return [id, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .stringify */ .P)(data)];
    }
    encodeObject(method, params) {
        const id = ++this.__internal__id;
        return [id, {
                id,
                jsonrpc: '2.0',
                method,
                params
            }];
    }
}


/***/ }),

/***/ 71759:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const HTTP_URL = 'http://127.0.0.1:9933';
const WS_URL = 'ws://127.0.0.1:9944';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    HTTP_URL,
    WS_URL
});


/***/ }),

/***/ 89063:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ LRUCache)
/* harmony export */ });
const DEFAULT_CAPACITY = 128;
class LRUNode {
    key;
    next;
    prev;
    constructor(key) {
        this.key = key;
        this.next = this.prev = this;
    }
}
class LRUCache {
    capacity;
    __internal__data = new Map();
    __internal__refs = new Map();
    __internal__length = 0;
    __internal__head;
    __internal__tail;
    constructor(capacity = DEFAULT_CAPACITY) {
        this.capacity = capacity;
        this.__internal__head = this.__internal__tail = new LRUNode('<empty>');
    }
    get length() {
        return this.__internal__length;
    }
    get lengthData() {
        return this.__internal__data.size;
    }
    get lengthRefs() {
        return this.__internal__refs.size;
    }
    entries() {
        const keys = this.keys();
        const count = keys.length;
        const entries = new Array(count);
        for (let i = 0; i < count; i++) {
            const key = keys[i];
            entries[i] = [key, this.__internal__data.get(key)];
        }
        return entries;
    }
    keys() {
        const keys = [];
        if (this.__internal__length) {
            let curr = this.__internal__head;
            while (curr !== this.__internal__tail) {
                keys.push(curr.key);
                curr = curr.next;
            }
            keys.push(curr.key);
        }
        return keys;
    }
    get(key) {
        const data = this.__internal__data.get(key);
        if (data) {
            this.__internal__toHead(key);
            return data;
        }
        return null;
    }
    set(key, value) {
        if (this.__internal__data.has(key)) {
            this.__internal__toHead(key);
        }
        else {
            const node = new LRUNode(key);
            this.__internal__refs.set(node.key, node);
            if (this.length === 0) {
                this.__internal__head = this.__internal__tail = node;
            }
            else {
                this.__internal__head.prev = node;
                node.next = this.__internal__head;
                this.__internal__head = node;
            }
            if (this.__internal__length === this.capacity) {
                this.__internal__data.delete(this.__internal__tail.key);
                this.__internal__refs.delete(this.__internal__tail.key);
                this.__internal__tail = this.__internal__tail.prev;
                this.__internal__tail.next = this.__internal__head;
            }
            else {
                this.__internal__length += 1;
            }
        }
        this.__internal__data.set(key, value);
    }
    __internal__toHead(key) {
        const ref = this.__internal__refs.get(key);
        if (ref && ref !== this.__internal__head) {
            ref.prev.next = ref.next;
            ref.next.prev = ref.prev;
            ref.next = this.__internal__head;
            this.__internal__head.prev = ref;
            this.__internal__head = ref;
        }
    }
}


/***/ }),

/***/ 84034:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ healthChecker)
/* harmony export */ });
/* unused harmony export HealthCheckError */
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53393);

/*
 * Creates a new health checker.
 *
 * The role of the health checker is to report to the user the health of a smoldot chain.
 *
 * In order to use it, start by creating a health checker, and call `setSendJsonRpc` to set the
 * way to send a JSON-RPC request to a chain. The health checker is disabled by default. Use
 * `start()` in order to start the health checks. The `start()` function must be passed a callback called
 * when an update to the health of the node is available.
 *
 * In order to send a JSON-RPC request to the chain, you **must** use the `sendJsonRpc` function
 * of the health checker. The health checker rewrites the `id` of the requests it receives.
 *
 * When the chain send a JSON-RPC response, it must be passed to `responsePassThrough()`. This
 * function intercepts the responses destined to the requests that have been emitted by the health
 * checker and returns `null`. If the response doesn't concern the health checker, the response is
 * simply returned by the function.
 *
 * # How it works
 *
 * The health checker periodically calls the `system_health` JSON-RPC call in order to determine
 * the health of the chain.
 *
 * In addition to this, as long as the health check reports that `isSyncing` is `true`, the
 * health checker also maintains a subscription to new best blocks using `chain_subscribeNewHeads`.
 * Whenever a new block is notified, a health check is performed immediately in order to determine
 * whether `isSyncing` has changed to `false`.
 *
 * Thanks to this subscription, the latency of the report of the switch from `isSyncing: true` to
 * `isSyncing: false` is very low.
 *
 */
function healthChecker() {
    // `null` if health checker is not started.
    let checker = null;
    let sendJsonRpc = null;
    return {
        responsePassThrough: (jsonRpcResponse) => {
            if (checker === null) {
                return jsonRpcResponse;
            }
            return checker.responsePassThrough(jsonRpcResponse);
        },
        sendJsonRpc: (request) => {
            if (!sendJsonRpc) {
                throw new Error('setSendJsonRpc must be called before sending requests');
            }
            if (checker === null) {
                sendJsonRpc(request);
            }
            else {
                checker.sendJsonRpc(request);
            }
        },
        setSendJsonRpc: (cb) => {
            sendJsonRpc = cb;
        },
        start: (healthCallback) => {
            if (checker !== null) {
                throw new Error("Can't start the health checker multiple times in parallel");
            }
            else if (!sendJsonRpc) {
                throw new Error('setSendJsonRpc must be called before starting the health checks');
            }
            checker = new InnerChecker(healthCallback, sendJsonRpc);
            checker.update(true);
        },
        stop: () => {
            if (checker === null) {
                return;
            } // Already stopped.
            checker.destroy();
            checker = null;
        }
    };
}
class InnerChecker {
    __internal__healthCallback;
    __internal__currentHealthCheckId = null;
    __internal__currentHealthTimeout = null;
    __internal__currentSubunsubRequestId = null;
    __internal__currentSubscriptionId = null;
    __internal__requestToSmoldot;
    __internal__isSyncing = false;
    __internal__nextRequestId = 0;
    constructor(healthCallback, requestToSmoldot) {
        this.__internal__healthCallback = healthCallback;
        this.__internal__requestToSmoldot = (request) => requestToSmoldot((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)(request));
    }
    sendJsonRpc = (request) => {
        // Replace the `id` in the request to prefix the request ID with `extern:`.
        let parsedRequest;
        try {
            parsedRequest = JSON.parse(request);
        }
        catch {
            return;
        }
        if (parsedRequest.id) {
            const newId = 'extern:' + (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)(parsedRequest.id);
            parsedRequest.id = newId;
        }
        this.__internal__requestToSmoldot(parsedRequest);
    };
    responsePassThrough = (jsonRpcResponse) => {
        let parsedResponse;
        try {
            parsedResponse = JSON.parse(jsonRpcResponse);
        }
        catch {
            return jsonRpcResponse;
        }
        // Check whether response is a response to `system_health`.
        if (parsedResponse.id && this.__internal__currentHealthCheckId === parsedResponse.id) {
            this.__internal__currentHealthCheckId = null;
            // Check whether query was successful. It is possible for queries to fail for
            // various reasons, such as the client being overloaded.
            if (!parsedResponse.result) {
                this.update(false);
                return null;
            }
            this.__internal__healthCallback(parsedResponse.result);
            this.__internal__isSyncing = parsedResponse.result.isSyncing;
            this.update(false);
            return null;
        }
        // Check whether response is a response to the subscription or unsubscription.
        if (parsedResponse.id &&
            this.__internal__currentSubunsubRequestId === parsedResponse.id) {
            this.__internal__currentSubunsubRequestId = null;
            // Check whether query was successful. It is possible for queries to fail for
            // various reasons, such as the client being overloaded.
            if (!parsedResponse.result) {
                this.update(false);
                return null;
            }
            if (this.__internal__currentSubscriptionId) {
                this.__internal__currentSubscriptionId = null;
            }
            else {
                this.__internal__currentSubscriptionId = parsedResponse.result;
            }
            this.update(false);
            return null;
        }
        // Check whether response is a notification to a subscription.
        if (parsedResponse.params &&
            this.__internal__currentSubscriptionId &&
            parsedResponse.params.subscription === this.__internal__currentSubscriptionId) {
            // Note that after a successful subscription, a notification containing
            // the current best block is always returned. Considering that a
            // subscription is performed in response to a health check, calling
            // `startHealthCheck()` here will lead to a second health check.
            // It might seem redundant to perform two health checks in a quick
            // succession, but doing so doesn't lead to any problem, and it is
            // actually possible for the health to have changed in between as the
            // current best block might have been updated during the subscription
            // request.
            this.update(true);
            return null;
        }
        // Response doesn't concern us.
        if (parsedResponse.id) {
            const id = parsedResponse.id;
            // Need to remove the `extern:` prefix.
            if (!id.startsWith('extern:')) {
                throw new Error('State inconsistency in health checker');
            }
            const newId = JSON.parse(id.slice('extern:'.length));
            parsedResponse.id = newId;
        }
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)(parsedResponse);
    };
    update = (startNow) => {
        // If `startNow`, clear `#currentHealthTimeout` so that it is set below.
        if (startNow && this.__internal__currentHealthTimeout) {
            clearTimeout(this.__internal__currentHealthTimeout);
            this.__internal__currentHealthTimeout = null;
        }
        if (!this.__internal__currentHealthTimeout) {
            const startHealthRequest = () => {
                this.__internal__currentHealthTimeout = null;
                // No matter what, don't start a health request if there is already one in progress.
                // This is sane to do because receiving a response to a health request calls `update()`.
                if (this.__internal__currentHealthCheckId) {
                    return;
                }
                // Actual request starting.
                this.__internal__currentHealthCheckId = `health-checker:${this.__internal__nextRequestId}`;
                this.__internal__nextRequestId += 1;
                this.__internal__requestToSmoldot({
                    id: this.__internal__currentHealthCheckId,
                    jsonrpc: '2.0',
                    method: 'system_health',
                    params: []
                });
            };
            if (startNow) {
                startHealthRequest();
            }
            else {
                this.__internal__currentHealthTimeout = setTimeout(startHealthRequest, 1000);
            }
        }
        if (this.__internal__isSyncing &&
            !this.__internal__currentSubscriptionId &&
            !this.__internal__currentSubunsubRequestId) {
            this.startSubscription();
        }
        if (!this.__internal__isSyncing &&
            this.__internal__currentSubscriptionId &&
            !this.__internal__currentSubunsubRequestId) {
            this.endSubscription();
        }
    };
    startSubscription = () => {
        if (this.__internal__currentSubunsubRequestId || this.__internal__currentSubscriptionId) {
            throw new Error('Internal error in health checker');
        }
        this.__internal__currentSubunsubRequestId = `health-checker:${this.__internal__nextRequestId}`;
        this.__internal__nextRequestId += 1;
        this.__internal__requestToSmoldot({
            id: this.__internal__currentSubunsubRequestId,
            jsonrpc: '2.0',
            method: 'chain_subscribeNewHeads',
            params: []
        });
    };
    endSubscription = () => {
        if (this.__internal__currentSubunsubRequestId || !this.__internal__currentSubscriptionId) {
            throw new Error('Internal error in health checker');
        }
        this.__internal__currentSubunsubRequestId = `health-checker:${this.__internal__nextRequestId}`;
        this.__internal__nextRequestId += 1;
        this.__internal__requestToSmoldot({
            id: this.__internal__currentSubunsubRequestId,
            jsonrpc: '2.0',
            method: 'chain_unsubscribeNewHeads',
            params: [this.__internal__currentSubscriptionId]
        });
    };
    destroy = () => {
        if (this.__internal__currentHealthTimeout) {
            clearTimeout(this.__internal__currentHealthTimeout);
            this.__internal__currentHealthTimeout = null;
        }
    };
}
class HealthCheckError extends (/* unused pure expression or super */ null && (Error)) {
    __internal__cause;
    getCause() {
        return this.__internal__cause;
    }
    constructor(response, message = 'Got error response asking for system health') {
        super(message);
        this.__internal__cause = response;
    }
}


/***/ }),

/***/ 90416:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ ScProvider)
/* harmony export */ });
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73983);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63985);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9716);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(73092);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12275);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(64322);
/* harmony import */ var _coder_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38578);
/* harmony import */ var _Health_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(84034);




const l = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .logger */ .k)('api-substrate-connect');
const subscriptionUnsubscriptionMethods = new Map([
    ['author_submitAndWatchExtrinsic', 'author_unwatchExtrinsic'],
    ['chain_subscribeAllHeads', 'chain_unsubscribeAllHeads'],
    ['chain_subscribeFinalizedHeads', 'chain_unsubscribeFinalizedHeads'],
    ['chain_subscribeFinalisedHeads', 'chain_subscribeFinalisedHeads'],
    ['chain_subscribeNewHeads', 'chain_unsubscribeNewHeads'],
    ['chain_subscribeNewHead', 'chain_unsubscribeNewHead'],
    ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'],
    ['subscribe_newHead', 'unsubscribe_newHead'],
    ['state_subscribeRuntimeVersion', 'state_unsubscribeRuntimeVersion'],
    ['state_subscribeStorage', 'state_unsubscribeStorage']
]);
const scClients = new WeakMap();
class ScProvider {
    __internal__Sc;
    __internal__coder = new _coder_index_js__WEBPACK_IMPORTED_MODULE_2__/* .RpcCoder */ .K();
    __internal__spec;
    __internal__sharedSandbox;
    __internal__subscriptions = new Map();
    __internal__resubscribeMethods = new Map();
    __internal__requests = new Map();
    __internal__wellKnownChains;
    __internal__eventemitter = new eventemitter3__WEBPACK_IMPORTED_MODULE_0__/* .EventEmitter */ .v();
    __internal__chain = null;
    __internal__isChainReady = false;
    constructor(Sc, spec, sharedSandbox) {
        if (!(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isObject */ .K)(Sc) || !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isObject */ .K)(Sc.WellKnownChain) || !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .isFunction */ .m)(Sc.createScClient)) {
            throw new Error('Expected an @substrate/connect interface as first parameter to ScProvider');
        }
        this.__internal__Sc = Sc;
        this.__internal__spec = spec;
        this.__internal__sharedSandbox = sharedSandbox;
        this.__internal__wellKnownChains = new Set(Object.values(Sc.WellKnownChain));
    }
    get hasSubscriptions() {
        // Indicates that subscriptions are supported
        return !!true;
    }
    get isClonable() {
        return !!false;
    }
    get isConnected() {
        return !!this.__internal__chain && this.__internal__isChainReady;
    }
    clone() {
        throw new Error('clone() is not supported.');
    }
    // Config details can be found in @substrate/connect repo following the link:
    // https://github.com/paritytech/substrate-connect/blob/main/packages/connect/src/connector/index.ts
    async connect(config, checkerFactory = _Health_js__WEBPACK_IMPORTED_MODULE_5__/* .healthChecker */ .x) {
        if (this.isConnected) {
            throw new Error('Already connected!');
        }
        // it could happen that after emitting `disconnected` due to the fact that
        // smoldot is syncing, the consumer tries to reconnect after a certain amount
        // of time... In which case we want to make sure that we don't create a new
        // chain.
        if (this.__internal__chain) {
            await this.__internal__chain;
            return;
        }
        if (this.__internal__sharedSandbox && !this.__internal__sharedSandbox.isConnected) {
            await this.__internal__sharedSandbox.connect();
        }
        const client = this.__internal__sharedSandbox
            ? scClients.get(this.__internal__sharedSandbox)
            : this.__internal__Sc.createScClient(config);
        if (!client) {
            throw new Error('Unkown ScProvider!');
        }
        scClients.set(this, client);
        const hc = checkerFactory();
        const onResponse = (res) => {
            const hcRes = hc.responsePassThrough(res);
            if (!hcRes) {
                return;
            }
            const response = JSON.parse(hcRes);
            let decodedResponse;
            try {
                decodedResponse = this.__internal__coder.decodeResponse(response);
            }
            catch (e) {
                decodedResponse = e;
            }
            // It's not a subscription message, but rather a standar RPC response
            if (response.params?.subscription === undefined || !response.method) {
                return this.__internal__requests.get(response.id)?.(decodedResponse);
            }
            // We are dealing with a subscription message
            const subscriptionId = `${response.method}::${response.params.subscription}`;
            const callback = this.__internal__subscriptions.get(subscriptionId)?.[0];
            callback?.(decodedResponse);
        };
        const addChain = this.__internal__wellKnownChains.has(this.__internal__spec)
            ? client.addWellKnownChain
            : client.addChain;
        this.__internal__chain = addChain(this.__internal__spec, onResponse).then((chain) => {
            hc.setSendJsonRpc(chain.sendJsonRpc);
            this.__internal__isChainReady = false;
            const cleanup = () => {
                // If there are any callbacks left, we have to reject/error them.
                // Otherwise, that would cause a memory leak.
                const disconnectionError = new Error('Disconnected');
                this.__internal__requests.forEach((cb) => cb(disconnectionError));
                this.__internal__subscriptions.forEach(([cb]) => cb(disconnectionError));
                this.__internal__subscriptions.clear();
            };
            const staleSubscriptions = [];
            const killStaleSubscriptions = () => {
                if (staleSubscriptions.length === 0) {
                    return;
                }
                const stale = staleSubscriptions.pop();
                if (!stale) {
                    throw new Error('Unable to get stale subscription');
                }
                const { id, unsubscribeMethod } = stale;
                Promise
                    .race([
                    this.send(unsubscribeMethod, [id]).catch(_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .noop */ .Z),
                    new Promise((resolve) => setTimeout(resolve, 500))
                ])
                    .then(killStaleSubscriptions)
                    .catch(_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .noop */ .Z);
            };
            hc.start((health) => {
                const isReady = !health.isSyncing && (health.peers > 0 || !health.shouldHavePeers);
                // if it's the same as before, then nothing has changed and we are done
                if (this.__internal__isChainReady === isReady) {
                    return;
                }
                this.__internal__isChainReady = isReady;
                if (!isReady) {
                    // If we've reached this point, that means that the chain used to be "ready"
                    // and now we are about to emit `disconnected`.
                    //
                    // This will cause the PolkadotJs API think that the connection is
                    // actually dead. In reality the smoldot chain is not dead, of course.
                    // However, we have to cleanup all the existing callbacks because when
                    // the smoldot chain stops syncing, then we will emit `connected` and
                    // the PolkadotJs API will try to re-create the previous
                    // subscriptions and requests. Although, now is not a good moment
                    // to be sending unsubscription messages to the smoldot chain, we
                    // should wait until is no longer syncing to send the unsubscription
                    // messages from the stale subscriptions of the previous connection.
                    //
                    // That's why -before we perform the cleanup of `this.__internal__subscriptions`-
                    // we keep the necessary information that we will need later on to
                    // kill the stale subscriptions.
                    [...this.__internal__subscriptions.values()].forEach((s) => {
                        staleSubscriptions.push(s[1]);
                    });
                    cleanup();
                    this.__internal__eventemitter.emit('disconnected');
                }
                else {
                    killStaleSubscriptions();
                    this.__internal__eventemitter.emit('connected');
                    if (this.__internal__resubscribeMethods.size) {
                        this.__internal__resubscribe();
                    }
                }
            });
            return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .objectSpread */ .Z)({}, chain, {
                remove: () => {
                    hc.stop();
                    chain.remove();
                    cleanup();
                },
                sendJsonRpc: hc.sendJsonRpc.bind(hc)
            });
        });
        try {
            await this.__internal__chain;
        }
        catch (e) {
            this.__internal__chain = null;
            this.__internal__eventemitter.emit('error', e);
            throw e;
        }
    }
    __internal__resubscribe = () => {
        const promises = [];
        this.__internal__resubscribeMethods.forEach((subDetails) => {
            // only re-create subscriptions which are not in author (only area where
            // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
            // are not included (and will not be re-broadcast)
            if (subDetails.type.startsWith('author_')) {
                return;
            }
            try {
                const promise = new Promise((resolve) => {
                    this.subscribe(subDetails.type, subDetails.method, subDetails.params, subDetails.callback).catch((error) => console.log(error));
                    resolve();
                });
                promises.push(promise);
            }
            catch (error) {
                l.error(error);
            }
        });
        Promise.all(promises).catch((err) => l.log(err));
    };
    async disconnect() {
        if (!this.__internal__chain) {
            return;
        }
        const chain = await this.__internal__chain;
        this.__internal__chain = null;
        this.__internal__isChainReady = false;
        try {
            chain.remove();
        }
        catch (_) { }
        this.__internal__eventemitter.emit('disconnected');
    }
    on(type, sub) {
        // It's possible. Although, quite unlikely, that by the time that polkadot
        // subscribes to the `connected` event, the Provider is already connected.
        // In that case, we must emit to let the consumer know that we are connected.
        if (type === 'connected' && this.isConnected) {
            sub();
        }
        this.__internal__eventemitter.on(type, sub);
        return () => {
            this.__internal__eventemitter.removeListener(type, sub);
        };
    }
    async send(method, params) {
        if (!this.isConnected || !this.__internal__chain) {
            throw new Error('Provider is not connected');
        }
        const chain = await this.__internal__chain;
        const [id, json] = this.__internal__coder.encodeJson(method, params);
        const result = new Promise((resolve, reject) => {
            this.__internal__requests.set(id, (response) => {
                ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .isError */ .V)(response) ? reject : resolve)(response);
            });
            try {
                chain.sendJsonRpc(json);
            }
            catch (e) {
                this.__internal__chain = null;
                try {
                    chain.remove();
                }
                catch (_) { }
                this.__internal__eventemitter.emit('error', e);
            }
        });
        try {
            return await result;
        }
        finally {
            // let's ensure that once the Promise is resolved/rejected, then we remove
            // remove its entry from the internal #requests
            this.__internal__requests.delete(id);
        }
    }
    async subscribe(type, method, params, callback) {
        if (!subscriptionUnsubscriptionMethods.has(method)) {
            throw new Error(`Unsupported subscribe method: ${method}`);
        }
        const id = await this.send(method, params);
        const subscriptionId = `${type}::${id}`;
        const cb = (response) => {
            if (response instanceof Error) {
                callback(response, undefined);
            }
            else {
                callback(null, response);
            }
        };
        const unsubscribeMethod = subscriptionUnsubscriptionMethods.get(method);
        if (!unsubscribeMethod) {
            throw new Error('Invalid unsubscribe method found');
        }
        this.__internal__resubscribeMethods.set(subscriptionId, { callback, method, params, type });
        this.__internal__subscriptions.set(subscriptionId, [cb, { id, unsubscribeMethod }]);
        return id;
    }
    unsubscribe(type, method, id) {
        if (!this.isConnected) {
            throw new Error('Provider is not connected');
        }
        const subscriptionId = `${type}::${id}`;
        if (!this.__internal__subscriptions.has(subscriptionId)) {
            return Promise.reject(new Error(`Unable to find active subscription=${subscriptionId}`));
        }
        this.__internal__resubscribeMethods.delete(subscriptionId);
        this.__internal__subscriptions.delete(subscriptionId);
        return this.send(method, [id]);
    }
}


/***/ }),

/***/ 61933:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ getWSErrorString)
/* harmony export */ });
const known = {
    1000: 'Normal Closure',
    1001: 'Going Away',
    1002: 'Protocol Error',
    1003: 'Unsupported Data',
    1004: '(For future)',
    1005: 'No Status Received',
    1006: 'Abnormal Closure',
    1007: 'Invalid frame payload data',
    1008: 'Policy Violation',
    1009: 'Message too big',
    1010: 'Missing Extension',
    1011: 'Internal Error',
    1012: 'Service Restart',
    1013: 'Try Again Later',
    1014: 'Bad Gateway',
    1015: 'TLS Handshake'
};
function getWSErrorString(code) {
    if (code >= 0 && code <= 999) {
        return '(Unused)';
    }
    else if (code >= 1016) {
        if (code <= 1999) {
            return '(For WebSocket standard)';
        }
        else if (code <= 2999) {
            return '(For WebSocket extensions)';
        }
        else if (code <= 3999) {
            return '(For libraries and frameworks)';
        }
        else if (code <= 4999) {
            return '(For applications)';
        }
    }
    return known[code] || '(Unknown)';
}


/***/ }),

/***/ 68884:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ WsProvider)
/* harmony export */ });
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73983);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63985);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12275);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(28660);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(34644);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(59833);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_x_global__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(80496);
/* harmony import */ var _polkadot_x_ws__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(51891);
/* harmony import */ var _coder_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(38578);
/* harmony import */ var _defaults_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(71759);
/* harmony import */ var _lru_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(89063);
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(61933);








const ALIASES = {
    chain_finalisedHead: 'chain_finalizedHead',
    chain_subscribeFinalisedHeads: 'chain_subscribeFinalizedHeads',
    chain_unsubscribeFinalisedHeads: 'chain_unsubscribeFinalizedHeads'
};
const RETRY_DELAY = 2500;
const DEFAULT_TIMEOUT_MS = 60 * 1000;
const TIMEOUT_INTERVAL = 5000;
const l = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .logger */ .k)('api-ws');
/** @internal Clears a Record<*> of all keys, optionally with all callback on clear */
function eraseRecord(record, cb) {
    Object.keys(record).forEach((key) => {
        if (cb) {
            cb(record[key]);
        }
        delete record[key];
    });
}
/** @internal Creates a default/empty stats object */
function defaultEndpointStats() {
    return { bytesRecv: 0, bytesSent: 0, cached: 0, errors: 0, requests: 0, subscriptions: 0, timeout: 0 };
}
/**
 * # @polkadot/rpc-provider/ws
 *
 * @name WsProvider
 *
 * @description The WebSocket Provider allows sending requests using WebSocket to a WebSocket RPC server TCP port. Unlike the [[HttpProvider]], it does support subscriptions and allows listening to events such as new blocks or balance changes.
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Api from '@polkadot/api/promise';
 * import { WsProvider } from '@polkadot/rpc-provider/ws';
 *
 * const provider = new WsProvider('ws://127.0.0.1:9944');
 * const api = new Api(provider);
 * ```
 *
 * @see [[HttpProvider]]
 */
class WsProvider {
    __internal__callCache = new _lru_js__WEBPACK_IMPORTED_MODULE_2__/* .LRUCache */ .z();
    __internal__coder;
    __internal__endpoints;
    __internal__headers;
    __internal__eventemitter;
    __internal__handlers = {};
    __internal__isReadyPromise;
    __internal__stats;
    __internal__waitingForId = {};
    __internal__autoConnectMs;
    __internal__endpointIndex;
    __internal__endpointStats;
    __internal__isConnected = false;
    __internal__subscriptions = {};
    __internal__timeoutId = null;
    __internal__websocket;
    __internal__timeout;
    /**
     * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
     * @param {number | false} autoConnectMs Whether to connect automatically or not (default). Provided value is used as a delay between retries.
     * @param {Record<string, string>} headers The headers provided to the underlying WebSocket
     * @param {number} [timeout] Custom timeout value used per request . Defaults to `DEFAULT_TIMEOUT_MS`
     */
    constructor(endpoint = _defaults_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout) {
        const endpoints = Array.isArray(endpoint)
            ? endpoint
            : [endpoint];
        if (endpoints.length === 0) {
            throw new Error('WsProvider requires at least one Endpoint');
        }
        endpoints.forEach((endpoint) => {
            if (!/^(wss|ws):\/\//.test(endpoint)) {
                throw new Error(`Endpoint should start with 'ws://', received '${endpoint}'`);
            }
        });
        this.__internal__eventemitter = new eventemitter3__WEBPACK_IMPORTED_MODULE_0__/* .EventEmitter */ .v();
        this.__internal__autoConnectMs = autoConnectMs || 0;
        this.__internal__coder = new _coder_index_js__WEBPACK_IMPORTED_MODULE_4__/* .RpcCoder */ .K();
        this.__internal__endpointIndex = -1;
        this.__internal__endpoints = endpoints;
        this.__internal__headers = headers;
        this.__internal__websocket = null;
        this.__internal__stats = {
            active: { requests: 0, subscriptions: 0 },
            total: defaultEndpointStats()
        };
        this.__internal__endpointStats = defaultEndpointStats();
        this.__internal__timeout = timeout || DEFAULT_TIMEOUT_MS;
        if (autoConnectMs && autoConnectMs > 0) {
            this.connectWithRetry().catch(_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .noop */ .Z);
        }
        this.__internal__isReadyPromise = new Promise((resolve) => {
            this.__internal__eventemitter.once('connected', () => {
                resolve(this);
            });
        });
    }
    /**
     * @summary `true` when this provider supports subscriptions
     */
    get hasSubscriptions() {
        return !!true;
    }
    /**
     * @summary `true` when this provider supports clone()
     */
    get isClonable() {
        return !!true;
    }
    /**
     * @summary Whether the node is connected or not.
     * @return {boolean} true if connected
     */
    get isConnected() {
        return this.__internal__isConnected;
    }
    /**
     * @description Promise that resolves the first time we are connected and loaded
     */
    get isReady() {
        return this.__internal__isReadyPromise;
    }
    get endpoint() {
        return this.__internal__endpoints[this.__internal__endpointIndex];
    }
    /**
     * @description Returns a clone of the object
     */
    clone() {
        return new WsProvider(this.__internal__endpoints);
    }
    selectEndpointIndex(endpoints) {
        return (this.__internal__endpointIndex + 1) % endpoints.length;
    }
    /**
     * @summary Manually connect
     * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
     * connect manually using this method.
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async connect() {
        if (this.__internal__websocket) {
            throw new Error('WebSocket is already connected');
        }
        try {
            this.__internal__endpointIndex = this.selectEndpointIndex(this.__internal__endpoints);
            // the as here is Deno-specific - not available on the globalThis
            this.__internal__websocket = typeof _polkadot_x_global__WEBPACK_IMPORTED_MODULE_6__/* .xglobal */ .Ur.WebSocket !== 'undefined' && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .isChildClass */ .H)(_polkadot_x_global__WEBPACK_IMPORTED_MODULE_6__/* .xglobal */ .Ur.WebSocket, _polkadot_x_ws__WEBPACK_IMPORTED_MODULE_8__/* .WebSocket */ .X)
                ? new _polkadot_x_ws__WEBPACK_IMPORTED_MODULE_8__/* .WebSocket */ .X(this.endpoint)
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore - WS may be an instance of ws, which supports options
                : new _polkadot_x_ws__WEBPACK_IMPORTED_MODULE_8__/* .WebSocket */ .X(this.endpoint, undefined, {
                    headers: this.__internal__headers
                });
            if (this.__internal__websocket) {
                this.__internal__websocket.onclose = this.__internal__onSocketClose;
                this.__internal__websocket.onerror = this.__internal__onSocketError;
                this.__internal__websocket.onmessage = this.__internal__onSocketMessage;
                this.__internal__websocket.onopen = this.__internal__onSocketOpen;
            }
            // timeout any handlers that have not had a response
            this.__internal__timeoutId = setInterval(() => this.__internal__timeoutHandlers(), TIMEOUT_INTERVAL);
        }
        catch (error) {
            l.error(error);
            this.__internal__emit('error', error);
            throw error;
        }
    }
    /**
     * @description Connect, never throwing an error, but rather forcing a retry
     */
    async connectWithRetry() {
        if (this.__internal__autoConnectMs > 0) {
            try {
                await this.connect();
            }
            catch {
                setTimeout(() => {
                    this.connectWithRetry().catch(_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .noop */ .Z);
                }, this.__internal__autoConnectMs);
            }
        }
    }
    /**
     * @description Manually disconnect from the connection, clearing auto-connect logic
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async disconnect() {
        // switch off autoConnect, we are in manual mode now
        this.__internal__autoConnectMs = 0;
        try {
            if (this.__internal__websocket) {
                // 1000 - Normal closure; the connection successfully completed
                this.__internal__websocket.close(1000);
            }
        }
        catch (error) {
            l.error(error);
            this.__internal__emit('error', error);
            throw error;
        }
    }
    /**
     * @description Returns the connection stats
     */
    get stats() {
        return {
            active: {
                requests: Object.keys(this.__internal__handlers).length,
                subscriptions: Object.keys(this.__internal__subscriptions).length
            },
            total: this.__internal__stats.total
        };
    }
    get endpointStats() {
        return this.__internal__endpointStats;
    }
    /**
     * @summary Listens on events after having subscribed using the [[subscribe]] function.
     * @param  {ProviderInterfaceEmitted} type Event
     * @param  {ProviderInterfaceEmitCb}  sub  Callback
     * @return unsubscribe function
     */
    on(type, sub) {
        this.__internal__eventemitter.on(type, sub);
        return () => {
            this.__internal__eventemitter.removeListener(type, sub);
        };
    }
    /**
     * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
     * @param method The RPC methods to execute
     * @param params Encoded parameters as applicable for the method
     * @param subscription Subscription details (internally used)
     */
    send(method, params, isCacheable, subscription) {
        this.__internal__endpointStats.requests++;
        this.__internal__stats.total.requests++;
        const [id, body] = this.__internal__coder.encodeJson(method, params);
        let resultPromise = isCacheable
            ? this.__internal__callCache.get(body)
            : null;
        if (!resultPromise) {
            resultPromise = this.__internal__send(id, body, method, params, subscription);
            if (isCacheable) {
                this.__internal__callCache.set(body, resultPromise);
            }
        }
        else {
            this.__internal__endpointStats.cached++;
            this.__internal__stats.total.cached++;
        }
        return resultPromise;
    }
    async __internal__send(id, body, method, params, subscription) {
        return new Promise((resolve, reject) => {
            try {
                if (!this.isConnected || this.__internal__websocket === null) {
                    throw new Error('WebSocket is not connected');
                }
                const callback = (error, result) => {
                    error
                        ? reject(error)
                        : resolve(result);
                };
                l.debug(() => ['calling', method, body]);
                this.__internal__handlers[id] = {
                    callback,
                    method,
                    params,
                    start: Date.now(),
                    subscription
                };
                const bytesSent = body.length;
                this.__internal__endpointStats.bytesSent += bytesSent;
                this.__internal__stats.total.bytesSent += bytesSent;
                this.__internal__websocket.send(body);
            }
            catch (error) {
                this.__internal__endpointStats.errors++;
                this.__internal__stats.total.errors++;
                reject(error);
            }
        });
    }
    /**
     * @name subscribe
     * @summary Allows subscribing to a specific event.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const provider = new WsProvider('ws://127.0.0.1:9944');
     * const rpc = new Rpc(provider);
     *
     * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
     *   console.log(values)
     * }).then((subscriptionId) => {
     *   console.log('balance changes subscription id: ', subscriptionId)
     * })
     * ```
     */
    subscribe(type, method, params, callback) {
        this.__internal__endpointStats.subscriptions++;
        this.__internal__stats.total.subscriptions++;
        // subscriptions are not cached, LRU applies to .at(<blockHash>) only
        return this.send(method, params, false, { callback, type });
    }
    /**
     * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
     */
    async unsubscribe(type, method, id) {
        const subscription = `${type}::${id}`;
        // FIXME This now could happen with re-subscriptions. The issue is that with a re-sub
        // the assigned id now does not match what the API user originally received. It has
        // a slight complication in solving - since we cannot rely on the send id, but rather
        // need to find the actual subscription id to map it
        if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_9__/* .isUndefined */ .o)(this.__internal__subscriptions[subscription])) {
            l.debug(() => `Unable to find active subscription=${subscription}`);
            return false;
        }
        delete this.__internal__subscriptions[subscription];
        try {
            return this.isConnected && !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_10__/* .isNull */ .F)(this.__internal__websocket)
                ? this.send(method, [id])
                : true;
        }
        catch {
            return false;
        }
    }
    __internal__emit = (type, ...args) => {
        this.__internal__eventemitter.emit(type, ...args);
    };
    __internal__onSocketClose = (event) => {
        const error = new Error(`disconnected from ${this.endpoint}: ${event.code}:: ${event.reason || (0,_errors_js__WEBPACK_IMPORTED_MODULE_11__/* .getWSErrorString */ .g)(event.code)}`);
        if (this.__internal__autoConnectMs > 0) {
            l.error(error.message);
        }
        this.__internal__isConnected = false;
        if (this.__internal__websocket) {
            this.__internal__websocket.onclose = null;
            this.__internal__websocket.onerror = null;
            this.__internal__websocket.onmessage = null;
            this.__internal__websocket.onopen = null;
            this.__internal__websocket = null;
        }
        if (this.__internal__timeoutId) {
            clearInterval(this.__internal__timeoutId);
            this.__internal__timeoutId = null;
        }
        // reject all hanging requests
        eraseRecord(this.__internal__handlers, (h) => {
            try {
                h.callback(error, undefined);
            }
            catch (err) {
                // does not throw
                l.error(err);
            }
        });
        eraseRecord(this.__internal__waitingForId);
        // Reset stats for active endpoint
        this.__internal__endpointStats = defaultEndpointStats();
        this.__internal__emit('disconnected');
        if (this.__internal__autoConnectMs > 0) {
            setTimeout(() => {
                this.connectWithRetry().catch(_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .noop */ .Z);
            }, this.__internal__autoConnectMs);
        }
    };
    __internal__onSocketError = (error) => {
        l.debug(() => ['socket error', error]);
        this.__internal__emit('error', error);
    };
    __internal__onSocketMessage = (message) => {
        l.debug(() => ['received', message.data]);
        const bytesRecv = message.data.length;
        this.__internal__endpointStats.bytesRecv += bytesRecv;
        this.__internal__stats.total.bytesRecv += bytesRecv;
        const response = JSON.parse(message.data);
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_9__/* .isUndefined */ .o)(response.method)
            ? this.__internal__onSocketMessageResult(response)
            : this.__internal__onSocketMessageSubscribe(response);
    };
    __internal__onSocketMessageResult = (response) => {
        const handler = this.__internal__handlers[response.id];
        if (!handler) {
            l.debug(() => `Unable to find handler for id=${response.id}`);
            return;
        }
        try {
            const { method, params, subscription } = handler;
            const result = this.__internal__coder.decodeResponse(response);
            // first send the result - in case of subs, we may have an update
            // immediately if we have some queued results already
            handler.callback(null, result);
            if (subscription) {
                const subId = `${subscription.type}::${result}`;
                this.__internal__subscriptions[subId] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_12__/* .objectSpread */ .Z)({}, subscription, {
                    method,
                    params
                });
                // if we have a result waiting for this subscription already
                if (this.__internal__waitingForId[subId]) {
                    this.__internal__onSocketMessageSubscribe(this.__internal__waitingForId[subId]);
                }
            }
        }
        catch (error) {
            this.__internal__endpointStats.errors++;
            this.__internal__stats.total.errors++;
            handler.callback(error, undefined);
        }
        delete this.__internal__handlers[response.id];
    };
    __internal__onSocketMessageSubscribe = (response) => {
        if (!response.method) {
            throw new Error('No method found in JSONRPC response');
        }
        const method = ALIASES[response.method] || response.method;
        const subId = `${method}::${response.params.subscription}`;
        const handler = this.__internal__subscriptions[subId];
        if (!handler) {
            // store the JSON, we could have out-of-order subid coming in
            this.__internal__waitingForId[subId] = response;
            l.debug(() => `Unable to find handler for subscription=${subId}`);
            return;
        }
        // housekeeping
        delete this.__internal__waitingForId[subId];
        try {
            const result = this.__internal__coder.decodeResponse(response);
            handler.callback(null, result);
        }
        catch (error) {
            this.__internal__endpointStats.errors++;
            this.__internal__stats.total.errors++;
            handler.callback(error, undefined);
        }
    };
    __internal__onSocketOpen = () => {
        if (this.__internal__websocket === null) {
            throw new Error('WebSocket cannot be null in onOpen');
        }
        l.debug(() => ['connected to', this.endpoint]);
        this.__internal__isConnected = true;
        this.__internal__resubscribe();
        this.__internal__emit('connected');
        return true;
    };
    __internal__resubscribe = () => {
        const subscriptions = this.__internal__subscriptions;
        this.__internal__subscriptions = {};
        Promise.all(Object.keys(subscriptions).map(async (id) => {
            const { callback, method, params, type } = subscriptions[id];
            // only re-create subscriptions which are not in author (only area where
            // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
            // are not included (and will not be re-broadcast)
            if (type.startsWith('author_')) {
                return;
            }
            try {
                await this.subscribe(type, method, params, callback);
            }
            catch (error) {
                l.error(error);
            }
        })).catch(l.error);
    };
    __internal__timeoutHandlers = () => {
        const now = Date.now();
        const ids = Object.keys(this.__internal__handlers);
        for (let i = 0, count = ids.length; i < count; i++) {
            const handler = this.__internal__handlers[ids[i]];
            if ((now - handler.start) > this.__internal__timeout) {
                try {
                    handler.callback(new Error(`No response received from RPC endpoint in ${this.__internal__timeout / 1000}s`), undefined);
                }
                catch {
                    // ignore
                }
                this.__internal__endpointStats.timeout++;
                this.__internal__stats.total.timeout++;
                delete this.__internal__handlers[ids[i]];
            }
        }
    };
}


/***/ }),

/***/ 19895:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: () => (/* binding */ AbstractArray)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51892);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(93173);
/* harmony import */ var _utils_compareArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40665);


/**
 * @name AbstractArray
 * @description
 * This manages codec arrays. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 * @noInheritDoc
 */
class AbstractArray extends Array {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    /**
     * @description This ensures that operators such as clice, filter, map, etc. return
     * new Array instances (without this we need to apply overrides)
     */
    static get [Symbol.species]() {
        return Array;
    }
    constructor(registry, length) {
        super(length);
        this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        // We need to loop through all entries since they may have a variable length themselves,
        // e.g. when a Vec or Compact is contained withing, it has a variable length based on data
        const count = this.length;
        let total = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .compactToU8a */ .Y)(count).length;
        for (let i = 0; i < count; i++) {
            total += this[i].encodedLength;
        }
        return total;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return this.length === 0;
    }
    /**
     * @description The length of the value
     */
    get length() {
        // only included here since we ignore inherited docs
        return super.length;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return (0,_utils_compareArray_js__WEBPACK_IMPORTED_MODULE_1__/* .compareArray */ .w)(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            inner: this.inspectInner(),
            outer: [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .compactToU8a */ .Y)(this.length)]
        };
    }
    /**
     * @internal
     * @description Internal per-item inspection of internal values
     */
    inspectInner() {
        const count = this.length;
        const inner = new Array(count);
        for (let i = 0; i < count; i++) {
            inner[i] = this[i].inspect();
        }
        return inner;
    }
    /**
     * @description Converts the Object to an standard JavaScript Array
     */
    toArray() {
        return Array.from(this);
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aToHex */ .c)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        const count = this.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            result[i] = this[i] && this[i].toHuman(isExtended);
        }
        return result;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        const count = this.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            // We actually log inside the U8a decoding and use JSON.stringify(...), which
            // means that the Vec may be partially populated (same applies to toHuman, same check)
            result[i] = this[i] && this[i].toJSON();
        }
        return result;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        const count = this.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            result[i] = this[i] && this[i].toPrimitive();
        }
        return result;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        const count = this.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            result[i] = this[i].toString();
        }
        return `[${result.join(', ')}]`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const encoded = this.toU8aInner();
        return isBare
            ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .u8aConcatStrict */ .d)(encoded)
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .u8aConcatStrict */ .d)([(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .compactToU8a */ .Y)(this.length), ...encoded]);
    }
    /**
     * @internal
     * @description Internal per-item SCALE encoding of contained values
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8aInner(isBare) {
        const count = this.length;
        const encoded = new Array(count);
        for (let i = 0; i < count; i++) {
            encoded[i] = this[i].toU8a(isBare);
        }
        return encoded;
    }
}


/***/ }),

/***/ 97608:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ AbstractBase)
/* harmony export */ });
/**
 * @name Base
 * @description A type extends the Base class, when it holds a value
 */
class AbstractBase {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__raw;
    constructor(registry, value, initialU8aLength) {
        this.initialU8aLength = initialU8aLength;
        this.__internal__raw = value;
        this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description returns the inner (wrapped value)
     */
    get inner() {
        return this.__internal__raw;
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return this.__internal__raw.isEmpty;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return this.__internal__raw.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return this.__internal__raw.inspect();
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex(isLe) {
        return this.__internal__raw.toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return this.__internal__raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.__internal__raw.toJSON();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.__internal__raw.toPrimitive();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.__internal__raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return this.__internal__raw.toU8a(isBare);
    }
    /**
     * @description Returns the inner wrapped value (equivalent to valueOf)
     */
    unwrap() {
        return this.__internal__raw;
    }
    /**
     * @description Returns the inner wrapped value
     */
    valueOf() {
        return this.__internal__raw;
    }
}


/***/ }),

/***/ 80202:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   y: () => (/* binding */ AbstractInt)
/* harmony export */ });
/* unused harmony export DEFAULT_UINT_BITS */
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39098);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38252);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(73092);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(52906);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(55632);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(16996);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(46770);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9716);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(31822);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(91693);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(54556);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(26563);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(63603);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(64983);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(82144);

const DEFAULT_UINT_BITS = 64;
const MAX_NUMBER_BITS = 52;
const MUL_P = new _polkadot_util__WEBPACK_IMPORTED_MODULE_0__(10000);
const FORMATTERS = [
    ['Perquintill', _polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .BN_QUINTILL */ .Wi],
    ['Perbill', _polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .BN_BILLION */ .ed],
    ['Permill', _polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .BN_MILLION */ .uy],
    ['Percent', _polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .BN_HUNDRED */ .S8]
];
function isToBn(value) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isFunction */ .m)(value.toBn);
}
function toPercentage(value, divisor) {
    return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
}
/** @internal */
function decodeAbstractInt(value, isNegative) {
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isNumber */ .h)(value)) {
        if (!Number.isInteger(value) || value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {
            throw new Error('Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1');
        }
        return value;
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .isString */ .H)(value)) {
        if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isHex */ .vq)(value, -1, true)) {
            return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .hexToBn */ .m)(value, { isLe: false, isNegative }).toString();
        }
        if (value.includes('.') || value.includes(',') || value.includes('e')) {
            throw new Error('String should not contain decimal points or scientific notation');
        }
        return value;
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .isBn */ .H)(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .isBigInt */ .C)(value)) {
        return value.toString();
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_9__/* .isObject */ .K)(value)) {
        if (isToBn(value)) {
            return value.toBn().toString();
        }
        // Allow the construction from an object with a single top-level key. This means that
        // single key objects can be treated equivalently to numbers, assuming they meet the
        // specific requirements. (This is useful in Weights 1.5 where Objects are compact)
        const keys = Object.keys(value);
        if (keys.length !== 1) {
            throw new Error('Unable to construct number from multi-key object');
        }
        return decodeAbstractInt(value[keys[0]], isNegative);
    }
    else if (!value) {
        return 0;
    }
    throw new Error(`Unable to create BN from unknown type ${typeof value}`);
}
/**
 * @name AbstractInt
 * @ignore
 * @noInheritDoc
 */
class AbstractInt extends _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ {
    registry;
    encodedLength;
    isUnsigned;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__bitLength;
    constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
        // Construct via a string/number, which will be passed in the BN constructor.
        // It would be ideal to actually return a BN, but there is an issue:
        // https://github.com/indutny/bn.js/issues/206
        super(
        // shortcut isU8a as used in SCALE decoding
        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_10__/* .isU8a */ .U)(value)
            ? bitLength <= 48
                ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__/* .u8aToNumber */ .f)(value.subarray(0, bitLength / 8), { isNegative: isSigned })
                : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_12__/* .u8aToBn */ ._)(value.subarray(0, bitLength / 8), { isLe: true, isNegative: isSigned }).toString()
            : decodeAbstractInt(value, isSigned));
        this.registry = registry;
        this.__internal__bitLength = bitLength;
        this.encodedLength = this.__internal__bitLength / 8;
        this.initialU8aLength = this.__internal__bitLength / 8;
        this.isUnsigned = !isSigned;
        const isNegative = this.isNeg();
        const maxBits = bitLength - (isSigned && !isNegative ? 1 : 0);
        if (isNegative && !isSigned) {
            throw new Error(`${this.toRawType()}: Negative number passed to unsigned type`);
        }
        else if (super.bitLength() > maxBits) {
            throw new Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
        }
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is a zero value (align elsewhere)
     */
    get isEmpty() {
        return this.isZero();
    }
    /**
     * @description Returns the number of bits in the value
     */
    bitLength() {
        return this.__internal__bitLength;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    eq(other) {
        // Here we are actually overriding the built-in .eq to take care of both
        // number and BN inputs (no `.eqn` needed) - numbers will be converted
        return super.eq((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isHex */ .vq)(other)
            ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .hexToBn */ .m)(other.toString(), { isLe: false, isNegative: !this.isUnsigned })
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__/* .bnToBn */ .G)(other));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [this.toU8a()]
        };
    }
    /**
     * @description True if this value is the max of the type
     */
    isMax() {
        const u8a = this.toU8a().filter((b) => b === 0xff);
        return u8a.length === (this.__internal__bitLength / 8);
    }
    /**
     * @description Returns a BigInt representation of the number
     */
    toBigInt() {
        return BigInt(this.toString());
    }
    /**
     * @description Returns the BN representation of the number. (Compatibility)
     */
    toBn() {
        return this;
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex(isLe = false) {
        // For display/JSON, this is BE, for compare, use isLe
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_14__/* .bnToHex */ .G)(this, {
            bitLength: this.bitLength(),
            isLe,
            isNegative: !this.isUnsigned
        });
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(_isExpanded) {
        const rawType = this.toRawType();
        if (rawType === 'Balance') {
            return this.isMax()
                ? 'everything'
                // FIXME In the case of multiples we need some way of detecting which instance this belongs
                // to. as it stands we will always format (incorrectly) against the first token defined
                : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_15__/* .formatBalance */ .a)(this, { decimals: this.registry.chainDecimals[0], withSi: true, withUnit: this.registry.chainTokens[0] });
        }
        const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
        return divisor
            ? toPercentage(this, divisor)
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_16__/* .formatNumber */ .u)(this);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON(onlyHex = false) {
        // FIXME this return type should by string | number, however BN returns string
        // Options here are
        //   - super.bitLength() - the actual used bits, use hex when close to MAX_SAFE_INTEGER
        //   - this.__internal__bitLength - the max used bits, use hex when larger than native Rust type
        return onlyHex || (this.__internal__bitLength > 128) || (super.bitLength() > MAX_NUMBER_BITS)
            ? this.toHex()
            : this.toNumber();
    }
    /**
     * @description Returns the value in a primitive form, either number when <= 52 bits, or string otherwise
     */
    toPrimitive() {
        return super.bitLength() > MAX_NUMBER_BITS
            ? this.toString()
            : this.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        // NOTE In the case of balances, which have a special meaning on the UI
        // and can be interpreted differently, return a specific value for it so
        // underlying it always matches (no matter which length it actually is)
        return this instanceof this.registry.createClassUnsafe('Balance')
            ? 'Balance'
            : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;
    }
    /**
     * @description Returns the string representation of the value
     * @param base The base to use for the conversion
     */
    toString(base) {
        // only included here since we do not inherit docs
        return super.toString(base);
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_17__/* .bnToU8a */ .a)(this, {
            bitLength: this.bitLength(),
            isLe: true,
            isNegative: !this.isUnsigned
        });
    }
}


/***/ }),

/***/ 12914:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ Compact)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44961);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12275);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(51892);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96424);


function decodeCompact(registry, Type, value) {
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isU8a */ .U)(value)) {
        const [decodedLength, bn] = (value[0] & 0b11) < 0b11
            ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .compactFromU8aLim */ .j)(value)
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .compactFromU8a */ .P)(value);
        return [new Type(registry, bn), decodedLength];
    }
    else if (value instanceof Compact) {
        const raw = value.unwrap();
        return raw instanceof Type
            ? [raw, 0]
            : [new Type(registry, raw), 0];
    }
    else if (value instanceof Type) {
        return [value, 0];
    }
    return [new Type(registry, value), 0];
}
/**
 * @name Compact
 * @description
 * A compact length-encoding codec wrapper. It performs the same function as Length, however
 * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly
 * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking
 * a number and making the compact representation thereof
 */
class Compact {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__Type;
    __internal__raw;
    constructor(registry, Type, value = 0, { definition, setDefinition = _polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .identity */ .y } = {}) {
        this.registry = registry;
        this.__internal__Type = definition || setDefinition((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__/* .typeToConstructor */ .rA)(registry, Type));
        const [raw, decodedLength] = decodeCompact(registry, this.__internal__Type, value);
        this.initialU8aLength = decodedLength;
        this.__internal__raw = raw;
    }
    static with(Type) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d) => (definition = d);
        return class extends Compact {
            constructor(registry, value) {
                super(registry, Type, value, { definition, setDefinition });
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return this.__internal__raw.isEmpty;
    }
    /**
     * @description Returns the number of bits in the value
     */
    bitLength() {
        return this.__internal__raw.bitLength();
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return this.__internal__raw.eq(other instanceof Compact
            ? other.__internal__raw
            : other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [this.toU8a()]
        };
    }
    /**
     * @description Returns a BigInt representation of the number
     */
    toBigInt() {
        return this.__internal__raw.toBigInt();
    }
    /**
     * @description Returns the BN representation of the number
     */
    toBn() {
        return this.__internal__raw.toBn();
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex(isLe) {
        return this.__internal__raw.toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return this.__internal__raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.__internal__raw.toJSON();
    }
    /**
     * @description Returns the number representation for the value
     */
    toNumber() {
        return this.__internal__raw.toNumber();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.__internal__raw.toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `Compact<${this.registry.getClassName(this.__internal__Type) || this.__internal__raw.toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.__internal__raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .compactToU8a */ .Y)(this.__internal__raw.toBn());
    }
    /**
     * @description Returns the embedded [[UInt]] or [[Moment]] value
     */
    unwrap() {
        return this.__internal__raw;
    }
}


/***/ }),

/***/ 53542:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   w: () => (/* binding */ DoNotConstruct)
/* harmony export */ });
/**
 * @name DoNotConstruct
 * @description
 * An unknown type that fails on construction with the type info
 */
class DoNotConstruct {
    registry;
    createdAtHash;
    isStorageFallback;
    __internal__neverError;
    constructor(registry, typeName = 'DoNotConstruct') {
        this.registry = registry;
        this.__internal__neverError = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
        throw this.__internal__neverError;
    }
    static with(typeName) {
        return class extends DoNotConstruct {
            constructor(registry) {
                super(registry, typeName);
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        throw this.__internal__neverError;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        throw this.__internal__neverError;
    }
    /**
     * @description Checks if the value is an empty value (always true)
     */
    get isEmpty() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    eq() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    inspect() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toHex() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toHuman() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toJSON() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toPrimitive() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toRawType() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toString() {
        throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toU8a() {
        throw this.__internal__neverError;
    }
}


/***/ }),

/***/ 96317:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ Enum)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52906);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9716);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(12275);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(36600);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(57620);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(53393);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(93173);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96424);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(97956);
/* harmony import */ var _Null_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73260);



function isRustEnum(def) {
    const defValues = Object.values(def);
    if (defValues.some((v) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .h)(v))) {
        if (!defValues.every((v) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .h)(v) && v >= 0 && v <= 255)) {
            throw new Error('Invalid number-indexed enum definition');
        }
        return false;
    }
    return true;
}
function extractDef(registry, _def) {
    const def = {};
    let isBasic;
    let isIndexed;
    if (Array.isArray(_def)) {
        for (let i = 0, count = _def.length; i < count; i++) {
            def[_def[i]] = { Type: _Null_js__WEBPACK_IMPORTED_MODULE_1__/* .Null */ .p, index: i };
        }
        isBasic = true;
        isIndexed = false;
    }
    else if (isRustEnum(_def)) {
        const [Types, keys] = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__/* .mapToTypeMap */ .y7)(registry, _def);
        for (let i = 0, count = keys.length; i < count; i++) {
            def[keys[i]] = { Type: Types[i], index: i };
        }
        isBasic = !Object.values(def).some(({ Type }) => Type !== _Null_js__WEBPACK_IMPORTED_MODULE_1__/* .Null */ .p);
        isIndexed = false;
    }
    else {
        const entries = Object.entries(_def);
        for (let i = 0, count = entries.length; i < count; i++) {
            const [key, index] = entries[i];
            def[key] = { Type: _Null_js__WEBPACK_IMPORTED_MODULE_1__/* .Null */ .p, index };
        }
        isBasic = true;
        isIndexed = true;
    }
    return {
        def,
        isBasic,
        isIndexed
    };
}
function getEntryType(def, checkIdx) {
    const values = Object.values(def);
    for (let i = 0, count = values.length; i < count; i++) {
        const { Type, index } = values[i];
        if (index === checkIdx) {
            return Type;
        }
    }
    throw new Error(`Unable to create Enum via index ${checkIdx}, in ${Object.keys(def).join(', ')}`);
}
function createFromU8a(registry, def, index, value) {
    const Type = getEntryType(def, index);
    return {
        index,
        value: new Type(registry, value)
    };
}
function createFromValue(registry, def, index = 0, value) {
    const Type = getEntryType(def, index);
    return {
        index,
        value: value instanceof Type
            ? value
            : new Type(registry, value)
    };
}
function decodeFromJSON(registry, def, key, value) {
    // JSON comes in the form of { "<type (camelCase)>": "<value for type>" }, here we
    // additionally force to lower to ensure forward compat
    const keys = Object.keys(def).map((k) => k.toLowerCase());
    const keyLower = key.toLowerCase();
    const index = keys.indexOf(keyLower);
    if (index === -1) {
        throw new Error(`Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);
    }
    try {
        return createFromValue(registry, def, Object.values(def)[index].index, value);
    }
    catch (error) {
        throw new Error(`Enum(${key}):: ${error.message}`);
    }
}
function decodeEnum(registry, def, value, index) {
    // NOTE We check the index path first, before looking at values - this allows treating
    // the optional indexes before anything else, more-specific > less-specific
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .h)(index)) {
        return createFromValue(registry, def, index, value);
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isU8a */ .U)(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .isHex */ .vq)(value)) {
        const u8a = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .u8aToU8a */ .Y)(value);
        // nested, we don't want to match isObject below
        if (u8a.length) {
            return createFromU8a(registry, def, u8a[0], u8a.subarray(1));
        }
    }
    else if (value instanceof Enum) {
        return createFromValue(registry, def, value.index, value.value);
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .h)(value)) {
        return createFromValue(registry, def, value);
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .isString */ .H)(value)) {
        return decodeFromJSON(registry, def, value.toString());
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .isObject */ .K)(value)) {
        const key = Object.keys(value)[0];
        return decodeFromJSON(registry, def, key, value[key]);
    }
    // Worst-case scenario, return the first with default
    return createFromValue(registry, def, Object.values(def)[0].index);
}
/**
 * @name Enum
 * @description
 * This implements an enum, that based on the value wraps a different type. It is effectively
 * an extension to enum where the value type is determined by the actual index.
 */
class Enum {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__def;
    __internal__entryIndex;
    __internal__indexes;
    __internal__isBasic;
    __internal__isIndexed;
    __internal__raw;
    constructor(registry, Types, value, index, { definition, setDefinition = _polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .identity */ .y } = {}) {
        const { def, isBasic, isIndexed } = definition || setDefinition(extractDef(registry, Types));
        // shortcut isU8a as used in SCALE decoding
        const decoded = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isU8a */ .U)(value) && value.length && !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .h)(index)
            ? createFromU8a(registry, def, value[0], value.subarray(1))
            : decodeEnum(registry, def, value, index);
        this.registry = registry;
        this.__internal__def = def;
        this.__internal__isBasic = isBasic;
        this.__internal__isIndexed = isIndexed;
        this.__internal__indexes = Object.values(def).map(({ index }) => index);
        this.__internal__entryIndex = this.__internal__indexes.indexOf(decoded.index);
        this.__internal__raw = decoded.value;
        if (this.__internal__raw.initialU8aLength) {
            this.initialU8aLength = 1 + this.__internal__raw.initialU8aLength;
        }
    }
    static with(Types) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d) => definition = d;
        return class extends Enum {
            static {
                const keys = Array.isArray(Types)
                    ? Types
                    : Object.keys(Types);
                const count = keys.length;
                const asKeys = new Array(count);
                const isKeys = new Array(count);
                for (let i = 0; i < count; i++) {
                    const name = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_9__/* .stringPascalCase */ .KT)(keys[i]);
                    asKeys[i] = `as${name}`;
                    isKeys[i] = `is${name}`;
                }
                (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_10__/* .objectProperties */ .a)(this.prototype, isKeys, (_, i, self) => self.type === keys[i]);
                (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_10__/* .objectProperties */ .a)(this.prototype, asKeys, (k, i, self) => {
                    if (self.type !== keys[i]) {
                        throw new Error(`Cannot convert '${self.type}' via ${k}`);
                    }
                    return self.value;
                });
            }
            constructor(registry, value, index) {
                super(registry, Types, value, index, { definition, setDefinition });
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return 1 + this.__internal__raw.encodedLength;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description The index of the enum value
     */
    get index() {
        return this.__internal__indexes[this.__internal__entryIndex];
    }
    /**
     * @description The value of the enum
     */
    get inner() {
        return this.__internal__raw;
    }
    /**
     * @description true if this is a basic enum (no values)
     */
    get isBasic() {
        return this.__internal__isBasic;
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return this.__internal__raw.isEmpty;
    }
    /**
     * @description Checks if the Enum points to a [[Null]] type
     */
    get isNone() {
        return this.__internal__raw instanceof _Null_js__WEBPACK_IMPORTED_MODULE_1__/* .Null */ .p;
    }
    /**
     * @description The available keys for this enum
     */
    get defIndexes() {
        return this.__internal__indexes;
    }
    /**
     * @description The available keys for this enum
     */
    get defKeys() {
        return Object.keys(this.__internal__def);
    }
    /**
     * @description The name of the type this enum value represents
     */
    get type() {
        return this.defKeys[this.__internal__entryIndex];
    }
    /**
     * @description The value of the enum
     */
    get value() {
        return this.__internal__raw;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        // cater for the case where we only pass the enum index
        if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isU8a */ .U)(other)) {
            return !this.toU8a().some((entry, index) => entry !== other[index]);
        }
        else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .h)(other)) {
            return this.toNumber() === other;
        }
        else if (this.__internal__isBasic && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .isString */ .H)(other)) {
            return this.type === other;
        }
        else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .isHex */ .vq)(other)) {
            return this.toHex() === other;
        }
        else if (other instanceof Enum) {
            return this.index === other.index && this.value.eq(other.value);
        }
        else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .isObject */ .K)(other)) {
            return this.value.eq(other[this.type]);
        }
        // compare the actual wrapper value
        return this.value.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        if (this.__internal__isBasic) {
            return { outer: [new Uint8Array([this.index])] };
        }
        const { inner, outer = [] } = this.__internal__raw.inspect();
        return {
            inner,
            outer: [new Uint8Array([this.index]), ...outer]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__/* .u8aToHex */ .c)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return this.__internal__isBasic || this.isNone
            ? this.type
            : { [this.type]: this.__internal__raw.toHuman(isExtended) };
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.__internal__isBasic
            ? this.type
            : { [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_9__/* .stringCamelCase */ .yZ)(this.type)]: this.__internal__raw.toJSON() };
    }
    /**
     * @description Returns the number representation for the value
     */
    toNumber() {
        return this.index;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.__internal__isBasic
            ? this.type
            : { [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_9__/* .stringCamelCase */ .yZ)(this.type)]: this.__internal__raw.toPrimitive() };
    }
    /**
     * @description Returns a raw struct representation of the enum types
     */
    _toRawStruct() {
        if (this.__internal__isBasic) {
            return this.__internal__isIndexed
                ? this.defKeys.reduce((out, key, index) => {
                    out[key] = this.__internal__indexes[index];
                    return out;
                }, {})
                : this.defKeys;
        }
        const entries = Object.entries(this.__internal__def);
        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_12__/* .typesToMap */ .n)(this.registry, entries.reduce((out, [key, { Type }], i) => {
            out[0][i] = Type;
            out[1][i] = key;
            return out;
        }, [new Array(entries.length), new Array(entries.length)]));
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__/* .stringify */ .P)({ _enum: this._toRawStruct() });
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.isNone
            ? this.type
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__/* .stringify */ .P)(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return isBare
            ? this.__internal__raw.toU8a(isBare)
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_14__/* .u8aConcatStrict */ .d)([
                new Uint8Array([this.index]),
                this.__internal__raw.toU8a(isBare)
            ]);
    }
}


/***/ }),

/***/ 43858:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   J: () => (/* binding */ Int)
/* harmony export */ });
/* harmony import */ var _abstract_Int_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80202);

/**
 * @name Int
 * @description
 * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,
 * this handles the encoding and decoding of those numbers. Upon construction
 * the bitLength is provided and any additional use keeps the number to this
 * length. This extends `BN`, so all methods available on a normal `BN` object
 * is available here.
 * @noInheritDoc
 */
class Int extends _abstract_Int_js__WEBPACK_IMPORTED_MODULE_0__/* .AbstractInt */ .y {
    constructor(registry, value = 0, bitLength) {
        super(registry, value, bitLength, true);
    }
    static with(bitLength, typeName) {
        return class extends Int {
            constructor(registry, value) {
                super(registry, value, bitLength);
            }
            toRawType() {
                return typeName || super.toRawType();
            }
        };
    }
}


/***/ }),

/***/ 73260:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   p: () => (/* binding */ Null)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59833);

/**
 * @name Null
 * @description
 * Implements a type that does not contain anything (apart from `null`)
 */
class Null {
    encodedLength = 0;
    isEmpty = true;
    registry;
    createdAtHash;
    initialU8aLength = 0;
    isStorageFallback;
    constructor(registry) {
        this.registry = registry;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        throw new Error('.hash is not implemented on Null');
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return other instanceof Null || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isNull */ .F)(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {};
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return '0x';
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return null;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return null;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Null';
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return '';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
        return new Uint8Array();
    }
}


/***/ }),

/***/ 74830:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   W: () => (/* binding */ Option)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59833);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(34644);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12275);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14769);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(26048);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(96424);
/* harmony import */ var _Null_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73260);



class None extends _Null_js__WEBPACK_IMPORTED_MODULE_0__/* .Null */ .p {
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'None';
    }
}
/** @internal */
function decodeOption(registry, Type, value) {
    if (value instanceof Type) {
        // don't re-create, use as it (which also caters for derived types)
        return value;
    }
    else if (value instanceof Option) {
        if (value.value instanceof Type) {
            // same instance, return it
            return value.value;
        }
        else if (value.isNone) {
            // internal is None, we are also none
            return new None(registry);
        }
        // convert the actual value into known
        return new Type(registry, value.value);
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isNull */ .F)(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isUndefined */ .o)(value) || value === '0x' || value instanceof None) {
        // anything empty we pass as-is
        return new None(registry);
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isU8a */ .U)(value)) {
        // the isU8a check happens last in the if-tree - since the wrapped value
        // may be an instance of it, so Type and Option checks go in first
        return !value.length || value[0] === 0
            ? new None(registry)
            : new Type(registry, value.subarray(1));
    }
    return new Type(registry, value);
}
/**
 * @name Option
 * @description
 * An Option is an optional field. Basically the first byte indicates that there is
 * is value to follow. If the byte is `1` there is an actual value. So the Option
 * implements that - decodes, checks for optionality and wraps the required structure
 * with a value if/as required/found.
 */
class Option {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__Type;
    __internal__raw;
    constructor(registry, typeName, value, { definition, setDefinition = _polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .identity */ .y } = {}) {
        const Type = definition || setDefinition((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__/* .typeToConstructor */ .rA)(registry, typeName));
        const decoded = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isU8a */ .U)(value) && value.length && !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .isCodec */ .c)(value)
            ? value[0] === 0
                ? new None(registry)
                : new Type(registry, value.subarray(1))
            : decodeOption(registry, Type, value);
        this.registry = registry;
        this.__internal__Type = Type;
        this.__internal__raw = decoded;
        if (decoded?.initialU8aLength) {
            this.initialU8aLength = 1 + decoded.initialU8aLength;
        }
    }
    static with(Type) {
        let definition;
        const setDefinition = (d) => {
            definition = d;
            return d;
        };
        return class extends Option {
            constructor(registry, value) {
                super(registry, Type, value, { definition, setDefinition });
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        // boolean byte (has value, doesn't have) along with wrapped length
        return 1 + this.__internal__raw.encodedLength;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the Option has no value
     */
    get isEmpty() {
        return this.isNone;
    }
    /**
     * @description Checks if the Option has no value
     */
    get isNone() {
        return this.__internal__raw instanceof None;
    }
    /**
     * @description Checks if the Option has a value
     */
    get isSome() {
        return !this.isNone;
    }
    /**
     * @description The actual value for the Option
     */
    get value() {
        return this.__internal__raw;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        if (other instanceof Option) {
            return (this.isSome === other.isSome) && this.value.eq(other.value);
        }
        return this.value.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        if (this.isNone) {
            return { outer: [new Uint8Array([0])] };
        }
        const { inner, outer = [] } = this.__internal__raw.inspect();
        return {
            inner,
            outer: [new Uint8Array([1]), ...outer]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        // This attempts to align with the JSON encoding - actually in this case
        // the isSome value is correct, however the `isNone` may be problematic
        return this.isNone
            ? '0x'
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .u8aToHex */ .c)(this.toU8a().subarray(1));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return this.__internal__raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.isNone
            ? null
            : this.__internal__raw.toJSON();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.isNone
            ? null
            : this.__internal__raw.toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(isBare) {
        const wrapped = this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType();
        return isBare
            ? wrapped
            : `Option<${wrapped}>`;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.__internal__raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        if (isBare) {
            return this.__internal__raw.toU8a(true);
        }
        const u8a = new Uint8Array(this.encodedLength);
        if (this.isSome) {
            u8a.set([1]);
            u8a.set(this.__internal__raw.toU8a(), 1);
        }
        return u8a;
    }
    /**
     * @description Returns the value that the Option represents (if available), throws if null
     */
    unwrap() {
        if (this.isNone) {
            throw new Error('Option: unwrapping a None value');
        }
        return this.__internal__raw;
    }
    /**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */
    unwrapOr(defaultValue) {
        return this.isSome
            ? this.unwrap()
            : defaultValue;
    }
    /**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */
    unwrapOrDefault() {
        return this.isSome
            ? this.unwrap()
            : new this.__internal__Type(this.registry);
    }
}


/***/ }),

/***/ 78020:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ Result)
/* harmony export */ });
/* harmony import */ var _Enum_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96317);

/**
 * @name Result
 * @description
 * A Result maps to the Rust Result type, that can either wrap a success or error value
 */
class Result extends _Enum_js__WEBPACK_IMPORTED_MODULE_0__/* .Enum */ .x {
    constructor(registry, Ok, Err, value) {
        // NOTE This is order-dependent, Ok (with index 0) needs to be first
        // eslint-disable-next-line sort-keys
        super(registry, { Ok, Err }, value);
    }
    static with(Types) {
        return class extends Result {
            constructor(registry, value) {
                super(registry, Types.Ok, Types.Err, value);
            }
        };
    }
    /**
     * @description Returns the wrapper Err value (if isErr)
     */
    get asErr() {
        if (!this.isErr) {
            throw new Error('Cannot extract Err value from Ok result, check isErr first');
        }
        return this.value;
    }
    /**
     * @description Returns the wrapper Ok value (if isOk)
     */
    get asOk() {
        if (!this.isOk) {
            throw new Error('Cannot extract Ok value from Err result, check isOk first');
        }
        return this.value;
    }
    /**
     * @description Checks if the Result has no value
     */
    get isEmpty() {
        return this.isOk && this.value.isEmpty;
    }
    /**
     * @description Checks if the Result wraps an Err value
     */
    get isErr() {
        return !this.isOk;
    }
    /**
     * @description Checks if the Result wraps an Ok value
     */
    get isOk() {
        return this.index === 0;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        const Types = this._toRawStruct();
        return `Result<${Types.Ok},${Types.Err}>`;
    }
}


/***/ }),

/***/ 22442:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   p: () => (/* binding */ Tuple)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(53393);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12275);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(73092);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(93173);
/* harmony import */ var _abstract_Array_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(19895);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6128);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(96424);



/** @internal */
function decodeTuple(registry, result, value, Classes) {
    if (Array.isArray(value)) {
        const Types = Classes[0];
        for (let i = 0, count = Types.length; i < count; i++) {
            try {
                const entry = value?.[i];
                result[i] = entry instanceof Types[i]
                    ? entry
                    : new Types[i](registry, entry);
            }
            catch (error) {
                throw new Error(`Tuple: failed on ${i}:: ${error.message}`);
            }
        }
        return [result, 0];
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isHex */ .vq)(value)) {
        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__/* .decodeU8a */ .Y5)(registry, result, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aToU8a */ .Y)(value), Classes);
    }
    else if (!value || !result.length) {
        const Types = Classes[0];
        for (let i = 0, count = Types.length; i < count; i++) {
            result[i] = new Types[i](registry);
        }
        return [result, 0];
    }
    throw new Error(`Expected array input to Tuple decoding, found ${typeof value}: ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .stringify */ .P)(value)}`);
}
/**
 * @name Tuple
 * @description
 * A Tuple defines an anonymous fixed-length array, where each element has its
 * own type. It extends the base JS `Array` object.
 */
class Tuple extends _abstract_Array_js__WEBPACK_IMPORTED_MODULE_4__/* .AbstractArray */ .r {
    __internal__Types;
    constructor(registry, Types, value, { definition, setDefinition = _polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .identity */ .y } = {}) {
        const Classes = definition || setDefinition(Array.isArray(Types)
            ? [(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__/* .typesToConstructors */ .RY)(registry, Types), []]
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .isFunction */ .m)(Types) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .isString */ .H)(Types)
                ? [[(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__/* .typeToConstructor */ .rA)(registry, Types)], []]
                : (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__/* .mapToTypeMap */ .y7)(registry, Types));
        super(registry, Classes[0].length);
        this.initialU8aLength = ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_9__/* .isU8a */ .U)(value)
            ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__/* .decodeU8a */ .Y5)(registry, this, value, Classes)
            : decodeTuple(registry, this, value, Classes))[1];
        this.__internal__Types = Classes;
    }
    static with(Types) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d) => definition = d;
        return class extends Tuple {
            constructor(registry, value) {
                super(registry, Types, value, { definition, setDefinition });
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        let total = 0;
        for (let i = 0, count = this.length; i < count; i++) {
            total += this[i].encodedLength;
        }
        return total;
    }
    /**
     * @description The types definition of the tuple
     */
    get Types() {
        return this.__internal__Types[1].length
            ? this.__internal__Types[1]
            : this.__internal__Types[0].map((T) => new T(this.registry).toRawType());
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            inner: this.inspectInner()
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        const types = this.__internal__Types[0].map((T) => this.registry.getClassName(T) || new T(this.registry).toRawType());
        return `(${types.join(',')})`;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        // Overwrite the default toString representation of Array.
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .stringify */ .P)(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_10__/* .u8aConcatStrict */ .d)(this.toU8aInner(isBare));
    }
}


/***/ }),

/***/ 89673:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   v: () => (/* binding */ UInt)
/* harmony export */ });
/* harmony import */ var _abstract_Int_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80202);

/**
 * @name UInt
 * @description
 * A generic unsigned integer codec. For Substrate all numbers are Little Endian encoded,
 * this handles the encoding and decoding of those numbers. Upon construction
 * the bitLength is provided and any additional use keeps the number to this
 * length. This extends `BN`, so all methods available on a normal `BN` object
 * is available here.
 * @noInheritDoc
 */
class UInt extends _abstract_Int_js__WEBPACK_IMPORTED_MODULE_0__/* .AbstractInt */ .y {
    static with(bitLength, typeName) {
        return class extends UInt {
            constructor(registry, value) {
                super(registry, value, bitLength);
            }
            toRawType() {
                return typeName || super.toRawType();
            }
        };
    }
}


/***/ }),

/***/ 80669:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: () => (/* binding */ Vec),
/* harmony export */   h: () => (/* binding */ decodeVec)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63985);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(44961);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(53393);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(12275);
/* harmony import */ var _abstract_Array_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(19895);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(6128);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(96424);



const MAX_LENGTH = 64 * 1024;
const l = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .k)('Vec');
function decodeVecLength(value) {
    if (Array.isArray(value)) {
        return [value, value.length, 0];
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isU8a */ .U)(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isHex */ .vq)(value)) {
        const u8a = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .u8aToU8a */ .Y)(value);
        const [startAt, length] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .compactFromU8aLim */ .j)(u8a);
        if (length > MAX_LENGTH) {
            throw new Error(`Vec length ${length.toString()} exceeds ${MAX_LENGTH}`);
        }
        return [u8a, length, startAt];
    }
    else if (!value) {
        return [null, 0, 0];
    }
    throw new Error(`Expected array/hex input to Vec<*> decoding, found ${typeof value}: ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .stringify */ .P)(value)}`);
}
function decodeVec(registry, result, value, startAt, Type) {
    if (Array.isArray(value)) {
        const count = result.length;
        for (let i = 0; i < count; i++) {
            // 26/08/2022 this is actually a false positive - after recent eslint upgdates
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const entry = value[i];
            try {
                result[i] = entry instanceof Type
                    ? entry
                    : new Type(registry, entry);
            }
            catch (error) {
                l.error(`Unable to decode on index ${i}`, error.message);
                throw error;
            }
        }
        return [0, 0];
    }
    else if (!value) {
        return [0, 0];
    }
    // we don't need more checks, we already limited it via the length decoding
    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__/* .decodeU8aVec */ .hl)(registry, result, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .u8aToU8a */ .Y)(value), startAt, Type);
}
/**
 * @name Vec
 * @description
 * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
 * construction with the passed `Type` in the constructor. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 */
class Vec extends _abstract_Array_js__WEBPACK_IMPORTED_MODULE_7__/* .AbstractArray */ .r {
    __internal__Type;
    constructor(registry, Type, value = [], { definition, setDefinition = _polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .identity */ .y } = {}) {
        const [decodeFrom, length, startAt] = decodeVecLength(value);
        super(registry, length);
        this.__internal__Type = definition || setDefinition((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__/* .typeToConstructor */ .rA)(registry, Type));
        this.initialU8aLength = ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isU8a */ .U)(decodeFrom)
            ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__/* .decodeU8aVec */ .hl)(registry, this, decodeFrom, startAt, this.__internal__Type)
            : decodeVec(registry, this, decodeFrom, startAt, this.__internal__Type))[0];
    }
    static with(Type) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d) => (definition = d);
        return class extends Vec {
            constructor(registry, value) {
                super(registry, Type, value, { definition, setDefinition });
            }
        };
    }
    /**
     * @description The type for the items
     */
    get Type() {
        return this.__internal__Type.name;
    }
    /**
     * @description Finds the index of the value in the array
     */
    indexOf(other) {
        // convert type first, this removes overhead from the eq
        const check = other instanceof this.__internal__Type
            ? other
            : new this.__internal__Type(this.registry, other);
        for (let i = 0, count = this.length; i < count; i++) {
            if (check.eq(this[i])) {
                return i;
            }
        }
        return -1;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `Vec<${this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType()}>`;
    }
}


/***/ }),

/***/ 69215:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $: () => (/* binding */ VecFixed)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12275);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(93173);
/* harmony import */ var _abstract_Array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(19895);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96424);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6128);
/* harmony import */ var _Vec_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(80669);




/**
 * @name VecFixed
 * @description
 * This manages codec arrays of a fixed length
 */
class VecFixed extends _abstract_Array_js__WEBPACK_IMPORTED_MODULE_0__/* .AbstractArray */ .r {
    __internal__Type;
    constructor(registry, Type, length, value = [], { definition, setDefinition = _polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .identity */ .y } = {}) {
        super(registry, length);
        this.__internal__Type = definition || setDefinition((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__/* .typeToConstructor */ .rA)(registry, Type));
        this.initialU8aLength = ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isU8a */ .U)(value)
            ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__/* .decodeU8aVec */ .hl)(registry, this, value, 0, this.__internal__Type)
            : (0,_Vec_js__WEBPACK_IMPORTED_MODULE_5__/* .decodeVec */ .h)(registry, this, value, 0, this.__internal__Type))[1];
    }
    static with(Type, length) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d) => (definition = d);
        return class extends VecFixed {
            constructor(registry, value) {
                super(registry, Type, length, value, { definition, setDefinition });
            }
        };
    }
    /**
     * @description The type for the items
     */
    get Type() {
        return new this.__internal__Type(this.registry).toRawType();
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        let total = 0;
        for (let i = 0, count = this.length; i < count; i++) {
            total += this[i].encodedLength;
        }
        return total;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            inner: this.inspectInner()
        };
    }
    toU8a() {
        // we override, we don't add the length prefix for ourselves, and at the same time we
        // ignore isBare on entries, since they should be properly encoded at all times
        const encoded = this.toU8aInner();
        return encoded.length
            ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .u8aConcatStrict */ .d)(encoded)
            : new Uint8Array([]);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `[${this.Type};${this.length}]`;
    }
}


/***/ }),

/***/ 30386:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ BTreeMap)
/* harmony export */ });
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84027);

class BTreeMap extends _Map_js__WEBPACK_IMPORTED_MODULE_0__/* .CodecMap */ .U {
    static with(keyType, valType) {
        return class extends BTreeMap {
            constructor(registry, value) {
                super(registry, keyType, valType, value, 'BTreeMap');
            }
        };
    }
}


/***/ }),

/***/ 44179:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ BTreeSet)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63985);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44961);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(51892);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(53393);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(93173);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6128);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96424);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(55830);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(36453);


const l = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .k)('BTreeSet');
/** @internal */
function decodeSetFromU8a(registry, ValClass, u8a) {
    const output = new Set();
    const [offset, count] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .compactFromU8aLim */ .j)(u8a);
    const result = new Array(count);
    const [decodedLength] = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__/* .decodeU8aVec */ .hl)(registry, result, u8a, offset, ValClass);
    for (let i = 0; i < count; i++) {
        output.add(result[i]);
    }
    return [ValClass, output, decodedLength];
}
/** @internal */
function decodeSetFromSet(registry, ValClass, value) {
    const output = new Set();
    value.forEach((val) => {
        try {
            output.add((val instanceof ValClass) ? val : new ValClass(registry, val));
        }
        catch (error) {
            l.error('Failed to decode key or value:', error.message);
            throw error;
        }
    });
    return [ValClass, output, 0];
}
/**
 * Decode input to pass into constructor.
 *
 * @param ValClass - Type of the map value
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - Set<any>, where both key and value types are either
 *   constructors or decodeable values for their types.
 * @param jsonSet
 * @internal
 */
function decodeSet(registry, valType, value) {
    const ValClass = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__/* .typeToConstructor */ .rA)(registry, valType);
    if (!value) {
        return [ValClass, new Set(), 0];
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .isU8a */ .U)(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isHex */ .vq)(value)) {
        return decodeSetFromU8a(registry, ValClass, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .u8aToU8a */ .Y)(value));
    }
    else if (Array.isArray(value) || value instanceof Set) {
        return decodeSetFromSet(registry, ValClass, value);
    }
    throw new Error('BTreeSet: cannot decode type');
}
class BTreeSet extends Set {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__ValClass;
    constructor(registry, valType, rawValue) {
        const [ValClass, values, decodedLength] = decodeSet(registry, valType, rawValue);
        super((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__/* .sortSet */ .If)(values));
        this.registry = registry;
        this.initialU8aLength = decodedLength;
        this.__internal__ValClass = ValClass;
    }
    static with(valType) {
        return class extends BTreeSet {
            constructor(registry, value) {
                super(registry, valType, value);
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        let len = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .compactToU8a */ .Y)(this.size).length;
        for (const v of this.values()) {
            len += v.encodedLength;
        }
        return len;
    }
    /**
     * @description Returns a hash of the value
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return this.size === 0;
    }
    /**
     * @description The actual set values as a string[]
     */
    get strings() {
        return [...super.values()].map((v) => v.toString());
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__/* .compareSet */ .O)(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        const inner = [];
        for (const v of this.values()) {
            inner.push(v.inspect());
        }
        return {
            inner,
            outer: [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .compactToU8a */ .Y)(this.size)]
        };
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_10__/* .u8aToHex */ .c)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        const json = [];
        for (const v of this.values()) {
            json.push(v.toHuman(isExtended));
        }
        return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        const json = [];
        for (const v of this.values()) {
            json.push(v.toJSON());
        }
        return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `BTreeSet<${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        const json = [];
        for (const v of this.values()) {
            json.push(v.toPrimitive());
        }
        return json;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__/* .stringify */ .P)(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const encoded = [];
        if (!isBare) {
            encoded.push((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .compactToU8a */ .Y)(this.size));
        }
        for (const v of this.values()) {
            encoded.push(v.toU8a(isBare));
        }
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_12__/* .u8aConcatStrict */ .d)(encoded);
    }
}


/***/ }),

/***/ 10657:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ BitVec)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44961);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(51892);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(93173);
/* harmony import */ var _native_Raw_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9088);


/** @internal */
function decodeBitVecU8a(value) {
    if (!value?.length) {
        return [0, new Uint8Array()];
    }
    // handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded
    const [offset, length] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .compactFromU8aLim */ .j)(value);
    const total = offset + Math.ceil(length / 8);
    if (total > value.length) {
        throw new Error(`BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    return [length, value.subarray(offset, total)];
}
/** @internal */
function decodeBitVec(value) {
    if (Array.isArray(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .H)(value)) {
        const u8a = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aToU8a */ .Y)(value);
        return [u8a.length / 8, u8a];
    }
    return decodeBitVecU8a(value);
}
/**
 * @name BitVec
 * @description
 * A BitVec that represents an array of bits. The bits are however stored encoded. The difference between this
 * and a normal Bytes would be that the length prefix indicates the number of bits encoded, not the bytes
 */
class BitVec extends _native_Raw_js__WEBPACK_IMPORTED_MODULE_3__/* .Raw */ .N {
    __internal__decodedLength;
    __internal__isMsb;
    // In lieu of having the Msb/Lsb identifiers passed through, we default to assuming
    // we are dealing with Lsb, which is the default (as of writing) BitVec format used
    // in the Polkadot code (this only affects the toHuman displays)
    constructor(registry, value, isMsb = false) {
        const [decodedLength, u8a] = decodeBitVec(value);
        super(registry, u8a);
        this.__internal__decodedLength = decodedLength;
        this.__internal__isMsb = isMsb;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.length + (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .compactToU8a */ .Y)(this.__internal__decodedLength).length;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .compactToU8a */ .Y)(this.__internal__decodedLength), super.toU8a()]
        };
    }
    /**
     * @description Creates a boolean array of the bit values
     */
    toBoolArray() {
        const map = [...this.toU8a(true)].map((v) => [
            !!(v & 128),
            !!(v & 64),
            !!(v & 32),
            !!(v & 16),
            !!(v & 8),
            !!(v & 4),
            !!(v & 2),
            !!(v & 1)
        ]);
        const count = map.length;
        const result = new Array(8 * count);
        for (let i = 0; i < count; i++) {
            const off = i * 8;
            const v = map[i];
            for (let j = 0; j < 8; j++) {
                result[off + j] = this.__internal__isMsb
                    ? v[j]
                    : v[7 - j];
            }
        }
        return result;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return `0b${[...this.toU8a(true)]
            .map((d) => `00000000${d.toString(2)}`.slice(-8))
            .map((s) => this.__internal__isMsb ? s : s.split('').reverse().join(''))
            .join('_')}`;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'BitVec';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const bitVec = super.toU8a(isBare);
        return isBare
            ? bitVec
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .u8aConcatStrict */ .d)([(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .compactToU8a */ .Y)(this.__internal__decodedLength), bitVec]);
    }
}


/***/ }),

/***/ 77229:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   J: () => (/* binding */ Bytes)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44961);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(51892);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(44214);
/* harmony import */ var _native_Raw_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9088);


const MAX_LENGTH = 10 * 1024 * 1024;
/** @internal */
function decodeBytesU8a(value) {
    if (!value.length) {
        return [new Uint8Array(), 0];
    }
    // handle all other Uint8Array inputs, these do have a length prefix
    const [offset, length] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .compactFromU8aLim */ .j)(value);
    const total = offset + length;
    if (length > MAX_LENGTH) {
        throw new Error(`Bytes length ${length.toString()} exceeds ${MAX_LENGTH}`);
    }
    else if (total > value.length) {
        throw new Error(`Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    return [value.subarray(offset, total), total];
}
/**
 * @name Bytes
 * @description
 * A Bytes wrapper for Vec<u8>. The significant difference between this and a normal Uint8Array
 * is that this version allows for length-encoding. (i.e. it is a variable-item codec, the same
 * as what is found in [[Text]] and [[Vec]])
 */
class Bytes extends _native_Raw_js__WEBPACK_IMPORTED_MODULE_1__/* .Raw */ .N {
    constructor(registry, value) {
        const [u8a, decodedLength] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isU8a */ .U)(value) && !(value instanceof _native_Raw_js__WEBPACK_IMPORTED_MODULE_1__/* .Raw */ .N)
            ? decodeBytesU8a(value)
            : Array.isArray(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isString */ .H)(value)
                ? [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .u8aToU8a */ .Y)(value), 0]
                : [value, 0];
        super(registry, u8a, decodedLength);
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.length + (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .compactToU8a */ .Y)(this.length).length;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect(isBare) {
        const clength = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .compactToU8a */ .Y)(this.length);
        return {
            outer: isBare
                ? [super.toU8a()]
                : this.length
                    ? [clength, super.toU8a()]
                    : [clength]
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Bytes';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return isBare
            ? super.toU8a(isBare)
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .compactAddLength */ .N)(this);
    }
}


/***/ }),

/***/ 62080:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ HashMap)
/* harmony export */ });
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84027);

class HashMap extends _Map_js__WEBPACK_IMPORTED_MODULE_0__/* .CodecMap */ .U {
    static with(keyType, valType) {
        return class extends HashMap {
            constructor(registry, value) {
                super(registry, keyType, valType, value);
            }
        };
    }
}


/***/ }),

/***/ 84027:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ CodecMap)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63985);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44961);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9716);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(51892);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(53393);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(93173);
/* harmony import */ var _abstract_Array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19895);
/* harmony import */ var _base_Enum_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(96317);
/* harmony import */ var _native_Raw_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(9088);
/* harmony import */ var _native_Struct_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(43330);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6128);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(96424);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(55830);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(48690);






const l = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .k)('Map');
/** @internal */
function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
    const output = new Map();
    const [offset, count] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .compactFromU8aLim */ .j)(u8a);
    const types = [];
    for (let i = 0; i < count; i++) {
        types.push(KeyClass, ValClass);
    }
    const [values, decodedLength] = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__/* .decodeU8a */ .Y5)(registry, new Array(types.length), u8a.subarray(offset), [types, []]);
    for (let i = 0, count = values.length; i < count; i += 2) {
        output.set(values[i], values[i + 1]);
    }
    return [KeyClass, ValClass, output, offset + decodedLength];
}
/** @internal */
function decodeMapFromMap(registry, KeyClass, ValClass, value) {
    const output = new Map();
    for (const [key, val] of value.entries()) {
        const isComplex = KeyClass.prototype instanceof _abstract_Array_js__WEBPACK_IMPORTED_MODULE_3__/* .AbstractArray */ .r ||
            KeyClass.prototype instanceof _native_Struct_js__WEBPACK_IMPORTED_MODULE_4__/* .Struct */ .A ||
            KeyClass.prototype instanceof _base_Enum_js__WEBPACK_IMPORTED_MODULE_5__/* .Enum */ .x;
        try {
            output.set(key instanceof KeyClass
                ? key
                : new KeyClass(registry, isComplex && typeof key === 'string' ? JSON.parse(key) : key), val instanceof ValClass
                ? val
                : new ValClass(registry, val));
        }
        catch (error) {
            l.error('Failed to decode key or value:', error.message);
            throw error;
        }
    }
    return [KeyClass, ValClass, output, 0];
}
/**
 * Decode input to pass into constructor.
 *
 * @param KeyClass - Type of the map key
 * @param ValClass - Type of the map value
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - Map<any, any>, where both key and value types are either
 *   constructors or decodeable values for their types.
 * @param jsonMap
 * @internal
 */
function decodeMap(registry, keyType, valType, value) {
    const KeyClass = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__/* .typeToConstructor */ .rA)(registry, keyType);
    const ValClass = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__/* .typeToConstructor */ .rA)(registry, valType);
    if (!value) {
        return [KeyClass, ValClass, new Map(), 0];
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .isU8a */ .U)(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .isHex */ .vq)(value)) {
        return decodeMapFromU8a(registry, KeyClass, ValClass, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_9__/* .u8aToU8a */ .Y)(value));
    }
    else if (value instanceof Map) {
        return decodeMapFromMap(registry, KeyClass, ValClass, value);
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_10__/* .isObject */ .K)(value)) {
        return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
    }
    throw new Error('Map: cannot decode type');
}
class CodecMap extends Map {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__KeyClass;
    __internal__ValClass;
    __internal__type;
    constructor(registry, keyType, valType, rawValue, type = 'HashMap') {
        const [KeyClass, ValClass, decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
        super(type === 'BTreeMap' ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_11__/* .sortMap */ .Hr)(decoded) : decoded);
        this.registry = registry;
        this.initialU8aLength = decodedLength;
        this.__internal__KeyClass = KeyClass;
        this.__internal__ValClass = ValClass;
        this.__internal__type = type;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        let len = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_12__/* .compactToU8a */ .Y)(this.size).length;
        for (const [k, v] of this.entries()) {
            len += k.encodedLength + v.encodedLength;
        }
        return len;
    }
    /**
     * @description Returns a hash of the value
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return this.size === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_13__/* .compareMap */ .t)(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        const inner = [];
        for (const [k, v] of this.entries()) {
            inner.push(k.inspect());
            inner.push(v.inspect());
        }
        return {
            inner,
            outer: [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_12__/* .compactToU8a */ .Y)(this.size)]
        };
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_14__/* .u8aToHex */ .c)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        const json = {};
        for (const [k, v] of this.entries()) {
            json[k instanceof _native_Raw_js__WEBPACK_IMPORTED_MODULE_15__/* .Raw */ .N && k.isAscii
                ? k.toUtf8()
                : k.toString()] = v.toHuman(isExtended);
        }
        return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        const json = {};
        for (const [k, v] of this.entries()) {
            json[k.toString()] = v.toJSON();
        }
        return json;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        const json = {};
        for (const [k, v] of this.entries()) {
            json[k instanceof _native_Raw_js__WEBPACK_IMPORTED_MODULE_15__/* .Raw */ .N && k.isAscii
                ? k.toUtf8()
                : k.toString()] = v.toPrimitive();
        }
        return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `${this.__internal__type}<${this.registry.getClassName(this.__internal__KeyClass) || new this.__internal__KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_16__/* .stringify */ .P)(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const encoded = [];
        if (!isBare) {
            encoded.push((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_12__/* .compactToU8a */ .Y)(this.size));
        }
        for (const [k, v] of this.entries()) {
            encoded.push(k.toU8a(isBare), v.toU8a(isBare));
        }
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_17__/* .u8aConcatStrict */ .d)(encoded);
    }
}


/***/ }),

/***/ 20569:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ OptionBool)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(42740);
/* harmony import */ var _base_Option_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(74830);
/* harmony import */ var _native_Bool_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48903);



function decodeU8a(registry, value) {
    // Encoded as -
    //  - 0 = None
    //  - 1 = True
    //  - 2 = False
    return value[0] === 0
        ? null
        : new _native_Bool_js__WEBPACK_IMPORTED_MODULE_0__/* .bool */ .X(registry, value[0] === 1);
}
/**
 * @name OptionBool
 * @description A specific implementation of Option<bool> than allows for single-byte encoding
 */
class OptionBool extends _base_Option_js__WEBPACK_IMPORTED_MODULE_1__/* .Option */ .W {
    constructor(registry, value) {
        super(registry, _native_Bool_js__WEBPACK_IMPORTED_MODULE_0__/* .bool */ .X, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isU8a */ .U)(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isHex */ .vq)(value)
            ? decodeU8a(registry, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .u8aToU8a */ .Y)(value))
            : value);
        this.initialU8aLength = 1;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return 1 | 0;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */
    get isFalse() {
        return this.isSome
            ? !this.value.valueOf()
            : false;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */
    get isTrue() {
        return this.isSome
            ? this.value.valueOf()
            : false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return { outer: [this.toU8a()] };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(isBare) {
        return isBare
            ? 'bool'
            : 'Option<bool>';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        if (isBare) {
            return super.toU8a(true);
        }
        return this.isSome
            ? new Uint8Array([this.isTrue ? 1 : 2])
            : new Uint8Array([0]);
    }
}


/***/ }),

/***/ 13237:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   e: () => (/* binding */ Range)
/* harmony export */ });
/* harmony import */ var _base_Tuple_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(22442);

/**
 * @name Range
 * @description
 * Rust `Range<T>` representation
 */
class Range extends _base_Tuple_js__WEBPACK_IMPORTED_MODULE_0__/* .Tuple */ .p {
    __internal__rangeName;
    constructor(registry, Type, value, { rangeName = 'Range' } = {}) {
        super(registry, [Type, Type], value);
        this.__internal__rangeName = rangeName;
    }
    static with(Type) {
        return class extends Range {
            constructor(registry, value) {
                super(registry, Type, value);
            }
        };
    }
    /**
     * @description Returns the starting range value
     */
    get start() {
        return this[0];
    }
    /**
     * @description Returns the ending range value
     */
    get end() {
        return this[1];
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `${this.__internal__rangeName}<${this.start.toRawType()}>`;
    }
}


/***/ }),

/***/ 35942:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: () => (/* binding */ RangeInclusive)
/* harmony export */ });
/* harmony import */ var _Range_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13237);

class RangeInclusive extends _Range_js__WEBPACK_IMPORTED_MODULE_0__/* .Range */ .e {
    constructor(registry, Type, value) {
        super(registry, Type, value, { rangeName: 'RangeInclusive' });
    }
    static with(Type) {
        return class extends RangeInclusive {
            constructor(registry, value) {
                super(registry, Type, value);
            }
        };
    }
}


/***/ }),

/***/ 6585:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ Type)
/* harmony export */ });
/* harmony import */ var _native_Text_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26411);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20046);


/**
 * @name Type
 * @description
 * This is a extended version of Text, specifically to handle types. Here we rely fully
 * on what Text provides us, however we also adjust the types received from the runtime,
 * i.e. we remove the `T::` prefixes found in some types for consistency across implementation.
 */
class Type extends _native_Text_js__WEBPACK_IMPORTED_MODULE_0__/* .Text */ .x {
    constructor(registry, value = '') {
        super(registry, value);
        this.setOverride((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__/* .sanitize */ .Nw)(this.toString()));
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Type';
    }
}


/***/ }),

/***/ 58833:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ U8aFixed)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38589);
/* harmony import */ var _native_Raw_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9088);


/** @internal */
function decodeU8aFixed(value, bitLength) {
    const u8a = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .u8aToU8a */ .Y)(value);
    const byteLength = bitLength / 8;
    if (!u8a.length) {
        return [new Uint8Array(byteLength), 0];
    }
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isU8a */ .U)(value) ? u8a.length < byteLength : u8a.length !== byteLength) {
        throw new Error(`Expected input with ${byteLength} bytes (${bitLength} bits), found ${u8a.length} bytes`);
    }
    return [u8a.subarray(0, byteLength), byteLength];
}
/**
 * @name U8aFixed
 * @description
 * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant
 * to be used directly, rather is should be subclassed with the specific lengths.
 */
class U8aFixed extends _native_Raw_js__WEBPACK_IMPORTED_MODULE_2__/* .Raw */ .N {
    constructor(registry, value = new Uint8Array(), bitLength = 256) {
        const [u8a, decodedLength] = decodeU8aFixed(value, bitLength);
        super(registry, u8a, decodedLength);
    }
    static with(bitLength, typeName) {
        return class extends U8aFixed {
            constructor(registry, value) {
                super(registry, value, bitLength);
            }
            toRawType() {
                return typeName || super.toRawType();
            }
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `[u8;${this.length}]`;
    }
}


/***/ }),

/***/ 50759:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $: () => (/* binding */ WrapperKeepOpaque)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(45155);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(44214);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(51892);
/* harmony import */ var _native_Raw_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9088);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96424);
/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(77229);




function decodeRaw(registry, typeName, value) {
    const Type = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__/* .typeToConstructor */ .rA)(registry, typeName);
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isU8a */ .U)(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isHex */ .vq)(value)) {
        try {
            const [, u8a] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isHex */ .vq)(value)
                ? [0, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .u8aToU8a */ .Y)(value)]
                : (value instanceof _native_Raw_js__WEBPACK_IMPORTED_MODULE_4__/* .Raw */ .N)
                    ? [0, value.subarray()]
                    : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .compactStripLength */ .o)(value);
            return [Type, new Type(registry, u8a), value];
        }
        catch {
            return [Type, null, value];
        }
    }
    const instance = new Type(registry, value);
    return [Type, instance, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .compactAddLength */ .N)(instance.toU8a())];
}
class WrapperKeepOpaque extends _Bytes_js__WEBPACK_IMPORTED_MODULE_7__/* .Bytes */ .J {
    __internal__Type;
    __internal__decoded;
    __internal__opaqueName;
    constructor(registry, typeName, value, { opaqueName = 'WrapperKeepOpaque' } = {}) {
        const [Type, decoded, u8a] = decodeRaw(registry, typeName, value);
        super(registry, u8a);
        this.__internal__Type = Type;
        this.__internal__decoded = decoded;
        this.__internal__opaqueName = opaqueName;
    }
    static with(Type) {
        return class extends WrapperKeepOpaque {
            constructor(registry, value) {
                super(registry, Type, value);
            }
        };
    }
    /**
     * @description Checks if the wrapper is decodable
     */
    get isDecoded() {
        return !!this.__internal__decoded;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return this.__internal__decoded
            ? {
                inner: [this.__internal__decoded.inspect()],
                outer: [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .compactToU8a */ .Y)(this.length)]
            }
            : {
                outer: [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .compactToU8a */ .Y)(this.length), this.toU8a(true)]
            };
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return this.__internal__decoded
            ? this.__internal__decoded.toHuman(isExtended)
            : super.toHuman();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.__internal__decoded
            ? this.__internal__decoded.toPrimitive()
            : super.toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `${this.__internal__opaqueName}<${this.registry.getClassName(this.__internal__Type) || (this.__internal__decoded ? this.__internal__decoded.toRawType() : new this.__internal__Type(this.registry).toRawType())}>`;
    }
    /**
     * @description Converts the Object to to a string (either decoded or bytes)
     */
    toString() {
        return this.__internal__decoded
            ? this.__internal__decoded.toString()
            : super.toString();
    }
    /**
     * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
     */
    unwrap() {
        if (!this.__internal__decoded) {
            throw new Error(`${this.__internal__opaqueName}: unwrapping an undecodable value`);
        }
        return this.__internal__decoded;
    }
}


/***/ }),

/***/ 49442:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   q: () => (/* binding */ WrapperOpaque)
/* harmony export */ });
/* harmony import */ var _WrapperKeepOpaque_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50759);

class WrapperOpaque extends _WrapperKeepOpaque_js__WEBPACK_IMPORTED_MODULE_0__/* .WrapperKeepOpaque */ .$ {
    constructor(registry, typeName, value) {
        super(registry, typeName, value, { opaqueName: 'WrapperOpaque' });
    }
    static with(Type) {
        return class extends WrapperOpaque {
            constructor(registry, value) {
                super(registry, Type, value);
            }
        };
    }
    /**
     * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
     */
    get inner() {
        return this.unwrap();
    }
}


/***/ }),

/***/ 48903:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   X: () => (/* binding */ bool)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26048);

/**
 * @name bool
 * @description
 * Representation for a boolean value in the system. It extends the base JS `Boolean` class
 * @noInheritDoc
 */
class bool extends Boolean {
    registry;
    createdAtHash;
    initialU8aLength = 1;
    isStorageFallback;
    constructor(registry, value = false) {
        super((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isU8a */ .U)(value)
            ? value[0] === 1
            : value instanceof Boolean
                ? value.valueOf()
                : !!value);
        this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return 1 | 0;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value (true when it wraps false/default)
     */
    get isEmpty() {
        return this.isFalse;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */
    get isFalse() {
        return !this.isTrue;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */
    get isTrue() {
        return this.valueOf();
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return this.valueOf() === (other instanceof Boolean
            ? other.valueOf()
            : other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [this.toU8a()]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .u8aToHex */ .c)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.valueOf();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'bool';
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.toJSON().toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
        return new Uint8Array([this.valueOf() ? 1 : 0]);
    }
}


/***/ }),

/***/ 89682:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ Float)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38994);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6441);

/**
 * @name Float
 * @description
 * A Codec wrapper for F32 & F64 values. You generally don't want to be using
 * f32/f64 in your runtime, operations on fixed points numbers are preferable. This class
 * was explicitly added since scale-codec has a flag that enables this and it is available
 * in some eth_* RPCs
 */
class Float extends Number {
    encodedLength;
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__bitLength;
    constructor(registry, value, { bitLength = 32 } = {}) {
        super((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isU8a */ .U)(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isHex */ .vq)(value)
            ? value.length === 0
                ? 0
                : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aToFloat */ .W)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .u8aToU8a */ .Y)(value), { bitLength })
            : (value || 0));
        this.__internal__bitLength = bitLength;
        this.encodedLength = bitLength / 8;
        this.initialU8aLength = this.encodedLength;
        this.registry = registry;
    }
    static with(bitLength) {
        return class extends Float {
            constructor(registry, value) {
                super(registry, value, { bitLength });
            }
        };
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns true if the type wraps an empty/default all-0 value
     */
    get isEmpty() {
        return this.valueOf() === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return this.valueOf() === Number(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [this.toU8a()]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .u8aToHex */ .c)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toString();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        // Not sure if this is actually a hex or a string value
        // (would need to check against RPCs to see the result here)
        return this.toHex();
    }
    /**
     * @description Returns the number representation (Same as valueOf)
     */
    toNumber() {
        return this.valueOf();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `f${this.__internal__bitLength}`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .floatToU8a */ .m)(this, {
            bitLength: this.__internal__bitLength
        });
    }
}


/***/ }),

/***/ 9797:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ Json)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(57620);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(73092);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(53393);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48690);


/** @internal */
function decodeJson(value) {
    return Object.entries(value || {});
}
/**
 * @name Json
 * @description
 * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it
 * implements a Codec, it is limited in that it can only be used with input objects via RPC,
 * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys
 * @noInheritDoc
 */
class Json extends Map {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    constructor(registry, value) {
        const decoded = decodeJson(value);
        super(decoded);
        this.registry = registry;
        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .objectProperties */ .a)(this, decoded.map(([k]) => k), (k) => this.get(k));
    }
    /**
     * @description Always 0, never encodes as a Uint8Array
     */
    get encodedLength() {
        return 0 | 0;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return [...this.keys()].length === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__/* .compareMap */ .t)(this, other);
    }
    /**
     * @description Returns a typed value from the internal map
     */
    getT(key) {
        return this.get(key);
    }
    /**
     * @description Unimplemented, will throw
     */
    inspect() {
        throw new Error('Unimplemented');
    }
    /**
     * @description Unimplemented, will throw
     */
    toHex() {
        throw new Error('Unimplemented');
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return [...this.entries()].reduce((json, [key, value]) => {
            json[key] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isFunction */ .m)(value.toHuman)
                ? value.toHuman()
                : value;
            return json;
        }, {});
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return [...this.entries()].reduce((json, [key, value]) => {
            json[key] = value;
            return json;
        }, {});
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return [...this.entries()].reduce((json, [key, value]) => {
            json[key] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isFunction */ .m)(value.toPrimitive)
                ? value.toPrimitive()
                : value;
            return json;
        }, {});
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Json';
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .stringify */ .P)(this.toJSON());
    }
    /**
     * @description Unimplemented, will throw
     */
    toU8a(_isBare) {
        throw new Error('Unimplemented');
    }
}


/***/ }),

/***/ 9088:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   N: () => (/* binding */ Raw)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20420);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(34644);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62954);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(91873);

/**
 * @name Raw
 * @description
 * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ
 * from other implementations where it will consume the full Uint8Array as passed to it.
 * As such it is meant to be subclassed where the wrapper takes care of the
 * actual lengths instead of used directly.
 * @noInheritDoc
 */
class Raw extends Uint8Array {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    /**
     * @description This ensures that operators such as clice, filter, map, etc. return
     * new Array instances (without this we need to apply overrides)
     */
    static get [Symbol.species]() {
        return Uint8Array;
    }
    constructor(registry, value, initialU8aLength) {
        super((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .u8aToU8a */ .Y)(value));
        this.registry = registry;
        this.initialU8aLength = initialU8aLength;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns true if the wrapped value contains only ASCII printable characters
     */
    get isAscii() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isAscii */ ._)(this);
    }
    /**
     * @description Returns true if the type wraps an empty/default all-0 value
     */
    get isEmpty() {
        return !this.length || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isUndefined */ .o)(this.find((b) => !!b));
    }
    /**
     * @description Returns true if the wrapped value contains only utf8 characters
     */
    get isUtf8() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isUtf8 */ .O)(this);
    }
    /**
     * @description Returns the number of bits in the value
     */
    bitLength() {
        return this.length * 8;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        if (other instanceof Uint8Array) {
            return (this.length === other.length) &&
                !this.some((b, index) => b !== other[index]);
        }
        return this.eq((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .u8aToU8a */ .Y)(other));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [this.toU8a()]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .u8aToHex */ .c)(this);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toPrimitive();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toHex();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        if (this.isAscii) {
            const text = this.toUtf8();
            // ensure we didn't end up with multibyte codepoints
            if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isAscii */ ._)(text)) {
                return text;
            }
        }
        return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Raw';
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.toHex();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
        return Uint8Array.from(this);
    }
    /**
     * @description Returns the wrapped data as a UTF-8 string
     */
    toUtf8() {
        if (!this.isUtf8) {
            throw new Error('The character sequence is not a valid Utf8 string');
        }
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .u8aToString */ .z)(this);
    }
}


/***/ }),

/***/ 23261:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   p: () => (/* binding */ CodecSet)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39098);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(54556);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(34644);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(91693);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(36600);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(57620);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(52906);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(16996);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(53393);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(82144);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(40665);


function encodeSet(setValues, values) {
    const encoded = new _polkadot_util__WEBPACK_IMPORTED_MODULE_0__(0);
    for (let i = 0, count = values.length; i < count; i++) {
        encoded.ior((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .bnToBn */ .G)(setValues[values[i]] || 0));
    }
    return encoded;
}
/** @internal */
function decodeSetArray(setValues, values) {
    const count = values.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
        const key = values[i];
        if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isUndefined */ .o)(setValues[key])) {
            throw new Error(`Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);
        }
        result[i] = key;
    }
    return result;
}
/** @internal */
function decodeSetNumber(setValues, _value) {
    const bn = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .bnToBn */ .G)(_value);
    const keys = Object.keys(setValues);
    const result = [];
    for (let i = 0, count = keys.length; i < count; i++) {
        const key = keys[i];
        if (bn.and((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .bnToBn */ .G)(setValues[key])).eq((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .bnToBn */ .G)(setValues[key]))) {
            result.push(key);
        }
    }
    const computed = encodeSet(setValues, result);
    if (!bn.eq(computed)) {
        throw new Error(`Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);
    }
    return result;
}
/** @internal */
function decodeSet(setValues, value = 0, bitLength) {
    if (bitLength % 8 !== 0) {
        throw new Error(`Expected valid bitLength, power of 8, found ${bitLength}`);
    }
    const byteLength = bitLength / 8;
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isU8a */ .U)(value)) {
        return value.length === 0
            ? []
            : decodeSetNumber(setValues, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .u8aToBn */ ._)(value.subarray(0, byteLength), { isLe: true }));
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isString */ .H)(value)) {
        return decodeSet(setValues, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .u8aToU8a */ .Y)(value), byteLength);
    }
    else if (value instanceof Set || Array.isArray(value)) {
        const input = Array.isArray(value)
            ? value
            : [...value.values()];
        return decodeSetArray(setValues, input);
    }
    return decodeSetNumber(setValues, value);
}
/**
 * @name Set
 * @description
 * An Set is an array of string values, represented an an encoded type by
 * a bitwise representation of the values.
 */
class CodecSet extends Set {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__allowed;
    __internal__byteLength;
    constructor(registry, setValues, value, bitLength = 8) {
        super(decodeSet(setValues, value, bitLength));
        this.registry = registry;
        this.__internal__allowed = setValues;
        this.__internal__byteLength = bitLength / 8;
    }
    static with(values, bitLength) {
        return class extends CodecSet {
            static {
                const keys = Object.keys(values);
                const count = keys.length;
                const isKeys = new Array(count);
                for (let i = 0; i < count; i++) {
                    isKeys[i] = `is${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .stringPascalCase */ .KT)(keys[i])}`;
                }
                (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .objectProperties */ .a)(this.prototype, isKeys, (_, i, self) => self.strings.includes(keys[i]));
            }
            constructor(registry, value) {
                super(registry, values, value, bitLength);
            }
        };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.__internal__byteLength;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description true is the Set contains no values
     */
    get isEmpty() {
        return this.size === 0;
    }
    /**
     * @description The actual set values as a string[]
     */
    get strings() {
        return [...super.values()];
    }
    /**
     * @description The encoded value for the set members
     */
    get valueEncoded() {
        return encodeSet(this.__internal__allowed, this.strings);
    }
    /**
     * @description adds a value to the Set (extended to allow for validity checking)
     */
    add = (key) => {
        // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates "some" chaos
        // we have the isUndefined(this._setValues) in here as well, add is used internally
        // in the Set constructor (so it is undefined at this point, and should allow)
        if (this.__internal__allowed && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isUndefined */ .o)(this.__internal__allowed[key])) {
            throw new Error(`Set: Invalid key '${key}' on add`);
        }
        super.add(key);
        return this;
    };
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        if (Array.isArray(other)) {
            // we don't actually care about the order, sort the values
            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__/* .compareArray */ .w)(this.strings.sort(), other.sort());
        }
        else if (other instanceof Set) {
            return this.eq([...other.values()]);
        }
        else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_10__/* .isNumber */ .h)(other) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__/* .isBn */ .H)(other)) {
            return this.valueEncoded.eq((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .bnToBn */ .G)(other));
        }
        return false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return {
            outer: [this.toU8a()]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_12__/* .u8aToHex */ .c)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.strings;
    }
    /**
     * @description The encoded value for the set members
     */
    toNumber() {
        return this.valueEncoded.toNumber();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__/* .stringify */ .P)({ _set: this.__internal__allowed });
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return `[${this.strings.join(', ')}]`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_14__/* .bnToU8a */ .a)(this.valueEncoded, {
            bitLength: this.__internal__byteLength * 8,
            isLe: true
        });
    }
}


/***/ }),

/***/ 43330:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ Struct)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9716);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53393);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(34644);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(36600);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(57620);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(54782);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(93173);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(96424);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6128);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(48690);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(97956);


function noopSetDefinition(d) {
    return d;
}
/** @internal */
function decodeStructFromObject(registry, [Types, keys], value, jsonMap) {
    let jsonObj;
    const typeofArray = Array.isArray(value);
    const typeofMap = value instanceof Map;
    const count = keys.length;
    if (!typeofArray && !typeofMap && !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .K)(value)) {
        throw new Error(`Struct: Cannot decode value ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringify */ .P)(value)} (typeof ${typeof value}), expected an input object, map or array`);
    }
    else if (typeofArray && value.length !== count) {
        throw new Error(`Struct: Unable to map ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringify */ .P)(value)} array to object with known keys ${keys.join(', ')}`);
    }
    const raw = new Array(count);
    for (let i = 0; i < count; i++) {
        const key = keys[i];
        const jsonKey = jsonMap.get(key) || key;
        const Type = Types[i];
        let assign;
        try {
            if (typeofArray) {
                assign = value[i];
            }
            else if (typeofMap) {
                assign = jsonKey && value.get(jsonKey);
            }
            else {
                assign = jsonKey && value[jsonKey];
                if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isUndefined */ .o)(assign)) {
                    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isUndefined */ .o)(jsonObj)) {
                        const entries = Object.entries(value);
                        jsonObj = {};
                        for (let e = 0, ecount = entries.length; e < ecount; e++) {
                            jsonObj[(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .stringCamelCase */ .yZ)(entries[e][0])] = entries[e][1];
                        }
                    }
                    assign = jsonKey && jsonObj[jsonKey];
                }
            }
            raw[i] = [
                key,
                assign instanceof Type
                    ? assign
                    : new Type(registry, assign)
            ];
        }
        catch (error) {
            let type = Type.name;
            try {
                type = new Type(registry).toRawType();
            }
            catch {
                // ignore
            }
            throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
        }
    }
    return [raw, 0];
}
/**
 * @name Struct
 * @description
 * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes
 * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec
 * values in the constructor and it manages the decoding. It is important that the constructor
 * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,
 * it needs to decoded in the specific defined order.
 * @noInheritDoc
 */
class Struct extends Map {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__jsonMap;
    __internal__Types;
    constructor(registry, Types, value, jsonMap = new Map(), { definition, setDefinition = noopSetDefinition } = {}) {
        const typeMap = definition || setDefinition((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__/* .mapToTypeMap */ .y7)(registry, Types));
        const [decoded, decodedLength] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isU8a */ .U)(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .isHex */ .vq)(value)
            ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__/* .decodeU8aStruct */ .Do)(registry, new Array(typeMap[0].length), (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .u8aToU8a */ .Y)(value), typeMap)
            : value instanceof Struct
                ? [value, 0]
                : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
        super(decoded);
        this.initialU8aLength = decodedLength;
        this.registry = registry;
        this.__internal__jsonMap = jsonMap;
        this.__internal__Types = typeMap;
    }
    static with(Types, jsonMap) {
        let definition;
        // eslint-disable-next-line no-return-assign
        const setDefinition = (d) => definition = d;
        return class extends Struct {
            static {
                const keys = Object.keys(Types);
                (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_9__/* .objectProperties */ .a)(this.prototype, keys, (k, _, self) => self.get(k));
            }
            constructor(registry, value) {
                super(registry, Types, value, jsonMap, { definition, setDefinition });
            }
        };
    }
    /**
     * @description The available keys for this struct
     */
    get defKeys() {
        return this.__internal__Types[1];
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        for (const v of this.values()) {
            if (!v.isEmpty) {
                return false;
            }
        }
        return true;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        let total = 0;
        for (const v of this.values()) {
            total += v.encodedLength;
        }
        return total;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns the Type description of the structure
     */
    get Type() {
        const result = {};
        const [Types, keys] = this.__internal__Types;
        for (let i = 0, count = keys.length; i < count; i++) {
            result[keys[i]] = new Types[i](this.registry).toRawType();
        }
        return result;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__/* .compareMap */ .t)(this, other);
    }
    /**
     * @description Returns a specific names entry in the structure
     * @param key The name of the entry to retrieve
     */
    get(key) {
        return super.get(key);
    }
    /**
     * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
     */
    getAtIndex(index) {
        return this.toArray()[index];
    }
    /**
     * @description Returns the a types value by name
     */
    getT(key) {
        return super.get(key);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect(isBare) {
        const inner = [];
        for (const [k, v] of this.entries()) {
            inner.push({
                ...v.inspect(!isBare || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__/* .isBoolean */ .j)(isBare)
                    ? isBare
                    : isBare[k]),
                name: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .stringCamelCase */ .yZ)(k)
            });
        }
        return {
            inner
        };
    }
    /**
     * @description Converts the Object to an standard JavaScript Array
     */
    toArray() {
        return [...this.values()];
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_12__/* .u8aToHex */ .c)(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        const json = {};
        for (const [k, v] of this.entries()) {
            json[k] = v.toHuman(isExtended);
        }
        return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        const json = {};
        for (const [k, v] of this.entries()) {
            // Here we pull out the entry against the JSON mapping (if supplied)
            // since this representation goes over RPC and needs to be correct
            json[(this.__internal__jsonMap.get(k) || k)] = v.toJSON();
        }
        return json;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        const json = {};
        for (const [k, v] of this.entries()) {
            json[k] = v.toPrimitive();
        }
        return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringify */ .P)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_13__/* .typesToMap */ .n)(this.registry, this.__internal__Types));
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringify */ .P)(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const encoded = [];
        for (const [k, v] of this.entries()) {
            encoded.push(v.toU8a(!isBare || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__/* .isBoolean */ .j)(isBare)
                ? isBare
                : isBare[k]));
        }
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_14__/* .u8aConcatStrict */ .d)(encoded);
    }
}


/***/ }),

/***/ 26411:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ Text)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(91873);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(44961);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(82025);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(56358);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(51892);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(44214);
/* harmony import */ var _Raw_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9088);


const MAX_LENGTH = 128 * 1024;
/** @internal */
function decodeText(value) {
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isU8a */ .U)(value)) {
        if (!value.length) {
            return ['', 0];
        }
        // for Raw, the internal buffer does not have an internal length
        // (the same applies in e.g. Bytes, where length is added at encoding-time)
        if (value instanceof _Raw_js__WEBPACK_IMPORTED_MODULE_1__/* .Raw */ .N) {
            return [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aToString */ .z)(value), 0];
        }
        const [offset, length] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .compactFromU8aLim */ .j)(value);
        const total = offset + length;
        if (length > MAX_LENGTH) {
            throw new Error(`Text: length ${length.toString()} exceeds ${MAX_LENGTH}`);
        }
        else if (total > value.length) {
            throw new Error(`Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
        }
        return [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aToString */ .z)(value.subarray(offset, total)), total];
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .isHex */ .vq)(value)) {
        return [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aToString */ .z)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .hexToU8a */ .G)(value)), 0];
    }
    return [value ? value.toString() : '', 0];
}
/**
 * @name Text
 * @description
 * This is a string wrapper, along with the length. It is used both for strings as well
 * as items such as documentation. It simply extends the standard JS `String` built-in
 * object, inheriting all methods exposed from `String`.
 * @noInheritDoc
 */
class Text extends String {
    registry;
    createdAtHash;
    initialU8aLength;
    isStorageFallback;
    __internal__override = null;
    constructor(registry, value) {
        const [str, decodedLength] = decodeText(value);
        super(str);
        this.registry = registry;
        this.initialU8aLength = decodedLength;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return this.length === 0;
    }
    /**
     * @description The length of the value
     */
    get length() {
        // only included here since we ignore inherited docs
        return super.length;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .isString */ .H)(other)
            ? this.toString() === other.toString()
            : false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        const value = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .stringToU8a */ .d)(super.toString());
        return {
            outer: value.length
                ? [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .compactToU8a */ .Y)(value.length), value]
                : [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .compactToU8a */ .Y)(value.length)]
        };
    }
    /**
     * @description Set an override value for this
     */
    setOverride(override) {
        this.__internal__override = override;
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        // like with Vec<u8>, when we are encoding to hex, we don't actually add
        // the length prefix (it is already implied by the actual string length)
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_9__/* .u8aToHex */ .c)(this.toU8a(true));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Text';
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.__internal__override || super.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        // NOTE Here we use the super toString (we are not taking overrides into account,
        // rather encoding the original value the string was constructed with)
        const encoded = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .stringToU8a */ .d)(super.toString());
        return isBare
            ? encoded
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_10__/* .compactAddLength */ .N)(encoded);
    }
}


/***/ }),

/***/ 44903:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x: () => (/* binding */ f32)
/* harmony export */ });
/* harmony import */ var _native_Float_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(89682);

/**
 * @name f32
 * @description
 * A 32-bit float
 */
class f32 extends _native_Float_js__WEBPACK_IMPORTED_MODULE_0__/* .Float */ .b.with(32) {
    // NOTE without this, we cannot properly determine extensions
    __FloatType = 'f32';
}


/***/ }),

/***/ 47372:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   e: () => (/* binding */ f64)
/* harmony export */ });
/* harmony import */ var _native_Float_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(89682);

/**
 * @name f64
 * @description
 * A 64-bit float
 */
class f64 extends _native_Float_js__WEBPACK_IMPORTED_MODULE_0__/* .Float */ .b.with(64) {
    // NOTE without this, we cannot properly determine extensions
    __FloatType = 'f64';
}


/***/ }),

/***/ 31799:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ i128)
/* harmony export */ });
/* harmony import */ var _base_Int_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43858);

/**
 * @name i128
 * @description
 * A 128-bit signed integer
 */
class i128 extends _base_Int_js__WEBPACK_IMPORTED_MODULE_0__/* .Int */ .J.with(128) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = 'i128';
}


/***/ }),

/***/ 99387:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   T: () => (/* binding */ i16)
/* harmony export */ });
/* harmony import */ var _base_Int_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43858);

/**
 * @name i16
 * @description
 * A 16-bit signed integer
 */
class i16 extends _base_Int_js__WEBPACK_IMPORTED_MODULE_0__/* .Int */ .J.with(16) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = 'i16';
}


/***/ }),

/***/ 41332:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   j: () => (/* binding */ i256)
/* harmony export */ });
/* harmony import */ var _base_Int_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43858);

/**
 * @name i256
 * @description
 * A 256-bit signed integer
 */
class i256 extends _base_Int_js__WEBPACK_IMPORTED_MODULE_0__/* .Int */ .J.with(256) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = 'i256';
}


/***/ }),

/***/ 32871:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   k: () => (/* binding */ i32)
/* harmony export */ });
/* harmony import */ var _base_Int_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43858);

/**
 * @name i32
 * @description
 * A 32-bit signed integer
 */
class i32 extends _base_Int_js__WEBPACK_IMPORTED_MODULE_0__/* .Int */ .J.with(32) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = 'i32';
}


/***/ }),

/***/ 31584:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ i64)
/* harmony export */ });
/* harmony import */ var _base_Int_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43858);

/**
 * @name i64
 * @description
 * A 64-bit signed integer
 */
class i64 extends _base_Int_js__WEBPACK_IMPORTED_MODULE_0__/* .Int */ .J.with(64) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = 'i64';
}


/***/ }),

/***/ 34129:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   i8: () => (/* binding */ i8)
/* harmony export */ });
/* harmony import */ var _base_Int_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43858);

/**
 * @name i8
 * @description
 * An 8-bit signed integer
 */
class i8 extends _base_Int_js__WEBPACK_IMPORTED_MODULE_0__/* .Int */ .J.with(8) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = 'i8';
}


/***/ }),

/***/ 85794:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   M: () => (/* binding */ isize)
/* harmony export */ });
/* harmony import */ var _I32_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32871);

/**
 * @name ISize
 * @description
 * A System default signed number, typically used in RPC to report non-consensus
 * data. It is a wrapper for [[I32]] as a WASM default (as generated by Rust bindings).
 * It is not to be used, since it creates consensus mismatches.
 */
class isize extends _I32_js__WEBPACK_IMPORTED_MODULE_0__/* .i32 */ .k {
    constructor(registry, value) {
        super(registry, value);
        throw new Error('The `isize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally i64) and WASM (always i32) code. Use one of the `i32` or `i64` types explicitly.');
    }
}


/***/ }),

/***/ 88941:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ u128)
/* harmony export */ });
/* harmony import */ var _base_UInt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(89673);

/**
 * @name u128
 * @description
 * A 128-bit unsigned integer
 */
class u128 extends _base_UInt_js__WEBPACK_IMPORTED_MODULE_0__/* .UInt */ .v.with(128) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = 'u128';
}


/***/ }),

/***/ 2064:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   K: () => (/* binding */ u16)
/* harmony export */ });
/* harmony import */ var _base_UInt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(89673);

/**
 * @name u16
 * @description
 * A 16-bit unsigned integer
 */
class u16 extends _base_UInt_js__WEBPACK_IMPORTED_MODULE_0__/* .UInt */ .v.with(16) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = 'u16';
}


/***/ }),

/***/ 98257:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   K: () => (/* binding */ u256)
/* harmony export */ });
/* harmony import */ var _base_UInt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(89673);

/**
 * @name u256
 * @description
 * A 256-bit unsigned integer
 */
class u256 extends _base_UInt_js__WEBPACK_IMPORTED_MODULE_0__/* .UInt */ .v.with(256) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = 'u256';
}


/***/ }),

/***/ 53488:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   J: () => (/* binding */ u32)
/* harmony export */ });
/* harmony import */ var _base_UInt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(89673);

/**
 * @name u32
 * @description
 * A 32-bit unsigned integer
 */
class u32 extends _base_UInt_js__WEBPACK_IMPORTED_MODULE_0__/* .UInt */ .v.with(32) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = 'u32';
}


/***/ }),

/***/ 15880:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ u64)
/* harmony export */ });
/* harmony import */ var _base_UInt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(89673);

/**
 * @name u64
 * @description
 * A 64-bit unsigned integer
 */
class u64 extends _base_UInt_js__WEBPACK_IMPORTED_MODULE_0__/* .UInt */ .v.with(64) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = 'u64';
}


/***/ }),

/***/ 11176:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u8: () => (/* binding */ u8)
/* harmony export */ });
/* harmony import */ var _base_UInt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(89673);

/**
 * @name u8
 * @description
 * An 8-bit unsigned integer
 */
class u8 extends _base_UInt_js__WEBPACK_IMPORTED_MODULE_0__/* .UInt */ .v.with(8) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = 'u8';
}


/***/ }),

/***/ 31767:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ usize)
/* harmony export */ });
/* harmony import */ var _U32_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53488);

/**
 * @name USize
 * @description
 * A System default unsigned number, typically used in RPC to report non-consensus
 * data. It is a wrapper for [[U32]] as a WASM default (as generated by Rust bindings).
 * It is not to be used, since it created consensus mismatches.
 */
class usize extends _U32_js__WEBPACK_IMPORTED_MODULE_0__/* .u32 */ .J {
    constructor(registry, value) {
        super(registry, value);
        throw new Error('The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.');
    }
}


/***/ }),

/***/ 40665:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   w: () => (/* binding */ compareArray)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34644);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6093);


function compareArray(a, b) {
    if (Array.isArray(b)) {
        return (a.length === b.length) && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isUndefined */ .o)(a.find((v, index) => (0,_util_js__WEBPACK_IMPORTED_MODULE_1__/* .hasEq */ .q)(v)
            ? !v.eq(b[index])
            : v !== b[index]));
    }
    return false;
}


/***/ }),

/***/ 48690:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   t: () => (/* binding */ compareMap)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34644);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9716);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6093);


function hasMismatch(a, b) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isUndefined */ .o)(a) || ((0,_util_js__WEBPACK_IMPORTED_MODULE_1__/* .hasEq */ .q)(a)
        ? !a.eq(b)
        : a !== b);
}
function notEntry(value) {
    return !Array.isArray(value) || value.length !== 2;
}
function compareMapArray(a, b) {
    // equal number of entries and each entry in the array should match
    return (a.size === b.length) && !b.some((e) => notEntry(e) ||
        hasMismatch(a.get(e[0]), e[1]));
}
function compareMap(a, b) {
    if (Array.isArray(b)) {
        return compareMapArray(a, b);
    }
    else if (b instanceof Map) {
        return compareMapArray(a, [...b.entries()]);
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isObject */ .K)(b)) {
        return compareMapArray(a, Object.entries(b));
    }
    return false;
}


/***/ }),

/***/ 36453:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   O: () => (/* binding */ compareSet)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9716);

function compareSetArray(a, b) {
    // equal number of entries and each entry in the array should match
    return (a.size === b.length) && !b.some((e) => !a.has(e));
}
function compareSet(a, b) {
    if (Array.isArray(b)) {
        return compareSetArray(a, b);
    }
    else if (b instanceof Set) {
        return compareSetArray(a, [...b.values()]);
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .K)(b)) {
        return compareSetArray(a, Object.values(b));
    }
    return false;
}


/***/ }),

/***/ 6128:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Do: () => (/* binding */ decodeU8aStruct),
/* harmony export */   Y5: () => (/* binding */ decodeU8a),
/* harmony export */   hl: () => (/* binding */ decodeU8aVec)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26048);

/** @internal */
function formatFailure(registry, fn, _result, { message }, u8a, i, count, Type, key) {
    let type = '';
    try {
        type = `: ${new Type(registry).toRawType()}`;
    }
    catch {
        // ignore
    }
    // This is extra debugging info (we most-probably want this in in some way, shape or form,
    // but at this point not quite sure how to include and format it (it can be quite massive)
    // console.error(JSON.stringify(result, null, 2));
    return `${fn}: failed at ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .u8aToHex */ .c)(u8a.subarray(0, 16))}…${key ? ` on ${key}` : ''} (index ${i + 1}/${count})${type}:: ${message}`;
}
/**
 * @internal
 *
 * Given an u8a, and an array of Type constructors, decode the u8a against the
 * types, and return an array of decoded values.
 *
 * @param u8a - The u8a to decode.
 * @param result - The result array (will be returned with values pushed)
 * @param types - The array of CodecClass to decode the U8a against.
 */
function decodeU8a(registry, result, u8a, [Types, keys]) {
    const count = result.length;
    let offset = 0;
    let i = 0;
    try {
        while (i < count) {
            const value = new Types[i](registry, u8a.subarray(offset));
            offset += value.initialU8aLength || value.encodedLength;
            result[i] = value;
            i++;
        }
    }
    catch (error) {
        throw new Error(formatFailure(registry, 'decodeU8a', result, error, u8a.subarray(offset), i, count, Types[i], keys[i]));
    }
    return [result, offset];
}
/**
 * @internal
 *
 * Split from decodeU8a since this is specialized to zip returns ... while we duplicate, this
 * is all on the hot-path, so it is not great, however there is (some) method behind the madness
 */
function decodeU8aStruct(registry, result, u8a, [Types, keys]) {
    const count = result.length;
    let offset = 0;
    let i = 0;
    try {
        while (i < count) {
            const value = new Types[i](registry, u8a.subarray(offset));
            offset += value.initialU8aLength || value.encodedLength;
            result[i] = [keys[i], value];
            i++;
        }
    }
    catch (error) {
        throw new Error(formatFailure(registry, 'decodeU8aStruct', result, error, u8a.subarray(offset), i, count, Types[i], keys[i]));
    }
    return [result, offset];
}
/**
 * @internal
 *
 * Split from decodeU8a since this is specialized to 1 instance ... while we duplicate, this
 * is all on the hot-path, so it is not great, however there is (some) method behind the madness
 */
function decodeU8aVec(registry, result, u8a, startAt, Type) {
    const count = result.length;
    let offset = startAt;
    let i = 0;
    try {
        while (i < count) {
            const value = new Type(registry, u8a.subarray(offset));
            offset += value.initialU8aLength || value.encodedLength;
            result[i] = value;
            i++;
        }
    }
    catch (error) {
        throw new Error(formatFailure(registry, 'decodeU8aVec', result, error, u8a.subarray(offset), i, count, Type));
    }
    return [offset, offset - startAt];
}


/***/ }),

/***/ 20046:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Nw: () => (/* binding */ sanitize)
/* harmony export */ });
/* unused harmony exports trim, findClosing, alias, cleanupCompact, flattenSingleTuple, removeExtensions, removeColons, removeGenerics, removePairOf, removeTraits, removeWrap */
const BOUNDED = ['BTreeMap', 'BTreeSet', 'HashMap', 'Vec'];
const ALLOWED_BOXES = BOUNDED.concat(['Compact', 'DoNotConstruct', 'Int', 'Linkage', 'Range', 'RangeInclusive', 'Result', 'Opaque', 'Option', 'UInt', 'WrapperKeepOpaque', 'WrapperOpaque']);
const BOX_PRECEDING = ['<', '(', '[', '"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple
const mappings = [
    // alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
    alias('<T::InherentOfflineReport as InherentOfflineReport>::Inherent', 'InherentOfflineReport', false),
    alias('VecDeque<', 'Vec<', false),
    // <T::Balance as HasCompact>
    cleanupCompact(),
    // Change BoundedVec<Type, Size> to Vec<Type>
    removeExtensions('Bounded', true),
    // Change WeakVec<Type> to Vec<Type>
    removeExtensions('Weak', false),
    // Remove all the trait prefixes
    removeTraits(),
    // remove PairOf<T> -> (T, T)
    removePairOf(),
    // remove boxing, `Box<Proposal>` -> `Proposal`
    removeWrap('Box<'),
    // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
    removeGenerics(),
    // alias String -> Text (compat with jsonrpc methods)
    alias('String', 'Text'),
    // alias Vec<u8> -> Bytes
    alias('Vec<u8>', 'Bytes'),
    alias('&\\[u8\\]', 'Bytes'),
    alias("&'static\\[u8\\]", 'Bytes'),
    // alias RawAddress -> Address
    alias('RawAddress', 'Address'),
    // lookups, mapped to Address/AccountId as appropriate in runtime
    alias('Lookup::Source', 'LookupSource'),
    alias('Lookup::Target', 'LookupTarget'),
    // HACK duplication between contracts & primitives, however contracts prefixed with exec
    alias('exec::StorageKey', 'ContractStorageKey'),
    // flattens tuples with one value, `(AccountId)` -> `AccountId`
    flattenSingleTuple(),
    // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
    removeColons(),
    // remove all trailing spaces - this should always be the last
    trim()
];
function trim() {
    return (value) => value.trim();
}
function findClosing(value, start) {
    let depth = 0;
    for (let i = start, count = value.length; i < count; i++) {
        if (value[i] === '>') {
            if (!depth) {
                return i;
            }
            depth--;
        }
        else if (value[i] === '<') {
            depth++;
        }
    }
    throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
}
function alias(src, dest, withChecks = true) {
    const from = new RegExp(`(^${src}|${BOX_PRECEDING.map((box) => `\\${box}${src}`).join('|')})`, 'g');
    const to = (src) => {
        from.lastIndex = 0;
        return withChecks && BOX_PRECEDING.includes(src[0])
            ? `${src[0]}${dest}`
            : dest;
    };
    return (value) => value.replace(from, to);
}
function cleanupCompact() {
    return (value) => {
        if (value.includes(' as HasCompact')) {
            for (let i = 0, count = value.length; i < count; i++) {
                if (value[i] === '<') {
                    const end = findClosing(value, i + 1) - 14;
                    if (value.substring(end, end + 14) === ' as HasCompact') {
                        value = `Compact<${value.substring(i + 1, end)}>`;
                    }
                }
            }
        }
        return value;
    };
}
function flattenSingleTuple() {
    const from1 = /,\)/g;
    const from2 = /\(([^,]+)\)/;
    return (value) => {
        from1.lastIndex = 0;
        return value
            // tuples may have trailing commas, e.g. (u32, BlockNumber, )
            .replace(from1, ')')
            // change (u32) -> u32
            .replace(from2, '$1');
    };
}
function replaceTagWith(value, matcher, replacer) {
    let index = -1;
    while (true) {
        index = value.indexOf(matcher, index + 1);
        if (index === -1) {
            return value;
        }
        const start = index + matcher.length;
        const end = findClosing(value, start);
        value = `${value.substring(0, index)}${replacer(value.substring(start, end))}${value.substring(end + 1)}`;
    }
}
function removeExtensions(type, isSized) {
    return (value) => {
        for (let i = 0, count = BOUNDED.length; i < count; i++) {
            const tag = BOUNDED[i];
            value = replaceTagWith(value, `${type}${tag}<`, (v) => {
                const parts = v
                    .split(',')
                    .map((s) => s.trim())
                    .filter((s) => s);
                if (isSized) {
                    parts.pop();
                }
                return `${tag}<${parts.join(',')}>`;
            });
        }
        return value;
    };
}
function removeColons() {
    return (value) => {
        let index = 0;
        while (index !== -1) {
            index = value.indexOf('::');
            if (index === 0) {
                value = value.substring(2);
            }
            else if (index !== -1) {
                let start = index;
                while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
                    start--;
                }
                value = `${value.substring(0, start + 1)}${value.substring(index + 2)}`;
            }
        }
        return value;
    };
}
function removeGenerics() {
    return (value) => {
        for (let i = 0, count = value.length; i < count; i++) {
            if (value[i] === '<') {
                // check against the allowed wrappers, be it Vec<..>, Option<...> ...
                const box = ALLOWED_BOXES.find((box) => {
                    const start = i - box.length;
                    return ((start >= 0 &&
                        value.substring(start, i) === box) && (
                    // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
                    start === 0 ||
                        BOX_PRECEDING.includes(value[start - 1])));
                });
                // we have not found anything, unwrap generic innards
                if (!box) {
                    const end = findClosing(value, i + 1);
                    value = `${value.substring(0, i)}${value.substring(end + 1)}`;
                }
            }
        }
        return value;
    };
}
function removePairOf() {
    const replacer = (v) => `(${v},${v})`;
    return (value) => replaceTagWith(value, 'PairOf<', replacer);
}
function removeTraits() {
    const from1 = /\s/g;
    const from2 = /(T|Self)::/g;
    const from3 = /<(T|Self)asTrait>::/g;
    const from4 = /<Tas[a-z]+::Trait>::/g;
    const from5 = /<LookupasStaticLookup>/g;
    const from6 = /::Type/g;
    return (value) => {
        from1.lastIndex = 0;
        from2.lastIndex = 0;
        from3.lastIndex = 0;
        from4.lastIndex = 0;
        from5.lastIndex = 0;
        from6.lastIndex = 0;
        return value
            // remove all whitespaces
            .replace(from1, '')
            // anything `T::<type>` to end up as `<type>`
            .replace(from2, '')
            // replace `<T as Trait>::` (whitespaces were removed above)
            .replace(from3, '')
            // replace `<T as something::Trait>::` (whitespaces were removed above)
            .replace(from4, '')
            // replace <Lookup as StaticLookup>
            .replace(from5, 'Lookup')
            // replace `<...>::Type`
            .replace(from6, '');
    };
}
function removeWrap(check) {
    const replacer = (v) => v;
    return (value) => replaceTagWith(value, check, replacer);
}
const sanitizeMap = new Map();
function sanitize(value) {
    const startValue = value.toString();
    const memoized = sanitizeMap.get(startValue);
    if (memoized) {
        return memoized;
    }
    let result = startValue;
    for (let i = 0, count = mappings.length; i < count; i++) {
        result = mappings[i](result);
    }
    sanitizeMap.set(startValue, result);
    return result;
}


/***/ }),

/***/ 55830:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hr: () => (/* binding */ sortMap),
/* harmony export */   If: () => (/* binding */ sortSet)
/* harmony export */ });
/* unused harmony export sortAsc */
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14769);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52906);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(16996);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(46770);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(54556);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(53393);

/** @internal **/
function isArrayLike(arg) {
    return arg instanceof Uint8Array || Array.isArray(arg);
}
/** @internal **/
function isEnum(arg) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isCodec */ .c)(arg) && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isNumber */ .h)(arg.index) && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isCodec */ .c)(arg.value);
}
/** @internal */
function isNumberLike(arg) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isNumber */ .h)(arg) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isBn */ .H)(arg) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isBigInt */ .C)(arg);
}
/** @internal */
function sortArray(a, b) {
    // Vec, Tuple, Bytes etc.
    let sortRes = 0;
    const minLen = Math.min(a.length, b.length);
    for (let i = 0; i < minLen; ++i) {
        sortRes = sortAsc(a[i], b[i]);
        if (sortRes !== 0) {
            return sortRes;
        }
    }
    return a.length - b.length;
}
/**
* Sort keys/values of BTreeSet/BTreeMap in ascending order for encoding compatibility with Rust's BTreeSet/BTreeMap
* (https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html)
* (https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html)
*/
function sortAsc(a, b) {
    if (isNumberLike(a) && isNumberLike(b)) {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .bnToBn */ .G)(a).cmp((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .bnToBn */ .G)(b));
    }
    else if (a instanceof Map && b instanceof Map) {
        return sortAsc(Array.from(a.values()), Array.from(b.values()));
    }
    else if (isEnum(a) && isEnum(b)) {
        return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
    }
    else if (isArrayLike(a) && isArrayLike(b)) {
        return sortArray(a, b);
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isCodec */ .c)(a) && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isCodec */ .c)(b)) {
        // Text, Bool etc.
        return sortAsc(a.toU8a(true), b.toU8a(true));
    }
    throw new Error(`Attempting to sort unrecognized values: ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .stringify */ .P)(a)} (typeof ${typeof a}) <-> ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .stringify */ .P)(b)} (typeof ${typeof b})`);
}
function sortSet(set) {
    return new Set(Array.from(set).sort(sortAsc));
}
function sortMap(map) {
    return new Map(Array.from(map.entries()).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
}


/***/ }),

/***/ 96424:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RY: () => (/* binding */ typesToConstructors),
/* harmony export */   rA: () => (/* binding */ typeToConstructor),
/* harmony export */   y7: () => (/* binding */ mapToTypeMap)
/* harmony export */ });
/**
 * @internal
 * From a type string or class, return the associated type class
 */
function typeToConstructor(registry, type) {
    return typeof type === 'function'
        ? type
        : registry.createClassUnsafe(type);
}
/**
 * @internal
 * Takes an input array of types and returns the associated classes for it
*/
function typesToConstructors(registry, types) {
    const count = types.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
        result[i] = typeToConstructor(registry, types[i]);
    }
    return result;
}
/**
 * @internal
 * Takes an input map of the form `{ [string]: string | CodecClass }` and returns a map of `{ [string]: CodecClass }`
 */
function mapToTypeMap(registry, input) {
    const entries = Object.entries(input);
    const count = entries.length;
    const output = [new Array(count), new Array(count)];
    for (let i = 0; i < count; i++) {
        output[1][i] = entries[i][0];
        output[0][i] = typeToConstructor(registry, entries[i][1]);
    }
    return output;
}


/***/ }),

/***/ 97956:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   n: () => (/* binding */ typesToMap)
/* harmony export */ });
function typesToMap(registry, [Types, keys]) {
    const result = {};
    for (let i = 0, count = keys.length; i < count; i++) {
        result[keys[i]] = registry.getClassName(Types[i]) || new Types[i](registry).toRawType();
    }
    return result;
}


/***/ }),

/***/ 6093:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   q: () => (/* binding */ hasEq)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73092);

function hasEq(o) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(o.eq);
}


/***/ }),

/***/ 35705:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EW: () => (/* binding */ createClassUnsafe),
/* harmony export */   z2: () => (/* binding */ constructTypeClass)
/* harmony export */ });
/* unused harmony export getTypeClass */
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(30386);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(44179);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12914);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(53542);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(96317);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(62080);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(43858);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(43330);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(73260);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(74830);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(13237);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(35942);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(78020);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(23261);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(22442);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(89673);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(77229);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(80669);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(58833);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(69215);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(50759);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(49442);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53393);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52906);
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3754);
/* harmony import */ var _util_getTypeDef_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(60045);




function getTypeDefType({ lookupName, type }) {
    return lookupName || type;
}
function getSubDefArray(value) {
    if (!Array.isArray(value.sub)) {
        throw new Error(`Expected subtype as TypeDef[] in ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)(value)}`);
    }
    return value.sub;
}
function getSubDef(value) {
    if (!value.sub || Array.isArray(value.sub)) {
        throw new Error(`Expected subtype as TypeDef in ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)(value)}`);
    }
    return value.sub;
}
function getSubType(value) {
    return getTypeDefType(getSubDef(value));
}
function getTypeClassMap(value) {
    const subs = getSubDefArray(value);
    const map = {};
    for (let i = 0, count = subs.length; i < count; i++) {
        const sub = subs[i];
        if (!sub.name) {
            throw new Error(`No name found in definition ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)(sub)}`);
        }
        map[sub.name] = getTypeDefType(sub);
    }
    return map;
}
function getTypeClassArray(value) {
    return getSubDefArray(value).map(getTypeDefType);
}
function createInt(Clazz, { displayName, length }) {
    if (!(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isNumber */ .h)(length)) {
        throw new Error(`Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
    }
    return Clazz.with(length, displayName);
}
function createHashMap(Clazz, value) {
    const [keyType, valueType] = getTypeClassArray(value);
    return Clazz.with(keyType, valueType);
}
function createWithSub(Clazz, value) {
    return Clazz.with(getSubType(value));
}
const infoMapping = {
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.BTreeMap]: (_registry, value) => createHashMap(_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_3__/* .BTreeMap */ .P, value),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.BTreeSet]: (_registry, value) => createWithSub(_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_4__/* .BTreeSet */ .Z, value),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Compact]: (_registry, value) => createWithSub(_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_5__/* .Compact */ .D, value),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.DoNotConstruct]: (_registry, value) => _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_6__/* .DoNotConstruct */ .w.with(value.displayName || value.type),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Enum]: (_registry, value) => {
        const subs = getSubDefArray(value);
        return _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_7__/* .Enum */ .x.with(subs.every(({ type }) => type === 'Null')
            ? subs.reduce((out, { index, name }, count) => {
                if (!name) {
                    throw new Error('No name found in sub definition');
                }
                out[name] = index || count;
                return out;
            }, {})
            : getTypeClassMap(value));
    },
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.HashMap]: (_registry, value) => createHashMap(_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_8__/* .HashMap */ .z, value),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Int]: (_registry, value) => createInt(_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_9__/* .Int */ .J, value),
    // We have circular deps between Linkage & Struct
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Linkage]: (_registry, value) => {
        const type = `Option<${getSubType(value)}>`;
        // eslint-disable-next-line sort-keys
        const Clazz = _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_10__/* .Struct */ .A.with({ previous: type, next: type });
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        Clazz.prototype.toRawType = function () {
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
            return `Linkage<${this.next.toRawType(true)}>`;
        };
        return Clazz;
    },
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Null]: (_registry, _value) => _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_11__/* .Null */ .p,
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Option]: (_registry, value) => {
        if (!value.sub || Array.isArray(value.sub)) {
            throw new Error('Expected type information for Option');
        }
        // NOTE This is opt-in (unhandled), not by default
        // if (value.sub.type === 'bool') {
        //   return OptionBool;
        // }
        return createWithSub(_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_12__/* .Option */ .W, value);
    },
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Plain]: (registry, value) => registry.getOrUnknown(value.type),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Range]: (_registry, value) => createWithSub(_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_13__/* .Range */ .e, value),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.RangeInclusive]: (_registry, value) => createWithSub(_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_14__/* .RangeInclusive */ .B, value),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Result]: (_registry, value) => {
        const [Ok, Err] = getTypeClassArray(value);
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        return _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_15__/* .Result */ .x.with({ Err, Ok });
    },
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Set]: (_registry, value) => _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_16__/* .CodecSet */ .p.with(getSubDefArray(value).reduce((result, { index, name }) => {
        if (!name || !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isNumber */ .h)(index)) {
            throw new Error('No name found in sub definition');
        }
        result[name] = index;
        return result;
    }, {}), value.length),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Struct]: (_registry, value) => _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_10__/* .Struct */ .A.with(getTypeClassMap(value), value.alias),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Tuple]: (_registry, value) => _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_17__/* .Tuple */ .p.with(getTypeClassArray(value)),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.UInt]: (_registry, value) => createInt(_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_18__/* .UInt */ .v, value),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.Vec]: (_registry, { sub }) => {
        if (!sub || Array.isArray(sub)) {
            throw new Error('Expected type information for vector');
        }
        return (sub.type === 'u8'
            ? _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_19__/* .Bytes */ .J
            : _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_20__/* .Vec */ .B.with(getTypeDefType(sub)));
    },
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.VecFixed]: (_registry, { displayName, length, sub }) => {
        if (!(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isNumber */ .h)(length) || !sub || Array.isArray(sub)) {
            throw new Error('Expected length & type information for fixed vector');
        }
        return (sub.type === 'u8'
            ? _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_21__/* .U8aFixed */ .g.with((length * 8), displayName)
            : _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_22__/* .VecFixed */ .$.with(getTypeDefType(sub), length));
    },
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.WrapperKeepOpaque]: (_registry, value) => createWithSub(_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_23__/* .WrapperKeepOpaque */ .$, value),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_2__/* .TypeDefInfo */ .u.WrapperOpaque]: (_registry, value) => createWithSub(_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_24__/* .WrapperOpaque */ .q, value)
};
function constructTypeClass(registry, typeDef) {
    try {
        const Type = infoMapping[typeDef.info](registry, typeDef);
        if (!Type) {
            throw new Error('No class created');
        }
        // don't clobber any existing
        if (!Type.__fallbackType && typeDef.fallbackType) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore ...this is the only place we we actually assign this...
            Type.__fallbackType = typeDef.fallbackType;
        }
        return Type;
    }
    catch (error) {
        throw new Error(`Unable to construct class from ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)(typeDef)}: ${error.message}`);
    }
}
function getTypeClass(registry, typeDef) {
    return registry.getUnsafe(typeDef.type, false, typeDef);
}
function createClassUnsafe(registry, type) {
    return (
    // just retrieve via name, no creation via typeDef
    registry.getUnsafe(type) ||
        // we don't have an existing type, create the class via typeDef
        getTypeClass(registry, registry.isLookupType(type)
            ? registry.lookup.getTypeDef(type)
            : (0,_util_getTypeDef_js__WEBPACK_IMPORTED_MODULE_25__/* .getTypeDef */ .s)(type)));
}


/***/ }),

/***/ 17140:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ createTypeUnsafe)
/* harmony export */ });
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(74830);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84061);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(42740);
/* harmony import */ var _class_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(35705);



function checkInstance(created, matcher) {
    const u8a = created.toU8a();
    const rawType = created.toRawType();
    const isOk = (
    // full match, all ok
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .u8aEq */ .S)(u8a, matcher) ||
        (
        // on a length-prefixed type, just check the actual length
        ['Bytes', 'Text', 'Type'].includes(rawType) &&
            matcher.length === created.length) ||
        (
        // when the created is empty and matcher is also empty, let it slide...
        created.isEmpty &&
            matcher.every((v) => !v)));
    if (!isOk) {
        throw new Error(`${rawType}:: Decoded input doesn't match input, received ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .u8aToHex */ .c)(matcher, 512)} (${matcher.length} bytes), created ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .u8aToHex */ .c)(u8a, 512)} (${u8a.length} bytes)`);
    }
}
function checkPedantic(created, [value]) {
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isU8a */ .U)(value)) {
        checkInstance(created, value);
    }
    else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isHex */ .vq)(value)) {
        checkInstance(created, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .u8aToU8a */ .Y)(value));
    }
}
function initType(registry, Type, params = [], { blockHash, isFallback, isOptional, isPedantic } = {}) {
    const created = new (isOptional
        ? _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_5__/* .Option */ .W.with(Type)
        : Type)(registry, ...params);
    isPedantic && checkPedantic(created, params);
    if (blockHash) {
        created.createdAtHash = createTypeUnsafe(registry, 'BlockHash', [blockHash]);
    }
    if (isFallback) {
        created.isStorageFallback = true;
    }
    return created;
}
function createTypeUnsafe(registry, type, params = [], options = {}) {
    let Clazz = null;
    let firstError = null;
    try {
        Clazz = (0,_class_js__WEBPACK_IMPORTED_MODULE_6__/* .createClassUnsafe */ .EW)(registry, type);
        return initType(registry, Clazz, params, options);
    }
    catch (error) {
        firstError = new Error(`createType(${type}):: ${error.message}`);
    }
    if (Clazz?.__fallbackType) {
        try {
            Clazz = (0,_class_js__WEBPACK_IMPORTED_MODULE_6__/* .createClassUnsafe */ .EW)(registry, Clazz.__fallbackType);
            return initType(registry, Clazz, params, options);
        }
        catch {
            // swallow, we will throw the first error again
        }
    }
    throw firstError;
}


/***/ }),

/***/ 3754:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ TypeDefInfo)
/* harmony export */ });
var TypeDefInfo;
(function (TypeDefInfo) {
    TypeDefInfo[TypeDefInfo["BTreeMap"] = 0] = "BTreeMap";
    TypeDefInfo[TypeDefInfo["BTreeSet"] = 1] = "BTreeSet";
    TypeDefInfo[TypeDefInfo["Compact"] = 2] = "Compact";
    TypeDefInfo[TypeDefInfo["DoNotConstruct"] = 3] = "DoNotConstruct";
    TypeDefInfo[TypeDefInfo["Enum"] = 4] = "Enum";
    TypeDefInfo[TypeDefInfo["HashMap"] = 5] = "HashMap";
    TypeDefInfo[TypeDefInfo["Int"] = 6] = "Int";
    TypeDefInfo[TypeDefInfo["Linkage"] = 7] = "Linkage";
    TypeDefInfo[TypeDefInfo["Null"] = 8] = "Null";
    TypeDefInfo[TypeDefInfo["Option"] = 9] = "Option";
    TypeDefInfo[TypeDefInfo["Plain"] = 10] = "Plain";
    TypeDefInfo[TypeDefInfo["Range"] = 11] = "Range";
    TypeDefInfo[TypeDefInfo["RangeInclusive"] = 12] = "RangeInclusive";
    TypeDefInfo[TypeDefInfo["Result"] = 13] = "Result";
    TypeDefInfo[TypeDefInfo["Set"] = 14] = "Set";
    TypeDefInfo[TypeDefInfo["Si"] = 15] = "Si";
    TypeDefInfo[TypeDefInfo["Struct"] = 16] = "Struct";
    TypeDefInfo[TypeDefInfo["Tuple"] = 17] = "Tuple";
    TypeDefInfo[TypeDefInfo["UInt"] = 18] = "UInt";
    TypeDefInfo[TypeDefInfo["Vec"] = 19] = "Vec";
    TypeDefInfo[TypeDefInfo["VecFixed"] = 20] = "VecFixed";
    TypeDefInfo[TypeDefInfo["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
    TypeDefInfo[TypeDefInfo["WrapperOpaque"] = 22] = "WrapperOpaque";
})(TypeDefInfo || (TypeDefInfo = {}));


/***/ }),

/***/ 95689:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   He: () => (/* binding */ withTypeString)
/* harmony export */ });
/* unused harmony exports paramsNotation, encodeTypeDef */
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53393);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(34644);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(52906);
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3754);


const stringIdentity = (value) => value.toString();
const INFO_WRAP = ['BTreeMap', 'BTreeSet', 'Compact', 'HashMap', 'Option', 'Result', 'Vec'];
function paramsNotation(outer, inner, transform = stringIdentity) {
    return `${outer}${inner
        ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(', ')}>`
        : ''}`;
}
function encodeWithParams(registry, typeDef, outer) {
    const { info, sub } = typeDef;
    switch (info) {
        case _types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.BTreeMap:
        case _types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.BTreeSet:
        case _types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Compact:
        case _types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.HashMap:
        case _types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Linkage:
        case _types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Option:
        case _types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Range:
        case _types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.RangeInclusive:
        case _types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Result:
        case _types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Vec:
        case _types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.WrapperKeepOpaque:
        case _types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.WrapperOpaque:
            return paramsNotation(outer, sub, (p) => encodeTypeDef(registry, p));
    }
    throw new Error(`Unable to encode ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringify */ .P)(typeDef)} with params`);
}
function encodeSubTypes(registry, sub, asEnum, extra) {
    const names = sub.map(({ name }) => name);
    if (!names.every((n) => !!n)) {
        throw new Error(`Subtypes does not have consistent names, ${names.join(', ')}`);
    }
    const inner = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({}, extra);
    for (let i = 0, count = sub.length; i < count; i++) {
        const def = sub[i];
        if (!def.name) {
            throw new Error(`No name found in ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringify */ .P)(def)}`);
        }
        inner[def.name] = encodeTypeDef(registry, def);
    }
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringify */ .P)(asEnum
        ? { _enum: inner }
        : inner);
}
const encoders = {
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeMap'),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeSet'),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Compact'),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.DoNotConstruct]: (registry, { displayName, lookupIndex, lookupName }) => `DoNotConstruct<${lookupName || displayName || ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .isUndefined */ .o)(lookupIndex) ? 'Unknown' : registry.createLookupType(lookupIndex))}>`,
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Enum]: (registry, { sub }) => {
        if (!Array.isArray(sub)) {
            throw new Error('Unable to encode Enum type');
        }
        // c-like enums have all Null entries
        // TODO We need to take the disciminant into account and auto-add empty entries
        return sub.every(({ type }) => type === 'Null')
            ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringify */ .P)({ _enum: sub.map(({ name }, index) => `${name || `Empty${index}`}`) })
            : encodeSubTypes(registry, sub, true);
    },
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'HashMap'),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Int]: (_registry, { length = 32 }) => `Int<${length}>`,
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Linkage'),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Null]: (_registry, _typeDef) => 'Null',
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Option'),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Plain]: (_registry, { displayName, type }) => displayName || type,
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Range'),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.RangeInclusive]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'RangeInclusive'),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Result'),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Set]: (_registry, { length = 8, sub }) => {
        if (!Array.isArray(sub)) {
            throw new Error('Unable to encode Set type');
        }
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringify */ .P)({
            _set: sub.reduce((all, { index, name }, count) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)(all, { [`${name || `Unknown${index || count}`}`]: index || count }), { _bitLength: length || 8 })
        });
    },
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Si]: (_registry, { lookupName, type }) => lookupName || type,
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Struct]: (registry, { alias, sub }) => {
        if (!Array.isArray(sub)) {
            throw new Error('Unable to encode Struct type');
        }
        return encodeSubTypes(registry, sub, false, alias
            ? {
                _alias: [...alias.entries()].reduce((all, [k, v]) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)(all, { [k]: v }), {})
            }
            : {});
    },
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Tuple]: (registry, { sub }) => {
        if (!Array.isArray(sub)) {
            throw new Error('Unable to encode Tuple type');
        }
        return `(${sub.map((type) => encodeTypeDef(registry, type)).join(',')})`;
    },
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.UInt]: (_registry, { length = 32 }) => `UInt<${length}>`,
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Vec'),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.VecFixed]: (_registry, { length, sub }) => {
        if (!(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .isNumber */ .h)(length) || !sub || Array.isArray(sub)) {
            throw new Error('Unable to encode VecFixed type');
        }
        return `[${sub.type};${length}]`;
    },
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.WrapperKeepOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'WrapperKeepOpaque'),
    [_types_index_js__WEBPACK_IMPORTED_MODULE_0__/* .TypeDefInfo */ .u.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'WrapperOpaque')
};
function encodeType(registry, typeDef, withLookup = true) {
    return withLookup && typeDef.lookupName
        ? typeDef.lookupName
        : encoders[typeDef.info](registry, typeDef);
}
function encodeTypeDef(registry, typeDef) {
    // In the case of contracts we do have the unfortunate situation where the displayName would
    // refer to "Option" when it is an option. For these, string it out, only using when actually
    // not a top-level element to be used
    return (typeDef.displayName && !INFO_WRAP.some((i) => typeDef.displayName === i))
        ? typeDef.displayName
        : encodeType(registry, typeDef);
}
function withTypeString(registry, typeDef) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectSpread */ .Z)({}, typeDef, {
        type: encodeType(registry, typeDef, false)
    });
}


/***/ }),

/***/ 60045:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   s: () => (/* binding */ getTypeDef)
/* harmony export */ });
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(20046);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53393);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52906);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(53472);
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3754);
/* harmony import */ var _typeSplit_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(38280);




const KNOWN_INTERNALS = ['_alias', '_fallback'];
function getTypeString(typeOrObj) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .H)(typeOrObj)
        ? typeOrObj.toString()
        : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringify */ .P)(typeOrObj);
}
function isRustEnum(details) {
    const values = Object.values(details);
    if (values.some((v) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isNumber */ .h)(v))) {
        if (!values.every((v) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isNumber */ .h)(v) && v >= 0 && v <= 255)) {
            throw new Error('Invalid number-indexed enum definition');
        }
        return false;
    }
    return true;
}
function _decodeEnum(value, details, count, fallbackType) {
    value.info = _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Enum;
    value.fallbackType = fallbackType;
    // not as pretty, but remain compatible with oo7 for both struct and Array types
    if (Array.isArray(details)) {
        value.sub = details.map((name, index) => ({
            index,
            info: _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Plain,
            name,
            type: 'Null'
        }));
    }
    else if (isRustEnum(details)) {
        value.sub = Object.entries(details).map(([name, typeOrObj], index) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .objectSpread */ .Z)({}, getTypeDef(getTypeString(typeOrObj || 'Null'), { name }, count), { index }));
    }
    else {
        value.sub = Object.entries(details).map(([name, index]) => ({
            index,
            info: _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Plain,
            name,
            type: 'Null'
        }));
    }
    return value;
}
function _decodeSet(value, details, fallbackType) {
    value.info = _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Set;
    value.fallbackType = fallbackType;
    value.length = details._bitLength;
    value.sub = Object
        .entries(details)
        .filter(([name]) => !name.startsWith('_'))
        .map(([name, index]) => ({
        index,
        info: _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Plain,
        name,
        type: 'Null'
    }));
    return value;
}
function _decodeStruct(value, type, _, count) {
    const parsed = JSON.parse(type);
    const keys = Object.keys(parsed);
    if (parsed._enum) {
        return _decodeEnum(value, parsed._enum, count, parsed._fallback);
    }
    else if (parsed._set) {
        return _decodeSet(value, parsed._set, parsed._fallback);
    }
    value.alias = parsed._alias
        ? new Map(Object.entries(parsed._alias))
        : undefined;
    value.fallbackType = parsed._fallback;
    value.sub = keys
        .filter((name) => !KNOWN_INTERNALS.includes(name))
        .map((name) => getTypeDef(getTypeString(parsed[name]), { name }, count));
    return value;
}
function _decodeFixedVec(value, type, _, count) {
    const max = type.length - 1;
    let index = -1;
    let inner = 0;
    for (let i = 1; (i < max) && (index === -1); i++) {
        switch (type[i]) {
            case ';': {
                if (inner === 0) {
                    index = i;
                }
                break;
            }
            case '[':
            case '(':
            case '<':
                inner++;
                break;
            case ']':
            case ')':
            case '>':
                inner--;
                break;
        }
    }
    if (index === -1) {
        throw new Error(`${type}: Unable to extract location of ';'`);
    }
    const vecType = type.substring(1, index);
    const [strLength, displayName] = type.substring(index + 1, max).split(';');
    const length = parseInt(strLength.trim(), 10);
    if (length > 2048) {
        throw new Error(`${type}: Only support for [Type; <length>], where length <= 2048`);
    }
    value.displayName = displayName;
    value.length = length;
    value.sub = getTypeDef(vecType, {}, count);
    return value;
}
function _decodeTuple(value, _, subType, count) {
    value.sub = subType.length === 0
        ? []
        : (0,_typeSplit_js__WEBPACK_IMPORTED_MODULE_5__/* .typeSplit */ .h)(subType).map((inner) => getTypeDef(inner, {}, count));
    return value;
}
function _decodeAnyInt(value, type, _, clazz) {
    const [strLength, displayName] = type.substring(clazz.length + 1, type.length - 1).split(',');
    const length = parseInt(strLength.trim(), 10);
    if ((length > 8192) || (length % 8)) {
        throw new Error(`${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
    }
    value.displayName = displayName;
    value.length = length;
    return value;
}
function _decodeInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, 'Int');
}
function _decodeUInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, 'UInt');
}
function _decodeDoNotConstruct(value, type, _) {
    const NAME_LENGTH = 'DoNotConstruct'.length;
    value.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
    return value;
}
function hasWrapper(type, [start, end]) {
    return (type.startsWith(start)) && (type.slice(-1 * end.length) === end);
}
const nestedExtraction = [
    ['[', ']', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.VecFixed, _decodeFixedVec],
    ['{', '}', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Struct, _decodeStruct],
    ['(', ')', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Tuple, _decodeTuple],
    // the inner for these are the same as tuple, multiple values
    ['BTreeMap<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.BTreeMap, _decodeTuple],
    ['HashMap<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.HashMap, _decodeTuple],
    ['Int<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Int, _decodeInt],
    ['Result<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Result, _decodeTuple],
    ['UInt<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.UInt, _decodeUInt],
    ['DoNotConstruct<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.DoNotConstruct, _decodeDoNotConstruct]
];
const wrappedExtraction = [
    ['BTreeSet<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.BTreeSet],
    ['Compact<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Compact],
    ['Linkage<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Linkage],
    ['Opaque<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.WrapperOpaque],
    ['Option<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Option],
    ['Range<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Range],
    ['RangeInclusive<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.RangeInclusive],
    ['Vec<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Vec],
    ['WrapperKeepOpaque<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.WrapperKeepOpaque],
    ['WrapperOpaque<', '>', _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.WrapperOpaque]
];
function extractSubType(type, [start, end]) {
    return type.substring(start.length, type.length - end.length);
}
function getTypeDef(_type, { displayName, name } = {}, count = 0) {
    // create the type via Type, allowing types to be sanitized
    const type = (0,_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_6__/* .sanitize */ .Nw)(_type);
    const value = { displayName, info: _types_index_js__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Plain, name, type };
    if (++count > 64) {
        throw new Error('getTypeDef: Maximum nested limit reached');
    }
    const nested = nestedExtraction.find((nested) => hasWrapper(type, nested));
    if (nested) {
        value.info = nested[2];
        return nested[3](value, type, extractSubType(type, nested), count);
    }
    const wrapped = wrappedExtraction.find((wrapped) => hasWrapper(type, wrapped));
    if (wrapped) {
        value.info = wrapped[2];
        value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
    }
    return value;
}


/***/ }),

/***/ 38280:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   h: () => (/* binding */ typeSplit)
/* harmony export */ });
function typeSplit(type) {
    const result = [];
    // these are the depths of the various tokens: <, [, {, (
    let c = 0;
    let f = 0;
    let s = 0;
    let t = 0;
    // current start position
    let start = 0;
    for (let i = 0, count = type.length; i < count; i++) {
        switch (type[i]) {
            // if we are not nested, add the type
            case ',': {
                if (!(c || f || s || t)) {
                    result.push(type.substring(start, i).trim());
                    start = i + 1;
                }
                break;
            }
            // adjust compact/vec (and friends) depth
            case '<':
                c++;
                break;
            case '>':
                c--;
                break;
            // adjust fixed vec depths
            case '[':
                f++;
                break;
            case ']':
                f--;
                break;
            // adjust struct depth
            case '{':
                s++;
                break;
            case '}':
                s--;
                break;
            // adjust tuple depth
            case '(':
                t++;
                break;
            case ')':
                t--;
                break;
        }
    }
    // ensure we have all the terminators taken care of
    if (c || f || s || t) {
        throw new Error(`Invalid definition (missing terminators) found in ${type}`);
    }
    // the final leg of the journey
    result.push(type.substring(start, type.length).trim());
    return result;
}


/***/ }),

/***/ 69200:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   w: () => (/* binding */ mapXcmTypes)
/* harmony export */ });
/* unused harmony export XCM_MAPPINGS */
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53472);

const XCM_MAPPINGS = ['AssetInstance', 'Fungibility', 'Junction', 'Junctions', 'MultiAsset', 'MultiAssetFilter', 'MultiLocation', 'Response', 'WildFungibility', 'WildMultiAsset', 'Xcm', 'XcmError', 'XcmOrder'];
function mapXcmTypes(version) {
    return XCM_MAPPINGS.reduce((all, key) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .objectSpread */ .Z)(all, { [key]: `${key}${version}` }), {});
}


/***/ }),

/***/ 55597:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Xn: () => (/* binding */ getSpecAlias),
  oR: () => (/* binding */ getSpecExtensions),
  ve: () => (/* binding */ getSpecHasher),
  KM: () => (/* binding */ getSpecRpc),
  eH: () => (/* binding */ getSpecRuntime),
  kh: () => (/* binding */ getSpecTypes),
  ur: () => (/* binding */ getUpgradeVersion)
});

// NAMESPACE OBJECT: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/upgrades/e2e/index.js
var e2e_namespaceObject = {};
__webpack_require__.r(e2e_namespaceObject);
__webpack_require__.d(e2e_namespaceObject, {
  kusama: () => (upgrades),
  polkadot: () => (polkadot_upgrades),
  westend: () => (westend_upgrades)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bn/toBn.js
var toBn = __webpack_require__(54556);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/chain/index.js
const typesChain = {};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/spec/centrifuge-chain.js
const sharedTypes = {
    // Anchor
    AnchorData: {
        anchoredBlock: 'u64',
        docRoot: 'H256',
        id: 'H256'
    },
    DispatchErrorModule: 'DispatchErrorModuleU8',
    PreCommitData: {
        expirationBlock: 'u64',
        identity: 'H256',
        signingRoot: 'H256'
    },
    // Fees
    Fee: {
        key: 'Hash',
        price: 'Balance'
    },
    // MultiAccount
    MultiAccountData: {
        deposit: 'Balance',
        depositor: 'AccountId',
        signatories: 'Vec<AccountId>',
        threshold: 'u16'
    },
    // Bridge
    ChainId: 'u8',
    DepositNonce: 'u64',
    ResourceId: '[u8; 32]',
    'chainbridge::ChainId': 'u8',
    // NFT
    RegistryId: 'H160',
    TokenId: 'U256',
    AssetId: {
        registryId: 'RegistryId',
        tokenId: 'TokenId'
    },
    AssetInfo: {
        metadata: 'Bytes'
    },
    MintInfo: {
        anchorId: 'Hash',
        proofs: 'Vec<ProofMint>',
        staticHashes: '[Hash; 3]'
    },
    Proof: {
        leafHash: 'H256',
        sortedHashes: 'H256'
    },
    ProofMint: {
        hashes: 'Vec<Hash>',
        property: 'Bytes',
        salt: '[u8; 32]',
        value: 'Bytes'
    },
    RegistryInfo: {
        fields: 'Vec<Bytes>',
        ownerCanBurn: 'bool'
    },
    ProxyType: {
        _enum: [
            'Any',
            'NonTransfer',
            'Governance',
            'Staking',
            'NonProxy'
        ]
    }
};
const standaloneTypes = {
    ...sharedTypes,
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'LookupSource',
    LookupSource: 'IndicesLookupSource',
    Multiplier: 'Fixed64',
    RefCount: 'RefCountTo259'
};
const versioned = [
    {
        minmax: [240, 243],
        types: {
            ...standaloneTypes,
            ProxyType: {
                _enum: [
                    'Any',
                    'NonTransfer',
                    'Governance',
                    'Staking',
                    'Vesting'
                ]
            }
        }
    },
    {
        minmax: [244, 999],
        types: { ...standaloneTypes }
    },
    {
        minmax: [1000, undefined],
        types: { ...sharedTypes }
    }
];

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-create@10.11.2/node_modules/@polkadot/types-create/util/xcm.js
var xcm = __webpack_require__(69200);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/spec/kusama.js

const kusama_sharedTypes = {
    CompactAssignments: 'CompactAssignmentsWith24',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith24',
    Keys: 'SessionKeys6',
    ProxyType: {
        _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'IdentityJudgement', 'CancelProxy', 'Auction']
    },
    Weight: 'WeightV1'
};
const addrIndicesTypes = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'LookupSource',
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys5',
    LookupSource: 'IndicesLookupSource',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const addrAccountIdTypes = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys5',
    LookupSource: 'AccountId',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const kusama_versioned = [
    {
        // 1020 is first CC3
        minmax: [1019, 1031],
        types: {
            ...addrIndicesTypes,
            BalanceLock: 'BalanceLockTo212',
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchError: 'DispatchErrorTo198',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            IdentityInfo: 'IdentityInfoTo198',
            Keys: 'SessionKeys5',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            ReferendumInfo: 'ReferendumInfoTo239',
            Scheduled: 'ScheduledTo254',
            SlashingSpans: 'SlashingSpansTo204',
            StakingLedger: 'StakingLedgerTo223',
            Votes: 'VotesTo230',
            Weight: 'u32'
        }
    },
    {
        minmax: [1032, 1042],
        types: {
            ...addrIndicesTypes,
            BalanceLock: 'BalanceLockTo212',
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            Keys: 'SessionKeys5',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            ReferendumInfo: 'ReferendumInfoTo239',
            Scheduled: 'ScheduledTo254',
            SlashingSpans: 'SlashingSpansTo204',
            StakingLedger: 'StakingLedgerTo223',
            Votes: 'VotesTo230',
            Weight: 'u32'
        }
    },
    {
        // actual at 1045 (1043-1044 is dev)
        minmax: [1043, 1045],
        types: {
            ...addrIndicesTypes,
            BalanceLock: 'BalanceLockTo212',
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            Keys: 'SessionKeys5',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            ReferendumInfo: 'ReferendumInfoTo239',
            Scheduled: 'ScheduledTo254',
            StakingLedger: 'StakingLedgerTo223',
            Votes: 'VotesTo230',
            Weight: 'u32'
        }
    },
    {
        minmax: [1046, 1049],
        types: {
            ...kusama_sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            ReferendumInfo: 'ReferendumInfoTo239',
            Scheduled: 'ScheduledTo254',
            StakingLedger: 'StakingLedgerTo223',
            Weight: 'u32'
        }
    },
    {
        minmax: [1050, 1054],
        types: {
            ...kusama_sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            ReferendumInfo: 'ReferendumInfoTo239',
            Scheduled: 'ScheduledTo254',
            StakingLedger: 'StakingLedgerTo240',
            Weight: 'u32'
        }
    },
    {
        minmax: [1055, 1056],
        types: {
            ...kusama_sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            Scheduled: 'ScheduledTo254',
            StakingLedger: 'StakingLedgerTo240',
            Weight: 'u32'
        }
    },
    {
        minmax: [1057, 1061],
        types: {
            ...kusama_sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            // Last 100% known problematic runtime range - this quite possibly need to
            // apply to more runtime ranges that follow, we just don't know how far this
            // should be applied to
            //
            // TL;DR whack-a-mole since this was not histrically checked
            //
            // See https://github.com/polkadot-js/api/issues/5618#issuecomment-1530970316
            Scheduled: 'ScheduledTo254'
        }
    },
    {
        minmax: [1062, 2012],
        types: {
            ...kusama_sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: 'CompactAssignmentsTo257',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259'
        }
    },
    {
        minmax: [2013, 2022],
        types: {
            ...kusama_sharedTypes,
            ...addrAccountIdTypes,
            CompactAssignments: 'CompactAssignmentsTo257',
            RefCount: 'RefCountTo259'
        }
    },
    {
        minmax: [2023, 2024],
        types: {
            ...kusama_sharedTypes,
            ...addrAccountIdTypes,
            RefCount: 'RefCountTo259'
        }
    },
    {
        minmax: [2025, 2027],
        types: {
            ...kusama_sharedTypes,
            ...addrAccountIdTypes
        }
    },
    {
        minmax: [2028, 2029],
        types: {
            ...kusama_sharedTypes,
            AccountInfo: 'AccountInfoWithDualRefCount',
            CompactAssignments: 'CompactAssignmentsWith16',
            RawSolution: 'RawSolutionWith16'
        }
    },
    {
        minmax: [2030, 9000],
        types: {
            ...kusama_sharedTypes,
            CompactAssignments: 'CompactAssignmentsWith16',
            RawSolution: 'RawSolutionWith16'
        }
    },
    {
        minmax: [9010, 9099],
        types: {
            ...kusama_sharedTypes,
            ...(0,xcm/* mapXcmTypes */.w)('V0')
        }
    },
    {
        // jump from 9100 to 9110, however align with Rococo
        minmax: [9100, 9105],
        types: {
            ...kusama_sharedTypes,
            ...(0,xcm/* mapXcmTypes */.w)('V1')
        }
    },
    {
        // metadata v14
        minmax: [9106, undefined],
        types: {
            Weight: 'WeightV1'
        }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/spec/node.js
const node_versioned = [
    {
        minmax: [0, undefined],
        types: {
            // nothing, API tracks master
            // (v2 weights are not yet the default)
            Weight: 'WeightV2'
        }
    }
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/spec/node-template.js
const node_template_versioned = [
    {
        minmax: [0, undefined],
        types: {
            // nothing, API tracks master
            // (v2 weights are not yet the default)
            Weight: 'WeightV2'
        }
    }
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/spec/polkadot.js
const polkadot_sharedTypes = {
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys6',
    ProxyType: {
        _enum: {
            Any: 0,
            NonTransfer: 1,
            Governance: 2,
            Staking: 3,
            UnusedSudoBalances: 4,
            IdentityJudgement: 5,
            CancelProxy: 6,
            Auction: 7
        }
    },
    Weight: 'WeightV1'
};
const polkadot_addrAccountIdTypes = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    Keys: 'SessionKeys5',
    LookupSource: 'AccountId',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const polkadot_versioned = [
    {
        minmax: [0, 12],
        types: {
            ...polkadot_sharedTypes,
            ...polkadot_addrAccountIdTypes,
            CompactAssignments: 'CompactAssignmentsTo257',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259'
        }
    },
    {
        minmax: [13, 22],
        types: {
            ...polkadot_sharedTypes,
            ...polkadot_addrAccountIdTypes,
            CompactAssignments: 'CompactAssignmentsTo257',
            RefCount: 'RefCountTo259'
        }
    },
    {
        minmax: [23, 24],
        types: {
            ...polkadot_sharedTypes,
            ...polkadot_addrAccountIdTypes,
            RefCount: 'RefCountTo259'
        }
    },
    {
        minmax: [25, 27],
        types: {
            ...polkadot_sharedTypes,
            ...polkadot_addrAccountIdTypes
        }
    },
    {
        minmax: [28, 29],
        types: {
            ...polkadot_sharedTypes,
            AccountInfo: 'AccountInfoWithDualRefCount'
        }
    },
    {
        minmax: [30, 9109],
        types: {
            ...polkadot_sharedTypes
        }
    },
    {
        // metadata v14
        minmax: [9110, undefined],
        types: {
            Weight: 'WeightV1'
        }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/spec/rococo.js

/* eslint-disable sort-keys */
const rococo_sharedTypes = {
    DispatchErrorModule: 'DispatchErrorModuleU8',
    FullIdentification: '()', // No staking, only session (as per config)
    Keys: 'SessionKeys7B',
    Weight: 'WeightV1'
};
const rococo_versioned = [
    {
        minmax: [0, 200],
        types: {
            ...rococo_sharedTypes,
            AccountInfo: 'AccountInfoWithDualRefCount',
            Address: 'AccountId',
            LookupSource: 'AccountId'
        }
    },
    {
        minmax: [201, 214],
        types: {
            ...rococo_sharedTypes,
            AccountInfo: 'AccountInfoWithDualRefCount'
        }
    },
    {
        minmax: [215, 228],
        types: {
            ...rococo_sharedTypes,
            Keys: 'SessionKeys6'
        }
    },
    {
        minmax: [229, 9099],
        types: {
            ...rococo_sharedTypes,
            ...(0,xcm/* mapXcmTypes */.w)('V0')
        }
    },
    {
        minmax: [9100, 9105],
        types: {
            ...rococo_sharedTypes,
            ...(0,xcm/* mapXcmTypes */.w)('V1')
        }
    },
    {
        // metadata v14
        minmax: [9106, undefined],
        types: {
            Weight: 'WeightV1'
        }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/spec/shell.js
const shell_versioned = [
    {
        minmax: [0, undefined],
        types: {
        // nothing, limited runtime
        }
    }
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/spec/statemine.js

const statemine_sharedTypes = {
    DispatchErrorModule: 'DispatchErrorModuleU8',
    TAssetBalance: 'u128',
    ProxyType: {
        _enum: [
            'Any',
            'NonTransfer',
            'CancelProxy',
            'Assets',
            'AssetOwner',
            'AssetManager',
            'Staking'
        ]
    },
    Weight: 'WeightV1'
};
const statemine_versioned = [
    {
        minmax: [0, 3],
        types: {
            // Enum was modified mid-flight -
            // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
            DispatchError: 'DispatchErrorPre6First',
            ...statemine_sharedTypes,
            ...(0,xcm/* mapXcmTypes */.w)('V0')
        }
    },
    {
        minmax: [4, 5],
        types: {
            // As above, see https://github.com/polkadot-js/api/issues/5301
            DispatchError: 'DispatchErrorPre6First',
            ...statemine_sharedTypes,
            ...(0,xcm/* mapXcmTypes */.w)('V1')
        }
    },
    {
        // metadata V14
        minmax: [500, 9999],
        types: {
            Weight: 'WeightV1',
            TAssetConversion: 'Option<AssetId>'
        }
    },
    {
        minmax: [10000, undefined],
        types: {
            Weight: 'WeightV1'
        }
    }
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/spec/statemint.js

const statemint_sharedTypes = {
    DispatchErrorModule: 'DispatchErrorModuleU8',
    TAssetBalance: 'u128',
    ProxyType: {
        _enum: [
            'Any',
            'NonTransfer',
            'CancelProxy',
            'Assets',
            'AssetOwner',
            'AssetManager',
            'Staking'
        ]
    },
    Weight: 'WeightV1'
};
const statemint_versioned = [
    {
        minmax: [0, 3],
        types: {
            // Enum was modified mid-flight -
            // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
            DispatchError: 'DispatchErrorPre6First',
            ...statemint_sharedTypes,
            ...(0,xcm/* mapXcmTypes */.w)('V0')
        }
    },
    {
        minmax: [4, 5],
        types: {
            // As above, see https://github.com/polkadot-js/api/issues/5301
            DispatchError: 'DispatchErrorPre6First',
            ...statemint_sharedTypes,
            ...(0,xcm/* mapXcmTypes */.w)('V1')
        }
    },
    {
        // metadata V14
        minmax: [500, undefined],
        types: {
            Weight: 'WeightV1',
            TAssetConversion: 'Option<AssetId>'
        }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/spec/westend.js

const westend_sharedTypes = {
    // 16 validators
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    // general
    Keys: 'SessionKeys6',
    ProxyType: {
        _enum: ['Any', 'NonTransfer', 'Staking', 'SudoBalances', 'IdentityJudgement', 'CancelProxy']
    },
    Weight: 'WeightV1'
};
const westend_addrAccountIdTypes = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    LookupSource: 'AccountId',
    Keys: 'SessionKeys5',
    RawSolution: 'RawSolutionWith16',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const westend_versioned = [
    {
        minmax: [1, 2],
        types: {
            ...westend_sharedTypes,
            ...westend_addrAccountIdTypes,
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            Multiplier: 'Fixed64',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259',
            Weight: 'u32'
        }
    },
    {
        minmax: [3, 22],
        types: {
            ...westend_sharedTypes,
            ...westend_addrAccountIdTypes,
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            OpenTip: 'OpenTipTo225',
            RefCount: 'RefCountTo259'
        }
    },
    {
        minmax: [23, 42],
        types: {
            ...westend_sharedTypes,
            ...westend_addrAccountIdTypes,
            CompactAssignments: 'CompactAssignmentsTo257',
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            RefCount: 'RefCountTo259'
        }
    },
    {
        minmax: [43, 44],
        types: {
            ...westend_sharedTypes,
            ...westend_addrAccountIdTypes,
            DispatchInfo: 'DispatchInfoTo244',
            Heartbeat: 'HeartbeatTo244',
            RefCount: 'RefCountTo259'
        }
    },
    {
        minmax: [45, 47],
        types: {
            ...westend_sharedTypes,
            ...westend_addrAccountIdTypes
        }
    },
    {
        minmax: [48, 49],
        types: {
            ...westend_sharedTypes,
            AccountInfo: 'AccountInfoWithDualRefCount'
        }
    },
    {
        minmax: [50, 9099],
        types: {
            ...westend_sharedTypes,
            ...(0,xcm/* mapXcmTypes */.w)('V0')
        }
    },
    {
        minmax: [9100, 9105],
        types: {
            ...westend_sharedTypes,
            ...(0,xcm/* mapXcmTypes */.w)('V1')
        }
    },
    {
        // metadata v14
        minmax: [9106, undefined],
        types: {
            Weight: 'WeightV1'
        }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/spec/westmint.js

const westmint_sharedTypes = {
    DispatchErrorModule: 'DispatchErrorModuleU8',
    TAssetBalance: 'u128',
    ProxyType: {
        _enum: [
            'Any',
            'NonTransfer',
            'CancelProxy',
            'Assets',
            'AssetOwner',
            'AssetManager',
            'Staking'
        ]
    },
    Weight: 'WeightV1'
};
const westmint_versioned = [
    {
        minmax: [0, 3],
        types: {
            // Enum was modified mid-flight -
            // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
            DispatchError: 'DispatchErrorPre6First',
            ...westmint_sharedTypes,
            ...(0,xcm/* mapXcmTypes */.w)('V0')
        }
    },
    {
        minmax: [4, 5],
        types: {
            // As above, see https://github.com/polkadot-js/api/issues/5301
            DispatchError: 'DispatchErrorPre6First',
            ...westmint_sharedTypes,
            ...(0,xcm/* mapXcmTypes */.w)('V1')
        }
    },
    {
        // metadata V14
        minmax: [500, 9434],
        types: {
            Weight: 'WeightV1',
            TAssetConversion: 'Option<AssetId>'
        }
    },
    {
        minmax: [9435, undefined],
        types: {
            Weight: 'WeightV1'
        }
    }
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/spec/index.js











const typesSpec = {
    'centrifuge-chain': versioned,
    kusama: kusama_versioned,
    node: node_versioned,
    'node-template': node_template_versioned,
    polkadot: polkadot_versioned,
    rococo: rococo_versioned,
    shell: shell_versioned,
    statemine: statemine_versioned,
    statemint: statemint_versioned,
    westend: westend_versioned,
    westmint: westmint_versioned
};

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+networks@12.6.2/node_modules/@polkadot/networks/interfaces.js + 5 modules
var interfaces = __webpack_require__(94646);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/hex/toU8a.js
var toU8a = __webpack_require__(82025);
// EXTERNAL MODULE: ./node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js
var bn = __webpack_require__(39098);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/upgrades/e2e/kusama.js
const upgrades = [
    [
        0,
        1020,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        26669,
        1021,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        38245,
        1022,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        54248,
        1023,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        59659,
        1024,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        67651,
        1025,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        82191,
        1027,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        83238,
        1028,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        101503,
        1029,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        203466,
        1030,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        295787,
        1031,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        461692,
        1032,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        504329,
        1033,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        569327,
        1038,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        587687,
        1039,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        653183,
        1040,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        693488,
        1042,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        901442,
        1045,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1375086,
        1050,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1445458,
        1051,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1472960,
        1052,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1475648,
        1053,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1491596,
        1054,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1574408,
        1055,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2064961,
        1058,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2201991,
        1062,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2671528,
        2005,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2704202,
        2007,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2728002,
        2008,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2832534,
        2011,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2962294,
        2012,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3240000,
        2013,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3274408,
        2015,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3323565,
        2019,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3534175,
        2022,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3860281,
        2023,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4143129,
        2024,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4401242,
        2025,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4841367,
        2026,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5961600,
        2027,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6137912,
        2028,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6561855,
        2029,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7100891,
        2030,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7468792,
        9010,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7668600,
        9030,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7812476,
        9040,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8010981,
        9050,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8073833,
        9070,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8555825,
        9080,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8945245,
        9090,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9611377,
        9100,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9625129,
        9111,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9866422,
        9122,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10403784,
        9130,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10960765,
        9150,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11006614,
        9151,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11404482,
        9160,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11601803,
        9170,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12008022,
        9180,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12405451,
        9190,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12665416,
        9200,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12909508,
        9220,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        13109752,
        9230,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        13555777,
        9250,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        13727747,
        9260,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        14248044,
        9271,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        14433840,
        9280,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        14645900,
        9291,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15048375,
        9300,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15426015,
        9320,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15680713,
        9340,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15756296,
        9350,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ]
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/upgrades/e2e/polkadot.js
const polkadot_upgrades = [
    [
        0,
        0,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        29231,
        1,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        188836,
        5,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        199405,
        6,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        214264,
        7,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        244358,
        8,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        303079,
        9,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        314201,
        10,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        342400,
        11,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        443963,
        12,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        528470,
        13,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        687751,
        14,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        746085,
        15,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        787923,
        16,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        799302,
        17,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1205128,
        18,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1603423,
        23,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1733218,
        24,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2005673,
        25,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2436698,
        26,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3613564,
        27,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3899547,
        28,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4345767,
        29,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4876134,
        30,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5661442,
        9050,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6321619,
        9080,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6713249,
        9090,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7217907,
        9100,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7229126,
        9110,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7560558,
        9122,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8115869,
        9140,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8638103,
        9151,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9280179,
        9170,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9738717,
        9180,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10156856,
        9190,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10458576,
        9200,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10655116,
        9220,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10879371,
        9230,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11328884,
        9250,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11532856,
        9260,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11933818,
        9270,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12217535,
        9280,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ],
    [
        12245277,
        9281,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ],
    [
        12532644,
        9291,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ],
    [
        12876189,
        9300,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ]
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/upgrades/e2e/westend.js
const westend_upgrades = [
    [
        214356,
        4,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        392764,
        7,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        409740,
        8,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        809976,
        20,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        877581,
        24,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        879238,
        25,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        889472,
        26,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        902937,
        27,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        932751,
        28,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        991142,
        29,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1030162,
        31,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1119657,
        32,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1199282,
        33,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1342534,
        34,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1392263,
        35,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1431703,
        36,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1433369,
        37,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1490972,
        41,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2087397,
        43,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2316688,
        44,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2549864,
        45,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3925782,
        46,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3925843,
        47,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4207800,
        48,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4627944,
        49,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5124076,
        50,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5478664,
        900,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5482450,
        9000,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5584305,
        9010,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5784566,
        9030,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5879822,
        9031,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5896856,
        9032,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5897316,
        9033,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6117927,
        9050,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6210274,
        9070,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6379314,
        9080,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6979141,
        9090,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7568453,
        9100,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7766394,
        9111,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7911691,
        9120,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7968866,
        9121,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7982889,
        9122,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8514322,
        9130,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9091726,
        9140,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9091774,
        9150,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9406726,
        9160,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9921066,
        9170,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10007115,
        9180,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10480973,
        9190,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10578091,
        9200,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10678509,
        9210,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10811001,
        9220,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11096116,
        9230,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11409279,
        9250,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11584820,
        9251,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11716837,
        9260,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11876919,
        9261,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11987927,
        9270,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12077324,
        9271,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12301871,
        9280,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12604343,
        9290,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12841034,
        9300,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13128237,
        9310,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13272363,
        9320,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13483497,
        9330,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13649433,
        9340,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13761100,
        9350,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ]
];

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/upgrades/e2e/index.js




;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/upgrades/index.js



const NET_EXTRA = {
    westend: {
        genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']
    }
};
/** @internal */
function mapRaw([network, versions]) {
    const chain = interfaces/* selectableNetworks */.uG.find((n) => n.network === network) || NET_EXTRA[network];
    if (!chain) {
        throw new Error(`Unable to find info for chain ${network}`);
    }
    return {
        genesisHash: (0,toU8a/* hexToU8a */.G)(chain.genesisHash[0]),
        network,
        versions: versions.map(([blockNumber, specVersion, apis]) => ({
            apis,
            blockNumber: new bn(blockNumber),
            specVersion: new bn(specVersion)
        }))
    };
}
const upgrades_upgrades = Object.entries(e2e_namespaceObject).map(mapRaw);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types-known@10.11.2/node_modules/@polkadot/types-known/util.js




/**
 * @description Perform the callback function using the stringified spec/chain
 * @internal
 * */
function withNames(chainName, specName, fn) {
    return fn(chainName.toString(), specName.toString());
}
/**
 * @descriptionFflatten a VersionedType[] into a Record<string, string>
 * @internal
 * */
function filterVersions(versions = [], specVersion) {
    return versions
        .filter(({ minmax: [min, max] }) => (min === undefined || min === null || specVersion >= min) &&
        (max === undefined || max === null || specVersion <= max))
        .reduce((result, { types }) => ({ ...result, ...types }), {});
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable signed extensions (ready for registration)
 */
function getSpecExtensions({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => ({
        ...(knownTypes.typesBundle?.spec?.[s]?.signedExtensions ?? {}),
        ...(knownTypes.typesBundle?.chain?.[c]?.signedExtensions ?? {})
    }));
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable types (ready for registration)
 */
function getSpecTypes({ knownTypes }, chainName, specName, specVersion) {
    const _specVersion = (0,toBn/* bnToBn */.G)(specVersion).toNumber();
    return withNames(chainName, specName, (c, s) => ({
        // The order here is always, based on -
        //   - spec then chain
        //   - typesBundle takes higher precedence
        //   - types is the final catch-all override
        ...filterVersions(typesSpec[s], _specVersion),
        ...filterVersions(typesChain[c], _specVersion),
        ...filterVersions(knownTypes.typesBundle?.spec?.[s]?.types, _specVersion),
        ...filterVersions(knownTypes.typesBundle?.chain?.[c]?.types, _specVersion),
        ...(knownTypes.typesSpec?.[s] ?? {}),
        ...(knownTypes.typesChain?.[c] ?? {}),
        ...(knownTypes.types ?? {})
    }));
}
/**
 * @description Based on the chain or spec, return the hasher used
 */
function getSpecHasher({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => knownTypes.hasher ||
        knownTypes.typesBundle?.chain?.[c]?.hasher ||
        knownTypes.typesBundle?.spec?.[s]?.hasher ||
        null);
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable rpc definitions (ready for registration)
 */
function getSpecRpc({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => ({
        ...(knownTypes.typesBundle?.spec?.[s]?.rpc ?? {}),
        ...(knownTypes.typesBundle?.chain?.[c]?.rpc ?? {})
    }));
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable runtime definitions (ready for registration)
 */
function getSpecRuntime({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => ({
        ...(knownTypes.typesBundle?.spec?.[s]?.runtime ?? {}),
        ...(knownTypes.typesBundle?.chain?.[c]?.runtime ?? {})
    }));
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable alias definitions (ready for registration)
 */
function getSpecAlias({ knownTypes }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => ({
        // as per versions, first spec, then chain then finally non-versioned
        ...(knownTypes.typesBundle?.spec?.[s]?.alias ?? {}),
        ...(knownTypes.typesBundle?.chain?.[c]?.alias ?? {}),
        ...(knownTypes.typesAlias ?? {})
    }));
}
/**
 * @description Returns a version record for known chains where upgrades are being tracked
 */
function getUpgradeVersion(genesisHash, blockNumber) {
    const known = upgrades_upgrades.find((u) => genesisHash.eq(u.genesisHash));
    return known
        ? [
            known.versions.reduce((last, version) => {
                return blockNumber.gt(version.blockNumber)
                    ? version
                    : last;
            }, undefined),
            known.versions.find((version) => blockNumber.lte(version.blockNumber))
        ]
        : [undefined, undefined];
}


/***/ }),

/***/ 34904:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Y: () => (/* binding */ lazyVariants)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56810);

function lazyVariants(lookup, { type }, getName, creator) {
    const result = {};
    const variants = lookup.getSiType(type).def.asVariant.variants;
    for (let i = 0, count = variants.length; i < count; i++) {
        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .lazyMethod */ .W)(result, variants[i], creator, getName, i);
    }
    return result;
}


/***/ }),

/***/ 90884:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  P: () => (/* binding */ TypeRegistry)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/native/Json.js
var Json = __webpack_require__(9797);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/native/Raw.js
var Raw = __webpack_require__(9088);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/base/DoNotConstruct.js
var DoNotConstruct = __webpack_require__(53542);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-create@10.11.2/node_modules/@polkadot/types-create/create/class.js
var create_class = __webpack_require__(35705);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-create@10.11.2/node_modules/@polkadot/types-create/create/type.js
var create_type = __webpack_require__(17140);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/logger.js
var logger = __webpack_require__(63985);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/string/camelCase.js
var camelCase = __webpack_require__(36600);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/lazy.js
var lazy = __webpack_require__(56810);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/object/spread.js
var spread = __webpack_require__(53472);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/format/formatBalance.js
var formatBalance = __webpack_require__(63603);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/assert.js
var assert = __webpack_require__(5035);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/u8a.js
var u8a = __webpack_require__(38589);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/number.js
var number = __webpack_require__(52906);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/function.js
var is_function = __webpack_require__(73092);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/string.js
var string = __webpack_require__(30518);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/stringify.js
var stringify = __webpack_require__(53393);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/bn.js
var bn = __webpack_require__(16996);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bn/consts.js
var consts = __webpack_require__(38252);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/blake2/asU8a.js + 2 modules
var asU8a = __webpack_require__(89753);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/signedExtensions/emptyCheck.js
const emptyCheck = {
    extrinsic: {},
    payload: {}
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/signedExtensions/polkadot.js

const polkadot = {
    LimitParathreadCommits: emptyCheck,
    OnlyStakingAndClaims: emptyCheck,
    PrevalidateAttests: emptyCheck,
    RestrictFunctionality: emptyCheck,
    TransactionCallFilter: emptyCheck,
    ValidateDoubleVoteReports: emptyCheck
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/signedExtensions/shell.js

const shell = {
    DisallowSigned: emptyCheck
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/signedExtensions/statemint.js
const statemint = {
    ChargeAssetTxPayment: {
        extrinsic: {
            tip: 'Compact<Balance>',
            // eslint-disable-next-line sort-keys
            assetId: 'TAssetConversion'
        },
        payload: {}
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/signedExtensions/substrate.js

const CheckMortality = {
    extrinsic: {
        era: 'ExtrinsicEra'
    },
    payload: {
        blockHash: 'Hash'
    }
};
const ChargeTransactionPayment = {
    extrinsic: {
        tip: 'Compact<Balance>'
    },
    payload: {}
};
const substrate = {
    ChargeTransactionPayment,
    CheckBlockGasLimit: emptyCheck,
    CheckEra: CheckMortality,
    CheckGenesis: {
        extrinsic: {},
        payload: {
            genesisHash: 'Hash'
        }
    },
    CheckMortality,
    CheckNonZeroSender: emptyCheck,
    CheckNonce: {
        extrinsic: {
            nonce: 'Compact<Index>'
        },
        payload: {}
    },
    CheckSpecVersion: {
        extrinsic: {},
        payload: {
            specVersion: 'u32'
        }
    },
    CheckTxVersion: {
        extrinsic: {},
        payload: {
            transactionVersion: 'u32'
        }
    },
    CheckVersion: {
        extrinsic: {},
        payload: {
            specVersion: 'u32'
        }
    },
    CheckWeight: emptyCheck,
    LockStakingStatus: emptyCheck,
    SkipCheckIfFeeless: ChargeTransactionPayment,
    ValidateEquivocationReport: emptyCheck
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/signedExtensions/index.js





const allExtensions = (0,spread/* objectSpread */.Z)({}, substrate, polkadot, shell, statemint);
const fallbackExtensions = [
    'CheckVersion',
    'CheckGenesis',
    'CheckEra',
    'CheckNonce',
    'CheckWeight',
    'ChargeTransactionPayment',
    'CheckBlockGasLimit'
];
function findUnknownExtensions(extensions, userExtensions = {}) {
    const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
    return extensions.filter((k) => !names.includes(k));
}
function expandExtensionTypes(extensions, type, userExtensions = {}) {
    return extensions
        // Always allow user extensions first - these should provide overrides
        .map((k) => userExtensions[k] || allExtensions[k])
        .filter((info) => !!info)
        .reduce((result, info) => (0,spread/* objectSpread */.Z)(result, info[type]), {});
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/generic/Event.js
var Event = __webpack_require__(1380);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/index.types.js + 26 modules
var index_types = __webpack_require__(33856);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/definitions.js + 132 modules
var definitions = __webpack_require__(87997);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/extrinsics/index.js + 1 modules
var extrinsics = __webpack_require__(66045);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/events/index.js
var events = __webpack_require__(23266);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/constants/index.js
var decorate_constants = __webpack_require__(24832);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/Metadata.js
var Metadata = __webpack_require__(50270);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/PortableRegistry/PortableRegistry.js
var PortableRegistry = __webpack_require__(14832);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/create/lazy.js
var create_lazy = __webpack_require__(34904);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/create/registry.js













const DEFAULT_FIRST_CALL_IDX = new Uint8Array(2);
const l = (0,logger/* logger */.k)('registry');
function sortDecimalStrings(a, b) {
    return parseInt(a, 10) - parseInt(b, 10);
}
function valueToString(v) {
    return v.toString();
}
function getFieldArgs(lookup, fields) {
    const count = fields.length;
    const args = new Array(count);
    for (let i = 0; i < count; i++) {
        args[i] = lookup.getTypeDef(fields[i].type).type;
    }
    return args;
}
function clearRecord(record) {
    const keys = Object.keys(record);
    for (let i = 0, count = keys.length; i < count; i++) {
        delete record[keys[i]];
    }
}
function getVariantStringIdx({ index }) {
    return index.toString();
}
function injectErrors(_, { lookup, pallets }, version, result) {
    clearRecord(result);
    for (let i = 0, count = pallets.length; i < count; i++) {
        const { errors, index, name } = pallets[i];
        if (errors.isSome) {
            const sectionName = (0,camelCase/* stringCamelCase */.yZ)(name);
            (0,lazy/* lazyMethod */.W)(result, version >= 12 ? index.toNumber() : i, () => (0,create_lazy/* lazyVariants */.Y)(lookup, errors.unwrap(), getVariantStringIdx, ({ docs, fields, index, name }) => ({
                args: getFieldArgs(lookup, fields),
                docs: docs.map(valueToString),
                fields,
                index: index.toNumber(),
                method: name.toString(),
                name: name.toString(),
                section: sectionName
            })));
        }
    }
}
function injectEvents(registry, { lookup, pallets }, version, result) {
    const filtered = pallets.filter(events/* filterEventsSome */.w);
    clearRecord(result);
    for (let i = 0, count = filtered.length; i < count; i++) {
        const { events, index, name } = filtered[i];
        (0,lazy/* lazyMethod */.W)(result, version >= 12 ? index.toNumber() : i, () => (0,create_lazy/* lazyVariants */.Y)(lookup, events.unwrap(), getVariantStringIdx, (variant) => {
            const meta = registry.createType('EventMetadataLatest', (0,spread/* objectSpread */.Z)({}, variant, { args: getFieldArgs(lookup, variant.fields) }));
            return class extends Event/* GenericEventData */.q {
                constructor(registry, value) {
                    super(registry, value, meta, (0,camelCase/* stringCamelCase */.yZ)(name), variant.name.toString());
                }
            };
        }));
    }
}
function injectExtrinsics(registry, { lookup, pallets }, version, result, mapping) {
    const filtered = pallets.filter(extrinsics/* filterCallsSome */.Uq);
    clearRecord(result);
    clearRecord(mapping);
    for (let i = 0, count = filtered.length; i < count; i++) {
        const { calls, index, name } = filtered[i];
        const sectionIndex = version >= 12 ? index.toNumber() : i;
        const sectionName = (0,camelCase/* stringCamelCase */.yZ)(name);
        const allCalls = calls.unwrap();
        (0,lazy/* lazyMethod */.W)(result, sectionIndex, () => (0,create_lazy/* lazyVariants */.Y)(lookup, allCalls, getVariantStringIdx, (variant) => (0,extrinsics/* createCallFunction */._W)(registry, lookup, variant, sectionName, sectionIndex)));
        const { path } = registry.lookup.getSiType(allCalls.type);
        // frame_system::pallet::Call / pallet_balances::pallet::Call / polkadot_runtime_parachains::configuration::pallet::Call /
        const palletIdx = path.findIndex((v) => v.eq('pallet'));
        if (palletIdx !== -1) {
            const name = (0,camelCase/* stringCamelCase */.yZ)(path
                .slice(0, palletIdx)
                .map((p, i) => i === 0
                // frame_system || pallet_balances
                ? p.replace(/^(frame|pallet)_/, '')
                : p)
                .join(' '));
            if (!mapping[name]) {
                mapping[name] = [sectionName];
            }
            else {
                mapping[name].push(sectionName);
            }
        }
    }
}
function extractProperties(registry, metadata) {
    const original = registry.getChainProperties();
    const constants = (0,decorate_constants/* decorateConstants */.U)(registry, metadata.asLatest, metadata.version);
    const ss58Format = constants['system'] && (constants['system']['sS58Prefix'] || constants['system']['ss58Prefix']);
    if (!ss58Format) {
        return original;
    }
    const { isEthereum, tokenDecimals, tokenSymbol } = original || {};
    return registry.createTypeUnsafe('ChainProperties', [{ isEthereum, ss58Format, tokenDecimals, tokenSymbol }]);
}
class TypeRegistry {
    __internal__chainProperties;
    __internal__classes = new Map();
    __internal__definitions = new Map();
    __internal__firstCallIndex = null;
    __internal__hasher = asU8a/* blake2AsU8a */.b;
    __internal__knownTypes = {};
    __internal__lookup;
    __internal__metadata;
    __internal__metadataVersion = 0;
    __internal__signedExtensions = fallbackExtensions;
    __internal__unknownTypes = new Map();
    __internal__userExtensions;
    __internal__knownDefaults;
    __internal__knownDefaultsEntries;
    __internal__knownDefinitions;
    __internal__metadataCalls = {};
    __internal__metadataErrors = {};
    __internal__metadataEvents = {};
    __internal__moduleMap = {};
    createdAtHash;
    constructor(createdAtHash) {
        this.__internal__knownDefaults = (0,spread/* objectSpread */.Z)({ Json: Json/* Json */.P, Metadata: Metadata/* Metadata */.S, PortableRegistry: PortableRegistry/* PortableRegistry */.b, Raw: Raw/* Raw */.N }, index_types);
        this.__internal__knownDefaultsEntries = Object.entries(this.__internal__knownDefaults);
        this.__internal__knownDefinitions = definitions;
        const allKnown = Object.values(this.__internal__knownDefinitions);
        for (let i = 0, count = allKnown.length; i < count; i++) {
            this.register(allKnown[i].types);
        }
        if (createdAtHash) {
            this.createdAtHash = this.createType('BlockHash', createdAtHash);
        }
    }
    get chainDecimals() {
        if (this.__internal__chainProperties?.tokenDecimals.isSome) {
            const allDecimals = this.__internal__chainProperties.tokenDecimals.unwrap();
            if (allDecimals.length) {
                return allDecimals.map((b) => b.toNumber());
            }
        }
        return [12];
    }
    get chainIsEthereum() {
        return this.__internal__chainProperties?.isEthereum.isTrue || false;
    }
    get chainSS58() {
        return this.__internal__chainProperties?.ss58Format.isSome
            ? this.__internal__chainProperties.ss58Format.unwrap().toNumber()
            : undefined;
    }
    get chainTokens() {
        if (this.__internal__chainProperties?.tokenSymbol.isSome) {
            const allTokens = this.__internal__chainProperties.tokenSymbol.unwrap();
            if (allTokens.length) {
                return allTokens.map(valueToString);
            }
        }
        return [formatBalance/* formatBalance */.a.getDefaults().unit];
    }
    get firstCallIndex() {
        return this.__internal__firstCallIndex || DEFAULT_FIRST_CALL_IDX;
    }
    /**
     * @description Returns true if the type is in a Compat format
     */
    isLookupType(value) {
        return /Lookup\d+$/.test(value);
    }
    /**
     * @description Creates a lookup string from the supplied id
     */
    createLookupType(lookupId) {
        return `Lookup${typeof lookupId === 'number' ? lookupId : lookupId.toNumber()}`;
    }
    get knownTypes() {
        return this.__internal__knownTypes;
    }
    get lookup() {
        return (0,assert/* assertReturn */.k8)(this.__internal__lookup, 'PortableRegistry has not been set on this registry');
    }
    get metadata() {
        return (0,assert/* assertReturn */.k8)(this.__internal__metadata, 'Metadata has not been set on this registry');
    }
    get unknownTypes() {
        return [...this.__internal__unknownTypes.keys()];
    }
    get signedExtensions() {
        return this.__internal__signedExtensions;
    }
    clearCache() {
        this.__internal__classes = new Map();
    }
    /**
     * @describe Creates an instance of the class
     */
    createClass(type) {
        return (0,create_class/* createClassUnsafe */.EW)(this, type);
    }
    /**
     * @describe Creates an instance of the class
     */
    createClassUnsafe(type) {
        return (0,create_class/* createClassUnsafe */.EW)(this, type);
    }
    /**
     * @description Creates an instance of a type as registered
     */
    createType(type, ...params) {
        return (0,create_type/* createTypeUnsafe */.z)(this, type, params);
    }
    /**
     * @description Creates an instance of a type as registered
     */
    createTypeUnsafe(type, params, options) {
        return (0,create_type/* createTypeUnsafe */.z)(this, type, params, options);
    }
    // find a specific call
    findMetaCall(callIndex) {
        const [section, method] = [callIndex[0], callIndex[1]];
        return (0,assert/* assertReturn */.k8)(this.__internal__metadataCalls[`${section}`] && this.__internal__metadataCalls[`${section}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section}, ${method}]/[${callIndex.toString()}]`);
    }
    // finds an error
    findMetaError(errorIndex) {
        const [section, method] = (0,u8a/* isU8a */.U)(errorIndex)
            ? [errorIndex[0], errorIndex[1]]
            : [
                errorIndex.index.toNumber(),
                (0,u8a/* isU8a */.U)(errorIndex.error)
                    ? errorIndex.error[0]
                    : errorIndex.error.toNumber()
            ];
        return (0,assert/* assertReturn */.k8)(this.__internal__metadataErrors[`${section}`] && this.__internal__metadataErrors[`${section}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section}, ${method}]/[${errorIndex.toString()}]`);
    }
    findMetaEvent(eventIndex) {
        const [section, method] = [eventIndex[0], eventIndex[1]];
        return (0,assert/* assertReturn */.k8)(this.__internal__metadataEvents[`${section}`] && this.__internal__metadataEvents[`${section}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section}, ${method}]/[${eventIndex.toString()}]`);
    }
    get(name, withUnknown, knownTypeDef) {
        return this.getUnsafe(name, withUnknown, knownTypeDef);
    }
    getUnsafe(name, withUnknown, knownTypeDef) {
        let Type = this.__internal__classes.get(name) || this.__internal__knownDefaults[name];
        // we have not already created the type, attempt it
        if (!Type) {
            const definition = this.__internal__definitions.get(name);
            let BaseType;
            // we have a definition, so create the class now (lazily)
            if (definition) {
                BaseType = (0,create_class/* createClassUnsafe */.EW)(this, definition);
            }
            else if (knownTypeDef) {
                BaseType = (0,create_class/* constructTypeClass */.z2)(this, knownTypeDef);
            }
            else if (withUnknown) {
                l.warn(`Unable to resolve type ${name}, it will fail on construction`);
                this.__internal__unknownTypes.set(name, true);
                BaseType = DoNotConstruct/* DoNotConstruct */.w.with(name);
            }
            if (BaseType) {
                // NOTE If we didn't extend here, we would have strange artifacts. An example is
                // Balance, with this, new Balance() instanceof u128 is true, but Balance !== u128
                // Additionally, we now pass through the registry, which is a link to ourselves
                Type = class extends BaseType {
                };
                this.__internal__classes.set(name, Type);
                // In the case of lookups, we also want to store the actual class against
                // the lookup name, instad of having to traverse again
                if (knownTypeDef && (0,number/* isNumber */.h)(knownTypeDef.lookupIndex)) {
                    this.__internal__classes.set(this.createLookupType(knownTypeDef.lookupIndex), Type);
                }
            }
        }
        return Type;
    }
    getChainProperties() {
        return this.__internal__chainProperties;
    }
    getClassName(Type) {
        // we cannot rely on export order (anymore, since babel/core 7.15.8), so in the case of
        // items such as u32 & U32, we get the lowercase versions here... not quite as optimal
        // (previously this used to be a simple find & return)
        const names = [];
        for (const [name, Clazz] of this.__internal__knownDefaultsEntries) {
            if (Type === Clazz) {
                names.push(name);
            }
        }
        for (const [name, Clazz] of this.__internal__classes.entries()) {
            if (Type === Clazz) {
                names.push(name);
            }
        }
        return names.length
            // both sort and reverse are done in-place
            // ['U32', 'u32'] -> ['u32', 'U32']
            ? names.sort().reverse()[0]
            : undefined;
    }
    getDefinition(typeName) {
        return this.__internal__definitions.get(typeName);
    }
    getModuleInstances(specName, moduleName) {
        return this.__internal__knownTypes?.typesBundle?.spec?.[specName.toString()]?.instances?.[moduleName] || this.__internal__moduleMap[moduleName];
    }
    getOrThrow(name) {
        const Clazz = this.get(name);
        if (!Clazz) {
            throw new Error(`type ${name} not found`);
        }
        return Clazz;
    }
    getOrUnknown(name) {
        return this.get(name, true);
    }
    getSignedExtensionExtra() {
        return expandExtensionTypes(this.__internal__signedExtensions, 'payload', this.__internal__userExtensions);
    }
    getSignedExtensionTypes() {
        return expandExtensionTypes(this.__internal__signedExtensions, 'extrinsic', this.__internal__userExtensions);
    }
    hasClass(name) {
        return this.__internal__classes.has(name) || !!this.__internal__knownDefaults[name];
    }
    hasDef(name) {
        return this.__internal__definitions.has(name);
    }
    hasType(name) {
        return !this.__internal__unknownTypes.get(name) && (this.hasClass(name) || this.hasDef(name));
    }
    hash(data) {
        return this.createType('CodecHash', this.__internal__hasher(data));
    }
    // eslint-disable-next-line no-dupe-class-members
    register(arg1, arg2) {
        // NOTE Constructors appear as functions here
        if ((0,is_function/* isFunction */.m)(arg1)) {
            this.__internal__classes.set(arg1.name, arg1);
        }
        else if ((0,string/* isString */.H)(arg1)) {
            if (!(0,is_function/* isFunction */.m)(arg2)) {
                throw new Error(`Expected class definition passed to '${arg1}' registration`);
            }
            else if (arg1 === arg2.toString()) {
                throw new Error(`Unable to register circular ${arg1} === ${arg1}`);
            }
            this.__internal__classes.set(arg1, arg2);
        }
        else {
            this.__internal__registerObject(arg1);
        }
    }
    __internal__registerObject = (obj) => {
        const entries = Object.entries(obj);
        for (let e = 0, count = entries.length; e < count; e++) {
            const [name, type] = entries[e];
            if ((0,is_function/* isFunction */.m)(type)) {
                // This _looks_ a bit funny, but `typeof Clazz === 'function'
                this.__internal__classes.set(name, type);
            }
            else {
                const def = (0,string/* isString */.H)(type)
                    ? type
                    : (0,stringify/* stringify */.P)(type);
                if (name === def) {
                    throw new Error(`Unable to register circular ${name} === ${def}`);
                }
                // we already have this type, remove the classes registered for it
                if (this.__internal__classes.has(name)) {
                    this.__internal__classes.delete(name);
                }
                this.__internal__definitions.set(name, def);
            }
        }
    };
    // sets the chain properties
    setChainProperties(properties) {
        if (properties) {
            this.__internal__chainProperties = properties;
        }
    }
    setHasher(hasher) {
        this.__internal__hasher = hasher || asU8a/* blake2AsU8a */.b;
    }
    setKnownTypes(knownTypes) {
        this.__internal__knownTypes = knownTypes;
    }
    setLookup(lookup) {
        this.__internal__lookup = lookup;
        // register all applicable types found
        lookup.register();
    }
    // register alias types alongside the portable/lookup setup
    // (we don't combine this into setLookup since that would/could
    // affect stand-along lookups, such as ABIs which don't have
    // actual on-chain metadata)
    __internal__registerLookup = (lookup) => {
        // attach the lookup before we register any types
        this.setLookup(lookup);
        // we detect based on runtime configuration
        let Weight = null;
        if (this.hasType('SpWeightsWeightV2Weight')) {
            // detection for WeightV2 type based on latest naming
            const weightv2 = this.createType('SpWeightsWeightV2Weight');
            Weight = weightv2.refTime && weightv2.proofSize
                // with both refTime & proofSize we use as-is (WeightV2)
                ? 'SpWeightsWeightV2Weight'
                // fallback to WeightV1 (WeightV1.5 is a struct, single field)
                : 'WeightV1';
        }
        else if (!(0,bn/* isBn */.H)(this.createType('Weight'))) {
            // where we have an already-supplied BN override, we don't clobber
            // it with our detected value (This protects against pre-defines
            // where Weight may be aliassed to WeightV0, e.g. in early Kusama chains)
            Weight = 'WeightV1';
        }
        if (Weight) {
            // we have detected a version, adjust the definition
            this.register({ Weight });
        }
    };
    // sets the metadata
    setMetadata(metadata, signedExtensions, userExtensions, noInitWarn) {
        this.__internal__metadata = metadata.asLatest;
        this.__internal__metadataVersion = metadata.version;
        this.__internal__firstCallIndex = null;
        // attach the lookup at this point and register relevant types (before injecting)
        this.__internal__registerLookup(this.__internal__metadata.lookup);
        injectExtrinsics(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataCalls, this.__internal__moduleMap);
        injectErrors(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataErrors);
        injectEvents(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataEvents);
        // set the default call index (the lowest section, the lowest method)
        // in most chains this should be 0,0
        const [defSection] = Object
            .keys(this.__internal__metadataCalls)
            .sort(sortDecimalStrings);
        if (defSection) {
            const [defMethod] = Object
                .keys(this.__internal__metadataCalls[defSection])
                .sort(sortDecimalStrings);
            if (defMethod) {
                this.__internal__firstCallIndex = new Uint8Array([parseInt(defSection, 10), parseInt(defMethod, 10)]);
            }
        }
        // setup the available extensions
        this.setSignedExtensions(signedExtensions || (this.__internal__metadata.extrinsic.version.gt(consts/* BN_ZERO */.nw)
            // FIXME Use the extension and their injected types
            ? this.__internal__metadata.extrinsic.signedExtensions.map(({ identifier }) => identifier.toString())
            : fallbackExtensions), userExtensions, noInitWarn);
        // setup the chain properties with format overrides
        this.setChainProperties(extractProperties(this, metadata));
    }
    // sets the available signed extensions
    setSignedExtensions(signedExtensions = fallbackExtensions, userExtensions, noInitWarn) {
        this.__internal__signedExtensions = signedExtensions;
        this.__internal__userExtensions = userExtensions;
        if (!noInitWarn) {
            const unknown = findUnknownExtensions(this.__internal__signedExtensions, this.__internal__userExtensions);
            if (unknown.length) {
                l.warn(`Unknown signed extensions ${unknown.join(', ')} found, treating them as no-effect`);
            }
        }
    }
}


/***/ }),

/***/ 18484:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Y: () => (/* binding */ GenericExtrinsic)
/* harmony export */ });
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(97608);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(44961);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(57620);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(93173);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(51892);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(44214);
/* harmony import */ var _v4_Extrinsic_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(61782);
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44545);




const VERSIONS = [
    'ExtrinsicUnknown', // v0 is unknown
    'ExtrinsicUnknown',
    'ExtrinsicUnknown',
    'ExtrinsicUnknown',
    'ExtrinsicV4'
];

/** @internal */
function newFromValue(registry, value, version) {
    if (value instanceof GenericExtrinsic) {
        return value.unwrap();
    }
    const isSigned = (version & _constants_js__WEBPACK_IMPORTED_MODULE_0__/* .BIT_SIGNED */ .B4) === _constants_js__WEBPACK_IMPORTED_MODULE_0__/* .BIT_SIGNED */ .B4;
    const type = VERSIONS[version & _constants_js__WEBPACK_IMPORTED_MODULE_0__/* .UNMASK_VERSION */ .fk] || VERSIONS[0];
    // we cast here since the VERSION definition is incredibly broad - we don't have a
    // slice for "only add extrinsic types", and more string definitions become unwieldy
    return registry.createTypeUnsafe(type, [value, { isSigned, version }]);
}
/** @internal */
function decodeExtrinsic(registry, value, version = _constants_js__WEBPACK_IMPORTED_MODULE_0__/* .DEFAULT_VERSION */ .eQ) {
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isU8a */ .U)(value) || Array.isArray(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isHex */ .vq)(value)) {
        return decodeU8a(registry, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .u8aToU8a */ .Y)(value), version);
    }
    else if (value instanceof registry.createClassUnsafe('Call')) {
        return newFromValue(registry, { method: value }, version);
    }
    return newFromValue(registry, value, version);
}
/** @internal */
function decodeU8a(registry, value, version) {
    if (!value.length) {
        return newFromValue(registry, new Uint8Array(), version);
    }
    const [offset, length] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .compactFromU8a */ .P)(value);
    const total = offset + length.toNumber();
    if (total > value.length) {
        throw new Error(`Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    const data = value.subarray(offset, total);
    return newFromValue(registry, data.subarray(1), data[0]);
}
class ExtrinsicBase extends _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_5__/* .AbstractBase */ .E {
    constructor(registry, value, initialU8aLength) {
        super(registry, value, initialU8aLength);
        const signKeys = Object.keys(registry.getSignedExtensionTypes());
        const getter = (key) => this.inner.signature[key];
        // This is on the abstract class, ensuring that hasOwnProperty operates
        // correctly, i.e. it needs to be on the base class exposing it
        for (let i = 0, count = signKeys.length; i < count; i++) {
            (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .objectProperty */ .P)(this, signKeys[i], getter);
        }
    }
    /**
     * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
     */
    get args() {
        return this.method.args;
    }
    /**
     * @description The argument definitions, compatible with [[Call]]
     */
    get argsDef() {
        return this.method.argsDef;
    }
    /**
     * @description The actual `[sectionIndex, methodIndex]` as used in the Call
     */
    get callIndex() {
        return this.method.callIndex;
    }
    /**
     * @description The actual data for the Call
     */
    get data() {
        return this.method.data;
    }
    /**
     * @description The era for this extrinsic
     */
    get era() {
        return this.inner.signature.era;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description `true` id the extrinsic is signed
     */
    get isSigned() {
        return this.inner.signature.isSigned;
    }
    /**
     * @description The length of the actual data, excluding prefix
     */
    get length() {
        return this.toU8a(true).length;
    }
    /**
     * @description The [[FunctionMetadataLatest]] that describes the extrinsic
     */
    get meta() {
        return this.method.meta;
    }
    /**
     * @description The [[Call]] this extrinsic wraps
     */
    get method() {
        return this.inner.method;
    }
    /**
     * @description The nonce for this extrinsic
     */
    get nonce() {
        return this.inner.signature.nonce;
    }
    /**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */
    get signature() {
        return this.inner.signature.signature;
    }
    /**
     * @description The [[Address]] that signed
     */
    get signer() {
        return this.inner.signature.signer;
    }
    /**
     * @description Forwards compat
     */
    get tip() {
        return this.inner.signature.tip;
    }
    /**
     * @description Returns the raw transaction version (not flagged with signing information)
    */
    get type() {
        return this.inner.version;
    }
    get inner() {
        return this.unwrap();
    }
    /**
     * @description Returns the encoded version flag
    */
    get version() {
        return this.type | (this.isSigned ? _constants_js__WEBPACK_IMPORTED_MODULE_0__/* .BIT_SIGNED */ .B4 : _constants_js__WEBPACK_IMPORTED_MODULE_0__/* .BIT_UNSIGNED */ .jf);
    }
    /**
     * @description Checks if the source matches this in type
     */
    is(other) {
        return this.method.is(other);
    }
    unwrap() {
        return super.unwrap();
    }
}
/**
 * @name GenericExtrinsic
 * @description
 * Representation of an Extrinsic in the system. It contains the actual call,
 * (optional) signature and encodes with an actual length prefix
 *
 * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
 *
 * Can be:
 * - signed, to create a transaction
 * - left as is, to create an inherent
 */
class GenericExtrinsic extends ExtrinsicBase {
    __internal__hashCache;
    static LATEST_EXTRINSIC_VERSION = _v4_Extrinsic_js__WEBPACK_IMPORTED_MODULE_7__.EXTRINSIC_VERSION;
    constructor(registry, value, { version } = {}) {
        super(registry, decodeExtrinsic(registry, value, version));
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        if (!this.__internal__hashCache) {
            this.__internal__hashCache = super.hash;
        }
        return this.__internal__hashCache;
    }
    /**
     * @description Injects an already-generated signature into the extrinsic
     */
    addSignature(signer, signature, payload) {
        this.inner.addSignature(signer, signature, payload);
        this.__internal__hashCache = undefined;
        return this;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        const encoded = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .u8aConcat */ .e)(...this.toU8aInner());
        return {
            inner: this.isSigned
                ? this.inner.inspect().inner
                : this.inner.method.inspect().inner,
            outer: [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_9__/* .compactToU8a */ .Y)(encoded.length), new Uint8Array([this.version])]
        };
    }
    /**
     * @description Sign the extrinsic with a specific keypair
     */
    sign(account, options) {
        this.inner.sign(account, options);
        this.__internal__hashCache = undefined;
        return this;
    }
    /**
     * @describe Adds a fake signature to the extrinsic
     */
    signFake(signer, options) {
        this.inner.signFake(signer, options);
        this.__internal__hashCache = undefined;
        return this;
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex(isBare) {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_10__/* .u8aToHex */ .c)(this.toU8a(isBare));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExpanded) {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__/* .objectSpread */ .Z)({}, {
            isSigned: this.isSigned,
            method: this.method.toHuman(isExpanded)
        }, this.isSigned
            ? {
                era: this.era.toHuman(isExpanded),
                nonce: this.nonce.toHuman(isExpanded),
                signature: this.signature.toHex(),
                signer: this.signer.toHuman(isExpanded),
                tip: this.tip.toHuman(isExpanded)
            }
            : null);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toHex();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Extrinsic';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value is not length-prefixed
     */
    toU8a(isBare) {
        const encoded = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .u8aConcat */ .e)(...this.toU8aInner());
        return isBare
            ? encoded
            : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_12__/* .compactAddLength */ .N)(encoded);
    }
    toU8aInner() {
        // we do not apply bare to the internal values, rather this only determines out length addition,
        // where we strip all lengths this creates an extrinsic that cannot be decoded
        return [
            new Uint8Array([this.version]),
            this.inner.toU8a()
        ];
    }
}


/***/ }),

/***/ 44545:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B4: () => (/* binding */ BIT_SIGNED),
/* harmony export */   eQ: () => (/* binding */ DEFAULT_VERSION),
/* harmony export */   fk: () => (/* binding */ UNMASK_VERSION),
/* harmony export */   jf: () => (/* binding */ BIT_UNSIGNED),
/* harmony export */   pW: () => (/* binding */ EMPTY_U8A),
/* harmony export */   ws: () => (/* binding */ IMMORTAL_ERA)
/* harmony export */ });
const BIT_SIGNED = 0b10000000;
const BIT_UNSIGNED = 0;
const EMPTY_U8A = new Uint8Array();
const DEFAULT_VERSION = 4;
const IMMORTAL_ERA = new Uint8Array([0]);
const UNMASK_VERSION = 0b01111111;


/***/ }),

/***/ 61782:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EXTRINSIC_VERSION: () => (/* binding */ EXTRINSIC_VERSION),
/* harmony export */   GenericExtrinsicV4: () => (/* binding */ GenericExtrinsicV4)
/* harmony export */ });
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43330);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38589);


const EXTRINSIC_VERSION = 4;
/**
 * @name GenericExtrinsicV4
 * @description
 * The third generation of compact extrinsics
 */
class GenericExtrinsicV4 extends _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_0__/* .Struct */ .A {
    constructor(registry, value, { isSigned } = {}) {
        super(registry, {
            signature: 'ExtrinsicSignatureV4',
            // eslint-disable-next-line sort-keys
            method: 'Call'
        }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
    }
    /** @internal */
    static decodeExtrinsic(registry, value, isSigned = false) {
        if (value instanceof GenericExtrinsicV4) {
            return value;
        }
        else if (value instanceof registry.createClassUnsafe('Call')) {
            return { method: value };
        }
        else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isU8a */ .U)(value)) {
            // here we decode manually since we need to pull through the version information
            const signature = registry.createTypeUnsafe('ExtrinsicSignatureV4', [value, { isSigned }]);
            const method = registry.createTypeUnsafe('Call', [value.subarray(signature.encodedLength)]);
            return {
                method,
                signature
            };
        }
        return value || {};
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description The [[Call]] this extrinsic wraps
     */
    get method() {
        return this.getT('method');
    }
    /**
     * @description The [[ExtrinsicSignatureV4]]
     */
    get signature() {
        return this.getT('signature');
    }
    /**
     * @description The version for the signature
     */
    get version() {
        return EXTRINSIC_VERSION;
    }
    /**
     * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
     */
    addSignature(signer, signature, payload) {
        this.signature.addSignature(signer, signature, payload);
        return this;
    }
    /**
     * @description Sign the extrinsic with a specific keypair
     */
    sign(account, options) {
        this.signature.sign(this.method, account, options);
        return this;
    }
    /**
     * @describe Adds a fake signature to the extrinsic
     */
    signFake(signer, options) {
        this.signature.signFake(this.method, signer, options);
        return this;
    }
}


/***/ }),

/***/ 1380:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   L: () => (/* binding */ GenericEvent),
/* harmony export */   q: () => (/* binding */ GenericEventData)
/* harmony export */ });
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73260);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22442);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(43330);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(57620);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(53472);


/** @internal */
function decodeEvent(registry, value) {
    if (!value?.length) {
        return { DataType: _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_0__/* .Null */ .p };
    }
    const index = value.subarray(0, 2);
    return {
        DataType: registry.findMetaEvent(index),
        value: {
            data: value.subarray(2),
            index
        }
    };
}
/**
 * @name GenericEventData
 * @description
 * Wrapper for the actual data that forms part of an [[Event]]
 */
class GenericEventData extends _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_1__/* .Tuple */ .p {
    __internal__meta;
    __internal__method;
    __internal__names = null;
    __internal__section;
    __internal__typeDef;
    constructor(registry, value, meta, section = '<unknown>', method = '<unknown>') {
        const fields = meta?.fields || [];
        super(registry, fields.map(({ type }) => registry.createLookupType(type)), value);
        this.__internal__meta = meta;
        this.__internal__method = method;
        this.__internal__section = section;
        this.__internal__typeDef = fields.map(({ type }) => registry.lookup.getTypeDef(type));
        const names = fields
            .map(({ name }) => registry.lookup.sanitizeField(name)[0])
            .filter((n) => !!n);
        if (names.length === fields.length) {
            this.__internal__names = names;
            (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .objectProperties */ .a)(this, names, (_, i) => this[i]);
        }
    }
    /**
     * @description The wrapped [[EventMetadata]]
     */
    get meta() {
        return this.__internal__meta;
    }
    /**
     * @description The method as a string
     */
    get method() {
        return this.__internal__method;
    }
    /**
     * @description The field names (as available)
     */
    get names() {
        return this.__internal__names;
    }
    /**
     * @description The section as a string
     */
    get section() {
        return this.__internal__section;
    }
    /**
     * @description The [[TypeDef]] for this event
     */
    get typeDef() {
        return this.__internal__typeDef;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        if (this.__internal__names !== null) {
            const json = {};
            for (let i = 0, count = this.__internal__names.length; i < count; i++) {
                json[this.__internal__names[i]] = this[i].toHuman(isExtended);
            }
            return json;
        }
        return super.toHuman(isExtended);
    }
}
/**
 * @name GenericEvent
 * @description
 * A representation of a system event. These are generated via the [[Metadata]] interfaces and
 * specific to a specific Substrate runtime
 */
class GenericEvent extends _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_3__/* .Struct */ .A {
    // Currently we _only_ decode from Uint8Array, since we expect it to
    // be used via EventRecord
    constructor(registry, _value) {
        const { DataType, value } = decodeEvent(registry, _value);
        super(registry, {
            index: 'EventId',
            // eslint-disable-next-line sort-keys
            data: DataType
        }, value);
    }
    /**
     * @description The wrapped [[EventData]]
     */
    get data() {
        return this.getT('data');
    }
    /**
     * @description The [[EventId]], identifying the raw event
     */
    get index() {
        return this.getT('index');
    }
    /**
     * @description The [[EventMetadata]] with the documentation
     */
    get meta() {
        return this.data.meta;
    }
    /**
     * @description The method string identifying the event
     */
    get method() {
        return this.data.method;
    }
    /**
     * @description The section string identifying the event
     */
    get section() {
        return this.data.section;
    }
    /**
     * @description The [[TypeDef]] for the event
     */
    get typeDef() {
        return this.data.typeDef;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExpanded) {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .objectSpread */ .Z)({
            method: this.method,
            section: this.section
        }, isExpanded
            ? { docs: this.meta.docs.map((d) => d.toString()) }
            : null, super.toHuman(isExpanded));
    }
}


/***/ }),

/***/ 33856:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  BitVec: () => (/* reexport */ BitVec/* BitVec */.x),
  Bool: () => (/* reexport */ Bool/* bool */.X),
  Bytes: () => (/* reexport */ Bytes/* Bytes */.J),
  Data: () => (/* reexport */ Data),
  F32: () => (/* reexport */ F32/* f32 */.x),
  F64: () => (/* reexport */ F64/* f64 */.e),
  GenericAccountId: () => (/* reexport */ GenericAccountId),
  GenericAccountId32: () => (/* reexport */ GenericAccountId),
  GenericAccountId33: () => (/* reexport */ GenericAccountId33),
  GenericAccountIndex: () => (/* reexport */ GenericAccountIndex),
  GenericAddress: () => (/* reexport */ GenericMultiAddress),
  GenericBlock: () => (/* reexport */ GenericBlock),
  GenericCall: () => (/* reexport */ GenericCall),
  GenericChainProperties: () => (/* reexport */ GenericChainProperties),
  GenericConsensusEngineId: () => (/* reexport */ GenericConsensusEngineId),
  GenericEthereumAccountId: () => (/* reexport */ GenericEthereumAccountId),
  GenericEthereumLookupSource: () => (/* reexport */ GenericEthereumLookupSource),
  GenericEvent: () => (/* reexport */ Event/* GenericEvent */.L),
  GenericEventData: () => (/* reexport */ Event/* GenericEventData */.q),
  GenericExtrinsic: () => (/* reexport */ Extrinsic/* GenericExtrinsic */.Y),
  GenericExtrinsicEra: () => (/* reexport */ GenericExtrinsicEra),
  GenericExtrinsicPayload: () => (/* reexport */ GenericExtrinsicPayload),
  GenericExtrinsicPayloadUnknown: () => (/* reexport */ GenericExtrinsicPayloadUnknown),
  GenericExtrinsicPayloadV4: () => (/* reexport */ GenericExtrinsicPayloadV4),
  GenericExtrinsicSignatureV4: () => (/* reexport */ GenericExtrinsicSignatureV4),
  GenericExtrinsicUnknown: () => (/* reexport */ GenericExtrinsicUnknown),
  GenericExtrinsicV4: () => (/* reexport */ v4_Extrinsic.GenericExtrinsicV4),
  GenericImmortalEra: () => (/* reexport */ ImmortalEra),
  GenericLookupSource: () => (/* reexport */ GenericLookupSource),
  GenericMortalEra: () => (/* reexport */ MortalEra),
  GenericMultiAddress: () => (/* reexport */ GenericMultiAddress),
  GenericSignerPayload: () => (/* reexport */ GenericSignerPayload),
  GenericVote: () => (/* reexport */ GenericVote),
  I128: () => (/* reexport */ I128/* i128 */.b),
  I16: () => (/* reexport */ I16/* i16 */.T),
  I256: () => (/* reexport */ I256/* i256 */.j),
  I32: () => (/* reexport */ I32/* i32 */.k),
  I64: () => (/* reexport */ I64/* i64 */.f),
  I8: () => (/* reexport */ I8.i8),
  ISize: () => (/* reexport */ ISize/* isize */.M),
  Null: () => (/* reexport */ Null/* Null */.p),
  OptionBool: () => (/* reexport */ OptionBool/* OptionBool */.x),
  StorageKey: () => (/* reexport */ StorageKey),
  Text: () => (/* reexport */ Text/* Text */.x),
  Type: () => (/* reexport */ Type/* Type */.D),
  U128: () => (/* reexport */ U128/* u128 */.z),
  U16: () => (/* reexport */ U16/* u16 */.K),
  U256: () => (/* reexport */ U256/* u256 */.K),
  U32: () => (/* reexport */ U32/* u32 */.J),
  U64: () => (/* reexport */ U64/* u64 */.A),
  U8: () => (/* reexport */ U8.u8),
  USize: () => (/* reexport */ USize/* usize */.U),
  bool: () => (/* reexport */ Bool/* bool */.X),
  f32: () => (/* reexport */ F32/* f32 */.x),
  f64: () => (/* reexport */ F64/* f64 */.e),
  i128: () => (/* reexport */ I128/* i128 */.b),
  i16: () => (/* reexport */ I16/* i16 */.T),
  i256: () => (/* reexport */ I256/* i256 */.j),
  i32: () => (/* reexport */ I32/* i32 */.k),
  i64: () => (/* reexport */ I64/* i64 */.f),
  i8: () => (/* reexport */ I8.i8),
  isize: () => (/* reexport */ ISize/* isize */.M),
  u128: () => (/* reexport */ U128/* u128 */.z),
  u16: () => (/* reexport */ U16/* u16 */.K),
  u256: () => (/* reexport */ U256/* u256 */.K),
  u32: () => (/* reexport */ U32/* u32 */.J),
  u64: () => (/* reexport */ U64/* u64 */.A),
  u8: () => (/* reexport */ U8.u8),
  usize: () => (/* reexport */ USize/* usize */.U)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/Extrinsic.js
var Extrinsic = __webpack_require__(18484);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/U64.js
var U64 = __webpack_require__(15880);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/native/Raw.js
var Raw = __webpack_require__(9088);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/base/Tuple.js
var Tuple = __webpack_require__(22442);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/base/Enum.js
var Enum = __webpack_require__(96317);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/u8a.js
var u8a = __webpack_require__(38589);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/hex.js
var hex = __webpack_require__(14911);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toU8a.js
var toU8a = __webpack_require__(42740);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/object.js
var object = __webpack_require__(9716);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toBn.js
var toBn = __webpack_require__(91693);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/hex/toU8a.js
var hex_toU8a = __webpack_require__(82025);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/format/formatNumber.js
var formatNumber = __webpack_require__(64983);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bn/toBn.js
var bn_toBn = __webpack_require__(54556);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/constants.js
var constants = __webpack_require__(44545);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/ExtrinsicEra.js



function getTrailingZeros(period) {
    const binary = period.toString(2);
    let index = 0;
    while (binary[binary.length - 1 - index] === '0') {
        index++;
    }
    return index;
}
/** @internal */
function decodeMortalEra(registry, value) {
    if ((0,u8a/* isU8a */.U)(value) || (0,hex/* isHex */.vq)(value) || Array.isArray(value)) {
        return decodeMortalU8a(registry, (0,toU8a/* u8aToU8a */.Y)(value));
    }
    else if (!value) {
        return [new U64/* u64 */.A(registry), new U64/* u64 */.A(registry)];
    }
    else if ((0,object/* isObject */.K)(value)) {
        return decodeMortalObject(registry, value);
    }
    throw new Error('Invalid data passed to Mortal era');
}
/** @internal */
function decodeMortalObject(registry, value) {
    const { current, period } = value;
    let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
    calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
    const phase = current % calPeriod;
    const quantizeFactor = Math.max(calPeriod >> 12, 1);
    const quantizedPhase = phase / quantizeFactor * quantizeFactor;
    return [new U64/* u64 */.A(registry, calPeriod), new U64/* u64 */.A(registry, quantizedPhase)];
}
/** @internal */
function decodeMortalU8a(registry, value) {
    if (value.length === 0) {
        return [new U64/* u64 */.A(registry), new U64/* u64 */.A(registry)];
    }
    const first = (0,toBn/* u8aToBn */._)(value.subarray(0, 1)).toNumber();
    const second = (0,toBn/* u8aToBn */._)(value.subarray(1, 2)).toNumber();
    const encoded = first + (second << 8);
    const period = 2 << (encoded % (1 << 4));
    const quantizeFactor = Math.max(period >> 12, 1);
    const phase = (encoded >> 4) * quantizeFactor;
    if (period < 4 || phase >= period) {
        throw new Error('Invalid data passed to Mortal era');
    }
    return [new U64/* u64 */.A(registry, period), new U64/* u64 */.A(registry, phase)];
}
/** @internal */
function decodeExtrinsicEra(value = new Uint8Array()) {
    if ((0,u8a/* isU8a */.U)(value)) {
        return (!value.length || value[0] === 0)
            ? new Uint8Array([0])
            : new Uint8Array([1, value[0], value[1]]);
    }
    else if (!value) {
        return new Uint8Array([0]);
    }
    else if (value instanceof GenericExtrinsicEra) {
        return decodeExtrinsicEra(value.toU8a());
    }
    else if ((0,hex/* isHex */.vq)(value)) {
        return decodeExtrinsicEra((0,hex_toU8a/* hexToU8a */.G)(value));
    }
    else if ((0,object/* isObject */.K)(value)) {
        const entries = Object.entries(value).map(([k, v]) => [k.toLowerCase(), v]);
        const mortal = entries.find(([k]) => k.toLowerCase() === 'mortalera');
        const immortal = entries.find(([k]) => k.toLowerCase() === 'immortalera');
        // this is to de-serialize from JSON
        return mortal
            ? { MortalEra: mortal[1] }
            : immortal
                ? { ImmortalEra: immortal[1] }
                : { MortalEra: value };
    }
    throw new Error('Invalid data passed to Era');
}
/**
 * @name ImmortalEra
 * @description
 * The ImmortalEra for an extrinsic
 */
class ImmortalEra extends Raw/* Raw */.N {
    constructor(registry, _value) {
        // For immortals, we always provide the known value (i.e. treated as a
        // constant no matter how it is constructed - it is a fixed structure)
        super(registry, constants/* IMMORTAL_ERA */.ws);
    }
}
/**
 * @name MortalEra
 * @description
 * The MortalEra for an extrinsic, indicating period and phase
 */
class MortalEra extends Tuple/* Tuple */.p {
    constructor(registry, value) {
        super(registry, {
            period: U64/* u64 */.A,
            phase: U64/* u64 */.A
        }, decodeMortalEra(registry, value));
    }
    /**
     * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
     */
    get encodedLength() {
        return 2 | 0;
    }
    /**
     * @description The period of this Mortal wraps as a [[U64]]
     */
    get period() {
        return this[0];
    }
    /**
     * @description The phase of this Mortal wraps as a [[U64]]
     */
    get phase() {
        return this[1];
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return {
            period: (0,formatNumber/* formatNumber */.u)(this.period),
            phase: (0,formatNumber/* formatNumber */.u)(this.phase)
        };
    }
    /**
     * @description Returns a JSON representation of the actual value
     */
    toJSON() {
        return this.toHex();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     * Period and phase are encoded:
     *   - The period of validity from the block hash found in the signing material.
     *   - The phase in the period that this transaction's lifetime begins (and, importantly,
     *     implies which block hash is included in the signature material). If the `period` is
     *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
     *     `period` is.
     */
    toU8a(_isBare) {
        const period = this.period.toNumber();
        const encoded = Math.min(15, Math.max(1, getTrailingZeros(period) - 1)) + ((this.phase.toNumber() / Math.max(period >> 12, 1)) << 4);
        return new Uint8Array([
            encoded & 0xff,
            encoded >> 8
        ]);
    }
    /**
     * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
     */
    birth(current) {
        const phase = this.phase.toNumber();
        const period = this.period.toNumber();
        // FIXME No toNumber() here
        return (~~((Math.max((0,bn_toBn/* bnToBn */.G)(current).toNumber(), phase) - phase) / period) * period) + phase;
    }
    /**
     * @description Get the block number of the first block at which the era has ended.
     */
    death(current) {
        // FIXME No toNumber() here
        return this.birth(current) + this.period.toNumber();
    }
}
/**
 * @name GenericExtrinsicEra
 * @description
 * The era for an extrinsic, indicating either a mortal or immortal extrinsic
 */
class GenericExtrinsicEra extends Enum/* Enum */.x {
    constructor(registry, value) {
        super(registry, {
            ImmortalEra,
            MortalEra
        }, decodeExtrinsicEra(value));
    }
    /**
     * @description Override the encoded length method
     */
    get encodedLength() {
        return this.isImmortalEra
            ? this.asImmortalEra.encodedLength
            : this.asMortalEra.encodedLength;
    }
    /**
     * @description Returns the item as a [[ImmortalEra]]
     */
    get asImmortalEra() {
        if (!this.isImmortalEra) {
            throw new Error(`Cannot convert '${this.type}' via asImmortalEra`);
        }
        return this.inner;
    }
    /**
     * @description Returns the item as a [[MortalEra]]
     */
    get asMortalEra() {
        if (!this.isMortalEra) {
            throw new Error(`Cannot convert '${this.type}' via asMortalEra`);
        }
        return this.inner;
    }
    /**
     * @description `true` if Immortal
     */
    get isImmortalEra() {
        return this.index === 0;
    }
    /**
     * @description `true` if Mortal
     */
    get isMortalEra() {
        return this.index > 0;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return this.isMortalEra
            ? this.asMortalEra.toU8a(isBare)
            : this.asImmortalEra.toU8a(isBare);
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/abstract/Base.js
var Base = __webpack_require__(97608);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toHex.js
var toHex = __webpack_require__(26048);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/ExtrinsicPayload.js



const VERSIONS = [
    'ExtrinsicPayloadUnknown', // v0 is unknown
    'ExtrinsicPayloadUnknown',
    'ExtrinsicPayloadUnknown',
    'ExtrinsicPayloadUnknown',
    'ExtrinsicPayloadV4'
];
/** @internal */
function decodeExtrinsicPayload(registry, value, version = constants/* DEFAULT_VERSION */.eQ) {
    if (value instanceof GenericExtrinsicPayload) {
        return value.unwrap();
    }
    return registry.createTypeUnsafe(VERSIONS[version] || VERSIONS[0], [value, { version }]);
}
/**
 * @name GenericExtrinsicPayload
 * @description
 * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
 * on the contents included
 */
class GenericExtrinsicPayload extends Base/* AbstractBase */.E {
    constructor(registry, value, { version } = {}) {
        super(registry, decodeExtrinsicPayload(registry, value, version));
    }
    /**
     * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
     */
    get blockHash() {
        return this.inner.blockHash;
    }
    /**
     * @description The [[ExtrinsicEra]]
     */
    get era() {
        return this.inner.era;
    }
    /**
     * @description The genesis block [[BlockHash]] the signature applies to
     */
    get genesisHash() {
        // NOTE only v3+
        return this.inner.genesisHash || this.registry.createTypeUnsafe('Hash', []);
    }
    /**
     * @description The [[Bytes]] contained in the payload
     */
    get method() {
        return this.inner.method;
    }
    /**
     * @description The [[Index]]
     */
    get nonce() {
        return this.inner.nonce;
    }
    /**
     * @description The specVersion as a [[u32]] for this payload
     */
    get specVersion() {
        // NOTE only v3+
        return this.inner.specVersion || this.registry.createTypeUnsafe('u32', []);
    }
    /**
     * @description The [[Balance]]
     */
    get tip() {
        // NOTE from v2+
        return this.inner.tip || this.registry.createTypeUnsafe('Compact<Balance>', []);
    }
    /**
     * @description The transaction version as a [[u32]] for this payload
     */
    get transactionVersion() {
        // NOTE only v4+
        return this.inner.transactionVersion || this.registry.createTypeUnsafe('u32', []);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return this.inner.eq(other);
    }
    /**
     * @description Sign the payload with the keypair
     */
    sign(signerPair) {
        const signature = this.inner.sign(signerPair);
        // This is extensible, so we could quite readily extend to send back extra
        // information, such as for instance the payload, i.e. `payload: this.toHex()`
        // For the case here we sign via the extrinsic, we ignore the return, so generally
        // this is applicable for external signing
        return {
            signature: (0,toHex/* u8aToHex */.c)(signature)
        };
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return this.inner.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toHex();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'ExtrinsicPayload';
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.toHex();
    }
    /**
     * @description Returns a serialized u8a form
     */
    toU8a(isBare) {
        // call our parent, with only the method stripped
        return super.toU8a(isBare ? { method: true } : false);
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/native/Struct.js
var Struct = __webpack_require__(43330);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/ExtrinsicPayloadUnknown.js

/**
 * @name GenericExtrinsicPayloadUnknown
 * @description
 * A default handler for payloads where the version is not known (default throw)
 */
class GenericExtrinsicPayloadUnknown extends Struct/* Struct */.A {
    constructor(registry, _value, { version = 0 } = {}) {
        super(registry, {});
        throw new Error(`Unsupported extrinsic payload version ${version}`);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/ExtrinsicUnknown.js


/**
 * @name GenericExtrinsicUnknown
 * @description
 * A default handler for extrinsics where the version is not known (default throw)
 */
class GenericExtrinsicUnknown extends Struct/* Struct */.A {
    constructor(registry, _value, { isSigned = false, version = 0 } = {}) {
        super(registry, {});
        throw new Error(`Unsupported ${isSigned ? '' : 'un'}signed extrinsic version ${version & constants/* UNMASK_VERSION */.fk}`);
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/base/Option.js
var Option = __webpack_require__(74830);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/object/spread.js
var spread = __webpack_require__(53472);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/object/property.js
var property = __webpack_require__(57620);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/SignerPayload.js


const knownTypes = {
    address: 'Address',
    blockHash: 'Hash',
    blockNumber: 'BlockNumber',
    era: 'ExtrinsicEra',
    genesisHash: 'Hash',
    method: 'Call',
    nonce: 'Compact<Index>',
    runtimeVersion: 'RuntimeVersion',
    signedExtensions: 'Vec<Text>',
    tip: 'Compact<Balance>',
    version: 'u8'
};
/**
 * @name GenericSignerPayload
 * @description
 * A generic signer payload that can be used for serialization between API and signer
 */
class GenericSignerPayload extends Struct/* Struct */.A {
    __internal__extraTypes;
    constructor(registry, value) {
        const extensionTypes = (0,spread/* objectSpread */.Z)({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
        super(registry, (0,spread/* objectSpread */.Z)({}, extensionTypes, knownTypes), value);
        this.__internal__extraTypes = {};
        const getter = (key) => this.get(key);
        // add all extras that are not in the base types
        for (const [key, type] of Object.entries(extensionTypes)) {
            if (!knownTypes[key]) {
                this.__internal__extraTypes[key] = type;
            }
            (0,property/* objectProperty */.P)(this, key, getter);
        }
    }
    get address() {
        return this.getT('address');
    }
    get blockHash() {
        return this.getT('blockHash');
    }
    get blockNumber() {
        return this.getT('blockNumber');
    }
    get era() {
        return this.getT('era');
    }
    get genesisHash() {
        return this.getT('genesisHash');
    }
    get method() {
        return this.getT('method');
    }
    get nonce() {
        return this.getT('nonce');
    }
    get runtimeVersion() {
        return this.getT('runtimeVersion');
    }
    get signedExtensions() {
        return this.getT('signedExtensions');
    }
    get tip() {
        return this.getT('tip');
    }
    get version() {
        return this.getT('version');
    }
    /**
     * @description Creates an representation of the structure as an ISignerPayload JSON
     */
    toPayload() {
        const result = {};
        const keys = Object.keys(this.__internal__extraTypes);
        // add any explicit overrides we may have
        for (let i = 0, count = keys.length; i < count; i++) {
            const key = keys[i];
            const value = this.getT(key);
            // Don't include Option.isNone
            if (!(value instanceof Option/* Option */.W) || value.isSome) {
                // NOTE In the spread below we convert (mostly) to Hex to align
                // with the typings. In the case of "unknown" fields, we use the
                // primitive toJSON conversion (which is serializable). Technically
                // we can include isNone in here as well ("null" is allowed), however
                // for empty fields we just skip it completely (historical compat)
                result[key] = value.toJSON();
            }
        }
        return (0,spread/* objectSpread */.Z)(result, {
            // the known defaults as managed explicitly and has different
            // formatting in cases, e.g. we mostly expose a hex format here
            address: this.address.toString(),
            blockHash: this.blockHash.toHex(),
            blockNumber: this.blockNumber.toHex(),
            era: this.era.toHex(),
            genesisHash: this.genesisHash.toHex(),
            method: this.method.toHex(),
            nonce: this.nonce.toHex(),
            signedExtensions: this.signedExtensions.map((e) => e.toString()),
            specVersion: this.runtimeVersion.specVersion.toHex(),
            tip: this.tip.toHex(),
            transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
            version: this.version.toNumber()
        });
    }
    /**
     * @description Creates a representation of the payload in raw Exrinsic form
     */
    toRaw() {
        const payload = this.toPayload();
        const data = (0,toHex/* u8aToHex */.c)(this.registry
            .createTypeUnsafe('ExtrinsicPayload', [payload, { version: payload.version }])
            // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)
            .toU8a({ method: true }));
        return {
            address: payload.address,
            data,
            type: 'payload'
        };
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/v4/Extrinsic.js
var v4_Extrinsic = __webpack_require__(61782);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/util.js
function sign(registry, signerPair, u8a, options) {
    const encoded = u8a.length > 256
        ? registry.hash(u8a)
        : u8a;
    return signerPair.sign(encoded, options);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js



/**
 * @name GenericExtrinsicPayloadV4
 * @description
 * A signing payload for an [[Extrinsic]]. For the final encoding, it is
 * variable length based on the contents included
 */
class GenericExtrinsicPayloadV4 extends Struct/* Struct */.A {
    __internal__signOptions;
    constructor(registry, value) {
        super(registry, (0,spread/* objectSpread */.Z)({ method: 'Bytes' }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
        // Do detection for the type of extrinsic, in the case of MultiSignature
        // this is an enum, in the case of AnySignature, this is a Hash only
        // (which may be 64 or 65 bytes)
        this.__internal__signOptions = {
            withType: registry.createTypeUnsafe('ExtrinsicSignature', []) instanceof Enum/* Enum */.x
        };
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return super.inspect({ method: true });
    }
    /**
     * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
     */
    get blockHash() {
        return this.getT('blockHash');
    }
    /**
     * @description The [[ExtrinsicEra]]
     */
    get era() {
        return this.getT('era');
    }
    /**
     * @description The genesis [[BlockHash]] the signature applies to (mortal/immortal)
     */
    get genesisHash() {
        return this.getT('genesisHash');
    }
    /**
     * @description The [[Bytes]] contained in the payload
     */
    get method() {
        return this.getT('method');
    }
    /**
     * @description The [[Index]]
     */
    get nonce() {
        return this.getT('nonce');
    }
    /**
     * @description The specVersion for this signature
     */
    get specVersion() {
        return this.getT('specVersion');
    }
    /**
     * @description The tip [[Balance]]
     */
    get tip() {
        return this.getT('tip');
    }
    /**
     * @description The transactionVersion for this signature
     */
    get transactionVersion() {
        return this.getT('transactionVersion');
    }
    /**
     * @description The (optional) asset id for this signature for chains that support transaction fees in assets
     */
    get assetId() {
        return this.getT('assetId');
    }
    /**
     * @description Sign the payload with the keypair
     */
    sign(signerPair) {
        // NOTE The `toU8a({ method: true })` argument is absolutely critical, we
        // don't want the method (Bytes) to have the length prefix included. This
        // means that the data-as-signed is un-decodable, but is also doesn't need
        // the extra information, only the pure data (and is not decoded) ...
        // The same applies to V1..V3, if we have a V5, carry this comment
        return sign(this.registry, signerPair, this.toU8a({ method: true }), this.__internal__signOptions);
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/undefined.js
var is_undefined = __webpack_require__(34644);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/stringify.js
var stringify = __webpack_require__(53393);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/v4/ExtrinsicSignature.js




const FAKE_SIGNATURE = new Uint8Array(256).fill(1);
function toAddress(registry, address) {
    return registry.createTypeUnsafe('Address', [(0,u8a/* isU8a */.U)(address) ? (0,toHex/* u8aToHex */.c)(address) : address]);
}
/**
 * @name GenericExtrinsicSignatureV4
 * @description
 * A container for the [[Signature]] associated with a specific [[Extrinsic]]
 */
class GenericExtrinsicSignatureV4 extends Struct/* Struct */.A {
    __internal__signKeys;
    constructor(registry, value, { isSigned } = {}) {
        const signTypes = registry.getSignedExtensionTypes();
        super(registry, (0,spread/* objectSpread */.Z)(
        // eslint-disable-next-line sort-keys
        { signer: 'Address', signature: 'ExtrinsicSignature' }, signTypes), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
        this.__internal__signKeys = Object.keys(signTypes);
        (0,property/* objectProperties */.a)(this, this.__internal__signKeys, (k) => this.get(k));
    }
    /** @internal */
    static decodeExtrinsicSignature(value, isSigned = false) {
        if (!value) {
            return constants/* EMPTY_U8A */.pW;
        }
        else if (value instanceof GenericExtrinsicSignatureV4) {
            return value;
        }
        return isSigned
            ? value
            : constants/* EMPTY_U8A */.pW;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.isSigned
            ? super.encodedLength
            : 0;
    }
    /**
     * @description `true` if the signature is valid
     */
    get isSigned() {
        return !this.signature.isEmpty;
    }
    /**
     * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
     */
    get era() {
        return this.getT('era');
    }
    /**
     * @description The [[Index]] for the signature
     */
    get nonce() {
        return this.getT('nonce');
    }
    /**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */
    get signature() {
        // the second case here is when we don't have an enum signature, treat as raw
        return (this.multiSignature.value || this.multiSignature);
    }
    /**
     * @description The raw [[ExtrinsicSignature]]
     */
    get multiSignature() {
        return this.getT('signature');
    }
    /**
     * @description The [[Address]] that signed
     */
    get signer() {
        return this.getT('signer');
    }
    /**
     * @description The [[Balance]] tip
     */
    get tip() {
        return this.getT('tip');
    }
    _injectSignature(signer, signature, payload) {
        // use the fields exposed to guide the getters
        for (let i = 0, count = this.__internal__signKeys.length; i < count; i++) {
            const k = this.__internal__signKeys[i];
            const v = payload.get(k);
            if (!(0,is_undefined/* isUndefined */.o)(v)) {
                this.set(k, v);
            }
        }
        // additional fields (exposed in struct itself)
        this.set('signer', signer);
        this.set('signature', signature);
        return this;
    }
    /**
     * @description Adds a raw signature
     */
    addSignature(signer, signature, payload) {
        return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe('ExtrinsicSignature', [signature]), new GenericExtrinsicPayloadV4(this.registry, payload));
    }
    /**
     * @description Creates a payload from the supplied options
     */
    createPayload(method, options) {
        const { era, runtimeVersion: { specVersion, transactionVersion } } = options;
        return new GenericExtrinsicPayloadV4(this.registry, (0,spread/* objectSpread */.Z)({}, options, {
            era: era || constants/* IMMORTAL_ERA */.ws,
            method: method.toHex(),
            specVersion,
            transactionVersion
        }));
    }
    /**
     * @description Generate a payload and applies the signature from a keypair
     */
    sign(method, account, options) {
        if (!account?.addressRaw) {
            throw new Error(`Expected a valid keypair for signing, found ${(0,stringify/* stringify */.P)(account)}`);
        }
        const payload = this.createPayload(method, options);
        return this._injectSignature(toAddress(this.registry, account.addressRaw), this.registry.createTypeUnsafe('ExtrinsicSignature', [payload.sign(account)]), payload);
    }
    /**
     * @description Generate a payload and applies a fake signature
     */
    signFake(method, address, options) {
        if (!address) {
            throw new Error(`Expected a valid address for signing, found ${(0,stringify/* stringify */.P)(address)}`);
        }
        const payload = this.createPayload(method, options);
        return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe('ExtrinsicSignature', [FAKE_SIGNATURE]), payload);
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return this.isSigned
            ? super.toU8a(isBare)
            : constants/* EMPTY_U8A */.pW;
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/v4/index.js




;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/extrinsic/index.js








// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/extended/U8aFixed.js
var U8aFixed = __webpack_require__(58833);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/string.js
var string = __webpack_require__(30518);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/address/decode.js
var decode = __webpack_require__(82628);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/address/encode.js
var encode = __webpack_require__(65439);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/generic/AccountId.js



/** @internal */
function decodeAccountId(value) {
    if ((0,u8a/* isU8a */.U)(value) || Array.isArray(value)) {
        return (0,toU8a/* u8aToU8a */.Y)(value);
    }
    else if (!value) {
        return new Uint8Array();
    }
    else if ((0,hex/* isHex */.vq)(value)) {
        return (0,hex_toU8a/* hexToU8a */.G)(value);
    }
    else if ((0,string/* isString */.H)(value)) {
        return (0,decode/* decodeAddress */.m)(value.toString());
    }
    throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
}
class BaseAccountId extends U8aFixed/* U8aFixed */.g {
    constructor(registry, allowedBits = 256 | 264, value) {
        const decoded = decodeAccountId(value);
        const decodedBits = decoded.length * 8;
        // Part of stream containing >= 32 bytes or a all empty (defaults)
        if (decodedBits < allowedBits && decoded.some((b) => b)) {
            throw new Error(`Invalid AccountId provided, expected ${allowedBits >> 3} bytes, found ${decoded.length}`);
        }
        super(registry, decoded, allowedBits);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return super.eq(decodeAccountId(other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return (0,encode/* encodeAddress */.m)(this, this.registry.chainSS58);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'AccountId';
    }
}
/**
 * @name GenericAccountId
 * @description
 * A wrapper around an AccountId/PublicKey representation. Since we are dealing with
 * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is
 * just a Uint8Array wrapper with a fixed length.
 */
class GenericAccountId extends BaseAccountId {
    constructor(registry, value) {
        super(registry, 256, value);
    }
}
class GenericAccountId33 extends BaseAccountId {
    constructor(registry, value) {
        super(registry, 264, value);
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/U32.js
var U32 = __webpack_require__(53488);
// EXTERNAL MODULE: ./node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js
var bn = __webpack_require__(39098);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/bn.js
var is_bn = __webpack_require__(16996);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/number.js
var number = __webpack_require__(52906);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/bigInt.js
var bigInt = __webpack_require__(46770);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/generic/AccountIndex.js



const PREFIX_1BYTE = 0xef;
const PREFIX_2BYTE = 0xfc;
const PREFIX_4BYTE = 0xfd;
const PREFIX_8BYTE = 0xfe;
const MAX_1BYTE = new bn(PREFIX_1BYTE);
const MAX_2BYTE = new bn(1).shln(16);
const MAX_4BYTE = new bn(1).shln(32);
/** @internal */
function decodeAccountIndex(value) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    if (value instanceof GenericAccountIndex) {
        // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an
        // AccountIndex), which has the initial `toString()` implementation.
        return value.toBn();
    }
    else if ((0,is_bn/* isBn */.H)(value) || (0,number/* isNumber */.h)(value) || (0,hex/* isHex */.vq)(value) || (0,u8a/* isU8a */.U)(value) || (0,bigInt/* isBigInt */.C)(value)) {
        return value;
    }
    return decodeAccountIndex((0,decode/* decodeAddress */.m)(value));
}
/**
 * @name GenericAccountIndex
 * @description
 * A wrapper around an AccountIndex, which is a shortened, variable-length encoding
 * for an Account. We extends from [[U32]] to provide the number-like properties.
 */
class GenericAccountIndex extends U32/* u32 */.J {
    constructor(registry, value = new bn(0)) {
        super(registry, decodeAccountIndex(value));
    }
    static calcLength(_value) {
        const value = (0,bn_toBn/* bnToBn */.G)(_value);
        if (value.lte(MAX_1BYTE)) {
            return 1;
        }
        else if (value.lt(MAX_2BYTE)) {
            return 2;
        }
        else if (value.lt(MAX_4BYTE)) {
            return 4;
        }
        return 8;
    }
    static readLength(input) {
        const first = input[0];
        if (first === PREFIX_2BYTE) {
            return [1, 2];
        }
        else if (first === PREFIX_4BYTE) {
            return [1, 4];
        }
        else if (first === PREFIX_8BYTE) {
            return [1, 8];
        }
        return [0, 1];
    }
    static writeLength(input) {
        switch (input.length) {
            case 2: return new Uint8Array([PREFIX_2BYTE]);
            case 4: return new Uint8Array([PREFIX_4BYTE]);
            case 8: return new Uint8Array([PREFIX_8BYTE]);
            default: return new Uint8Array([]);
        }
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        // shortcut for BN or Number, don't create an object
        if ((0,is_bn/* isBn */.H)(other) || (0,number/* isNumber */.h)(other)) {
            return super.eq(other);
        }
        // convert and compare
        return super.eq(this.registry.createTypeUnsafe('AccountIndex', [other]));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        const length = GenericAccountIndex.calcLength(this);
        return (0,encode/* encodeAddress */.m)(this.toU8a().subarray(0, length), this.registry.chainSS58);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'AccountIndex';
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/generic/Block.js

/**
 * @name GenericBlock
 * @description
 * A block encoded with header and extrinsics
 */
class GenericBlock extends Struct/* Struct */.A {
    constructor(registry, value) {
        super(registry, {
            header: 'Header',
            // eslint-disable-next-line sort-keys
            extrinsics: 'Vec<Extrinsic>'
        }, value);
    }
    /**
     * @description Encodes a content [[Hash]] for the block
     */
    get contentHash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description The [[Extrinsic]] contained in the block
     */
    get extrinsics() {
        return this.getT('extrinsics');
    }
    /**
     * @description Block/header [[Hash]]
     */
    get hash() {
        return this.header.hash;
    }
    /**
     * @description The [[Header]] of the block
     */
    get header() {
        return this.getT('header');
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/generic/Call.js


/**
 * Get a mapping of `argument name -> argument type` for the function, from
 * its metadata.
 *
 * @param meta - The function metadata used to get the definition.
 * @internal
 */
function getArgsDef(registry, meta) {
    return meta.fields.reduce((result, { name, type }, index) => {
        result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
        return result;
    }, {});
}
/** @internal */
function decodeCallViaObject(registry, value, _meta) {
    // we only pass args/methodsIndex out
    const { args, callIndex } = value;
    // Get the correct lookupIndex
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    const lookupIndex = callIndex instanceof GenericCallIndex
        ? callIndex.toU8a()
        : callIndex;
    // Find metadata with callIndex
    const meta = _meta || registry.findMetaCall(lookupIndex).meta;
    return {
        args,
        argsDef: getArgsDef(registry, meta),
        callIndex,
        meta
    };
}
/** @internal */
function decodeCallViaU8a(registry, value, _meta) {
    // We need 2 bytes for the callIndex
    const callIndex = registry.firstCallIndex.slice();
    callIndex.set(value.subarray(0, 2), 0);
    // Find metadata with callIndex
    const meta = _meta || registry.findMetaCall(callIndex).meta;
    return {
        args: value.subarray(2),
        argsDef: getArgsDef(registry, meta),
        callIndex,
        meta
    };
}
/**
 * Decode input to pass into constructor.
 *
 * @param value - Value to decode, one of:
 * - hex
 * - Uint8Array
 * - {@see DecodeMethodInput}
 * @param _meta - Metadata to use, so that `injectMethods` lookup is not
 * necessary.
 * @internal
 */
function decodeCall(registry, value = new Uint8Array(), _meta) {
    if ((0,u8a/* isU8a */.U)(value) || (0,hex/* isHex */.vq)(value)) {
        return decodeCallViaU8a(registry, (0,toU8a/* u8aToU8a */.Y)(value), _meta);
    }
    else if ((0,object/* isObject */.K)(value) && value.callIndex && value.args) {
        return decodeCallViaObject(registry, value, _meta);
    }
    throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
}
/**
 * @name GenericCallIndex
 * @description
 * A wrapper around the `[sectionIndex, methodIndex]` value that uniquely identifies a method
 */
class GenericCallIndex extends U8aFixed/* U8aFixed */.g {
    constructor(registry, value) {
        super(registry, value, 16);
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toHex();
    }
}
/**
 * @name GenericCall
 * @description
 * Extrinsic function descriptor
 */
class GenericCall extends Struct/* Struct */.A {
    _meta;
    constructor(registry, value, meta) {
        const decoded = decodeCall(registry, value, meta);
        try {
            super(registry, {
                callIndex: GenericCallIndex,
                // eslint-disable-next-line sort-keys
                args: Struct/* Struct */.A.with(decoded.argsDef)
            }, decoded);
        }
        catch (error) {
            let method = 'unknown.unknown';
            try {
                const c = registry.findMetaCall(decoded.callIndex);
                method = `${c.section}.${c.method}`;
            }
            catch {
                // ignore
            }
            throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
        }
        this._meta = decoded.meta;
    }
    /**
     * @description The arguments for the function call
     */
    get args() {
        return [...this.getT('args').values()];
    }
    /**
     * @description The argument definitions
     */
    get argsDef() {
        return getArgsDef(this.registry, this.meta);
    }
    /**
     * @description The argument entries
     */
    get argsEntries() {
        return [...this.getT('args').entries()];
    }
    /**
     * @description The encoded `[sectionIndex, methodIndex]` identifier
     */
    get callIndex() {
        return this.getT('callIndex').toU8a();
    }
    /**
     * @description The encoded data
     */
    get data() {
        return this.getT('args').toU8a();
    }
    /**
     * @description The [[FunctionMetadata]]
     */
    get meta() {
        return this._meta;
    }
    /**
     * @description Returns the name of the method
     */
    get method() {
        return this.registry.findMetaCall(this.callIndex).method;
    }
    /**
     * @description Returns the module containing the method
     */
    get section() {
        return this.registry.findMetaCall(this.callIndex).section;
    }
    /**
     * @description Checks if the source matches this in type
     */
    is(other) {
        return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExpanded) {
        let call;
        try {
            call = this.registry.findMetaCall(this.callIndex);
        }
        catch {
            // swallow
        }
        return (0,spread/* objectSpread */.Z)({
            args: this.argsEntries.reduce((args, [n, a]) => (0,spread/* objectSpread */.Z)(args, { [n]: a.toHuman(isExpanded) }), {}),
            method: call?.method,
            section: call?.section
        }, isExpanded && call
            ? { docs: call.meta.docs.map((d) => d.toString()) }
            : null);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Call';
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/native/Json.js
var Json = __webpack_require__(9797);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/function.js
var is_function = __webpack_require__(73092);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/null.js
var is_null = __webpack_require__(59833);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/generic/ChainProperties.js


function createValue(registry, type, value, asArray = true) {
    // We detect codec here as well - when found, generally this is constructed from itself
    if (value && (0,is_function/* isFunction */.m)(value.unwrapOrDefault)) {
        return value;
    }
    return registry.createTypeUnsafe(type, [
        asArray
            ? (0,is_null/* isNull */.F)(value) || (0,is_undefined/* isUndefined */.o)(value)
                ? null
                : Array.isArray(value)
                    ? value
                    : [value]
            : value
    ]);
}
function decodeValue(registry, key, value) {
    return key === 'ss58Format'
        ? createValue(registry, 'Option<u32>', value, false)
        : key === 'tokenDecimals'
            ? createValue(registry, 'Option<Vec<u32>>', value)
            : key === 'tokenSymbol'
                ? createValue(registry, 'Option<Vec<Text>>', value)
                : key === 'isEthereum'
                    ? createValue(registry, 'Bool', value, false)
                    : value;
}
function ChainProperties_decode(registry, value) {
    return (
    // allow decoding from a map as well (ourselves)
    value && (0,is_function/* isFunction */.m)(value.entries)
        ? [...value.entries()]
        : Object.entries(value || {})).reduce((all, [key, value]) => {
        all[key] = decodeValue(registry, key, value);
        return all;
    }, {
        isEthereum: registry.createTypeUnsafe('Bool', []),
        ss58Format: registry.createTypeUnsafe('Option<u32>', []),
        tokenDecimals: registry.createTypeUnsafe('Option<Vec<u32>>', []),
        tokenSymbol: registry.createTypeUnsafe('Option<Vec<Text>>', [])
    });
}
class GenericChainProperties extends Json/* Json */.P {
    constructor(registry, value) {
        super(registry, ChainProperties_decode(registry, value));
    }
    /**
     * @description The chain uses Ethereum addresses
     */
    get isEthereum() {
        return this.getT('isEthereum');
    }
    /**
     * @description The chain ss58Format
     */
    get ss58Format() {
        return this.getT('ss58Format');
    }
    /**
     * @description The decimals for each of the tokens
     */
    get tokenDecimals() {
        return this.getT('tokenDecimals');
    }
    /**
     * @description The symbols for the tokens
     */
    get tokenSymbol() {
        return this.getT('tokenSymbol');
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/string/toU8a.js + 2 modules
var string_toU8a = __webpack_require__(56358);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bn/toU8a.js
var bn_toU8a = __webpack_require__(82144);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toString.js + 2 modules
var u8a_toString = __webpack_require__(91873);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/generic/ConsensusEngineId.js


const CID_AURA = /*#__PURE__*/ (0,string_toU8a/* stringToU8a */.d)('aura');
const CID_BABE = /*#__PURE__*/ (0,string_toU8a/* stringToU8a */.d)('BABE');
const CID_GRPA = /*#__PURE__*/ (0,string_toU8a/* stringToU8a */.d)('FRNK');
const CID_POW = /*#__PURE__*/ (0,string_toU8a/* stringToU8a */.d)('pow_');
const CID_NMBS = /*#__PURE__*/ (0,string_toU8a/* stringToU8a */.d)('nmbs');
function getAuraAuthor(registry, bytes, sessionValidators) {
    return sessionValidators[registry.createTypeUnsafe('RawAuraPreDigest', [bytes.toU8a(true)])
        .slotNumber
        .mod(new bn(sessionValidators.length))
        .toNumber()];
}
function getBabeAuthor(registry, bytes, sessionValidators) {
    const digest = registry.createTypeUnsafe('RawBabePreDigestCompat', [bytes.toU8a(true)]);
    return sessionValidators[digest.value.toNumber()];
}
function getBytesAsAuthor(registry, bytes) {
    return registry.createTypeUnsafe('AccountId', [bytes]);
}
/**
 * @name GenericConsensusEngineId
 * @description
 * A 4-byte identifier identifying the engine
 */
class GenericConsensusEngineId extends U8aFixed/* U8aFixed */.g {
    constructor(registry, value) {
        super(registry, (0,number/* isNumber */.h)(value)
            ? (0,bn_toU8a/* bnToU8a */.a)(value, { isLe: false })
            : value, 32);
    }
    /**
     * @description `true` if the engine matches aura
     */
    get isAura() {
        return this.eq(CID_AURA);
    }
    /**
     * @description `true` is the engine matches babe
     */
    get isBabe() {
        return this.eq(CID_BABE);
    }
    /**
     * @description `true` is the engine matches grandpa
     */
    get isGrandpa() {
        return this.eq(CID_GRPA);
    }
    /**
     * @description `true` is the engine matches pow
     */
    get isPow() {
        return this.eq(CID_POW);
    }
    /**
     * @description `true` is the engine matches nimbus
     */
    get isNimbus() {
        return this.eq(CID_NMBS);
    }
    /**
     * @description From the input bytes, decode into an author
     */
    extractAuthor(bytes, sessionValidators) {
        if (sessionValidators?.length) {
            if (this.isAura) {
                return getAuraAuthor(this.registry, bytes, sessionValidators);
            }
            else if (this.isBabe) {
                return getBabeAuthor(this.registry, bytes, sessionValidators);
            }
        }
        // For pow & Nimbus, the bytes are the actual author
        if (this.isPow || this.isNimbus) {
            return getBytesAsAuthor(this.registry, bytes);
        }
        return undefined;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toString();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'ConsensusEngineId';
    }
    /**
     * @description Override the default toString to return a 4-byte string
     */
    toString() {
        return this.isAscii
            ? (0,u8a_toString/* u8aToString */.z)(this)
            : (0,toHex/* u8aToHex */.c)(this);
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/generic/Event.js
var Event = __webpack_require__(1380);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/concat.js
var concat = __webpack_require__(93173);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/generic/LookupSource.js





const ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
/** @internal */
function decodeString(registry, value) {
    const decoded = (0,decode/* decodeAddress */.m)(value);
    return decoded.length === 32
        ? registry.createTypeUnsafe('AccountId', [decoded])
        : registry.createTypeUnsafe('AccountIndex', [(0,toBn/* u8aToBn */._)(decoded)]);
}
/** @internal */
function decodeU8a(registry, value) {
    // This allows us to instantiate an address with a raw publicKey. Do this first before
    // we checking the first byte, otherwise we may split an already-existent valid address
    if (value.length === 32) {
        return registry.createTypeUnsafe('AccountId', [value]);
    }
    else if (value[0] === 0xff) {
        return registry.createTypeUnsafe('AccountId', [value.subarray(1)]);
    }
    const [offset, length] = GenericAccountIndex.readLength(value);
    return registry.createTypeUnsafe('AccountIndex', [(0,toBn/* u8aToBn */._)(value.subarray(offset, offset + length))]);
}
/** @internal */
function decodeAddressOrIndex(registry, value) {
    return value instanceof GenericLookupSource
        ? value.inner
        : value instanceof GenericAccountId || value instanceof GenericAccountIndex
            ? value
            : (0,is_bn/* isBn */.H)(value) || (0,number/* isNumber */.h)(value) || (0,bigInt/* isBigInt */.C)(value)
                ? registry.createTypeUnsafe('AccountIndex', [value])
                : Array.isArray(value) || (0,hex/* isHex */.vq)(value) || (0,u8a/* isU8a */.U)(value)
                    ? decodeU8a(registry, (0,toU8a/* u8aToU8a */.Y)(value))
                    : decodeString(registry, value);
}
/**
 * @name LookupSource
 * @description
 * A wrapper around an AccountId and/or AccountIndex that is encoded with a prefix.
 * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
 * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
 * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
 */
class GenericLookupSource extends Base/* AbstractBase */.E {
    constructor(registry, value = new Uint8Array()) {
        super(registry, decodeAddressOrIndex(registry, value));
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        const rawLength = this._rawLength;
        return rawLength + (
        // for 1 byte AccountIndexes, we are not adding a specific prefix
        rawLength > 1
            ? 1
            : 0);
    }
    /**
     * @description The length of the raw value, either AccountIndex or AccountId
     */
    get _rawLength() {
        return this.inner instanceof GenericAccountIndex
            ? GenericAccountIndex.calcLength(this.inner)
            : this.inner.encodedLength;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        const value = this.inner.toU8a().subarray(0, this._rawLength);
        return {
            outer: [
                new Uint8Array(this.inner instanceof GenericAccountIndex
                    ? GenericAccountIndex.writeLength(value)
                    : ACCOUNT_ID_PREFIX),
                value
            ]
        };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return (0,toHex/* u8aToHex */.c)(this.toU8a());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Address';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const encoded = this.inner.toU8a().subarray(0, this._rawLength);
        return isBare
            ? encoded
            : (0,concat/* u8aConcat */.e)(this.inner instanceof GenericAccountIndex
                ? GenericAccountIndex.writeLength(encoded)
                : ACCOUNT_ID_PREFIX, encoded);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/generic/MultiAddress.js





function MultiAddress_decodeU8a(registry, u8a) {
    if ([0, 32].includes(u8a.length)) {
        return { Id: u8a };
    }
    else if (u8a.length === 20) {
        return { Address20: u8a };
    }
    else if (u8a.length <= 8) {
        return { Index: registry.createTypeUnsafe('AccountIndex', [u8a]).toNumber() };
    }
    return u8a;
}
function decodeMultiAny(registry, value) {
    if (value instanceof GenericAccountId) {
        return { Id: value };
    }
    else if ((0,u8a/* isU8a */.U)(value)) {
        // NOTE This is after the AccountId check (which is U8a)
        return MultiAddress_decodeU8a(registry, value);
    }
    else if (value instanceof GenericMultiAddress) {
        return value;
    }
    else if (value instanceof GenericAccountIndex || (0,is_bn/* isBn */.H)(value) || (0,number/* isNumber */.h)(value)) {
        return { Index: (0,number/* isNumber */.h)(value) ? value : value.toNumber() };
    }
    else if ((0,string/* isString */.H)(value)) {
        return MultiAddress_decodeU8a(registry, (0,decode/* decodeAddress */.m)(value.toString()));
    }
    return value;
}
class GenericMultiAddress extends Enum/* Enum */.x {
    constructor(registry, value) {
        super(registry, {
            Id: 'AccountId',
            Index: 'Compact<AccountIndex>',
            Raw: 'Bytes',
            // eslint-disable-next-line sort-keys
            Address32: 'H256',
            // eslint-disable-next-line sort-keys
            Address20: 'H160'
        }, decodeMultiAny(registry, value));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        const { inner, outer = [] } = this.inner.inspect();
        return {
            inner,
            outer: [new Uint8Array([this.index]), ...outer]
        };
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return this.value.toString();
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/native/Bool.js
var Bool = __webpack_require__(48903);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/boolean.js
var is_boolean = __webpack_require__(54782);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/generic/Vote.js


const AYE_BITS = 0b10000000;
const NAY_BITS = 0b00000000;
const CON_MASK = 0b01111111;
const DEF_CONV = 0b00000000; // the default conviction, None
/** @internal */
function decodeVoteBool(value) {
    return value
        ? new Uint8Array([AYE_BITS | DEF_CONV])
        : new Uint8Array([NAY_BITS]);
}
/** @internal */
function decodeVoteU8a(value) {
    return value.length
        ? value.subarray(0, 1)
        : new Uint8Array([NAY_BITS]);
}
/** @internal */
function decodeVoteType(registry, value) {
    return new Uint8Array([
        (new Bool/* bool */.X(registry, value.aye).isTrue
            ? AYE_BITS
            : NAY_BITS) |
            registry.createTypeUnsafe('Conviction', [value.conviction || DEF_CONV]).index
    ]);
}
/** @internal */
function decodeVote(registry, value) {
    if ((0,u8a/* isU8a */.U)(value)) {
        return decodeVoteU8a(value);
    }
    else if ((0,is_undefined/* isUndefined */.o)(value) || value instanceof Boolean || (0,is_boolean/* isBoolean */.j)(value)) {
        return decodeVoteBool(new Bool/* bool */.X(registry, value).isTrue);
    }
    else if ((0,number/* isNumber */.h)(value)) {
        return decodeVoteBool(value < 0);
    }
    return decodeVoteType(registry, value);
}
/**
 * @name GenericVote
 * @description
 * A number of lock periods, plus a vote, one way or the other.
 */
class GenericVote extends U8aFixed/* U8aFixed */.g {
    __internal__aye;
    __internal__conviction;
    constructor(registry, value) {
        // decoded is just 1 byte
        // Aye: Most Significant Bit
        // Conviction: 0000 - 0101
        const decoded = decodeVote(registry, value);
        super(registry, decoded, 8);
        this.__internal__aye = (decoded[0] & AYE_BITS) === AYE_BITS;
        this.__internal__conviction = this.registry.createTypeUnsafe('Conviction', [decoded[0] & CON_MASK]);
    }
    /**
     * @description returns a V2 conviction
     */
    get conviction() {
        return this.__internal__conviction;
    }
    /**
     * @description true if the wrapped value is a positive vote
     */
    get isAye() {
        return this.__internal__aye;
    }
    /**
     * @description true if the wrapped value is a negative vote
     */
    get isNay() {
        return !this.isAye;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExpanded) {
        return {
            conviction: this.conviction.toHuman(isExpanded),
            vote: this.isAye ? 'Aye' : 'Nay'
        };
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return {
            aye: this.isAye,
            conviction: this.conviction.toPrimitive()
        };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Vote';
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/ethereum/isAddress.js
var isAddress = __webpack_require__(23143);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/ethereum/encode.js
var ethereum_encode = __webpack_require__(42173);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/ethereum/AccountId.js



/** @internal */
function AccountId_decodeAccountId(value) {
    if ((0,u8a/* isU8a */.U)(value) || Array.isArray(value)) {
        return (0,toU8a/* u8aToU8a */.Y)(value);
    }
    else if ((0,hex/* isHex */.vq)(value) || (0,isAddress/* isEthereumAddress */.u)(value.toString())) {
        return (0,hex_toU8a/* hexToU8a */.G)(value.toString());
    }
    else if ((0,string/* isString */.H)(value)) {
        return (0,toU8a/* u8aToU8a */.Y)(value);
    }
    return value;
}
/**
 * @name GenericEthereumAccountId
 * @description
 * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with
 * underlying addresses (20 bytes in length), we extend from U8aFixed which is
 * just a Uint8Array wrapper with a fixed length.
 */
class GenericEthereumAccountId extends U8aFixed/* U8aFixed */.g {
    constructor(registry, value = new Uint8Array()) {
        super(registry, AccountId_decodeAccountId(value), 160);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return !!other && super.eq(AccountId_decodeAccountId(other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
        return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return this.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return (0,ethereum_encode/* ethereumEncode */.K)(this);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'AccountId';
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/ethereum/LookupSource.js





const LookupSource_ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
/** @internal */
function LookupSource_decodeString(registry, value) {
    const decoded = (0,decode/* decodeAddress */.m)(value);
    return decoded.length === 20
        ? registry.createTypeUnsafe('EthereumAccountId', [decoded])
        : registry.createTypeUnsafe('AccountIndex', [(0,toBn/* u8aToBn */._)(decoded)]);
}
/** @internal */
function LookupSource_decodeU8a(registry, value) {
    // This allows us to instantiate an address with a raw publicKey. Do this first before
    // we checking the first byte, otherwise we may split an already-existent valid address
    if (value.length === 20) {
        return registry.createTypeUnsafe('EthereumAccountId', [value]);
    }
    else if (value[0] === 0xff) {
        return registry.createTypeUnsafe('EthereumAccountId', [value.subarray(1)]);
    }
    const [offset, length] = GenericAccountIndex.readLength(value);
    return registry.createTypeUnsafe('AccountIndex', [(0,toBn/* u8aToBn */._)(value.subarray(offset, offset + length))]);
}
function LookupSource_decodeAddressOrIndex(registry, value) {
    return value instanceof GenericEthereumLookupSource
        ? value.inner
        : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex
            ? value
            : (0,u8a/* isU8a */.U)(value) || Array.isArray(value) || (0,hex/* isHex */.vq)(value)
                ? LookupSource_decodeU8a(registry, (0,toU8a/* u8aToU8a */.Y)(value))
                : (0,is_bn/* isBn */.H)(value) || (0,number/* isNumber */.h)(value) || (0,bigInt/* isBigInt */.C)(value)
                    ? registry.createTypeUnsafe('AccountIndex', [value])
                    : LookupSource_decodeString(registry, value);
}
/**
 * @name GenericEthereumLookupSource
 * @description
 * A wrapper around an EthereumAccountId and/or AccountIndex that is encoded with a prefix.
 * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
 * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
 * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
 */
class GenericEthereumLookupSource extends Base/* AbstractBase */.E {
    constructor(registry, value = new Uint8Array()) {
        super(registry, LookupSource_decodeAddressOrIndex(registry, value));
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        const rawLength = this._rawLength;
        return rawLength + (
        // for 1 byte AccountIndexes, we are not adding a specific prefix
        rawLength > 1
            ? 1
            : 0);
    }
    /**
     * @description The length of the raw value, either AccountIndex or AccountId
     */
    get _rawLength() {
        return this.inner instanceof GenericAccountIndex
            ? GenericAccountIndex.calcLength(this.inner)
            : this.inner.encodedLength;
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
        return (0,toHex/* u8aToHex */.c)(this.toU8a());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return 'Address';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        const encoded = this.inner.toU8a().subarray(0, this._rawLength);
        return isBare
            ? encoded
            : (0,concat/* u8aConcat */.e)(this.inner instanceof GenericAccountIndex
                ? GenericAccountIndex.writeLength(encoded)
                : LookupSource_ACCOUNT_ID_PREFIX, encoded);
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/ethereum/index.js



;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/generic/index.js












// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/extended/BitVec.js
var BitVec = __webpack_require__(10657);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/extended/Bytes.js
var Bytes = __webpack_require__(77229);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/F32.js
var F32 = __webpack_require__(44903);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/F64.js
var F64 = __webpack_require__(47372);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/I8.js
var I8 = __webpack_require__(34129);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/I16.js
var I16 = __webpack_require__(99387);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/I32.js
var I32 = __webpack_require__(32871);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/I64.js
var I64 = __webpack_require__(31584);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/I128.js
var I128 = __webpack_require__(31799);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/I256.js
var I256 = __webpack_require__(41332);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/ISize.js
var ISize = __webpack_require__(85794);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/base/Null.js
var Null = __webpack_require__(73260);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/extended/OptionBool.js
var OptionBool = __webpack_require__(20569);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/native/Text.js
var Text = __webpack_require__(26411);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/extended/Type.js
var Type = __webpack_require__(6585);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/U8.js
var U8 = __webpack_require__(11176);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/U16.js
var U16 = __webpack_require__(2064);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/U128.js
var U128 = __webpack_require__(88941);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/U256.js
var U256 = __webpack_require__(98257);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/USize.js
var USize = __webpack_require__(31767);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/primitive/Data.js


/** @internal */
function decodeDataU8a(registry, value) {
    const indicator = value[0];
    if (!indicator) {
        return [undefined, undefined];
    }
    else if (indicator >= 1 && indicator <= 33) {
        const length = indicator - 1;
        const data = value.subarray(1, length + 1);
        // in this case, we are passing a Raw back (since we have no length)
        return [registry.createTypeUnsafe('Raw', [data]), 1];
    }
    else if (indicator >= 34 && indicator <= 37) {
        return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2
    }
    throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
}
/** @internal */
function decodeData(registry, value) {
    if ((0,u8a/* isU8a */.U)(value) || (0,string/* isString */.H)(value)) {
        return decodeDataU8a(registry, (0,toU8a/* u8aToU8a */.Y)(value));
    }
    else if (!value) {
        return [undefined, undefined];
    }
    // assume we have an Enum or an  object input, handle this via the normal Enum decoding
    return [value, undefined];
}
/**
 * @name Data
 * @description
 * A [[Data]] container with node, raw or hashed data
 */
class Data extends Enum/* Enum */.x {
    constructor(registry, value) {
        super(registry, {
            None: 'Null', // 0
            Raw: 'Bytes', // 1
            // eslint-disable-next-line sort-keys
            BlakeTwo256: 'H256', // 2
            Sha256: 'H256', // 3
            // eslint-disable-next-line sort-keys
            Keccak256: 'H256', // 4
            ShaThree256: 'H256' // 5
        }, ...decodeData(registry, value));
        if (this.isRaw && this.asRaw.length > 32) {
            throw new Error('Data.Raw values are limited to a maximum length of 32 bytes');
        }
    }
    get asBlakeTwo256() {
        return this.value;
    }
    get asKeccak256() {
        return this.value;
    }
    get asRaw() {
        return this.value;
    }
    get asSha256() {
        return this.value;
    }
    get asShaThree256() {
        return this.value;
    }
    get isBlakeTwo256() {
        return this.index === 2;
    }
    get isKeccak256() {
        return this.index === 4;
    }
    get isNone() {
        return this.index === 0;
    }
    get isRaw() {
        return this.index === 1;
    }
    get isSha256() {
        return this.index === 3;
    }
    get isShaThree256() {
        return this.index === 5;
    }
    /**
     * @description The encoded length
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a() {
        if (this.index === 0) {
            return new Uint8Array(1);
        }
        else if (this.index === 1) {
            // don't add the length, just the data
            const data = this.value.toU8a(true);
            const length = Math.min(data.length, 32);
            const u8a = new Uint8Array(length + 1);
            u8a.set([length + 1], 0);
            u8a.set(data.subarray(0, length), 1);
            return u8a;
        }
        // otherwise we simply have a hash
        const u8a = new Uint8Array(33);
        u8a.set([this.index + 32], 0);
        u8a.set(this.value.toU8a(), 1);
        return u8a;
    }
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/util/getSiName.js
var getSiName = __webpack_require__(85725);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/util/storage.js
var storage = __webpack_require__(88293);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/primitive/StorageKey.js




const HASHER_MAP = {
    // opaque
    Blake2_128: [16, false], // eslint-disable-line camelcase
    Blake2_128Concat: [16, true], // eslint-disable-line camelcase
    Blake2_256: [32, false], // eslint-disable-line camelcase
    Identity: [0, true],
    Twox128: [16, false],
    Twox256: [32, false],
    Twox64Concat: [8, true]
};
/** @internal */
function decodeStorageKey(value) {
    if ((0,u8a/* isU8a */.U)(value) || !value || (0,string/* isString */.H)(value)) {
        // let Bytes handle these inputs
        return { key: value };
    }
    else if (value instanceof StorageKey) {
        return {
            key: value,
            method: value.method,
            section: value.section
        };
    }
    else if ((0,is_function/* isFunction */.m)(value)) {
        return {
            key: value(),
            method: value.method,
            section: value.section
        };
    }
    else if (Array.isArray(value)) {
        const [fn, args = []] = value;
        if (!(0,is_function/* isFunction */.m)(fn)) {
            throw new Error('Expected function input for key construction');
        }
        if (fn.meta && fn.meta.type.isMap) {
            const map = fn.meta.type.asMap;
            if (!Array.isArray(args) || args.length !== map.hashers.length) {
                throw new Error(`Expected an array of ${map.hashers.length} values as params to a Map query`);
            }
        }
        return {
            key: fn(...args),
            method: fn.method,
            section: fn.section
        };
    }
    throw new Error(`Unable to convert input ${value} to StorageKey`);
}
/** @internal */
function decodeHashers(registry, value, hashers) {
    // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total
    let offset = 32;
    const count = hashers.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
        const [hasher, type] = hashers[i];
        const [hashLen, canDecode] = HASHER_MAP[hasher.type];
        const decoded = canDecode
            ? registry.createTypeUnsafe((0,getSiName/* getSiName */.I)(registry.lookup, type), [value.subarray(offset + hashLen)])
            : registry.createTypeUnsafe('Raw', [value.subarray(offset, offset + hashLen)]);
        offset += hashLen + (canDecode ? decoded.encodedLength : 0);
        result[i] = decoded;
    }
    return result;
}
/** @internal */
function decodeArgsFromMeta(registry, value, meta) {
    if (!meta || !meta.type.isMap) {
        return [];
    }
    const { hashers, key } = meta.type.asMap;
    const keys = hashers.length === 1
        ? [key]
        : registry.lookup.getSiType(key).def.asTuple;
    return decodeHashers(registry, value, hashers.map((h, i) => [h, keys[i]]));
}
/** @internal */
function getMeta(value) {
    if (value instanceof StorageKey) {
        return value.meta;
    }
    else if ((0,is_function/* isFunction */.m)(value)) {
        return value.meta;
    }
    else if (Array.isArray(value)) {
        const [fn] = value;
        return fn.meta;
    }
    return undefined;
}
/** @internal */
function getType(registry, value) {
    if (value instanceof StorageKey) {
        return value.outputType;
    }
    else if ((0,is_function/* isFunction */.m)(value)) {
        return (0,storage/* unwrapStorageType */.P)(registry, value.meta.type);
    }
    else if (Array.isArray(value)) {
        const [fn] = value;
        if (fn.meta) {
            return (0,storage/* unwrapStorageType */.P)(registry, fn.meta.type);
        }
    }
    // If we have no type set, default to Raw
    return 'Raw';
}
/**
 * @name StorageKey
 * @description
 * A representation of a storage key (typically hashed) in the system. It can be
 * constructed by passing in a raw key or a StorageEntry with (optional) arguments.
 */
class StorageKey extends Bytes/* Bytes */.J {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore This is assigned via this.decodeArgsFromMeta()
    __internal__args;
    __internal__meta;
    __internal__outputType;
    __internal__method;
    __internal__section;
    constructor(registry, value, override = {}) {
        const { key, method, section } = decodeStorageKey(value);
        super(registry, key);
        this.__internal__outputType = getType(registry, value);
        // decode the args (as applicable based on the key and the hashers, after all init)
        this.setMeta(getMeta(value), override.section || section, override.method || method);
    }
    /**
     * @description Return the decoded arguments (applicable to map with decodable values)
     */
    get args() {
        return this.__internal__args;
    }
    /**
     * @description The metadata or `undefined` when not available
     */
    get meta() {
        return this.__internal__meta;
    }
    /**
     * @description The key method or `undefined` when not specified
     */
    get method() {
        return this.__internal__method;
    }
    /**
     * @description The output type
     */
    get outputType() {
        return this.__internal__outputType;
    }
    /**
     * @description The key section or `undefined` when not specified
     */
    get section() {
        return this.__internal__section;
    }
    is(key) {
        return key.section === this.section && key.method === this.method;
    }
    /**
     * @description Sets the meta for this key
     */
    setMeta(meta, section, method) {
        this.__internal__meta = meta;
        this.__internal__method = method || this.__internal__method;
        this.__internal__section = section || this.__internal__section;
        if (meta) {
            this.__internal__outputType = (0,storage/* unwrapStorageType */.P)(this.registry, meta.type);
        }
        try {
            this.__internal__args = decodeArgsFromMeta(this.registry, this.toU8a(true), meta);
        }
        catch {
            // ignore...
        }
        return this;
    }
    /**
     * @description Returns the Human representation for this type
     */
    toHuman() {
        return this.__internal__args.length
            ? this.__internal__args.map((a) => a.toHuman())
            : super.toHuman();
    }
    /**
     * @description Returns the raw type for this
     */
    toRawType() {
        return 'StorageKey';
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/primitive/index.js
/**
 * @summary Type definitions that are used in the system
 */




;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/index.types.js





/***/ }),

/***/ 87997:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  assetConversion: () => (/* reexport */ assetConversion_definitions),
  assets: () => (/* reexport */ assets_definitions),
  attestations: () => (/* reexport */ attestations_definitions),
  aura: () => (/* reexport */ aura_definitions),
  author: () => (/* reexport */ author_definitions),
  authorship: () => (/* reexport */ authorship_definitions),
  babe: () => (/* reexport */ babe_definitions),
  balances: () => (/* reexport */ balances_definitions),
  beefy: () => (/* reexport */ beefy_definitions),
  benchmark: () => (/* reexport */ benchmark_definitions),
  blockbuilder: () => (/* reexport */ blockbuilder_definitions),
  bridges: () => (/* reexport */ bridges_definitions),
  chain: () => (/* reexport */ chain_definitions),
  childstate: () => (/* reexport */ childstate_definitions),
  claims: () => (/* reexport */ claims_definitions),
  collective: () => (/* reexport */ collective_definitions),
  consensus: () => (/* reexport */ consensus_definitions),
  contracts: () => (/* reexport */ contracts_definitions),
  contractsAbi: () => (/* reexport */ contractsAbi_definitions),
  crowdloan: () => (/* reexport */ crowdloan_definitions),
  cumulus: () => (/* reexport */ cumulus_definitions),
  democracy: () => (/* reexport */ democracy_definitions),
  dev: () => (/* reexport */ dev_definitions),
  discovery: () => (/* reexport */ discovery_definitions),
  elections: () => (/* reexport */ elections_definitions),
  engine: () => (/* reexport */ engine_definitions),
  eth: () => (/* reexport */ eth_definitions),
  evm: () => (/* reexport */ evm_definitions),
  extrinsics: () => (/* reexport */ extrinsics_definitions),
  finality: () => (/* reexport */ finality_definitions),
  fungibles: () => (/* reexport */ fungibles_definitions),
  genericAsset: () => (/* reexport */ genericAsset_definitions),
  gilt: () => (/* reexport */ gilt_definitions),
  grandpa: () => (/* reexport */ grandpa_definitions),
  identity: () => (/* reexport */ identity_definitions),
  imOnline: () => (/* reexport */ imOnline_definitions),
  lottery: () => (/* reexport */ lottery_definitions),
  metadata: () => (/* reexport */ definitions),
  mmr: () => (/* reexport */ mmr_definitions),
  nfts: () => (/* reexport */ nfts_definitions),
  nimbus: () => (/* reexport */ nimbus_definitions),
  nompools: () => (/* reexport */ nompools_definitions),
  offchain: () => (/* reexport */ offchain_definitions),
  offences: () => (/* reexport */ offences_definitions),
  ormlOracle: () => (/* reexport */ ormlOracle_definitions),
  ormlTokens: () => (/* reexport */ ormlTokens_definitions),
  parachains: () => (/* reexport */ parachains_definitions),
  payment: () => (/* reexport */ payment_definitions),
  poll: () => (/* reexport */ poll_definitions),
  pow: () => (/* reexport */ pow_definitions),
  proxy: () => (/* reexport */ proxy_definitions),
  purchase: () => (/* reexport */ purchase_definitions),
  recovery: () => (/* reexport */ recovery_definitions),
  rpc: () => (/* reexport */ rpc_definitions),
  runtime: () => (/* reexport */ runtime_definitions/* default */.Z),
  scaleInfo: () => (/* reexport */ scaleInfo_definitions),
  scheduler: () => (/* reexport */ scheduler_definitions),
  session: () => (/* reexport */ session_definitions),
  society: () => (/* reexport */ society_definitions),
  staking: () => (/* reexport */ staking_definitions),
  state: () => (/* reexport */ state_definitions),
  support: () => (/* reexport */ support_definitions),
  syncstate: () => (/* reexport */ syncstate_definitions),
  system: () => (/* reexport */ system_definitions),
  treasury: () => (/* reexport */ treasury_definitions),
  txpayment: () => (/* reexport */ txpayment_definitions),
  txqueue: () => (/* reexport */ txqueue_definitions),
  uniques: () => (/* reexport */ uniques_definitions),
  utility: () => (/* reexport */ utility_definitions),
  vesting: () => (/* reexport */ vesting_definitions),
  xcm: () => (/* reexport */ xcm_definitions)
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/metadata/runtime.js
const META_V1_TO_V2 = {
    metadata: {
        description: 'Returns the metadata of a runtime',
        params: [],
        type: 'OpaqueMetadata'
    }
};
const runtime = {
    Metadata: [
        {
            methods: {
                metadata_at_version: {
                    description: 'Returns the metadata at a given version.',
                    params: [
                        {
                            name: 'version',
                            type: 'u32'
                        }
                    ],
                    type: 'Option<OpaqueMetadata>'
                },
                metadata_versions: {
                    description: 'Returns the supported metadata versions.',
                    params: [],
                    type: 'Vec<u32>'
                },
                ...META_V1_TO_V2
            },
            version: 2
        },
        {
            methods: {
                ...META_V1_TO_V2
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/metadata/v9.js
const v9 = {
    // v9
    ErrorMetadataV9: {
        name: 'Text',
        docs: 'Vec<Text>'
    },
    EventMetadataV9: {
        name: 'Text',
        args: 'Vec<Type>',
        docs: 'Vec<Text>'
    },
    FunctionArgumentMetadataV9: {
        name: 'Text',
        type: 'Type'
    },
    FunctionMetadataV9: {
        name: 'Text',
        args: 'Vec<FunctionArgumentMetadataV9>',
        docs: 'Vec<Text>'
    },
    MetadataV9: {
        modules: 'Vec<ModuleMetadataV9>'
    },
    ModuleConstantMetadataV9: {
        name: 'Text',
        type: 'Type',
        value: 'Bytes',
        docs: 'Vec<Text>'
    },
    ModuleMetadataV9: {
        name: 'Text',
        storage: 'Option<StorageMetadataV9>',
        calls: 'Option<Vec<FunctionMetadataV9>>',
        events: 'Option<Vec<EventMetadataV9>>',
        constants: 'Vec<ModuleConstantMetadataV9>',
        errors: 'Vec<ErrorMetadataV9>'
    },
    StorageEntryMetadataV9: {
        name: 'Text',
        modifier: 'StorageEntryModifierV9',
        type: 'StorageEntryTypeV9',
        fallback: 'Bytes',
        docs: 'Vec<Text>'
    },
    StorageEntryModifierV9: {
        _enum: ['Optional', 'Default', 'Required']
    },
    StorageEntryTypeV9: {
        _enum: {
            Plain: 'Type',
            Map: {
                hasher: 'StorageHasherV9',
                key: 'Type',
                value: 'Type',
                linked: 'bool'
            },
            DoubleMap: {
                hasher: 'StorageHasherV9',
                key1: 'Type',
                key2: 'Type',
                value: 'Type',
                key2Hasher: 'StorageHasherV9'
            }
        }
    },
    StorageHasherV9: {
        _enum: {
            Blake2_128: null, // eslint-disable-line camelcase
            Blake2_256: null, // eslint-disable-line camelcase
            Twox128: null,
            Twox256: null,
            Twox64Concat: null
        }
    },
    StorageMetadataV9: {
        prefix: 'Text',
        items: 'Vec<StorageEntryMetadataV9>'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/metadata/v10.js
const v10 = {
    // v10
    ErrorMetadataV10: 'ErrorMetadataV9',
    EventMetadataV10: 'EventMetadataV9',
    FunctionArgumentMetadataV10: 'FunctionArgumentMetadataV9',
    FunctionMetadataV10: 'FunctionMetadataV9',
    MetadataV10: {
        modules: 'Vec<ModuleMetadataV10>'
    },
    ModuleConstantMetadataV10: 'ModuleConstantMetadataV9',
    ModuleMetadataV10: {
        name: 'Text',
        storage: 'Option<StorageMetadataV10>',
        calls: 'Option<Vec<FunctionMetadataV10>>',
        events: 'Option<Vec<EventMetadataV10>>',
        constants: 'Vec<ModuleConstantMetadataV10>',
        errors: 'Vec<ErrorMetadataV10>'
    },
    StorageEntryModifierV10: 'StorageEntryModifierV9',
    StorageEntryMetadataV10: {
        name: 'Text',
        modifier: 'StorageEntryModifierV10',
        type: 'StorageEntryTypeV10',
        fallback: 'Bytes',
        docs: 'Vec<Text>'
    },
    StorageEntryTypeV10: {
        _enum: {
            Plain: 'Type',
            Map: {
                hasher: 'StorageHasherV10',
                key: 'Type',
                value: 'Type',
                linked: 'bool'
            },
            DoubleMap: {
                hasher: 'StorageHasherV10',
                key1: 'Type',
                key2: 'Type',
                value: 'Type',
                key2Hasher: 'StorageHasherV10'
            }
        }
    },
    StorageMetadataV10: {
        prefix: 'Text',
        items: 'Vec<StorageEntryMetadataV10>'
    },
    StorageHasherV10: {
        _enum: {
            Blake2_128: null, // eslint-disable-line camelcase
            Blake2_256: null, // eslint-disable-line camelcase
            Blake2_128Concat: null, // eslint-disable-line camelcase
            Twox128: null,
            Twox256: null,
            Twox64Concat: null
        }
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/metadata/hashers.js
/* eslint-disable sort-keys */
const AllHashers = {
    Blake2_128: null, // eslint-disable-line camelcase
    Blake2_256: null, // eslint-disable-line camelcase
    Blake2_128Concat: null, // eslint-disable-line camelcase
    Twox128: null,
    Twox256: null,
    Twox64Concat: null,
    // new in v11
    Identity: null
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/metadata/v11.js

const v11 = {
    // v11
    ErrorMetadataV11: 'ErrorMetadataV10',
    EventMetadataV11: 'EventMetadataV10',
    ExtrinsicMetadataV11: {
        version: 'u8',
        signedExtensions: 'Vec<Text>'
    },
    FunctionArgumentMetadataV11: 'FunctionArgumentMetadataV10',
    FunctionMetadataV11: 'FunctionMetadataV10',
    MetadataV11: {
        modules: 'Vec<ModuleMetadataV11>',
        extrinsic: 'ExtrinsicMetadataV11'
    },
    ModuleConstantMetadataV11: 'ModuleConstantMetadataV10',
    ModuleMetadataV11: {
        name: 'Text',
        storage: 'Option<StorageMetadataV11>',
        calls: 'Option<Vec<FunctionMetadataV11>>',
        events: 'Option<Vec<EventMetadataV11>>',
        constants: 'Vec<ModuleConstantMetadataV11>',
        errors: 'Vec<ErrorMetadataV11>'
    },
    StorageEntryModifierV11: 'StorageEntryModifierV10',
    StorageEntryMetadataV11: {
        name: 'Text',
        modifier: 'StorageEntryModifierV11',
        type: 'StorageEntryTypeV11',
        fallback: 'Bytes',
        docs: 'Vec<Text>'
    },
    StorageEntryTypeV11: {
        _enum: {
            Plain: 'Type',
            Map: {
                hasher: 'StorageHasherV11',
                key: 'Type',
                value: 'Type',
                linked: 'bool'
            },
            DoubleMap: {
                hasher: 'StorageHasherV11',
                key1: 'Type',
                key2: 'Type',
                value: 'Type',
                key2Hasher: 'StorageHasherV11'
            }
        }
    },
    StorageMetadataV11: {
        prefix: 'Text',
        items: 'Vec<StorageEntryMetadataV11>'
    },
    StorageHasherV11: {
        _enum: AllHashers
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/metadata/v12.js
const v12 = {
    // v12
    ErrorMetadataV12: 'ErrorMetadataV11',
    EventMetadataV12: 'EventMetadataV11',
    ExtrinsicMetadataV12: 'ExtrinsicMetadataV11',
    FunctionArgumentMetadataV12: 'FunctionArgumentMetadataV11',
    FunctionMetadataV12: 'FunctionMetadataV11',
    MetadataV12: {
        modules: 'Vec<ModuleMetadataV12>',
        extrinsic: 'ExtrinsicMetadataV12'
    },
    ModuleConstantMetadataV12: 'ModuleConstantMetadataV11',
    ModuleMetadataV12: {
        name: 'Text',
        storage: 'Option<StorageMetadataV12>',
        calls: 'Option<Vec<FunctionMetadataV12>>',
        events: 'Option<Vec<EventMetadataV12>>',
        constants: 'Vec<ModuleConstantMetadataV12>',
        errors: 'Vec<ErrorMetadataV12>',
        index: 'u8'
    },
    StorageEntryModifierV12: 'StorageEntryModifierV11',
    StorageEntryMetadataV12: 'StorageEntryMetadataV11',
    StorageEntryTypeV12: 'StorageEntryTypeV11',
    StorageMetadataV12: 'StorageMetadataV11',
    StorageHasherV12: 'StorageHasherV11'
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/metadata/v13.js
const v13 = {
    // v13
    ErrorMetadataV13: 'ErrorMetadataV12',
    EventMetadataV13: 'EventMetadataV12',
    ExtrinsicMetadataV13: 'ExtrinsicMetadataV12',
    FunctionArgumentMetadataV13: 'FunctionArgumentMetadataV12',
    FunctionMetadataV13: 'FunctionMetadataV12',
    MetadataV13: {
        modules: 'Vec<ModuleMetadataV13>',
        extrinsic: 'ExtrinsicMetadataV13'
    },
    ModuleConstantMetadataV13: 'ModuleConstantMetadataV12',
    ModuleMetadataV13: {
        name: 'Text',
        storage: 'Option<StorageMetadataV13>',
        calls: 'Option<Vec<FunctionMetadataV13>>',
        events: 'Option<Vec<EventMetadataV13>>',
        constants: 'Vec<ModuleConstantMetadataV13>',
        errors: 'Vec<ErrorMetadataV13>',
        index: 'u8'
    },
    StorageEntryModifierV13: 'StorageEntryModifierV12',
    StorageEntryMetadataV13: {
        name: 'Text',
        modifier: 'StorageEntryModifierV13',
        type: 'StorageEntryTypeV13',
        fallback: 'Bytes',
        docs: 'Vec<Text>'
    },
    StorageEntryTypeV13: {
        _enum: {
            Plain: 'Type',
            Map: {
                hasher: 'StorageHasherV13',
                key: 'Type',
                value: 'Type',
                linked: 'bool'
            },
            DoubleMap: {
                hasher: 'StorageHasherV13',
                key1: 'Type',
                key2: 'Type',
                value: 'Type',
                key2Hasher: 'StorageHasherV13'
            },
            NMap: {
                keyVec: 'Vec<Type>',
                hashers: 'Vec<StorageHasherV13>',
                value: 'Type'
            }
        }
    },
    StorageMetadataV13: {
        prefix: 'Text',
        items: 'Vec<StorageEntryMetadataV13>'
    },
    StorageHasherV13: 'StorageHasherV12'
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/scaleInfo/v1.js
/* eslint-disable sort-keys */
const Si1Variant = {
    name: 'Text',
    fields: 'Vec<Si1Field>',
    index: 'u8',
    docs: 'Vec<Text>'
};
const v1 = {
    Si1Field: {
        name: 'Option<Text>',
        type: 'Si1LookupTypeId',
        typeName: 'Option<Text>',
        docs: 'Vec<Text>'
    },
    Si1LookupTypeId: 'Compact<u32>',
    Si1Path: 'Si0Path',
    Si1Type: {
        path: 'Si1Path',
        params: 'Vec<Si1TypeParameter>',
        def: 'Si1TypeDef',
        docs: 'Vec<Text>'
    },
    Si1TypeDef: {
        _enum: {
            Composite: 'Si1TypeDefComposite',
            Variant: 'Si1TypeDefVariant',
            Sequence: 'Si1TypeDefSequence',
            Array: 'Si1TypeDefArray',
            Tuple: 'Si1TypeDefTuple',
            Primitive: 'Si1TypeDefPrimitive',
            Compact: 'Si1TypeDefCompact',
            BitSequence: 'Si1TypeDefBitSequence',
            // NOTE: This is specific to the implementation for pre-v14 metadata
            // compatibility (always keep this as the last entry in the enum)
            HistoricMetaCompat: 'Type'
        }
    },
    Si1TypeDefArray: {
        len: 'u32',
        type: 'Si1LookupTypeId'
    },
    Si1TypeDefBitSequence: {
        bitStoreType: 'Si1LookupTypeId',
        bitOrderType: 'Si1LookupTypeId'
    },
    Si1TypeDefCompact: {
        type: 'Si1LookupTypeId'
    },
    Si1TypeDefComposite: {
        fields: 'Vec<Si1Field>'
    },
    Si1TypeDefPrimitive: 'Si0TypeDefPrimitive',
    Si1TypeDefSequence: {
        type: 'Si1LookupTypeId'
    },
    Si1TypeDefTuple: 'Vec<Si1LookupTypeId>',
    Si1TypeParameter: {
        name: 'Text',
        type: 'Option<Si1LookupTypeId>'
    },
    Si1TypeDefVariant: {
        variants: 'Vec<Si1Variant>'
    },
    Si1Variant
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/metadata/v14.js

const v14 = {
    // registry
    PortableTypeV14: {
        id: 'Si1LookupTypeId',
        type: 'Si1Type'
    },
    // compatibility with earlier layouts, i.e. don't break previous users
    ErrorMetadataV14: {
        ...Si1Variant,
        args: 'Vec<Type>'
    },
    EventMetadataV14: {
        ...Si1Variant,
        args: 'Vec<Type>'
    },
    FunctionArgumentMetadataV14: {
        name: 'Text',
        type: 'Type',
        typeName: 'Option<Type>'
    },
    FunctionMetadataV14: {
        ...Si1Variant,
        args: 'Vec<FunctionArgumentMetadataV14>'
    },
    // V14
    ExtrinsicMetadataV14: {
        type: 'SiLookupTypeId',
        version: 'u8',
        signedExtensions: 'Vec<SignedExtensionMetadataV14>'
    },
    MetadataV14: {
        lookup: 'PortableRegistry',
        pallets: 'Vec<PalletMetadataV14>',
        extrinsic: 'ExtrinsicMetadataV14',
        type: 'SiLookupTypeId'
    },
    PalletCallMetadataV14: {
        type: 'SiLookupTypeId'
    },
    PalletConstantMetadataV14: {
        name: 'Text',
        type: 'SiLookupTypeId',
        value: 'Bytes',
        docs: 'Vec<Text>'
    },
    PalletErrorMetadataV14: {
        type: 'SiLookupTypeId'
    },
    PalletEventMetadataV14: {
        type: 'SiLookupTypeId'
    },
    PalletMetadataV14: {
        name: 'Text',
        storage: 'Option<PalletStorageMetadataV14>',
        calls: 'Option<PalletCallMetadataV14>',
        events: 'Option<PalletEventMetadataV14>',
        constants: 'Vec<PalletConstantMetadataV14>',
        errors: 'Option<PalletErrorMetadataV14>',
        index: 'u8'
    },
    PalletStorageMetadataV14: {
        prefix: 'Text',
        // NOTE: Renamed from entries
        items: 'Vec<StorageEntryMetadataV14>'
    },
    SignedExtensionMetadataV14: {
        identifier: 'Text',
        type: 'SiLookupTypeId',
        additionalSigned: 'SiLookupTypeId'
    },
    StorageEntryMetadataV14: {
        name: 'Text',
        modifier: 'StorageEntryModifierV14',
        type: 'StorageEntryTypeV14',
        fallback: 'Bytes',
        docs: 'Vec<Text>'
    },
    StorageEntryModifierV14: 'StorageEntryModifierV13',
    StorageEntryTypeV14: {
        _enum: {
            Plain: 'SiLookupTypeId',
            Map: {
                hashers: 'Vec<StorageHasherV14>',
                key: 'SiLookupTypeId', // NOTE: Renamed from "keys"
                value: 'SiLookupTypeId'
            }
        }
    },
    StorageHasherV14: 'StorageHasherV13'
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/metadata/v15.js
const v15 = {
    // new/adjusted in v15
    CustomMetadata15: {
        map: 'BTreeMap<Text, CustomValueMetadata15>'
    },
    CustomValueMetadata15: {
        type: 'SiLookupTypeId',
        value: 'Bytes'
    },
    ExtrinsicMetadataV15: {
        version: 'u8',
        addressType: 'SiLookupTypeId',
        callType: 'SiLookupTypeId',
        signatureType: 'SiLookupTypeId',
        extraType: 'SiLookupTypeId',
        signedExtensions: 'Vec<SignedExtensionMetadataV14>'
    },
    OuterEnums15: {
        callType: 'SiLookupTypeId',
        eventType: 'SiLookupTypeId',
        errorType: 'SiLookupTypeId'
    },
    PalletMetadataV15: {
        name: 'Text',
        storage: 'Option<PalletStorageMetadataV14>',
        calls: 'Option<PalletCallMetadataV14>',
        events: 'Option<PalletEventMetadataV14>',
        constants: 'Vec<PalletConstantMetadataV14>',
        errors: 'Option<PalletErrorMetadataV14>',
        index: 'u8',
        docs: 'Vec<Text>'
    },
    RuntimeApiMetadataV15: {
        name: 'Text',
        methods: 'Vec<RuntimeApiMethodMetadataV15>',
        docs: 'Vec<Text>'
    },
    RuntimeApiMethodMetadataV15: {
        name: 'Text',
        inputs: 'Vec<RuntimeApiMethodParamMetadataV15>',
        output: 'SiLookupTypeId',
        docs: 'Vec<Text>'
    },
    RuntimeApiMethodParamMetadataV15: {
        name: 'Text',
        type: 'SiLookupTypeId'
    },
    // actual v15 definition
    MetadataV15: {
        lookup: 'PortableRegistry',
        pallets: 'Vec<PalletMetadataV15>',
        extrinsic: 'ExtrinsicMetadataV15',
        type: 'SiLookupTypeId',
        apis: 'Vec<RuntimeApiMetadataV15>',
        outerEnums: 'OuterEnums15',
        custom: 'CustomMetadata15'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/metadata/definitions.js










/* harmony default export */ const definitions = ({
    rpc: {},
    runtime: runtime,
    types: {
        // all known
        ...v9,
        ...v10,
        ...v11,
        ...v12,
        ...v13,
        ...v14,
        ...v15,
        // latest mappings
        // NOTE: For v15, we only added the runtime defintions,
        // hence latest for most pointing to the previous V14
        ErrorMetadataLatest: 'ErrorMetadataV14',
        EventMetadataLatest: 'EventMetadataV14',
        ExtrinsicMetadataLatest: 'ExtrinsicMetadataV15',
        FunctionArgumentMetadataLatest: 'FunctionArgumentMetadataV14',
        FunctionMetadataLatest: 'FunctionMetadataV14',
        MetadataLatest: 'MetadataV15',
        PalletCallMetadataLatest: 'PalletCallMetadataV14',
        PalletConstantMetadataLatest: 'PalletConstantMetadataV14',
        PalletErrorMetadataLatest: 'PalletErrorMetadataV14',
        PalletEventMetadataLatest: 'PalletEventMetadataV14',
        PalletMetadataLatest: 'PalletMetadataV15',
        PalletStorageMetadataLatest: 'PalletStorageMetadataV14',
        PortableType: 'PortableTypeV14',
        RuntimeApiMetadataLatest: 'RuntimeApiMetadataV15',
        SignedExtensionMetadataLatest: 'SignedExtensionMetadataV14',
        StorageEntryMetadataLatest: 'StorageEntryMetadataV14',
        StorageEntryModifierLatest: 'StorageEntryModifierV14',
        StorageEntryTypeLatest: 'StorageEntryTypeV14',
        StorageHasher: 'StorageHasherV14',
        // additional types
        OpaqueMetadata: 'Opaque<Bytes>',
        // the enum containing all the mappings
        MetadataAll: {
            _enum: {
                V0: 'DoNotConstruct<MetadataV0>',
                V1: 'DoNotConstruct<MetadataV1>',
                V2: 'DoNotConstruct<MetadataV2>',
                V3: 'DoNotConstruct<MetadataV3>',
                V4: 'DoNotConstruct<MetadataV4>',
                V5: 'DoNotConstruct<MetadataV5>',
                V6: 'DoNotConstruct<MetadataV6>',
                V7: 'DoNotConstruct<MetadataV7>',
                V8: 'DoNotConstruct<MetadataV8>',
                // First version on Kusama in V9, dropping will be problematic
                V9: 'MetadataV9',
                V10: 'MetadataV10',
                V11: 'MetadataV11',
                V12: 'MetadataV12',
                V13: 'MetadataV13',
                V14: 'MetadataV14',
                V15: 'MetadataV15'
            }
        }
    }
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/runtime/definitions.js + 1 modules
var runtime_definitions = __webpack_require__(21657);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/scaleInfo/v0.js
/* eslint-disable sort-keys */
const v0 = {
    Si0Field: {
        name: 'Option<Text>',
        type: 'Si0LookupTypeId',
        typeName: 'Option<Text>',
        docs: 'Vec<Text>'
    },
    Si0LookupTypeId: 'u32',
    Si0Path: 'Vec<Text>',
    Si0Type: {
        path: 'Si0Path',
        params: 'Vec<Si0LookupTypeId>',
        def: 'Si0TypeDef'
    },
    Si0TypeDef: {
        _enum: {
            Composite: 'Si0TypeDefComposite',
            Variant: 'Si0TypeDefVariant',
            Sequence: 'Si0TypeDefSequence',
            Array: 'Si0TypeDefArray',
            Tuple: 'Si0TypeDefTuple',
            Primitive: 'Si0TypeDefPrimitive',
            Compact: 'Si0TypeDefCompact',
            Phantom: 'Si0TypeDefPhantom',
            BitSequence: 'Si0TypeDefBitSequence'
        }
    },
    Si0TypeDefArray: {
        len: 'u32',
        type: 'Si0LookupTypeId'
    },
    Si0TypeDefBitSequence: {
        bitStoreType: 'Si0LookupTypeId',
        bitOrderType: 'Si0LookupTypeId'
    },
    Si0TypeDefCompact: {
        type: 'Si0LookupTypeId'
    },
    Si0TypeDefComposite: {
        fields: 'Vec<Si0Field>'
    },
    Si0TypeDefPhantom: 'Null',
    Si0TypeDefVariant: {
        variants: 'Vec<Si0Variant>'
    },
    Si0TypeDefPrimitive: {
        _enum: ['Bool', 'Char', 'Str', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256', 'I8', 'I16', 'I32', 'I64', 'I128', 'I256']
    },
    Si0TypeDefSequence: {
        type: 'Si0LookupTypeId'
    },
    Si0TypeDefTuple: 'Vec<Si0LookupTypeId>',
    Si0TypeParameter: {
        name: 'Text',
        type: 'Option<Si0LookupTypeId>'
    },
    Si0Variant: {
        name: 'Text',
        fields: 'Vec<Si0Field>',
        index: 'Option<u8>',
        discriminant: 'Option<u64>',
        docs: 'Vec<Text>'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/scaleInfo/definitions.js


/* eslint-disable sort-keys */
/* harmony default export */ const scaleInfo_definitions = ({
    rpc: {},
    types: {
        ...v0,
        ...v1,
        // latest mappings
        SiField: 'Si1Field',
        SiLookupTypeId: 'Si1LookupTypeId',
        SiPath: 'Si1Path',
        SiType: 'Si1Type',
        SiTypeDef: 'Si1TypeDef',
        SiTypeDefArray: 'Si1TypeDefArray',
        SiTypeDefBitSequence: 'Si1TypeDefBitSequence',
        SiTypeDefCompact: 'Si1TypeDefCompact',
        SiTypeDefComposite: 'Si1TypeDefComposite',
        SiTypeDefPrimitive: 'Si1TypeDefPrimitive',
        SiTypeDefSequence: 'Si1TypeDefSequence',
        SiTypeDefTuple: 'Si1TypeDefTuple',
        SiTypeParameter: 'Si1TypeParameter',
        SiTypeDefVariant: 'Si1TypeDefVariant',
        SiVariant: 'Si1Variant'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/essentials.js




;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/assetConversion/runtime.js
const runtime_runtime = {
    AssetConversionApi: [
        {
            methods: {
                get_reserves: {
                    description: 'Get pool reserves',
                    params: [
                        {
                            name: 'asset1',
                            type: 'XcmV3MultiLocation'
                        },
                        {
                            name: 'asset2',
                            type: 'XcmV3MultiLocation'
                        }
                    ],
                    type: 'Option<(Balance,Balance)>'
                },
                quote_price_exact_tokens_for_tokens: {
                    description: 'Quote price: exact tokens for tokens',
                    params: [
                        {
                            name: 'asset1',
                            type: 'XcmV3MultiLocation'
                        },
                        {
                            name: 'asset2',
                            type: 'XcmV3MultiLocation'
                        },
                        {
                            name: 'amount',
                            type: 'u128'
                        },
                        {
                            name: 'include_fee',
                            type: 'bool'
                        }
                    ],
                    type: 'Option<(Balance)>'
                },
                quote_price_tokens_for_exact_tokens: {
                    description: 'Quote price: tokens for exact tokens',
                    params: [
                        {
                            name: 'asset1',
                            type: 'XcmV3MultiLocation'
                        },
                        {
                            name: 'asset2',
                            type: 'XcmV3MultiLocation'
                        },
                        {
                            name: 'amount',
                            type: 'u128'
                        },
                        {
                            name: 'include_fee',
                            type: 'bool'
                        }
                    ],
                    type: 'Option<(Balance)>'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/assetConversion/definitions.js

/* harmony default export */ const assetConversion_definitions = ({
    rpc: {},
    runtime: runtime_runtime,
    types: {
        TAssetConversion: 'Option<MultiLocation>'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/assets/runtime.js
const assets_runtime_runtime = {
    AssetsApi: [
        {
            methods: {
                account_balances: {
                    description: 'Return the current set of authorities.',
                    params: [
                        {
                            name: 'account',
                            type: 'AccountId'
                        }
                    ],
                    type: 'Vec<(u32, TAssetBalance)>'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/assets/definitions.js

/* harmony default export */ const assets_definitions = ({
    rpc: {},
    runtime: assets_runtime_runtime,
    types: {
        AssetApprovalKey: {
            owner: 'AccountId',
            delegate: 'AccountId'
        },
        AssetApproval: {
            amount: 'TAssetBalance',
            deposit: 'TAssetDepositBalance'
        },
        AssetBalance: {
            balance: 'TAssetBalance',
            isFrozen: 'bool',
            isSufficient: 'bool'
        },
        AssetDestroyWitness: {
            accounts: 'Compact<u32>',
            sufficients: 'Compact<u32>',
            approvals: 'Compact<u32>'
        },
        AssetDetails: {
            owner: 'AccountId',
            issuer: 'AccountId',
            admin: 'AccountId',
            freezer: 'AccountId',
            supply: 'TAssetBalance',
            deposit: 'TAssetDepositBalance',
            minBalance: 'TAssetBalance',
            isSufficient: 'bool',
            accounts: 'u32',
            sufficients: 'u32',
            approvals: 'u32',
            isFrozen: 'bool'
        },
        AssetMetadata: {
            deposit: 'TAssetDepositBalance',
            name: 'Vec<u8>',
            symbol: 'Vec<u8>',
            decimals: 'u8',
            isFrozen: 'bool'
        },
        TAssetBalance: 'u64',
        TAssetDepositBalance: 'BalanceOf'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/aura/runtime.js
const aura_runtime_runtime = {
    AuraApi: [
        {
            methods: {
                authorities: {
                    description: 'Return the current set of authorities.',
                    params: [],
                    type: 'Vec<AuthorityId>'
                },
                slot_duration: {
                    description: 'Returns the slot duration for Aura.',
                    params: [],
                    type: 'SlotDuration'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/aura/definitions.js

/* harmony default export */ const aura_definitions = ({
    rpc: {},
    runtime: aura_runtime_runtime,
    types: {
        RawAuraPreDigest: {
            slotNumber: 'u64'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/authorship/definitions.js
/* harmony default export */ const authorship_definitions = ({
    rpc: {},
    types: {
        UncleEntryItem: {
            _enum: {
                InclusionHeight: 'BlockNumber',
                Uncle: '(Hash, Option<AccountId>)'
            }
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/babe/rpc.js
const rpc = {
    epochAuthorship: {
        description: 'Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore',
        isUnsafe: true,
        params: [],
        type: 'HashMap<AuthorityId, EpochAuthorship>'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/babe/runtime.js
const V1_V2_SHARED = {
    current_epoch: {
        description: 'Returns information regarding the current epoch.',
        params: [],
        type: 'Epoch'
    },
    current_epoch_start: {
        description: 'Returns the slot that started the current epoch.',
        params: [],
        type: 'Slot'
    },
    generate_key_ownership_proof: {
        description: 'Generates a proof of key ownership for the given authority in the current epoch.',
        params: [
            {
                name: 'slot',
                type: 'Slot'
            },
            {
                name: 'authorityId',
                type: 'AuthorityId'
            }
        ],
        type: 'Option<OpaqueKeyOwnershipProof>'
    },
    next_epoch: {
        description: 'Returns information regarding the next epoch (which was already previously announced).',
        params: [],
        type: 'Epoch'
    },
    submit_report_equivocation_unsigned_extrinsic: {
        description: 'Submits an unsigned extrinsic to report an equivocation.',
        params: [
            {
                name: 'equivocationProof',
                type: 'BabeEquivocationProof'
            },
            {
                name: 'keyOwnerProof',
                type: 'OpaqueKeyOwnershipProof'
            }
        ],
        type: 'Option<Null>'
    }
};
const babe_runtime_runtime = {
    BabeApi: [
        {
            methods: {
                configuration: {
                    description: 'Return the genesis configuration for BABE. The configuration is only read on genesis.',
                    params: [],
                    type: 'BabeGenesisConfiguration'
                },
                ...V1_V2_SHARED
            },
            version: 2
        },
        {
            methods: {
                configuration: {
                    description: 'Return the configuration for BABE. Version 1.',
                    params: [],
                    type: 'BabeGenesisConfigurationV1'
                },
                ...V1_V2_SHARED
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/babe/definitions.js


/* harmony default export */ const babe_definitions = ({
    rpc: rpc,
    runtime: babe_runtime_runtime,
    types: {
        AllowedSlots: {
            _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
        },
        BabeAuthorityWeight: 'u64',
        BabeEpochConfiguration: {
            c: '(u64, u64)',
            allowedSlots: 'AllowedSlots'
        },
        BabeBlockWeight: 'u32',
        BabeEquivocationProof: {
            offender: 'AuthorityId',
            slotNumber: 'SlotNumber',
            firstHeader: 'Header',
            secondHeader: 'Header'
        },
        BabeGenesisConfiguration: {
            slotDuration: 'u64',
            epochLength: 'u64',
            c: '(u64, u64)',
            genesisAuthorities: 'Vec<(AuthorityId, BabeAuthorityWeight)>',
            randomness: 'Randomness',
            allowedSlots: 'AllowedSlots'
        },
        BabeGenesisConfigurationV1: {
            slotDuration: 'u64',
            epochLength: 'u64',
            c: '(u64, u64)',
            genesisAuthorities: 'Vec<(AuthorityId, BabeAuthorityWeight)>',
            randomness: 'Randomness',
            secondarySlots: 'bool'
        },
        BabeWeight: 'u64',
        MaybeRandomness: 'Option<Randomness>',
        MaybeVrf: 'Option<VrfData>',
        Epoch: {
            epochIndex: 'u64',
            startSlot: 'Slot',
            duration: 'u64',
            authorities: 'Vec<(AuthorityId, BabeAuthorityWeight)>',
            randomness: 'Hash', // [u8; VRF_OUTPUT_LENGTH],
            config: 'BabeEpochConfiguration'
        },
        EpochAuthorship: {
            primary: 'Vec<u64>',
            secondary: 'Vec<u64>',
            secondary_vrf: 'Vec<u64>'
        },
        NextConfigDescriptor: {
            _enum: {
                V0: 'Null',
                V1: 'NextConfigDescriptorV1'
            }
        },
        NextConfigDescriptorV1: {
            c: '(u64, u64)',
            allowedSlots: 'AllowedSlots'
        },
        OpaqueKeyOwnershipProof: 'Bytes',
        Randomness: 'Hash', // [u8; RANDOMNESS_LENGTH],
        RawBabePreDigest: {
            _enum: {
                Phantom: 'Null', // index starts at 1... empty slot at 0
                Primary: 'RawBabePreDigestPrimary',
                SecondaryPlain: 'RawBabePreDigestSecondaryPlain',
                SecondaryVRF: 'RawBabePreDigestSecondaryVRF'
            }
        },
        RawBabePreDigestPrimary: {
            authorityIndex: 'u32', // AuthorityIndex (also in aura)
            slotNumber: 'SlotNumber',
            vrfOutput: 'VrfOutput',
            vrfProof: 'VrfProof'
        },
        RawBabePreDigestSecondaryPlain: {
            authorityIndex: 'u32', // AuthorityIndex (also in aura)
            slotNumber: 'SlotNumber'
        },
        RawBabePreDigestSecondaryVRF: {
            authorityIndex: 'u32',
            slotNumber: 'SlotNumber',
            vrfOutput: 'VrfOutput',
            vrfProof: 'VrfProof'
        },
        RawBabePreDigestTo159: {
            _enum: {
                Primary: 'RawBabePreDigestPrimaryTo159',
                Secondary: 'RawBabePreDigestSecondaryTo159'
            }
        },
        RawBabePreDigestPrimaryTo159: {
            authorityIndex: 'u32',
            slotNumber: 'SlotNumber',
            weight: 'BabeBlockWeight',
            vrfOutput: 'VrfOutput',
            vrfProof: 'VrfProof'
        },
        RawBabePreDigestSecondaryTo159: {
            authorityIndex: 'u32',
            slotNumber: 'SlotNumber',
            weight: 'BabeBlockWeight'
        },
        // a cross old/new compatible version of the digest, that is _only_ useful
        // for partial parsing and extraction of the author. This assumes that all
        // entries has the authorityIndex in the first position - and that it is all
        // we are interested in
        RawBabePreDigestCompat: {
            _enum: {
                Zero: 'u32',
                One: 'u32',
                Two: 'u32',
                Three: 'u32'
            }
        },
        SlotNumber: 'u64',
        VrfData: '[u8; 32]',
        VrfOutput: '[u8; 32]',
        VrfProof: '[u8; 64]'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/balances/definitions.js
/* harmony default export */ const balances_definitions = ({
    rpc: {},
    types: {
        AccountData: {
            free: 'Balance',
            reserved: 'Balance',
            miscFrozen: 'Balance',
            feeFrozen: 'Balance'
        },
        BalanceLockTo212: {
            id: 'LockIdentifier',
            amount: 'Balance',
            until: 'BlockNumber',
            reasons: 'WithdrawReasons'
        },
        BalanceLock: {
            id: 'LockIdentifier',
            amount: 'Balance',
            reasons: 'Reasons'
        },
        BalanceStatus: {
            _enum: ['Free', 'Reserved']
        },
        Reasons: {
            _enum: ['Fee', 'Misc', 'All']
        },
        ReserveData: {
            id: 'ReserveIdentifier',
            amount: 'Balance'
        },
        ReserveIdentifier: '[u8; 8]',
        VestingSchedule: {
            offset: 'Balance',
            perBlock: 'Balance',
            startingBlock: 'BlockNumber'
        },
        WithdrawReasons: {
            _set: {
                TransactionPayment: 1,
                Transfer: 2,
                Reserve: 4,
                Fee: 8,
                Tip: 16
            }
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/beefy/rpc.js
const rpc_rpc = {
    getFinalizedHead: {
        description: 'Returns hash of the latest BEEFY finalized block as seen by this client.',
        params: [],
        type: 'H256'
    },
    subscribeJustifications: {
        description: 'Returns the block most recently finalized by BEEFY, alongside its justification.',
        params: [],
        pubsub: [
            'justifications',
            'subscribeJustifications',
            'unsubscribeJustifications'
        ],
        type: 'BeefyVersionedFinalityProof'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/beefy/runtime.js
const BEEFY_V1_V3 = {
    beefy_genesis: {
        description: 'Return the block number where BEEFY consensus is enabled/started',
        params: [],
        type: 'Option<BlockNumber>'
    },
    generate_key_ownership_proof: {
        description: 'Generates a proof of key ownership for the given authority in the given set.',
        params: [
            {
                name: 'setId',
                type: 'ValidatorSetId'
            },
            {
                name: 'authorityId',
                type: 'AuthorityId'
            }
        ],
        type: 'Option<OpaqueKeyOwnershipProof>'
    },
    submit_report_equivocation_unsigned_extrinsic: {
        description: 'Submits an unsigned extrinsic to report an equivocation.',
        params: [
            {
                name: 'equivocationProof',
                type: 'BeefyEquivocationProof'
            },
            {
                name: 'keyOwnerProof',
                type: 'OpaqueKeyOwnershipProof'
            }
        ],
        type: 'Option<Null>'
    },
    validator_set: {
        description: 'Return the current active BEEFY validator set',
        params: [],
        type: 'Option<ValidatorSet>'
    }
};
const BEEFY_MMR_V1 = {
    authority_set_proof: {
        description: 'Return the currently active BEEFY authority set proof.',
        params: [],
        type: 'BeefyAuthoritySet'
    },
    next_authority_set_proof: {
        description: 'Return the next/queued BEEFY authority set proof.',
        params: [],
        type: 'BeefyNextAuthoritySet'
    }
};
const beefy_runtime_runtime = {
    BeefyApi: [
        {
            methods: BEEFY_V1_V3,
            version: 3
        },
        {
            methods: BEEFY_V1_V3,
            version: 2
        },
        {
            methods: BEEFY_V1_V3,
            version: 1
        }
    ],
    BeefyMmrApi: [
        {
            methods: BEEFY_MMR_V1,
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/beefy/definitions.js


/* harmony default export */ const beefy_definitions = ({
    rpc: rpc_rpc,
    runtime: beefy_runtime_runtime,
    types: {
        BeefyAuthoritySet: {
            id: 'u64',
            len: 'u32',
            root: 'H256'
        },
        BeefyCommitment: {
            payload: 'BeefyPayload',
            blockNumber: 'BlockNumber',
            validatorSetId: 'ValidatorSetId'
        },
        BeefyId: '[u8; 33]',
        BeefyEquivocationProof: {
            first: 'BeefyVoteMessage',
            second: 'BeefyVoteMessage'
        },
        BeefySignedCommitment: {
            commitment: 'BeefyCommitment',
            signatures: 'Vec<Option<EcdsaSignature>>'
        },
        BeefyVersionedFinalityProof: {
            _enum: {
                V0: 'Null',
                V1: 'BeefySignedCommitment'
            }
        },
        BeefyNextAuthoritySet: {
            id: 'u64',
            len: 'u32',
            root: 'H256'
        },
        BeefyPayload: 'Vec<(BeefyPayloadId, Bytes)>',
        BeefyPayloadId: '[u8;2]',
        BeefyVoteMessage: {
            commitment: 'BeefyCommitment',
            id: 'AuthorityId',
            signature: 'Signature'
        },
        MmrRootHash: 'H256',
        ValidatorSetId: 'u64',
        ValidatorSet: {
            validators: 'Vec<AuthorityId>',
            id: 'ValidatorSetId'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/benchmark/runtime.js
const benchmark_runtime_runtime = {
    Benchmark: [
        {
            methods: {
                benchmark_metadata: {
                    description: 'Get the benchmark metadata available for this runtime.',
                    params: [
                        {
                            name: 'extra',
                            type: 'bool'
                        }
                    ],
                    type: '(Vec<BenchmarkList>, Vec<StorageInfo>)'
                },
                dispatch_benchmark: {
                    description: 'Dispatch the given benchmark.',
                    params: [
                        {
                            name: 'config',
                            type: 'BenchmarkConfig'
                        }
                    ],
                    type: 'Result<Vec<BenchmarkBatch>, Text>'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/benchmark/definitions.js

/* harmony default export */ const benchmark_definitions = ({
    rpc: {},
    runtime: benchmark_runtime_runtime,
    types: {
        BenchmarkBatch: {
            pallet: 'Text',
            instance: 'Text',
            benchmark: 'Text',
            results: 'Vec<BenchmarkResult>'
        },
        BenchmarkConfig: {
            pallet: 'Bytes',
            benchmark: 'Bytes',
            selectedComponents: 'Vec<(BenchmarkParameter, u32)>',
            verify: 'bool',
            internalRepeats: 'u32'
        },
        BenchmarkList: {
            pallet: 'Bytes',
            instance: 'Bytes',
            benchmarks: 'Vec<BenchmarkMetadata>'
        },
        BenchmarkMetadata: {
            name: 'Bytes',
            components: 'Vec<(BenchmarkParameter, u32, u32)>'
        },
        BenchmarkParameter: {
            _enum: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
        },
        BenchmarkResult: {
            components: 'Vec<(BenchmarkParameter, u32)>',
            extrinsicTime: 'u128',
            storageRootTime: 'u128',
            reads: 'u32',
            repeatReads: 'u32',
            writes: 'u32',
            repeatWrites: 'u32',
            proofSize: 'u32',
            benchKeys: 'Vec<(Vec<u8>, u32, u32, bool)>'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/blockbuilder/runtime.js
const BB_V2_TO_V4 = {
    // this was removed after V4
    random_seed: {
        description: 'Generate a random seed.',
        params: [],
        type: 'Hash'
    }
};
const BB_V2_TO_V5 = {
    apply_extrinsic: {
        description: 'Apply the given extrinsic.',
        params: [
            {
                name: 'extrinsic',
                type: 'Extrinsic'
            }
        ],
        type: 'ApplyExtrinsicResultPre6'
    }
};
const BB_V2_TO_V6 = {
    check_inherents: {
        description: 'Check that the inherents are valid.',
        params: [
            {
                name: 'block',
                type: 'Block'
            },
            {
                name: 'data',
                type: 'InherentData'
            }
        ],
        type: 'CheckInherentsResult'
    },
    inherent_extrinsics: {
        description: 'Generate inherent extrinsics.',
        params: [
            {
                name: 'inherent',
                type: 'InherentData'
            }
        ],
        type: 'Vec<Extrinsic>'
    }
};
const BB_V3_TO_V6 = {
    // renamed in v3 from finalize_block
    finalize_block: {
        description: 'Finish the current block.',
        params: [],
        type: 'Header'
    }
};
const blockbuilder_runtime_runtime = {
    BlockBuilder: [
        {
            methods: {
                apply_extrinsic: {
                    description: 'Apply the given extrinsic.',
                    params: [
                        {
                            name: 'extrinsic',
                            type: 'Extrinsic'
                        }
                    ],
                    type: 'ApplyExtrinsicResult'
                },
                ...BB_V2_TO_V6,
                ...BB_V3_TO_V6
            },
            version: 6
        },
        {
            methods: {
                // apply_extrinsic result changed in 6
                ...BB_V2_TO_V5,
                ...BB_V2_TO_V6,
                ...BB_V3_TO_V6
            },
            version: 5
        },
        {
            methods: {
                // random_seed removed
                ...BB_V2_TO_V4,
                ...BB_V2_TO_V5,
                ...BB_V2_TO_V6,
                ...BB_V3_TO_V6
            },
            version: 4
        },
        {
            methods: {
                // finalize_block renamed
                ...BB_V2_TO_V4,
                ...BB_V2_TO_V6,
                ...BB_V3_TO_V6
            },
            version: 3
        },
        {
            methods: {
                finalise_block: {
                    description: 'Finish the current block.',
                    params: [],
                    type: 'Header'
                },
                ...BB_V2_TO_V4,
                ...BB_V2_TO_V6
            },
            version: 2
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/blockbuilder/definitions.js

/* harmony default export */ const blockbuilder_definitions = ({
    rpc: {},
    runtime: blockbuilder_runtime_runtime,
    types: {
        CheckInherentsResult: {
            okay: 'bool',
            fatalError: 'bool',
            errors: 'InherentData'
        },
        InherentData: {
            data: 'BTreeMap<InherentIdentifier, Bytes>'
        },
        InherentIdentifier: '[u8; 8]'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/collective/definitions.js
/* harmony default export */ const collective_definitions = ({
    rpc: {},
    types: {
        CollectiveOrigin: {
            _enum: {
                Members: '(MemberCount, MemberCount)',
                Member: 'AccountId'
            }
        },
        MemberCount: 'u32',
        ProposalIndex: 'u32',
        VotesTo230: {
            index: 'ProposalIndex',
            threshold: 'MemberCount',
            ayes: 'Vec<AccountId>',
            nays: 'Vec<AccountId>'
        },
        Votes: {
            index: 'ProposalIndex',
            threshold: 'MemberCount',
            ayes: 'Vec<AccountId>',
            nays: 'Vec<AccountId>',
            end: 'BlockNumber'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/consensus/definitions.js
/* harmony default export */ const consensus_definitions = ({
    rpc: {},
    types: {
        AuthorityId: 'AccountId',
        RawVRFOutput: '[u8; 32]'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/contracts/rpc.js
const contracts_rpc_rpc = {
    call: {
        deprecated: 'Use the runtime interface `api.call.contractsApi.call` instead',
        description: 'Executes a call to a contract',
        params: [
            {
                name: 'callRequest',
                type: 'ContractCallRequest'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'ContractExecResult'
    },
    getStorage: {
        deprecated: 'Use the runtime interface `api.call.contractsApi.getStorage` instead',
        description: 'Returns the value under a specified storage key in a contract',
        params: [
            {
                name: 'address',
                type: 'AccountId'
            },
            {
                name: 'key',
                type: 'H256'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Option<Bytes>'
    },
    instantiate: {
        deprecated: 'Use the runtime interface `api.call.contractsApi.instantiate` instead',
        description: 'Instantiate a new contract',
        params: [
            {
                name: 'request',
                type: 'InstantiateRequestV1'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'ContractInstantiateResult'
    },
    rentProjection: {
        deprecated: 'Not available in newer versions of the contracts interfaces',
        description: 'Returns the projected time a given contract will be able to sustain paying its rent',
        params: [
            {
                name: 'address',
                type: 'AccountId'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Option<BlockNumber>'
    },
    uploadCode: {
        deprecated: 'Use the runtime interface `api.call.contractsApi.uploadCode` instead',
        description: 'Upload new code without instantiating a contract from it',
        // The RPC here is terribly misnamed - somebody forgot how the RPCs
        // are actually done, ie. <module>_<camelCasedMethod>
        endpoint: 'contracts_upload_code',
        params: [
            {
                name: 'uploadRequest',
                type: 'CodeUploadRequest'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'CodeUploadResult'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/contracts/runtime.js
const SHARED_V1_V2 = {
    get_storage: {
        description: 'Query a given storage key in a given contract.',
        params: [
            {
                name: 'address',
                type: 'AccountId'
            },
            {
                name: 'key',
                type: 'Bytes'
            }
        ],
        type: 'Option<Bytes>'
    },
    upload_code: {
        description: 'Upload new code without instantiating a contract from it.',
        params: [
            {
                name: 'origin',
                type: 'AccountId'
            },
            {
                name: 'code',
                type: 'Bytes'
            },
            {
                name: 'storageDepositLimit',
                type: 'Option<Balance>'
            }
        ],
        type: 'CodeUploadResult'
    }
};
const contracts_runtime_runtime = {
    ContractsApi: [
        {
            methods: {
                call: {
                    description: 'Perform a call from a specified account to a given contract.',
                    params: [
                        {
                            name: 'origin',
                            type: 'AccountId'
                        },
                        {
                            name: 'dest',
                            type: 'AccountId'
                        },
                        {
                            name: 'value',
                            type: 'Balance'
                        },
                        {
                            name: 'gasLimit',
                            type: 'Option<WeightV2>'
                        },
                        {
                            name: 'storageDepositLimit',
                            type: 'Option<Balance>'
                        },
                        {
                            name: 'inputData',
                            type: 'Vec<u8>'
                        }
                    ],
                    type: 'ContractExecResult'
                },
                instantiate: {
                    description: 'Instantiate a new contract.',
                    params: [
                        {
                            name: 'origin',
                            type: 'AccountId'
                        },
                        {
                            name: 'value',
                            type: 'Balance'
                        },
                        {
                            name: 'gasLimit',
                            type: 'Option<WeightV2>'
                        },
                        {
                            name: 'storageDepositLimit',
                            type: 'Option<Balance>'
                        },
                        {
                            name: 'code',
                            type: 'CodeSource'
                        },
                        {
                            name: 'data',
                            type: 'Bytes'
                        },
                        {
                            name: 'salt',
                            type: 'Bytes'
                        }
                    ],
                    type: 'ContractInstantiateResult'
                },
                ...SHARED_V1_V2
            },
            version: 2
        },
        {
            methods: {
                call: {
                    description: 'Perform a call from a specified account to a given contract.',
                    params: [
                        {
                            name: 'origin',
                            type: 'AccountId'
                        },
                        {
                            name: 'dest',
                            type: 'AccountId'
                        },
                        {
                            name: 'value',
                            type: 'Balance'
                        },
                        {
                            name: 'gasLimit',
                            type: 'u64'
                        },
                        {
                            name: 'storageDepositLimit',
                            type: 'Option<Balance>'
                        },
                        {
                            name: 'inputData',
                            type: 'Vec<u8>'
                        }
                    ],
                    type: 'ContractExecResultU64'
                },
                instantiate: {
                    description: 'Instantiate a new contract.',
                    params: [
                        {
                            name: 'origin',
                            type: 'AccountId'
                        },
                        {
                            name: 'value',
                            type: 'Balance'
                        },
                        {
                            name: 'gasLimit',
                            type: 'u64'
                        },
                        {
                            name: 'storageDepositLimit',
                            type: 'Option<Balance>'
                        },
                        {
                            name: 'code',
                            type: 'CodeSource'
                        },
                        {
                            name: 'data',
                            type: 'Bytes'
                        },
                        {
                            name: 'salt',
                            type: 'Bytes'
                        }
                    ],
                    type: 'ContractInstantiateResultU64'
                },
                ...SHARED_V1_V2
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/contracts/definitions.js


/* harmony default export */ const contracts_definitions = ({
    rpc: contracts_rpc_rpc,
    runtime: contracts_runtime_runtime,
    types: {
        AliveContractInfo: {
            trieId: 'TrieId',
            storageSize: 'u32',
            pairCount: 'u32',
            codeHash: 'CodeHash',
            rentAllowance: 'Balance',
            rentPaid: 'Balance',
            deductBlock: 'BlockNumber',
            lastWrite: 'Option<BlockNumber>',
            _reserved: 'Option<Null>'
        },
        CodeHash: 'Hash',
        CodeSource: {
            _enum: {
                Upload: 'Bytes',
                Existing: 'Hash'
            }
        },
        CodeUploadRequest: {
            origin: 'AccountId',
            code: 'Bytes',
            storageDepositLimit: 'Option<Balance>'
        },
        CodeUploadResult: 'Result<CodeUploadResultValue, DispatchError>',
        CodeUploadResultValue: {
            codeHash: 'CodeHash',
            deposit: 'Balance'
        },
        ContractCallRequest: {
            origin: 'AccountId',
            dest: 'AccountId',
            value: 'Balance',
            gasLimit: 'u64',
            storageDepositLimit: 'Option<Balance>',
            inputData: 'Bytes'
        },
        ContractExecResultSuccessTo255: {
            status: 'u8',
            data: 'Raw'
        },
        ContractExecResultTo255: {
            _enum: {
                Success: 'ContractExecResultSuccessTo255',
                Error: 'Null'
            }
        },
        ContractExecResultSuccessTo260: {
            flags: 'ContractReturnFlags',
            data: 'Bytes',
            gasConsumed: 'u64'
        },
        ContractExecResultTo260: {
            _enum: {
                Success: 'ContractExecResultSuccessTo260',
                Error: 'Null'
            }
        },
        ContractExecResultOk: {
            flags: 'ContractReturnFlags',
            data: 'Bytes'
        },
        ContractExecResultResult: 'Result<ContractExecResultOk, DispatchError>',
        ContractExecResultTo267: {
            gasConsumed: 'u64',
            debugMessage: 'Text',
            result: 'ContractExecResultResult'
        },
        ContractExecResult: {
            gasConsumed: 'Weight',
            gasRequired: 'Weight',
            storageDeposit: 'StorageDeposit',
            debugMessage: 'Text',
            result: 'ContractExecResultResult'
        },
        ContractExecResultU64: {
            gasConsumed: 'u64',
            gasRequired: 'u64',
            storageDeposit: 'StorageDeposit',
            debugMessage: 'Text',
            result: 'ContractExecResultResult'
        },
        ContractInfo: {
            _enum: {
                Alive: 'AliveContractInfo',
                Tombstone: 'TombstoneContractInfo'
            }
        },
        ContractCallFlags: {
            _set: {
                _bitLength: 32,
                ForwardInput: 1,
                CloneInput: 2,
                TailCall: 4,
                AllowReentry: 8
            }
        },
        ContractReturnFlags: {
            _set: {
                _bitLength: 32,
                Revert: 1
            }
        },
        ContractStorageKey: '[u8; 32]',
        DeletedContract: {
            pairCount: 'u32',
            trieId: 'TrieId'
        },
        ExecReturnValue: {
            flags: 'ContractReturnFlags',
            data: 'Bytes'
        },
        Gas: 'u64',
        HostFnWeightsTo264: {
            caller: 'Weight',
            address: 'Weight',
            gasLeft: 'Weight',
            balance: 'Weight',
            valueTransferred: 'Weight',
            minimumBalance: 'Weight',
            tombstoneDeposit: 'Weight',
            rentAllowance: 'Weight',
            blockNumber: 'Weight',
            now: 'Weight',
            weightToFee: 'Weight',
            gas: 'Weight',
            input: 'Weight',
            inputPerByte: 'Weight',
            return: 'Weight',
            returnPerByte: 'Weight',
            terminate: 'Weight',
            restoreTo: 'Weight',
            restoreToPerDelta: 'Weight',
            random: 'Weight',
            depositEvent: 'Weight',
            depositEventPerTopic: 'Weight',
            depositEventPerByte: 'Weight',
            setRentAllowance: 'Weight',
            setStorage: 'Weight',
            setStoragePerByte: 'Weight',
            clearStorage: 'Weight',
            getStorage: 'Weight',
            getStoragePerByte: 'Weight',
            transfer: 'Weight',
            call: 'Weight',
            callTransferSurcharge: 'Weight',
            callPerInputByte: 'Weight',
            callPerOutputByte: 'Weight',
            instantiate: 'Weight',
            instantiatePerInputByte: 'Weight',
            instantiatePerOutputByte: 'Weight',
            hashSha2256: 'Weight',
            hashSha2256PerByte: 'Weight',
            hashKeccak256: 'Weight',
            hashKeccak256PerByte: 'Weight',
            hashBlake2256: 'Weight',
            hashBlake2256PerByte: 'Weight',
            hashBlake2128: 'Weight',
            hashBlake2128PerByte: 'Weight'
        },
        HostFnWeights: {
            caller: 'Weight',
            address: 'Weight',
            gasLeft: 'Weight',
            balance: 'Weight',
            valueTransferred: 'Weight',
            minimumBalance: 'Weight',
            tombstoneDeposit: 'Weight',
            rentAllowance: 'Weight',
            blockNumber: 'Weight',
            now: 'Weight',
            weightToFee: 'Weight',
            gas: 'Weight',
            input: 'Weight',
            inputPerByte: 'Weight',
            return: 'Weight',
            returnPerByte: 'Weight',
            terminate: 'Weight',
            terminatePerCodeByte: 'Weight',
            restoreTo: 'Weight',
            restoreToPerCallerCodeByte: 'Weight',
            restoreToPerTombstoneCodeByte: 'Weight',
            restoreToPerDelta: 'Weight',
            random: 'Weight',
            depositEvent: 'Weight',
            depositEventPerTopic: 'Weight',
            depositEventPerByte: 'Weight',
            setRentAllowance: 'Weight',
            setStorage: 'Weight',
            setStoragePerByte: 'Weight',
            clearStorage: 'Weight',
            getStorage: 'Weight',
            getStoragePerByte: 'Weight',
            transfer: 'Weight',
            call: 'Weight',
            callPerCodeByte: 'Weight',
            callTransferSurcharge: 'Weight',
            callPerInputByte: 'Weight',
            callPerOutputByte: 'Weight',
            instantiate: 'Weight',
            instantiatePerCodeByte: 'Weight',
            instantiatePerInputByte: 'Weight',
            instantiatePerOutputByte: 'Weight',
            instantiatePerSaltByte: 'Weight',
            hashSha2256: 'Weight',
            hashSha2256PerByte: 'Weight',
            hashKeccak256: 'Weight',
            hashKeccak256PerByte: 'Weight',
            hashBlake2256: 'Weight',
            hashBlake2256PerByte: 'Weight',
            hashBlake2128: 'Weight',
            hashBlake2128PerByte: 'Weight',
            rentParams: 'Weight'
        },
        InstantiateRequestV1: {
            origin: 'AccountId',
            value: 'Balance',
            gasLimit: 'Gas',
            code: 'Bytes',
            data: 'Bytes',
            salt: 'Bytes'
        },
        InstantiateRequestV2: {
            _fallback: 'InstantiateRequestV1',
            origin: 'AccountId',
            value: 'Balance',
            gasLimit: 'Gas',
            storageDepositLimit: 'Option<Balance>',
            code: 'Bytes',
            data: 'Bytes',
            salt: 'Bytes'
        },
        InstantiateRequest: {
            _fallback: 'InstantiateRequestV2',
            origin: 'AccountId',
            value: 'Balance',
            gasLimit: 'Gas',
            storageDepositLimit: 'Option<Balance>',
            code: 'CodeSource',
            data: 'Bytes',
            salt: 'Bytes'
        },
        ContractInstantiateResultTo267: 'Result<InstantiateReturnValueTo267, Null>',
        ContractInstantiateResultTo299: 'Result<InstantiateReturnValueOk, Null>',
        ContractInstantiateResult: {
            gasConsumed: 'WeightV2',
            gasRequired: 'WeightV2',
            storageDeposit: 'StorageDeposit',
            debugMessage: 'Text',
            result: 'InstantiateReturnValue'
        },
        ContractInstantiateResultU64: {
            // only this one can fail, the current version (above) _should_ be correctly
            // versioned now, aka no more deprecated RPCs involved, only runtime calls
            _fallback: 'ContractInstantiateResultTo299',
            gasConsumed: 'u64',
            gasRequired: 'u64',
            storageDeposit: 'StorageDeposit',
            debugMessage: 'Text',
            result: 'InstantiateReturnValue'
        },
        InstantiateReturnValueTo267: {
            result: 'ExecReturnValue',
            accountId: 'AccountId',
            rentProjection: 'Option<RentProjection>'
        },
        InstantiateReturnValueOk: {
            result: 'ExecReturnValue',
            accountId: 'AccountId'
        },
        InstantiateReturnValue: 'Result<InstantiateReturnValueOk, DispatchError>',
        InstructionWeights: {
            i64const: 'u32',
            i64load: 'u32',
            i64store: 'u32',
            select: 'u32',
            rIf: 'u32',
            br: 'u32',
            brIf: 'u32',
            brIable: 'u32',
            brIablePerEntry: 'u32',
            call: 'u32',
            callIndirect: 'u32',
            callIndirectPerParam: 'u32',
            localGet: 'u32',
            localSet: 'u32',
            local_tee: 'u32',
            globalGet: 'u32',
            globalSet: 'u32',
            memoryCurrent: 'u32',
            memoryGrow: 'u32',
            i64clz: 'u32',
            i64ctz: 'u32',
            i64popcnt: 'u32',
            i64eqz: 'u32',
            i64extendsi32: 'u32',
            i64extendui32: 'u32',
            i32wrapi64: 'u32',
            i64eq: 'u32',
            i64ne: 'u32',
            i64lts: 'u32',
            i64ltu: 'u32',
            i64gts: 'u32',
            i64gtu: 'u32',
            i64les: 'u32',
            i64leu: 'u32',
            i64ges: 'u32',
            i64geu: 'u32',
            i64add: 'u32',
            i64sub: 'u32',
            i64mul: 'u32',
            i64divs: 'u32',
            i64divu: 'u32',
            i64rems: 'u32',
            i64remu: 'u32',
            i64and: 'u32',
            i64or: 'u32',
            i64xor: 'u32',
            i64shl: 'u32',
            i64shrs: 'u32',
            i64shru: 'u32',
            i64rotl: 'u32',
            i64rotr: 'u32'
        },
        LimitsTo264: {
            eventTopics: 'u32',
            stackHeight: 'u32',
            globals: 'u32',
            parameters: 'u32',
            memoryPages: 'u32',
            tableSize: 'u32',
            brTableSize: 'u32',
            subjectLen: 'u32',
            codeSize: 'u32'
        },
        Limits: {
            eventTopics: 'u32',
            stackHeight: 'u32',
            globals: 'u32',
            parameters: 'u32',
            memoryPages: 'u32',
            tableSize: 'u32',
            brTableSize: 'u32',
            subjectLen: 'u32'
        },
        PrefabWasmModule: {
            scheduleVersion: 'Compact<u32>',
            initial: 'Compact<u32>',
            maximum: 'Compact<u32>',
            refcount: 'Compact<u64>',
            _reserved: 'Option<Null>',
            code: 'Bytes',
            originalCodeLen: 'u32'
        },
        RentProjection: {
            _enum: {
                EvictionAt: 'BlockNumber',
                NoEviction: 'Null'
            }
        },
        ScheduleTo212: {
            version: 'u32',
            putCodePerByteCost: 'Gas',
            growMemCost: 'Gas',
            regularOpCost: 'Gas',
            returnDataPerByteCost: 'Gas',
            eventDataPerByteCost: 'Gas',
            eventPerTopicCost: 'Gas',
            eventBaseCost: 'Gas',
            sandboxDataReadCost: 'Gas',
            sandboxDataWriteCost: 'Gas',
            maxEventTopics: 'u32',
            maxStackHeight: 'u32',
            maxMemoryPages: 'u32',
            enablePrintln: 'bool',
            maxSubjectLen: 'u32'
        },
        ScheduleTo258: {
            version: 'u32',
            putCodePerByteCost: 'Gas',
            growMemCost: 'Gas',
            regularOpCost: 'Gas',
            returnDataPerByteCost: 'Gas',
            eventDataPerByteCost: 'Gas',
            eventPerTopicCost: 'Gas',
            eventBaseCost: 'Gas',
            sandboxDataReadCost: 'Gas',
            sandboxDataWriteCost: 'Gas',
            transferCost: 'Gas',
            maxEventTopics: 'u32',
            maxStackHeight: 'u32',
            maxMemoryPages: 'u32',
            enablePrintln: 'bool',
            maxSubjectLen: 'u32'
        },
        ScheduleTo264: {
            version: 'u32',
            enablePrintln: 'bool',
            limits: 'LimitsTo264',
            instructionWeights: 'InstructionWeights',
            hostFnWeights: 'HostFnWeightsTo264'
        },
        Schedule: {
            version: 'u32',
            enablePrintln: 'bool',
            limits: 'Limits',
            instructionWeights: 'InstructionWeights',
            hostFnWeights: 'HostFnWeights'
        },
        SeedOf: 'Hash',
        StorageDeposit: {
            _enum: {
                Refund: 'Balance',
                Charge: 'Balance'
            }
        },
        TombstoneContractInfo: 'Hash',
        TrieId: 'Bytes'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/democracy/definitions.js
const AllConvictions = [
    // 0.1x votes, unlocked.
    'None',
    // 1x votes, locked for an enactment period following a successful vote.
    'Locked1x',
    // 2x votes, locked for 2x enactment periods following a successful vote.
    'Locked2x',
    // 3x votes, locked for 4x...
    'Locked3x',
    // 4x votes, locked for 8x...
    'Locked4x',
    // 5x votes, locked for 16x...
    'Locked5x',
    // 6x votes, locked for 32x...
    'Locked6x'
];
/* harmony default export */ const democracy_definitions = ({
    rpc: {},
    types: {
        AccountVote: {
            _enum: {
                Standard: 'AccountVoteStandard',
                Split: 'AccountVoteSplit'
            }
        },
        AccountVoteSplit: {
            aye: 'Balance',
            nay: 'Balance'
        },
        AccountVoteStandard: {
            vote: 'Vote',
            balance: 'Balance'
        },
        Conviction: {
            _enum: AllConvictions
        },
        Delegations: {
            votes: 'Balance',
            capital: 'Balance'
        },
        PreimageStatus: {
            _enum: {
                Missing: 'BlockNumber',
                Available: 'PreimageStatusAvailable'
            }
        },
        PreimageStatusAvailable: {
            data: 'Bytes',
            provider: 'AccountId',
            deposit: 'Balance',
            since: 'BlockNumber',
            expiry: 'Option<BlockNumber>'
        },
        PriorLock: '(BlockNumber, Balance)',
        PropIndex: 'u32',
        Proposal: 'Call',
        ProxyState: {
            _enum: {
                Open: 'AccountId',
                Active: 'AccountId'
            }
        },
        ReferendumIndex: 'u32',
        ReferendumInfoTo239: {
            end: 'BlockNumber',
            proposalHash: 'Hash',
            threshold: 'VoteThreshold',
            delay: 'BlockNumber'
        },
        ReferendumInfo: {
            _enum: {
                Ongoing: 'ReferendumStatus',
                Finished: 'ReferendumInfoFinished'
            }
        },
        ReferendumInfoFinished: {
            approved: 'bool',
            end: 'BlockNumber'
        },
        ReferendumStatus: {
            end: 'BlockNumber',
            proposalHash: 'Hash',
            threshold: 'VoteThreshold',
            delay: 'BlockNumber',
            tally: 'Tally'
        },
        Tally: {
            ayes: 'Balance',
            nays: 'Balance',
            turnout: 'Balance'
        },
        Voting: {
            _enum: {
                Direct: 'VotingDirect',
                Delegating: 'VotingDelegating'
            }
        },
        VotingDirect: {
            votes: 'Vec<VotingDirectVote>',
            delegations: 'Delegations',
            prior: 'PriorLock'
        },
        VotingDirectVote: '(ReferendumIndex, AccountVote)',
        VotingDelegating: {
            balance: 'Balance',
            target: 'AccountId',
            conviction: 'Conviction',
            delegations: 'Delegations',
            prior: 'PriorLock'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/dev/rpc.js
const dev_rpc_rpc = {
    getBlockStats: {
        description: 'Reexecute the specified `block_hash` and gather statistics while doing so',
        isUnsafe: true,
        params: [
            {
                isHistoric: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Option<BlockStats>'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/dev/definitions.js

/* harmony default export */ const dev_definitions = ({
    rpc: dev_rpc_rpc,
    types: {
        BlockStats: {
            witnessLen: 'u64',
            witnessCompactLen: 'u64',
            blockLen: 'u64',
            blockNumExtrinsics: 'u64'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/discovery/runtime.js
const discovery_runtime_runtime = {
    AuthorityDiscoveryApi: [
        {
            methods: {
                authorities: {
                    description: 'Retrieve authority identifiers of the current and next authority set.',
                    params: [],
                    type: 'Vec<AuthorityId>'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/discovery/definitions.js

/* harmony default export */ const discovery_definitions = ({
    rpc: {},
    runtime: discovery_runtime_runtime,
    types: {}
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/elections/definitions.js
/* harmony default export */ const elections_definitions = ({
    rpc: {},
    types: {
        ApprovalFlag: 'u32',
        DefunctVoter: {
            who: 'AccountId',
            voteCount: 'Compact<u32>',
            candidateCount: 'Compact<u32>'
        },
        Renouncing: {
            _enum: {
                Member: 'Null',
                RunnerUp: 'Null',
                Candidate: 'Compact<u32>'
            }
        },
        SetIndex: 'u32',
        Vote: 'GenericVote',
        VoteIndex: 'u32',
        VoterInfo: {
            lastActive: 'VoteIndex',
            lastWin: 'VoteIndex',
            pot: 'Balance',
            stake: 'Balance'
        },
        VoteThreshold: {
            _enum: [
                'Super Majority Approve',
                'Super Majority Against',
                'Simple Majority'
            ]
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/engine/rpc.js
const engine_rpc_rpc = {
    createBlock: {
        description: 'Instructs the manual-seal authorship task to create a new block',
        params: [
            {
                name: 'createEmpty',
                type: 'bool'
            },
            {
                name: 'finalize',
                type: 'bool'
            },
            {
                isOptional: true,
                name: 'parentHash',
                type: 'BlockHash'
            }
        ],
        type: 'CreatedBlock'
    },
    finalizeBlock: {
        description: 'Instructs the manual-seal authorship task to finalize a block',
        params: [
            {
                name: 'hash',
                type: 'BlockHash'
            },
            {
                isOptional: true,
                name: 'justification',
                type: 'Justification'
            }
        ],
        type: 'bool'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/engine/definitions.js

/* harmony default export */ const engine_definitions = ({
    rpc: engine_rpc_rpc,
    types: {
        CreatedBlock: {
            _alias: {
                blockHash: 'hash'
            },
            blockHash: 'BlockHash',
            aux: 'ImportedAux'
        },
        ImportedAux: {
            headerOnly: 'bool',
            clearJustificationRequests: 'bool',
            needsJustification: 'bool',
            badJustification: 'bool',
            needsFinalityProof: 'bool',
            isNewBest: 'bool'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/evm/definitions.js
/* harmony default export */ const evm_definitions = ({
    rpc: {},
    types: {
        EvmAccount: {
            nonce: 'u256',
            balance: 'u256'
        },
        EvmCallInfo: {
            exitReason: 'ExitReason',
            value: 'Bytes',
            usedGas: 'U256',
            logs: 'Vec<EvmLog>'
        },
        EvmCreateInfo: {
            exitReason: 'ExitReason',
            value: 'H160',
            usedGas: 'U256',
            logs: 'Vec<EvmLog>'
        },
        EvmCallInfoV2: {
            exitReason: 'ExitReason',
            value: 'Bytes',
            usedGas: 'U256',
            weightInfo: 'Option<EvmWeightInfo>',
            logs: 'Vec<EvmLog>'
        },
        EvmCreateInfoV2: {
            exitReason: 'ExitReason',
            value: 'H160',
            usedGas: 'U256',
            weightInfo: 'Option<EvmWeightInfo>',
            logs: 'Vec<EvmLog>'
        },
        EvmLog: {
            address: 'H160',
            topics: 'Vec<H256>',
            data: 'Bytes'
        },
        EvmVicinity: {
            gasPrice: 'u256',
            origin: 'H160'
        },
        EvmWeightInfo: {
            refTimeLimit: 'Option<u64>',
            proofSizeLimit: 'Option<u64>',
            refTimeUsage: 'Option<u64>',
            proofSizeUsage: 'Option<u64>'
        },
        ExitError: {
            _enum: {
                StackUnderflow: 'Null',
                StackOverflow: 'Null',
                InvalidJump: 'Null',
                InvalidRange: 'Null',
                DesignatedInvalid: 'Null',
                CallTooDeep: 'Null',
                CreateCollision: 'Null',
                CreateContractLimit: 'Null',
                OutOfOffset: 'Null',
                OutOfGas: 'Null',
                OutOfFund: 'Null',
                PCUnderflow: 'Null',
                CreateEmpty: 'Null',
                Other: 'Text'
            }
        },
        ExitFatal: {
            _enum: {
                NotSupported: 'Null',
                UnhandledInterrupt: 'Null',
                CallErrorAsFatal: 'ExitError',
                Other: 'Text'
            }
        },
        ExitReason: {
            _enum: {
                Succeed: 'ExitSucceed',
                Error: 'ExitError',
                Revert: 'ExitRevert',
                Fatal: 'ExitFatal'
            }
        },
        ExitRevert: {
            _enum: ['Reverted']
        },
        ExitSucceed: {
            _enum: ['Stopped', 'Returned', 'Suicided']
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/extrinsics/definitions.js
/* harmony default export */ const extrinsics_definitions = ({
    rpc: {},
    types: {
        Extrinsic: 'GenericExtrinsic',
        ExtrinsicEra: 'GenericExtrinsicEra',
        ExtrinsicPayload: 'GenericExtrinsicPayload',
        ExtrinsicSignature: 'MultiSignature',
        ExtrinsicV4: 'GenericExtrinsicV4',
        ExtrinsicPayloadV4: 'GenericExtrinsicPayloadV4',
        ExtrinsicSignatureV4: 'GenericExtrinsicSignatureV4',
        ExtrinsicUnknown: 'GenericExtrinsicUnknown',
        ExtrinsicPayloadUnknown: 'GenericExtrinsicPayloadUnknown',
        // eras
        Era: 'ExtrinsicEra',
        ImmortalEra: 'GenericImmortalEra',
        MortalEra: 'GenericMortalEra',
        // signatures & signer
        AnySignature: 'H512',
        MultiSignature: {
            _enum: {
                Ed25519: 'Ed25519Signature',
                Sr25519: 'Sr25519Signature',
                Ecdsa: 'EcdsaSignature'
            }
        },
        Signature: 'H512',
        SignerPayload: 'GenericSignerPayload',
        EcdsaSignature: '[u8; 65]',
        Ed25519Signature: 'H512',
        Sr25519Signature: 'H512'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/fungibles/runtime.js
const fungibles_runtime_runtime = {
    FungiblesApi: [
        {
            methods: {
                query_account_balances: {
                    description: 'Returns the list of all `MultiAsset` that an `AccountId` has',
                    params: [
                        {
                            name: 'account',
                            type: 'AccountId'
                        }
                    ],
                    type: 'Result<Vec<XcmV3MultiAsset>, FungiblesAccessError>'
                }
            },
            version: 1
        },
        {
            methods: {
                query_account_balances: {
                    description: 'Returns the list of all `MultiAsset` that an `AccountId` has',
                    params: [
                        {
                            name: 'account',
                            type: 'AccountId'
                        }
                    ],
                    type: 'Result<XcmVersionedMultiAssets, FungiblesAccessError>'
                }
            },
            version: 2
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/fungibles/definitions.js

/* harmony default export */ const fungibles_definitions = ({
    rpc: {},
    runtime: fungibles_runtime_runtime,
    types: {
        FungiblesAccessError: {
            _enum: ['AssetIdConversionFailed', 'AmountToBalanceConversionFailed']
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/genericAsset/definitions.js
/* harmony default export */ const genericAsset_definitions = ({
    rpc: {},
    types: {
        AssetOptions: {
            initalIssuance: 'Compact<Balance>',
            permissions: 'PermissionLatest'
        },
        Owner: {
            _enum: {
                None: 'Null',
                Address: 'AccountId'
            }
        },
        PermissionsV1: {
            update: 'Owner',
            mint: 'Owner',
            burn: 'Owner'
        },
        PermissionVersions: {
            _enum: {
                V1: 'PermissionsV1'
            }
        },
        PermissionLatest: 'PermissionsV1'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/gilt/definitions.js
/* harmony default export */ const gilt_definitions = ({
    rpc: {},
    types: {
        ActiveGilt: {
            proportion: 'Perquintill',
            amount: 'Balance',
            who: 'AccountId',
            expiry: 'BlockNumber'
        },
        ActiveGiltsTotal: {
            frozen: 'Balance',
            proportion: 'Perquintill',
            index: 'ActiveIndex',
            target: 'Perquintill'
        },
        ActiveIndex: 'u32',
        GiltBid: {
            amount: 'Balance',
            who: 'AccountId'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/grandpa/rpc.js
const grandpa_rpc_rpc = {
    proveFinality: {
        description: 'Prove finality for the given block number, returning the Justification for the last block in the set.',
        params: [
            {
                name: 'blockNumber',
                type: 'BlockNumber'
            }
        ],
        type: 'Option<EncodedFinalityProofs>'
    },
    roundState: {
        description: 'Returns the state of the current best round state as well as the ongoing background rounds',
        params: [],
        type: 'ReportedRoundStates'
    },
    subscribeJustifications: {
        description: 'Subscribes to grandpa justifications',
        params: [],
        pubsub: [
            'justifications',
            'subscribeJustifications',
            'unsubscribeJustifications'
        ],
        type: 'JustificationNotification'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/grandpa/runtime.js
const GRANDPA_V2_V3 = {
    generate_key_ownership_proof: {
        description: 'Generates a proof of key ownership for the given authority in the given set.',
        params: [
            {
                name: 'setId',
                type: 'SetId'
            },
            {
                name: 'authorityId',
                type: 'AuthorityId'
            }
        ],
        type: 'Option<OpaqueKeyOwnershipProof>'
    },
    grandpa_authorities: {
        description: 'Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.',
        params: [],
        type: 'AuthorityList'
    },
    submit_report_equivocation_unsigned_extrinsic: {
        description: 'Submits an unsigned extrinsic to report an equivocation.',
        params: [
            {
                name: 'equivocationProof',
                type: 'GrandpaEquivocationProof'
            },
            {
                name: 'keyOwnerProof',
                type: 'OpaqueKeyOwnershipProof'
            }
        ],
        type: 'Option<Null>'
    }
};
const grandpa_runtime_runtime = {
    GrandpaApi: [
        {
            methods: {
                current_set_id: {
                    description: 'Get current GRANDPA authority set id.',
                    params: [],
                    type: 'SetId'
                },
                ...GRANDPA_V2_V3
            },
            version: 3
        },
        {
            methods: GRANDPA_V2_V3,
            version: 2
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/grandpa/definitions.js


/* harmony default export */ const grandpa_definitions = ({
    rpc: grandpa_rpc_rpc,
    runtime: grandpa_runtime_runtime,
    types: {
        AuthorityIndex: 'u64',
        AuthorityList: 'Vec<NextAuthority>',
        AuthoritySet: {
            currentAuthorities: 'AuthorityList',
            setId: 'u64',
            pendingStandardChanges: 'ForkTreePendingChange',
            pendingForcedChanges: 'Vec<PendingChange>',
            authoritySetChanges: 'AuthoritySetChanges'
        },
        ForkTreePendingChange: {
            roots: 'Vec<ForkTreePendingChangeNode>',
            bestFinalizedNumber: 'Option<BlockNumber>'
        },
        ForkTreePendingChangeNode: {
            hash: 'BlockHash',
            number: 'BlockNumber',
            data: 'PendingChange', // actual data, here PendingChange
            children: 'Vec<ForkTreePendingChangeNode>'
        },
        AuthoritySetChange: '(U64, BlockNumber)',
        AuthoritySetChanges: 'Vec<AuthoritySetChange>',
        AuthorityWeight: 'u64',
        DelayKind: {
            _enum: {
                Finalized: 'Null',
                Best: 'DelayKindBest'
            }
        },
        DelayKindBest: {
            medianLastFinalized: 'BlockNumber'
        },
        EncodedFinalityProofs: 'Bytes',
        GrandpaEquivocation: {
            _enum: {
                Prevote: 'GrandpaEquivocationValue',
                Precommit: 'GrandpaEquivocationValue'
            }
        },
        GrandpaEquivocationProof: {
            setId: 'SetId',
            equivocation: 'GrandpaEquivocation'
        },
        GrandpaEquivocationValue: {
            roundNumber: 'u64',
            identity: 'AuthorityId',
            first: '(GrandpaPrevote, AuthoritySignature)',
            second: '(GrandpaPrevote, AuthoritySignature)'
        },
        GrandpaPrevote: {
            targetHash: 'Hash',
            targetNumber: 'BlockNumber'
        },
        GrandpaCommit: {
            targetHash: 'BlockHash',
            targetNumber: 'BlockNumber',
            precommits: 'Vec<GrandpaSignedPrecommit>'
        },
        GrandpaPrecommit: {
            targetHash: 'BlockHash',
            targetNumber: 'BlockNumber'
        },
        GrandpaSignedPrecommit: {
            precommit: 'GrandpaPrecommit',
            signature: 'AuthoritySignature',
            id: 'AuthorityId'
        },
        GrandpaJustification: {
            round: 'u64',
            commit: 'GrandpaCommit',
            votesAncestries: 'Vec<Header>'
        },
        JustificationNotification: 'Bytes',
        KeyOwnerProof: 'MembershipProof',
        NextAuthority: '(AuthorityId, AuthorityWeight)',
        PendingChange: {
            nextAuthorities: 'AuthorityList',
            delay: 'BlockNumber',
            canonHeight: 'BlockNumber',
            canonHash: 'BlockHash',
            delayKind: 'DelayKind'
        },
        PendingPause: {
            scheduledAt: 'BlockNumber',
            delay: 'BlockNumber'
        },
        PendingResume: {
            scheduledAt: 'BlockNumber',
            delay: 'BlockNumber'
        },
        Precommits: {
            currentWeight: 'u32',
            missing: 'BTreeSet<AuthorityId>'
        },
        Prevotes: {
            currentWeight: 'u32',
            missing: 'BTreeSet<AuthorityId>'
        },
        ReportedRoundStates: {
            setId: 'u32',
            best: 'RoundState',
            background: 'Vec<RoundState>'
        },
        RoundState: {
            round: 'u32',
            totalWeight: 'u32',
            thresholdWeight: 'u32',
            prevotes: 'Prevotes',
            precommits: 'Precommits'
        },
        SetId: 'u64',
        StoredPendingChange: {
            scheduledAt: 'BlockNumber',
            delay: 'BlockNumber',
            nextAuthorities: 'AuthorityList'
        },
        StoredState: {
            _enum: {
                Live: 'Null',
                PendingPause: 'PendingPause',
                Paused: 'Null',
                PendingResume: 'PendingResume'
            }
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/identity/definitions.js
/* harmony default export */ const identity_definitions = ({
    rpc: {},
    types: {
        IdentityFields: {
            _set: {
                _bitLength: 64,
                // Mapped here to 32 bits, in Rust these are 64-bit values
                Display: 1,
                Legal: 2,
                Web: 4,
                Riot: 8,
                Email: 16,
                PgpFingerprint: 32,
                Image: 64,
                Twitter: 128
            }
        },
        IdentityInfoAdditional: '(Data, Data)',
        IdentityInfoTo198: {
            additional: 'Vec<IdentityInfoAdditional>',
            display: 'Data',
            legal: 'Data',
            web: 'Data',
            riot: 'Data',
            email: 'Data',
            pgpFingerprint: 'Option<H160>',
            image: 'Data'
        },
        IdentityInfo: {
            _fallback: 'IdentityInfoTo198',
            additional: 'Vec<IdentityInfoAdditional>',
            display: 'Data',
            legal: 'Data',
            web: 'Data',
            riot: 'Data',
            email: 'Data',
            pgpFingerprint: 'Option<H160>',
            image: 'Data',
            twitter: 'Data'
        },
        IdentityJudgement: {
            _enum: {
                Unknown: 'Null',
                FeePaid: 'Balance',
                Reasonable: 'Null',
                KnownGood: 'Null',
                OutOfDate: 'Null',
                LowQuality: 'Null',
                Erroneous: 'Null'
            }
        },
        RegistrationJudgement: '(RegistrarIndex, IdentityJudgement)',
        RegistrationTo198: {
            judgements: 'Vec<RegistrationJudgement>',
            deposit: 'Balance',
            info: 'IdentityInfoTo198'
        },
        Registration: {
            _fallback: 'RegistrationTo198',
            judgements: 'Vec<RegistrationJudgement>',
            deposit: 'Balance',
            info: 'IdentityInfo'
        },
        RegistrarIndex: 'u32',
        RegistrarInfo: {
            account: 'AccountId',
            fee: 'Balance',
            fields: 'IdentityFields'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/imOnline/definitions.js
/* harmony default export */ const imOnline_definitions = ({
    rpc: {},
    types: {
        AuthIndex: 'u32',
        AuthoritySignature: 'Signature',
        Heartbeat: {
            blockNumber: 'BlockNumber',
            networkState: 'OpaqueNetworkState',
            sessionIndex: 'SessionIndex',
            authorityIndex: 'AuthIndex',
            validatorsLen: 'u32'
        },
        HeartbeatTo244: {
            blockNumber: 'BlockNumber',
            networkState: 'OpaqueNetworkState',
            sessionIndex: 'SessionIndex',
            authorityIndex: 'AuthIndex'
        },
        OpaqueMultiaddr: 'Opaque<Bytes>',
        OpaquePeerId: 'Opaque<Bytes>',
        OpaqueNetworkState: {
            peerId: 'OpaquePeerId',
            externalAddresses: 'Vec<OpaqueMultiaddr>'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/lottery/definitions.js
/* harmony default export */ const lottery_definitions = ({
    rpc: {},
    types: {
        CallIndex: '(u8, u8)',
        LotteryConfig: {
            price: 'Balance',
            start: 'BlockNumber',
            length: 'BlockNumber',
            delay: 'BlockNumber',
            repeat: 'bool'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/mmr/rpc.js
const mmr_rpc_rpc = {
    generateProof: {
        description: 'Generate MMR proof for the given block numbers.',
        params: [
            {
                name: 'blockNumbers',
                type: 'Vec<u64>'
            },
            {
                isOptional: true,
                name: 'bestKnownBlockNumber',
                type: 'u64'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'MmrLeafBatchProof'
    },
    root: {
        description: 'Get the MMR root hash for the current best block.',
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'MmrHash'
    },
    verifyProof: {
        description: 'Verify an MMR proof',
        params: [
            {
                name: 'proof',
                type: 'MmrLeafBatchProof'
            }
        ],
        type: 'bool'
    },
    verifyProofStateless: {
        description: 'Verify an MMR proof statelessly given an mmr_root',
        params: [
            {
                name: 'root',
                type: 'MmrHash'
            },
            {
                name: 'proof',
                type: 'MmrLeafBatchProof'
            }
        ],
        type: 'bool'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/mmr/runtime.js
const MMR_V2 = {
    generate_proof: {
        description: 'Generate MMR proof for the given block numbers.',
        params: [
            {
                name: 'blockNumbers',
                type: 'Vec<BlockNumber>'
            },
            {
                name: 'bestKnownBlockNumber',
                type: 'Option<BlockNumber>'
            }
        ],
        type: 'Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>'
    },
    root: {
        description: 'Return the on-chain MMR root hash.',
        params: [],
        type: 'Result<Hash, MmrError>'
    },
    verify_proof: {
        description: 'Verify MMR proof against on-chain MMR.',
        params: [
            {
                name: 'leaves',
                type: 'Vec<MmrEncodableOpaqueLeaf>'
            },
            {
                name: 'proof',
                type: 'MmrBatchProof'
            }
        ],
        type: 'Result<(), MmrError>'
    },
    verify_proof_stateless: {
        description: 'Verify MMR proof against given root hash.',
        params: [
            {
                name: 'root',
                type: 'Hash'
            },
            {
                name: 'leaves',
                type: 'Vec<MmrEncodableOpaqueLeaf>'
            },
            {
                name: 'proof',
                type: 'MmrBatchProof'
            }
        ],
        type: 'Result<(), MmrError>'
    }
};
const MMR_V1 = {
    generate_batch_proof: {
        description: 'Generate MMR proof for a series of leaves under given indices.',
        params: [
            {
                name: 'leafIndices',
                type: 'Vec<MmrLeafIndex>'
            }
        ],
        type: 'Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>'
    },
    generate_proof: {
        description: 'Generate MMR proof for a leaf under given index.',
        params: [
            {
                name: 'leafIndex',
                type: 'MmrLeafIndex'
            }
        ],
        type: 'Result<(MmrEncodableOpaqueLeaf, MmrProof), MmrError>'
    },
    mmr_root: {
        description: 'Return the on-chain MMR root hash.',
        params: [],
        type: 'Result<Hash, MmrError>'
    },
    verify_batch_proof: {
        description: 'Verify MMR proof against on-chain MMR for a batch of leaves.',
        params: [
            {
                name: 'leaves',
                type: 'Vec<MmrEncodableOpaqueLeaf>'
            },
            {
                name: 'proof',
                type: 'MmrBatchProof'
            }
        ],
        type: 'Result<(), MmrError>'
    },
    verify_batch_proof_stateless: {
        description: 'Verify MMR proof against given root hash or a batch of leaves.',
        params: [
            {
                name: 'root',
                type: 'Hash'
            },
            {
                name: 'leaves',
                type: 'Vec<MmrEncodableOpaqueLeaf>'
            },
            {
                name: 'proof',
                type: 'MmrBatchProof'
            }
        ],
        type: 'Result<(), MmrError>'
    },
    verify_proof: {
        description: 'Verify MMR proof against on-chain MMR.',
        params: [
            {
                name: 'leaf',
                type: 'MmrEncodableOpaqueLeaf'
            },
            {
                name: 'proof',
                type: 'MmrProof'
            }
        ],
        type: 'Result<(), MmrError>'
    },
    verify_proof_stateless: {
        description: 'Verify MMR proof against given root hash.',
        params: [
            {
                name: 'root',
                type: 'Hash'
            },
            {
                name: 'leaf',
                type: 'MmrEncodableOpaqueLeaf'
            },
            {
                name: 'proof',
                type: 'MmrProof'
            }
        ],
        type: 'Result<(), MmrError>'
    }
};
const mmr_runtime_runtime = {
    MmrApi: [
        {
            methods: MMR_V2,
            version: 2
        },
        {
            methods: MMR_V1,
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/mmr/definitions.js


/* harmony default export */ const mmr_definitions = ({
    rpc: mmr_rpc_rpc,
    runtime: mmr_runtime_runtime,
    types: {
        MmrBatchProof: {
            leafIndices: 'Vec<MmrLeafIndex>',
            leafCount: 'MmrNodeIndex',
            items: 'Vec<Hash>'
        },
        MmrEncodableOpaqueLeaf: 'Bytes',
        MmrError: {
            _enum: ['Push', 'GetRoot', 'Commit', 'GenerateProof', 'Verify', 'LeafNotFound', ' PalletNotIncluded', 'InvalidLeafIndex']
        },
        MmrHash: 'Hash',
        MmrLeafBatchProof: {
            blockHash: 'BlockHash',
            leaves: 'Bytes',
            proof: 'Bytes'
        },
        MmrLeafIndex: 'u64',
        MmrLeafProof: {
            blockHash: 'BlockHash',
            leaf: 'Bytes',
            proof: 'Bytes'
        },
        MmrNodeIndex: 'u64',
        MmrProof: {
            leafIndex: 'MmrLeafIndex',
            leafCount: 'MmrNodeIndex',
            items: 'Vec<Hash>'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/nfts/runtime.js
const nfts_runtime_runtime = {
    NftsApi: [
        {
            methods: {
                attribute: {
                    description: 'An attribute',
                    params: [
                        {
                            name: 'collection',
                            type: 'NftCollectionId'
                        },
                        {
                            name: 'item',
                            type: 'NftItemId'
                        },
                        {
                            name: 'key',
                            type: 'Bytes'
                        }
                    ],
                    type: 'Option<Bytes>'
                },
                collection_attribute: {
                    description: 'A collection attribute',
                    params: [
                        {
                            name: 'collection',
                            type: 'NftCollectionId'
                        },
                        {
                            name: 'key',
                            type: 'Bytes'
                        }
                    ],
                    type: 'Option<Bytes>'
                },
                collection_owner: {
                    description: 'A collection owner',
                    params: [
                        {
                            name: 'collection',
                            type: 'NftCollectionId'
                        }
                    ],
                    type: 'Option<AccountId>'
                },
                custom_attribute: {
                    description: 'A custom attribute',
                    params: [
                        {
                            name: 'account',
                            type: 'AccountId'
                        },
                        {
                            name: 'collection',
                            type: 'NftCollectionId'
                        },
                        {
                            name: 'item',
                            type: 'NftItemId'
                        },
                        {
                            name: 'key',
                            type: 'Bytes'
                        }
                    ],
                    type: 'Option<Bytes>'
                },
                owner: {
                    description: 'Collection owner',
                    params: [
                        {
                            name: 'collection',
                            type: 'NftCollectionId'
                        },
                        {
                            name: 'item',
                            type: 'NftItemId'
                        }
                    ],
                    type: 'Option<AccountId>'
                },
                system_attribute: {
                    description: 'System attribute',
                    params: [
                        {
                            name: 'collection',
                            type: 'NftCollectionId'
                        },
                        {
                            name: 'item',
                            type: 'NftItemId'
                        },
                        {
                            name: 'key',
                            type: 'Bytes'
                        }
                    ],
                    type: 'Option<Bytes>'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/nfts/definitions.js

/* harmony default export */ const nfts_definitions = ({
    rpc: {},
    runtime: nfts_runtime_runtime,
    types: {
        NftCollectionId: 'u32',
        NftItemId: 'u32'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/nompools/runtime.js
const nompools_runtime_runtime = {
    NominationPoolsApi: [
        {
            methods: {
                balance_to_points: {
                    description: 'Returns the equivalent points of `new_funds` for a given pool.',
                    params: [
                        {
                            name: 'poolId',
                            type: 'NpPoolId'
                        },
                        {
                            name: 'newFunds',
                            type: 'Balance'
                        }
                    ],
                    type: 'Balance'
                },
                pending_rewards: {
                    description: 'Returns the pending rewards for the given member.',
                    params: [
                        {
                            name: 'member',
                            type: 'AccountId'
                        }
                    ],
                    type: 'Balance'
                },
                points_to_balance: {
                    description: 'Returns the equivalent balance of `points` for a given pool.',
                    params: [
                        {
                            name: 'poolId',
                            type: 'NpPoolId'
                        },
                        {
                            name: 'points',
                            type: 'Balance'
                        }
                    ],
                    type: 'Balance'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/nompools/definitions.js

/* harmony default export */ const nompools_definitions = ({
    rpc: {},
    runtime: nompools_runtime_runtime,
    types: {
        NpApiError: {
            _enum: ['MemberNotFound', 'OverflowInPendingRewards']
        },
        NpPoolId: 'u32'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/offences/definitions.js
/* harmony default export */ const offences_definitions = ({
    rpc: {},
    types: {
        DeferredOffenceOf: '(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)',
        Kind: '[u8; 16]',
        OffenceDetails: {
            offender: 'Offender',
            reporters: 'Vec<Reporter>'
        },
        Offender: 'IdentificationTuple',
        OpaqueTimeSlot: 'Bytes',
        ReportIdOf: 'Hash',
        Reporter: 'AccountId'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/pow/runtime.js
const pow_runtime_runtime = {
    DifficultyApi: [
        {
            methods: {
                difficulty: {
                    description: 'Return the target difficulty of the next block.',
                    params: [],
                    // This is Difficulty in the original, however this is chain-specific
                    type: 'Raw'
                }
            },
            version: 1
        }
    ],
    TimestampApi: [
        {
            methods: {
                timestamp: {
                    description: 'API necessary for timestamp-based difficulty adjustment algorithms.',
                    params: [],
                    type: 'Moment'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/pow/definitions.js

/* harmony default export */ const pow_definitions = ({
    rpc: {},
    runtime: pow_runtime_runtime,
    types: {}
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/proxy/definitions.js
/* harmony default export */ const proxy_definitions = ({
    rpc: {},
    types: {
        ProxyDefinition: {
            delegate: 'AccountId',
            proxyType: 'ProxyType',
            delay: 'BlockNumber'
        },
        ProxyType: {
            _enum: ['Any', 'NonTransfer', 'Governance', 'Staking']
        },
        ProxyAnnouncement: {
            real: 'AccountId',
            callHash: 'Hash',
            height: 'BlockNumber'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/recovery/definitions.js
/* harmony default export */ const recovery_definitions = ({
    rpc: {},
    types: {
        ActiveRecovery: {
            created: 'BlockNumber',
            deposit: 'Balance',
            friends: 'Vec<AccountId>'
        },
        RecoveryConfig: {
            delayPeriod: 'BlockNumber',
            deposit: 'Balance',
            friends: 'Vec<AccountId>',
            threshold: 'u16'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/scheduler/definitions.js
/* harmony default export */ const scheduler_definitions = ({
    rpc: {},
    types: {
        Period: '(BlockNumber, u32)',
        Priority: 'u8',
        SchedulePeriod: 'Period',
        SchedulePriority: 'Priority',
        Scheduled: {
            maybeId: 'Option<Bytes>',
            priority: 'SchedulePriority',
            call: 'Call',
            maybePeriodic: 'Option<SchedulePeriod>',
            origin: 'PalletsOrigin'
        },
        ScheduledTo254: {
            maybeId: 'Option<Bytes>',
            priority: 'SchedulePriority',
            call: 'Call',
            maybePeriodic: 'Option<SchedulePeriod>'
        },
        TaskAddress: '(BlockNumber, u32)'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/session/runtime.js
const session_runtime_runtime = {
    SessionKeys: [
        {
            methods: {
                decode_session_keys: {
                    description: 'Decode the given public session keys.',
                    params: [
                        {
                            name: 'encoded',
                            type: 'Bytes'
                        }
                    ],
                    type: 'Option<Vec<(Bytes, KeyTypeId)>>'
                },
                generate_session_keys: {
                    description: 'Generate a set of session keys with optionally using the given seed.',
                    params: [
                        {
                            name: 'seed',
                            type: 'Option<Bytes>'
                        }
                    ],
                    type: 'Bytes'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/session/definitions.js

const keyTypes = {
    // key for beefy
    BeefyKey: '[u8; 33]',
    // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
    Keys: 'SessionKeys4',
    SessionKeys1: '(AccountId)',
    SessionKeys2: '(AccountId, AccountId)',
    SessionKeys3: '(AccountId, AccountId, AccountId)',
    SessionKeys4: '(AccountId, AccountId, AccountId, AccountId)',
    SessionKeys5: '(AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys6: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys6B: '(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys7: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys7B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys8: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys8B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys9: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys9B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys10: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys10B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)'
};
/* harmony default export */ const session_definitions = ({
    rpc: {},
    runtime: session_runtime_runtime,
    types: {
        ...keyTypes,
        FullIdentification: 'Exposure',
        IdentificationTuple: '(ValidatorId, FullIdentification)',
        MembershipProof: {
            session: 'SessionIndex',
            trieNodes: 'Vec<Bytes>',
            validatorCount: 'ValidatorCount'
        },
        SessionIndex: 'u32',
        ValidatorCount: 'u32'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/society/definitions.js
/* harmony default export */ const society_definitions = ({
    rpc: {},
    types: {
        Bid: {
            who: 'AccountId',
            kind: 'BidKind',
            value: 'Balance'
        },
        BidKind: {
            _enum: {
                Deposit: 'Balance',
                Vouch: '(AccountId, Balance)'
            }
        },
        // a society-specific Judgement (not the same as identity Judgement)
        SocietyJudgement: {
            _enum: ['Rebid', 'Reject', 'Approve']
        },
        // a society-specific Vote
        SocietyVote: {
            _enum: ['Skeptic', 'Reject', 'Approve']
        },
        StrikeCount: 'u32',
        VouchingStatus: {
            _enum: ['Vouching', 'Banned']
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/staking/runtime.js
const staking_runtime_runtime = {
    StakingApi: [
        {
            methods: {
                nominations_quota: {
                    description: 'Returns the nominations quota for a nominator with a given balance.',
                    params: [
                        {
                            name: 'balance',
                            type: 'Balance'
                        }
                    ],
                    type: 'u32'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/staking/definitions.js

const deprecated = {
    Points: 'u32',
    EraPoints: {
        total: 'Points',
        individual: 'Vec<Points>'
    }
};
const phragmen = {
    CompactAssignments: 'CompactAssignmentsWith16',
    CompactAssignmentsWith16: {
        votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
        votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
        votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
        votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
        votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
        votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
        votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
        votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
        votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
        votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
        votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
        votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
        votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
        votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
        votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
        votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>'
    },
    CompactAssignmentsWith24: {
        votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
        votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
        votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
        votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
        votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
        votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
        votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
        votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
        votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
        votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
        votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
        votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
        votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
        votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
        votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
        votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>',
        votes17: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>',
        votes18: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>',
        votes19: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>',
        votes20: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>',
        votes21: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>',
        votes22: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>',
        votes23: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>',
        votes24: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>'
    },
    CompactAssignmentsTo265: 'CompactAssignmentsWith16',
    CompactAssignmentsTo257: {
        votes1: 'Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>',
        votes2: 'Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>',
        votes3: 'Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>',
        votes4: 'Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>',
        votes5: 'Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>',
        votes6: 'Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>',
        votes7: 'Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>',
        votes8: 'Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>',
        votes9: 'Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>',
        votes10: 'Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>',
        votes11: 'Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>',
        votes12: 'Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>',
        votes13: 'Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>',
        votes14: 'Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>',
        votes15: 'Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>',
        votes16: 'Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>'
    },
    CompactScore: '(ValidatorIndex, OffchainAccuracy)',
    CompactScoreCompact: '(ValidatorIndexCompact, OffchainAccuracyCompact)',
    ElectionCompute: {
        // in previous versions the last entry was "AuthorityId"
        // (since no data attached, and it is via SCALE can rename)
        _enum: ['OnChain', 'Signed', 'Unsigned']
    },
    ElectionPhase: {
        _enum: {
            Off: null,
            Signed: null,
            Unsigned: '(bool, BlockNumber)',
            Emergency: null
        }
    },
    ElectionResult: {
        compute: 'ElectionCompute',
        slotStake: 'Balance',
        electedStashes: 'Vec<AccountId>',
        exposures: 'Vec<(AccountId, Exposure)>'
    },
    ElectionScore: '[u128; 3]',
    ElectionSize: {
        validators: 'Compact<ValidatorIndex>',
        nominators: 'Compact<NominatorIndex>'
    },
    ElectionStatus: {
        _enum: {
            Close: 'Null',
            Open: 'BlockNumber'
        }
    },
    ExtendedBalance: 'u128',
    RawSolution: 'RawSolutionWith16',
    RawSolutionWith16: {
        compact: 'CompactAssignmentsWith16',
        score: 'ElectionScore',
        round: 'u32'
    },
    RawSolutionWith24: {
        compact: 'CompactAssignmentsWith24',
        score: 'ElectionScore',
        round: 'u32'
    },
    RawSolutionTo265: 'RawSolutionWith16',
    ReadySolution: {
        supports: 'SolutionSupports',
        score: 'ElectionScore',
        compute: 'ElectionCompute'
    },
    RoundSnapshot: {
        voters: 'Vec<(AccountId, VoteWeight, Vec<AccountId>)>',
        targets: 'Vec<AccountId>'
    },
    SeatHolder: {
        who: 'AccountId',
        stake: 'Balance',
        deposit: 'Balance'
    },
    SignedSubmission: {
        _fallback: 'SignedSubmissionTo276',
        who: 'AccountId',
        deposit: 'Balance',
        solution: 'RawSolution',
        reward: 'Balance'
    },
    SignedSubmissionTo276: {
        who: 'AccountId',
        deposit: 'Balance',
        solution: 'RawSolution'
    },
    SignedSubmissionOf: 'SignedSubmission',
    SolutionOrSnapshotSize: {
        voters: 'Compact<u32>',
        targets: 'Compact<u32>'
    },
    SolutionSupport: {
        total: 'ExtendedBalance',
        voters: 'Vec<(AccountId, ExtendedBalance)>'
    },
    SolutionSupports: 'Vec<(AccountId, SolutionSupport)>',
    Supports: 'SolutionSupports',
    SubmissionIndicesOf: 'BTreeMap<ElectionScore, u32>',
    Voter: {
        votes: 'Vec<AccountId>',
        stake: 'Balance',
        deposit: 'Balance'
    },
    VoteWeight: 'u64'
};
/* harmony default export */ const staking_definitions = ({
    rpc: {},
    runtime: staking_runtime_runtime,
    types: {
        ...deprecated,
        ...phragmen,
        ActiveEraInfo: {
            index: 'EraIndex',
            start: 'Option<Moment>'
        },
        EraIndex: 'u32',
        EraRewardPoints: {
            total: 'RewardPoint',
            individual: 'BTreeMap<AccountId, RewardPoint>'
        },
        EraRewards: {
            total: 'u32',
            rewards: 'Vec<u32>'
        },
        Exposure: {
            total: 'Compact<Balance>',
            own: 'Compact<Balance>',
            others: 'Vec<IndividualExposure>'
        },
        Forcing: {
            _enum: [
                'NotForcing',
                'ForceNew',
                'ForceNone',
                'ForceAlways'
            ]
        },
        IndividualExposure: {
            who: 'AccountId',
            value: 'Compact<Balance>'
        },
        KeyType: 'AccountId',
        MomentOf: 'Moment',
        Nominations: {
            targets: 'Vec<AccountId>',
            submittedIn: 'EraIndex',
            suppressed: 'bool'
        },
        NominatorIndex: 'u32',
        NominatorIndexCompact: 'Compact<NominatorIndex>',
        OffchainAccuracy: 'PerU16',
        OffchainAccuracyCompact: 'Compact<OffchainAccuracy>',
        PhragmenScore: '[u128; 3]',
        Points: 'u32',
        RewardDestination: {
            _enum: {
                Staked: 'Null',
                Stash: 'Null',
                Controller: 'Null',
                Account: 'AccountId',
                None: 'Null'
            }
        },
        RewardPoint: 'u32',
        SlashJournalEntry: {
            who: 'AccountId',
            amount: 'Balance',
            ownSlash: 'Balance'
        },
        SlashingSpansTo204: {
            spanIndex: 'SpanIndex',
            lastStart: 'EraIndex',
            prior: 'Vec<EraIndex>'
        },
        SlashingSpans: {
            spanIndex: 'SpanIndex',
            lastStart: 'EraIndex',
            lastNonzeroSlash: 'EraIndex',
            prior: 'Vec<EraIndex>'
        },
        SpanIndex: 'u32',
        SpanRecord: {
            slashed: 'Balance',
            paidOut: 'Balance'
        },
        StakingLedgerTo223: {
            stash: 'AccountId',
            total: 'Compact<Balance>',
            active: 'Compact<Balance>',
            unlocking: 'Vec<UnlockChunk>'
        },
        StakingLedgerTo240: {
            _fallback: 'StakingLedgerTo223',
            stash: 'AccountId',
            total: 'Compact<Balance>',
            active: 'Compact<Balance>',
            unlocking: 'Vec<UnlockChunk>',
            lastReward: 'Option<EraIndex>'
        },
        StakingLedger: {
            stash: 'AccountId',
            total: 'Compact<Balance>',
            active: 'Compact<Balance>',
            unlocking: 'Vec<UnlockChunk>',
            claimedRewards: 'Vec<EraIndex>'
        },
        UnappliedSlashOther: '(AccountId, Balance)',
        UnappliedSlash: {
            validator: 'AccountId',
            own: 'Balance',
            others: 'Vec<UnappliedSlashOther>',
            reporters: 'Vec<AccountId>',
            payout: 'Balance'
        },
        UnlockChunk: {
            value: 'Compact<Balance>',
            era: 'Compact<BlockNumber>'
        },
        ValidatorIndex: 'u16',
        ValidatorIndexCompact: 'Compact<ValidatorIndex>',
        ValidatorPrefs: 'ValidatorPrefsWithBlocked',
        ValidatorPrefsWithCommission: {
            commission: 'Compact<Perbill>'
        },
        ValidatorPrefsWithBlocked: {
            commission: 'Compact<Perbill>',
            blocked: 'bool'
        },
        ValidatorPrefsTo196: {
            validatorPayment: 'Compact<Balance>'
        },
        ValidatorPrefsTo145: {
            unstakeThreshold: 'Compact<u32>',
            validatorPayment: 'Compact<Balance>'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/support/definitions.js
/* harmony default export */ const support_definitions = ({
    rpc: {},
    types: {
        WeightToFeeCoefficient: {
            coeffInteger: 'Balance',
            coeffFrac: 'Perbill',
            negative: 'bool',
            degree: 'u8'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/syncstate/rpc.js
const syncstate_rpc_rpc = {
    genSyncSpec: {
        description: 'Returns the json-serialized chainspec running the node, with a sync state.',
        endpoint: 'sync_state_genSyncSpec',
        params: [
            {
                name: 'raw',
                type: 'bool'
            }
        ],
        type: 'Json'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/syncstate/definitions.js

/* harmony default export */ const syncstate_definitions = ({
    rpc: syncstate_rpc_rpc,
    types: {}
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/system/rpc.js
const system_rpc_rpc = {
    accountNextIndex: {
        alias: ['account_nextIndex'],
        description: 'Retrieves the next accountIndex as available on the node',
        params: [
            {
                name: 'accountId',
                type: 'AccountId'
            }
        ],
        type: 'Index'
    },
    addLogFilter: {
        description: 'Adds the supplied directives to the current log filter',
        isUnsafe: true,
        params: [
            {
                name: 'directives',
                type: 'Text'
            }
        ],
        type: 'Null'
    },
    addReservedPeer: {
        description: 'Adds a reserved peer',
        isUnsafe: true,
        params: [
            {
                name: 'peer',
                type: 'Text'
            }
        ],
        type: 'Text'
    },
    chain: {
        description: 'Retrieves the chain',
        params: [],
        type: 'Text'
    },
    chainType: {
        description: 'Retrieves the chain type',
        params: [],
        type: 'ChainType'
    },
    dryRun: {
        alias: ['system_dryRunAt'],
        description: 'Dry run an extrinsic at a given block',
        isUnsafe: true,
        params: [
            {
                name: 'extrinsic',
                type: 'Bytes'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'ApplyExtrinsicResult'
    },
    health: {
        description: 'Return health status of the node',
        noErrorLog: true,
        params: [],
        type: 'Health'
    },
    localListenAddresses: {
        description: 'The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example',
        params: [],
        type: 'Vec<Text>'
    },
    localPeerId: {
        description: 'Returns the base58-encoded PeerId of the node',
        params: [],
        type: 'Text'
    },
    name: {
        description: 'Retrieves the node name',
        params: [],
        type: 'Text'
    },
    networkState: {
        alias: ['system_unstable_networkState'],
        description: 'Returns current state of the network',
        isUnsafe: true,
        params: [],
        type: 'NetworkState'
    },
    nodeRoles: {
        description: 'Returns the roles the node is running as',
        params: [],
        type: 'Vec<NodeRole>'
    },
    peers: {
        description: 'Returns the currently connected peers',
        isUnsafe: true,
        params: [],
        type: 'Vec<PeerInfo>'
    },
    properties: {
        description: 'Get a custom set of properties as a JSON object, defined in the chain spec',
        params: [],
        type: 'ChainProperties'
    },
    removeReservedPeer: {
        description: 'Remove a reserved peer',
        isUnsafe: true,
        params: [
            {
                name: 'peerId',
                type: 'Text'
            }
        ],
        type: 'Text'
    },
    reservedPeers: {
        description: 'Returns the list of reserved peers',
        params: [],
        type: 'Vec<Text>'
    },
    resetLogFilter: {
        description: 'Resets the log filter to Substrate defaults',
        isUnsafe: true,
        params: [],
        type: 'Null'
    },
    syncState: {
        description: 'Returns the state of the syncing of the node',
        params: [],
        type: 'SyncState'
    },
    version: {
        description: 'Retrieves the version of the node',
        params: [],
        type: 'Text'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/system/runtime.js
const system_runtime_runtime = {
    AccountNonceApi: [
        {
            methods: {
                account_nonce: {
                    description: 'The API to query account nonce (aka transaction index)',
                    params: [
                        {
                            name: 'accountId',
                            type: 'AccountId'
                        }
                    ],
                    type: 'Index'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/system/definitions.js


/* harmony default export */ const system_definitions = ({
    rpc: system_rpc_rpc,
    runtime: system_runtime_runtime,
    types: {
        AccountInfo: 'AccountInfoWithTripleRefCount',
        AccountInfoWithRefCountU8: {
            nonce: 'Index',
            refcount: 'u8',
            data: 'AccountData'
        },
        AccountInfoWithRefCount: {
            _fallback: 'AccountInfoWithRefCountU8',
            nonce: 'Index',
            refcount: 'RefCount',
            data: 'AccountData'
        },
        AccountInfoWithDualRefCount: {
            _fallback: 'AccountInfoWithRefCount',
            nonce: 'Index',
            consumers: 'RefCount',
            providers: 'RefCount',
            data: 'AccountData'
        },
        // original naming
        AccountInfoWithProviders: 'AccountInfoWithDualRefCount',
        AccountInfoWithTripleRefCount: {
            _fallback: 'AccountInfoWithDualRefCount',
            nonce: 'Index',
            consumers: 'RefCount',
            providers: 'RefCount',
            sufficients: 'RefCount',
            data: 'AccountData'
        },
        ApplyExtrinsicResult: 'Result<DispatchOutcome, TransactionValidityError>',
        ApplyExtrinsicResultPre6: 'Result<DispatchOutcomePre6, TransactionValidityError>',
        ArithmeticError: {
            _enum: [
                'Underflow',
                'Overflow',
                'DivisionByZero'
            ]
        },
        BlockLength: {
            max: 'PerDispatchClassU32'
        },
        BlockWeights: {
            baseBlock: 'Weight',
            maxBlock: 'Weight',
            perClass: 'PerDispatchClassWeightsPerClass'
        },
        ChainProperties: 'GenericChainProperties',
        ChainType: {
            _enum: {
                Development: 'Null',
                Local: 'Null',
                Live: 'Null',
                Custom: 'Text'
            }
        },
        ConsumedWeight: 'PerDispatchClassWeight',
        DigestOf: 'Digest',
        DispatchClass: {
            _enum: ['Normal', 'Operational', 'Mandatory']
        },
        DispatchError: {
            _enum: {
                Other: 'Null',
                CannotLookup: 'Null',
                BadOrigin: 'Null',
                Module: 'DispatchErrorModule',
                ConsumerRemaining: 'Null',
                NoProviders: 'Null',
                TooManyConsumers: 'Null',
                Token: 'TokenError',
                Arithmetic: 'ArithmeticError',
                Transactional: 'TransactionalError',
                Exhausted: 'Null',
                Corruption: 'Null',
                Unavailable: 'Null'
            }
        },
        DispatchErrorPre6: {
            _enum: {
                Other: 'Null',
                CannotLookup: 'Null',
                BadOrigin: 'Null',
                Module: 'DispatchErrorModulePre6',
                ConsumerRemaining: 'Null',
                NoProviders: 'Null',
                TooManyConsumers: 'Null',
                Token: 'TokenError',
                Arithmetic: 'ArithmeticError',
                Transactional: 'TransactionalError'
            }
        },
        DispatchErrorPre6First: {
            // The enum was modified mid-flight, affecting asset chains -
            // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
            _enum: {
                Other: 'Null',
                CannotLookup: 'Null',
                BadOrigin: 'Null',
                Module: 'DispatchErrorModulePre6',
                ConsumerRemaining: 'Null',
                NoProviders: 'Null',
                Token: 'TokenError',
                Arithmetic: 'ArithmeticError',
                Transactional: 'TransactionalError'
            }
        },
        DispatchErrorModuleU8: {
            index: 'u8',
            error: 'u8'
        },
        DispatchErrorModuleU8a: {
            index: 'u8',
            error: '[u8; 4]'
        },
        DispatchErrorModule: 'DispatchErrorModuleU8a',
        DispatchErrorModulePre6: 'DispatchErrorModuleU8',
        DispatchErrorTo198: {
            module: 'Option<u8>',
            error: 'u8'
        },
        DispatchInfo: {
            weight: 'Weight',
            class: 'DispatchClass',
            paysFee: 'Pays'
        },
        DispatchInfoTo190: {
            weight: 'Weight',
            class: 'DispatchClass'
        },
        DispatchInfoTo244: {
            weight: 'Weight',
            class: 'DispatchClass',
            paysFee: 'bool'
        },
        DispatchOutcome: 'Result<(), DispatchError>',
        DispatchOutcomePre6: 'Result<(), DispatchErrorPre6>',
        DispatchResult: 'Result<(), DispatchError>',
        DispatchResultOf: 'DispatchResult',
        DispatchResultTo198: 'Result<(), Text>',
        Event: 'GenericEvent',
        EventId: '[u8; 2]',
        EventIndex: 'u32',
        EventRecord: {
            phase: 'Phase',
            event: 'Event',
            topics: 'Vec<Hash>'
        },
        Health: {
            peers: 'u64',
            isSyncing: 'bool',
            shouldHavePeers: 'bool'
        },
        InvalidTransaction: {
            _enum: {
                Call: 'Null',
                Payment: 'Null',
                Future: 'Null',
                Stale: 'Null',
                BadProof: 'Null',
                AncientBirthBlock: 'Null',
                ExhaustsResources: 'Null',
                Custom: 'u8',
                BadMandatory: 'Null',
                MandatoryDispatch: 'Null',
                BadSigner: 'Null'
            }
        },
        Key: 'Bytes',
        LastRuntimeUpgradeInfo: {
            specVersion: 'Compact<u32>',
            specName: 'Text'
        },
        NetworkState: {
            peerId: 'Text',
            listenedAddresses: 'Vec<Text>',
            externalAddresses: 'Vec<Text>',
            connectedPeers: 'HashMap<Text, Peer>',
            notConnectedPeers: 'HashMap<Text, NotConnectedPeer>',
            averageDownloadPerSec: 'u64',
            averageUploadPerSec: 'u64',
            peerset: 'NetworkStatePeerset'
        },
        NetworkStatePeerset: {
            messageQueue: 'u64',
            nodes: 'HashMap<Text, NetworkStatePeersetInfo>'
        },
        NetworkStatePeersetInfo: {
            connected: 'bool',
            reputation: 'i32'
        },
        NodeRole: {
            _enum: {
                Full: 'Null',
                LightClient: 'Null',
                Authority: 'Null',
                UnknownRole: 'u8'
            }
        },
        NotConnectedPeer: {
            knownAddresses: 'Vec<Text>',
            latestPingTime: 'Option<PeerPing>',
            versionString: 'Option<Text>'
        },
        Peer: {
            enabled: 'bool',
            endpoint: 'PeerEndpoint',
            knownAddresses: 'Vec<Text>',
            latestPingTime: 'PeerPing',
            open: 'bool',
            versionString: 'Text'
        },
        PeerEndpoint: {
            listening: 'PeerEndpointAddr'
        },
        PeerEndpointAddr: {
            _alias: {
                localAddr: 'local_addr',
                sendBackAddr: 'send_back_addr'
            },
            localAddr: 'Text',
            sendBackAddr: 'Text'
        },
        PeerPing: {
            nanos: 'u64',
            secs: 'u64'
        },
        PeerInfo: {
            peerId: 'Text',
            roles: 'Text',
            protocolVersion: 'u32',
            bestHash: 'Hash',
            bestNumber: 'BlockNumber'
        },
        PerDispatchClassU32: {
            normal: 'u32',
            operational: 'u32',
            mandatory: 'u32'
        },
        PerDispatchClassWeight: {
            normal: 'Weight',
            operational: 'Weight',
            mandatory: 'Weight'
        },
        PerDispatchClassWeightsPerClass: {
            normal: 'WeightPerClass',
            operational: 'WeightPerClass',
            mandatory: 'WeightPerClass'
        },
        Phase: {
            _enum: {
                ApplyExtrinsic: 'u32',
                Finalization: 'Null',
                Initialization: 'Null'
            }
        },
        RawOrigin: {
            _enum: {
                Root: 'Null',
                Signed: 'AccountId',
                None: 'Null'
            }
        },
        RefCount: 'u32',
        RefCountTo259: 'u8',
        SyncState: {
            startingBlock: 'BlockNumber',
            currentBlock: 'BlockNumber',
            highestBlock: 'Option<BlockNumber>'
        },
        SystemOrigin: 'RawOrigin',
        TokenError: {
            _enum: [
                'NoFunds',
                'WouldDie',
                'BelowMinimum',
                'CannotCreate',
                'UnknownAsset',
                'Frozen',
                'Unsupported',
                // these are dropped, but still in older versions
                // (if this adjusts, will need to take a re-look)
                'Underflow',
                'Overflow'
            ]
        },
        TransactionValidityError: {
            _enum: {
                Invalid: 'InvalidTransaction',
                Unknown: 'UnknownTransaction'
            }
        },
        TransactionalError: {
            _enum: [
                'LimitReached',
                'NoLayer'
            ]
        },
        UnknownTransaction: {
            _enum: {
                CannotLookup: 'Null',
                NoUnsignedValidator: 'Null',
                Custom: 'u8'
            }
        },
        WeightPerClass: {
            baseExtrinsic: 'Weight',
            maxExtrinsic: 'Option<Weight>',
            maxTotal: 'Option<Weight>',
            reserved: 'Option<Weight>'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/treasury/definitions.js
/* harmony default export */ const treasury_definitions = ({
    rpc: {},
    types: {
        Bounty: {
            proposer: 'AccountId',
            value: 'Balance',
            fee: 'Balance',
            curatorDeposit: 'Balance',
            bond: 'Balance',
            status: 'BountyStatus'
        },
        BountyIndex: 'u32',
        BountyStatus: {
            _enum: {
                Proposed: 'Null',
                Approved: 'Null',
                Funded: 'Null',
                CuratorProposed: 'BountyStatusCuratorProposed',
                Active: 'BountyStatusActive',
                PendingPayout: 'BountyStatusPendingPayout'
            }
        },
        BountyStatusActive: {
            curator: 'AccountId',
            updateDue: 'BlockNumber'
        },
        BountyStatusCuratorProposed: {
            curator: 'AccountId'
        },
        BountyStatusPendingPayout: {
            curator: 'AccountId',
            beneficiary: 'AccountId',
            unlockAt: 'BlockNumber'
        },
        OpenTip: {
            reason: 'Hash',
            who: 'AccountId',
            finder: 'AccountId',
            deposit: 'Balance',
            closes: 'Option<BlockNumber>',
            tips: 'Vec<OpenTipTip>',
            findersFee: 'bool'
        },
        OpenTipTo225: {
            reason: 'Hash',
            who: 'AccountId',
            finder: 'Option<OpenTipFinderTo225>',
            closes: 'Option<BlockNumber>',
            tips: 'Vec<OpenTipTip>'
        },
        OpenTipFinderTo225: '(AccountId, Balance)',
        OpenTipTip: '(AccountId, Balance)',
        TreasuryProposal: {
            proposer: 'AccountId',
            value: 'Balance',
            beneficiary: 'AccountId',
            bond: 'Balance'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/txpayment/definitions.js
/* harmony default export */ const txpayment_definitions = ({
    rpc: {},
    types: {
        Multiplier: 'Fixed128'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/txqueue/runtime.js
const txqueue_runtime_runtime = {
    TaggedTransactionQueue: [
        {
            methods: {
                validate_transaction: {
                    description: 'Validate the transaction.',
                    params: [
                        {
                            name: 'source',
                            type: 'TransactionSource'
                        },
                        {
                            name: 'tx',
                            type: 'Extrinsic'
                        },
                        {
                            name: 'blockHash',
                            type: 'BlockHash'
                        }
                    ],
                    type: 'TransactionValidity'
                }
            },
            version: 3
        },
        {
            methods: {
                validate_transaction: {
                    description: 'Validate the transaction.',
                    params: [
                        {
                            name: 'source',
                            type: 'TransactionSource'
                        },
                        {
                            name: 'tx',
                            type: 'Extrinsic'
                        }
                    ],
                    type: 'TransactionValidity'
                }
            },
            version: 2
        },
        {
            methods: {
                validate_transaction: {
                    description: 'Validate the transaction.',
                    params: [
                        {
                            name: 'tx',
                            type: 'Extrinsic'
                        }
                    ],
                    type: 'TransactionValidity'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/txqueue/definitions.js

/* harmony default export */ const txqueue_definitions = ({
    rpc: {},
    runtime: txqueue_runtime_runtime,
    types: {
        TransactionSource: {
            _enum: ['InBlock', 'Local', 'External']
        },
        TransactionValidity: 'Result<ValidTransaction, TransactionValidityError>',
        ValidTransaction: {
            priority: 'TransactionPriority',
            requires: 'Vec<TransactionTag>',
            provides: 'Vec<TransactionTag>',
            longevity: 'TransactionLongevity',
            propagate: 'bool'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/uniques/definitions.js
/* harmony default export */ const uniques_definitions = ({
    rpc: {},
    types: {
        ClassId: 'u32',
        InstanceId: 'u32',
        DepositBalance: 'Balance',
        DepositBalanceOf: 'Balance',
        ClassDetails: {
            owner: 'AccountId',
            issuer: 'AccountId',
            admin: 'AccountId',
            freezer: 'AccountId',
            totalDeposit: 'DepositBalance',
            freeHolding: 'bool',
            instances: 'u32',
            instanceMetadatas: 'u32',
            attributes: 'u32',
            isFrozen: 'bool'
        },
        DestroyWitness: {
            instances: 'Compact<u32>',
            instanceMetadatas: 'Compact<u32>',
            attributes: 'Compact<u32>'
        },
        InstanceDetails: {
            owner: 'AccountId',
            approved: 'Option<AccountId>',
            isFrozen: 'bool',
            deposit: 'DepositBalance'
        },
        ClassMetadata: {
            deposit: 'DepositBalance',
            data: 'Vec<u8>',
            isFrozen: 'bool'
        },
        InstanceMetadata: {
            deposit: 'DepositBalance',
            data: 'Vec<u8>',
            isFrozen: 'bool'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/utility/definitions.js
/* harmony default export */ const utility_definitions = ({
    rpc: {},
    types: {
        Multisig: {
            when: 'Timepoint',
            deposit: 'Balance',
            depositor: 'AccountId',
            approvals: 'Vec<AccountId>'
        },
        Timepoint: {
            height: 'BlockNumber',
            index: 'u32'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/vesting/definitions.js
/* harmony default export */ const vesting_definitions = ({
    rpc: {},
    types: {
        VestingInfo: {
            locked: 'Balance',
            perBlock: 'Balance',
            startingBlock: 'BlockNumber'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/attestations/definitions.js
/* harmony default export */ const attestations_definitions = ({
    rpc: {},
    types: {
        BlockAttestations: {
            receipt: 'CandidateReceipt',
            valid: 'Vec<AccountId>',
            invalid: 'Vec<AccountId>'
        },
        IncludedBlocks: {
            actualNumber: 'BlockNumber',
            session: 'SessionIndex',
            randomSeed: 'H256',
            activeParachains: 'Vec<ParaId>',
            paraBlocks: 'Vec<Hash>'
        },
        MoreAttestations: {}
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/bridges/definitions.js
/* harmony default export */ const bridges_definitions = ({
    rpc: {},
    types: {
        BridgedBlockHash: 'H256',
        BridgedBlockNumber: 'BlockNumber',
        BridgedHeader: 'Header',
        BridgeMessageId: '(LaneId, MessageNonce)',
        CallOrigin: {
            _enum: {
                SourceRoot: 'Null',
                TargetAccount: '(AccountId, MultiSigner, MultiSignature)',
                SourceAccount: 'AccountId'
            }
        },
        ChainId: '[u8; 4]',
        DeliveredMessages: {
            begin: 'MessageNonce',
            end: 'MessageNonce',
            // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
            dispatchResults: 'BitVec'
        },
        DispatchFeePayment: {
            _enum: ['AtSourceChain', 'AtTargetChain']
        },
        InboundLaneData: {
            relayers: 'Vec<UnrewardedRelayer>',
            lastConfirmedNonce: 'MessageNonce'
        },
        InboundRelayer: 'AccountId',
        InitializationData: {
            header: 'Header',
            authorityList: 'AuthorityList',
            setId: 'SetId',
            isHalted: 'bool'
        },
        LaneId: '[u8; 4]',
        MessageData: {
            payload: 'Bytes',
            fee: 'Balance'
        },
        MessagesDeliveryProofOf: {
            bridgedHeaderHash: 'BlockHash',
            storageProof: 'Vec<Bytes>',
            lane: 'LaneId'
        },
        MessageKey: {
            laneId: 'LaneId',
            nonce: 'MessageNonce'
        },
        MessageNonce: 'u64',
        MessagesProofOf: {
            bridgedHeaderHash: 'BridgedBlockHash',
            storageProof: 'Vec<Bytes>',
            lane: 'LaneId',
            noncesStart: 'MessageNonce',
            noncesEnd: 'MessageNonce'
        },
        OperatingMode: {
            _enum: ['Normal', 'RejectingOutboundMessages', 'Halted']
        },
        OutboundLaneData: {
            oldestUnprunedNonce: 'MessageNonce',
            latestReceivedNonce: 'MessageNonce',
            latestGeneratedNonce: 'MessageNonce'
        },
        OutboundMessageFee: 'Balance',
        OutboundPayload: {
            specVersion: 'u32',
            weight: 'Weight',
            origin: 'CallOrigin',
            dispatchFeePayment: 'DispatchFeePayment',
            call: 'Bytes'
        },
        Parameter: 'Null',
        RelayerId: 'AccountId',
        UnrewardedRelayer: {
            relayer: 'RelayerId',
            messages: 'DeliveredMessages'
        },
        UnrewardedRelayersState: {
            unrewardedRelayer_Entries: 'MessageNonce',
            messagesInOldestEntry: 'MessageNonce',
            totalMessages: 'MessageNonce'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/claims/definitions.js
/* harmony default export */ const claims_definitions = ({
    rpc: {},
    types: {
        StatementKind: {
            _enum: ['Regular', 'Saft']
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/crowdloan/definitions.js
/* harmony default export */ const crowdloan_definitions = ({
    rpc: {},
    types: {
        FundIndex: 'u32',
        LastContribution: {
            _enum: {
                Never: 'Null',
                PreEnding: 'u32',
                Ending: 'BlockNumber'
            }
        },
        FundInfo: {
            depositor: 'AccountId',
            verifier: 'Option<MultiSigner>',
            deposit: 'Balance',
            raised: 'Balance',
            end: 'BlockNumber',
            cap: 'Balance',
            lastContribution: 'LastContribution',
            firstPeriod: 'LeasePeriod',
            lastPeriod: 'LeasePeriod',
            trieIndex: 'TrieIndex'
        },
        TrieIndex: 'u32'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/cumulus/runtime.js
const cumulus_runtime_runtime = {
    CollectCollationInfo: [
        {
            methods: {
                collect_collation_info: {
                    description: 'Collect information about a collation.',
                    params: [
                        {
                            name: 'header',
                            type: 'Header'
                        }
                    ],
                    type: 'CollationInfo'
                }
            },
            version: 2
        },
        {
            methods: {
                collect_collation_info: {
                    description: 'Collect information about a collation.',
                    params: [],
                    type: 'CollationInfoV1'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/cumulus/definitions.js

const dmpQueue = {
    CollationInfo: {
        upwardMessages: 'Vec<UpwardMessage>',
        horizontalMessages: 'Vec<OutboundHrmpMessage>',
        newValidationCode: 'Option<ValidationCode>',
        processedDownwardMessages: 'u32',
        hrmpWatermark: 'RelayBlockNumber',
        headData: 'HeadData'
    },
    CollationInfoV1: {
        upwardMessages: 'Vec<UpwardMessage>',
        horizontalMessages: 'Vec<OutboundHrmpMessage>',
        newValidationCode: 'Option<ValidationCode>',
        processedDownwardMessages: 'u32',
        hrmpWatermark: 'RelayBlockNumber'
    },
    ConfigData: {
        maxIndividual: 'Weight'
    },
    MessageId: '[u8; 32]',
    OverweightIndex: 'u64',
    PageCounter: 'u32',
    PageIndexData: {
        beginUsed: 'PageCounter',
        endUsed: 'PageCounter',
        overweightCount: 'OverweightIndex'
    }
};
/* harmony default export */ const cumulus_definitions = ({
    rpc: {},
    runtime: cumulus_runtime_runtime,
    types: dmpQueue
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/finality/runtime.js
const finalityV1 = {
    methods: {
        best_finalized: {
            description: 'Returns number and hash of the best finalized header known to the bridge module.',
            params: [],
            type: '(BlockNumber, Hash)'
        }
    },
    version: 1
};
const finality_runtime_runtime = {
    KusamaFinalityApi: [finalityV1],
    PolkadotFinalityApi: [finalityV1],
    RococoFinalityApi: [finalityV1],
    WestendFinalityApi: [finalityV1]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/finality/definitions.js

/* harmony default export */ const finality_definitions = ({
    rpc: {},
    runtime: finality_runtime_runtime,
    types: {}
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/parachains/hrmp.js
/* eslint-disable sort-keys */
/* harmony default export */ const hrmp = ({
    HrmpChannel: {
        maxCapacity: 'u32',
        maxTotalSize: 'u32',
        maxMessageSize: 'u32',
        msgCount: 'u32',
        totalSize: 'u32',
        mqcHead: 'Option<Hash>',
        senderDeposit: 'Balance',
        recipientDeposit: 'Balance'
    },
    HrmpChannelId: {
        sender: 'u32',
        receiver: 'u32'
    },
    HrmpOpenChannelRequest: {
        confirmed: 'bool',
        age: 'SessionIndex',
        senderDeposit: 'Balance',
        maxMessageSize: 'u32',
        maxCapacity: 'u32',
        maxTotalSize: 'u32'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/parachains/runtime.js
const PH_V1_TO_V2 = {
    assumed_validation_data: {
        description: 'Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            },
            {
                name: 'hash',
                type: 'Hash'
            }
        ],
        type: 'Option<(PersistedValidationData, ValidationCodeHash)>'
    },
    availability_cores: {
        description: 'Yields information on all availability cores as relevant to the child block.',
        params: [],
        type: 'Vec<CoreState>'
    },
    candidate_events: {
        description: 'Get a vector of events concerning candidates that occurred within a block.',
        params: [],
        type: 'Vec<CandidateEvent>'
    },
    candidate_pending_availability: {
        description: 'Get the receipt of a candidate pending availability.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            }
        ],
        type: 'Option<CommittedCandidateReceipt>'
    },
    check_validation_outputs: {
        description: 'Checks if the given validation outputs pass the acceptance criteria.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            },
            {
                name: 'outputs',
                type: 'CandidateCommitments'
            }
        ],
        type: 'bool'
    },
    dmq_contents: {
        description: 'Get all the pending inbound messages in the downward message queue for a para.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            }
        ],
        type: 'Vec<InboundDownwardMessage>'
    },
    inbound_hrmp_channels_contents: {
        description: 'Get the contents of all channels addressed to the given recipient.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            }
        ],
        type: 'Vec<InboundHrmpMessage>'
    },
    on_chain_votes: {
        description: 'Scrape dispute relevant from on-chain, backing votes and resolved disputes.',
        params: [],
        type: 'Option<ScrapedOnChainVotes>'
    },
    persisted_validation_data: {
        description: 'Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            },
            {
                name: 'assumption',
                type: 'OccupiedCoreAssumption'
            }
        ],
        type: 'Option<PersistedValidationData>'
    },
    session_index_for_child: {
        description: 'Returns the session index expected at a child of the block.',
        params: [],
        type: 'SessionIndex'
    },
    validation_code: {
        description: 'Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            },
            {
                name: 'assumption',
                type: 'OccupiedCoreAssumption'
            }
        ],
        type: 'ValidationCode'
    },
    validation_code_by_hash: {
        description: 'Get the validation code from its hash.',
        params: [
            {
                name: 'hash',
                type: 'ValidationCodeHash'
            }
        ],
        type: 'Option<ValidationCode>'
    },
    validator_groups: {
        description: 'Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on',
        params: [],
        type: '(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)'
    },
    validators: {
        description: 'Get the current validators.',
        params: [],
        type: 'Vec<ValidatorId>'
    }
};
const PH_V2_TO_V3 = {
    pvfs_require_precheck: {
        description: 'Returns code hashes of PVFs that require pre-checking by validators in the active set.',
        params: [],
        type: 'Vec<ValidationCodeHash>'
    },
    session_info: {
        description: 'Get the session info for the given session, if stored.',
        params: [
            {
                name: 'index',
                type: 'SessionIndex'
            }
        ],
        type: 'Option<SessionInfo>'
    },
    submit_pvf_check_statement: {
        description: 'Submits a PVF pre-checking statement into the transaction pool.',
        params: [
            {
                name: 'stmt',
                type: 'PvfCheckStatement'
            },
            {
                name: 'signature',
                type: 'ValidatorSignature'
            }
        ],
        type: 'Null'
    },
    validation_code_hash: {
        description: 'Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.',
        params: [
            {
                name: 'paraId',
                type: 'ParaId'
            },
            {
                name: 'assumption',
                type: 'OccupiedCoreAssumption'
            }
        ],
        type: 'Option<ValidationCodeHash>'
    }
};
const PH_V3 = {
    disputes: {
        description: 'Returns all onchain disputes.',
        params: [],
        type: 'Vec<(SessionIndex, CandidateHash, DisputeState)>'
    }
};
const PH_V4 = {
    session_executor_params: {
        description: 'Returns execution parameters for the session.',
        params: [
            {
                name: 'sessionIndex',
                type: 'SessionIndex'
            }
        ],
        type: 'Option<ExecutorParams>'
    }
};
const PH_V5 = {
    key_ownership_proof: {
        description: 'Returns a merkle proof of a validator session key',
        params: [
            {
                name: 'validatorId',
                type: 'ValidatorId'
            }
        ],
        type: 'Option<OpaqueKeyOwnershipProof>'
    },
    submit_report_dispute_lost: {
        description: 'Submit an unsigned extrinsic to slash validators who lost a dispute about a candidate of a past session',
        params: [
            {
                name: 'disputeProof',
                type: 'DisputeProof'
            },
            {
                name: 'keyOwnershipProof',
                type: 'OpaqueKeyOwnershipProof'
            }
        ],
        type: 'Option<Null>'
    },
    unapplied_slashes: {
        description: 'Returns a list of validators that lost a past session dispute and need to be slashed',
        params: [],
        type: 'Vec<(SessionIndex, CandidateHash, PendingSlashes)>'
    }
};
const parachains_runtime_runtime = {
    ParachainHost: [
        {
            methods: {
                ...PH_V1_TO_V2,
                ...PH_V2_TO_V3,
                ...PH_V3,
                ...PH_V4,
                ...PH_V5
            },
            version: 5
        },
        {
            methods: {
                ...PH_V1_TO_V2,
                ...PH_V2_TO_V3,
                ...PH_V3,
                ...PH_V4
            },
            version: 4
        },
        {
            methods: {
                ...PH_V1_TO_V2,
                ...PH_V2_TO_V3,
                ...PH_V3
            },
            version: 3
        },
        {
            methods: {
                ...PH_V1_TO_V2,
                ...PH_V2_TO_V3
            },
            version: 2
        },
        {
            methods: {
                session_info: {
                    description: 'Get the session info for the given session, if stored.',
                    params: [
                        {
                            name: 'index',
                            type: 'SessionIndex'
                        }
                    ],
                    type: 'Option<OldV1SessionInfo>'
                },
                ...PH_V1_TO_V2
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/parachains/slots.js
/* eslint-disable sort-keys */
const SlotRange10 = {
    _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'OneOne', 'OneTwo', 'OneThree', 'TwoTwo', 'TwoThree', 'ThreeThree']
};
const SlotRange = {
    _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'ZeroFour', 'ZeroFive', 'ZeroSix', 'ZeroSeven', 'OneOne', 'OneTwo', 'OneThree', 'OneFour', 'OneFive', 'OneSix', 'OneSeven', 'TwoTwo', 'TwoThree', 'TwoFour', 'TwoFive', 'TwoSix', 'TwoSeven', 'ThreeThree', 'ThreeFour', 'ThreeFive', 'ThreeSix', 'ThreeSeven', 'FourFour', 'FourFive', 'FourSix', 'FourSeven', 'FiveFive', 'FiveSix', 'FiveSeven', 'SixSix', 'SixSeven', 'SevenSeven']
};
const oldTypes = {
    Bidder: {
        _enum: {
            New: 'NewBidder',
            Existing: 'ParaId'
        }
    },
    IncomingParachain: {
        _enum: {
            Unset: 'NewBidder',
            Fixed: 'IncomingParachainFixed',
            Deploy: 'IncomingParachainDeploy'
        }
    },
    IncomingParachainDeploy: {
        code: 'ValidationCode',
        initialHeadData: 'HeadData'
    },
    IncomingParachainFixed: {
        codeHash: 'Hash',
        codeSize: 'u32',
        initialHeadData: 'HeadData'
    },
    NewBidder: {
        who: 'AccountId',
        sub: 'SubId'
    },
    SubId: 'u32'
};
/* harmony default export */ const slots = ({
    ...oldTypes,
    AuctionIndex: 'u32',
    LeasePeriod: 'BlockNumber',
    LeasePeriodOf: 'BlockNumber',
    SlotRange10,
    SlotRange,
    WinningData10: `[WinningDataEntry; ${SlotRange10._enum.length}]`,
    WinningData: `[WinningDataEntry; ${SlotRange._enum.length}]`,
    WinningDataEntry: 'Option<(AccountId, ParaId, BalanceOf)>',
    WinnersData10: 'Vec<WinnersDataTuple10>',
    WinnersData: 'Vec<WinnersDataTuple>',
    WinnersDataTuple10: '(AccountId, ParaId, BalanceOf, SlotRange10)',
    WinnersDataTuple: '(AccountId, ParaId, BalanceOf, SlotRange)'
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/parachains/definitions.js



const proposeTypes = {
    ParachainProposal: {
        proposer: 'AccountId',
        genesisHead: 'HeadData',
        validators: 'Vec<ValidatorId>',
        name: 'Bytes',
        balance: 'Balance'
    },
    RegisteredParachainInfo: {
        validators: 'Vec<ValidatorId>',
        proposer: 'AccountId'
    }
};
const cumulusTypes = {
    ServiceQuality: {
        _enum: ['Ordered', 'Fast']
    }
};
const disputeTypes = {
    DisputeLocation: {
        _enum: ['Local', 'Remote']
    },
    DisputeResult: {
        _enum: ['Valid', 'Invalid']
    },
    DisputeState: {
        validatorsFor: 'BitVec',
        validatorsAgainst: 'BitVec',
        start: 'BlockNumber',
        concludedAt: 'Option<BlockNumber>'
    },
    DisputeStatement: {
        _enum: {
            Valid: 'ValidDisputeStatementKind',
            Invalid: 'InvalidDisputeStatementKind'
        }
    },
    DisputeStatementSet: {
        candidateHash: 'CandidateHash',
        session: 'SessionIndex',
        statements: 'Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>'
    },
    ExecutorParam: {
        _enum: {
            Phantom: 'Null', // index starts at 1... empty slot at 0
            MaxMemoryPages: 'u32',
            StackLogicalMax: 'u32',
            StackNativeMax: 'u32',
            PrecheckingMaxMemory: 'u64',
            PvfPrepTimeout: '(PvfPrepTimeoutKind, u64)',
            PvfExecTimeout: '(PvfExecTimeoutKind, u64)'
        }
    },
    ExecutorParamsHash: 'Hash',
    ExecutorParams: 'Vec<ExecutorParam>',
    ExplicitDisputeStatement: {
        valid: 'bool',
        candidateHash: 'CandidateHash',
        session: 'SessionIndex'
    },
    InvalidDisputeStatementKind: {
        _enum: ['Explicit']
    },
    MultiDisputeStatementSet: 'Vec<DisputeStatementSet>',
    PvfExecTimeoutKind: {
        _enum: ['Backing', 'Approval']
    },
    PvfPrepTimeoutKind: {
        _enum: ['Precheck', 'Lenient']
    },
    ValidDisputeStatementKind: {
        _enum: {
            Explicit: 'Null',
            BackingSeconded: 'Hash',
            BackingValid: 'Hash',
            ApprovalChecking: 'Null'
        }
    }
};
/* harmony default export */ const parachains_definitions = ({
    rpc: {},
    runtime: parachains_runtime_runtime,
    types: {
        ...cumulusTypes,
        ...disputeTypes,
        ...hrmp,
        ...proposeTypes,
        ...slots,
        AbridgedCandidateReceipt: {
            parachainIndex: 'ParaId',
            relayParent: 'Hash',
            headData: 'HeadData',
            collator: 'CollatorId',
            signature: 'CollatorSignature',
            povBlockHash: 'Hash',
            commitments: 'CandidateCommitments'
        },
        AbridgedHostConfiguration: {
            maxCodeSize: 'u32',
            maxHeadDataSize: 'u32',
            maxUpwardQueueCount: 'u32',
            maxUpwardQueueSize: 'u32',
            maxUpwardMessageSize: 'u32',
            maxUpwardMessageNumPerCandidate: 'u32',
            hrmpMaxMessageNumPerCandidate: 'u32',
            validationUpgradeFrequency: 'BlockNumber',
            validationUpgradeDelay: 'BlockNumber'
        },
        AbridgedHrmpChannel: {
            maxCapacity: 'u32',
            maxTotalSize: 'u32',
            maxMessageSize: 'u32',
            msgCount: 'u32',
            totalSize: 'u32',
            mqcHead: 'Option<Hash>'
        },
        AssignmentId: 'AccountId',
        AssignmentKind: {
            _enum: {
                Parachain: 'Null',
                Parathread: '(CollatorId, u32)'
            }
        },
        AttestedCandidate: {
            candidate: 'AbridgedCandidateReceipt',
            validityVotes: 'Vec<ValidityAttestation>',
            validatorIndices: 'BitVec'
        },
        AuthorityDiscoveryId: 'AccountId',
        AvailabilityBitfield: 'BitVec',
        AvailabilityBitfieldRecord: {
            bitfield: 'AvailabilityBitfield',
            submittedTt: 'BlockNumber'
        },
        BackedCandidate: {
            candidate: 'CommittedCandidateReceipt',
            validityVotes: 'Vec<ValidityAttestation>',
            validatorIndices: 'BitVec'
        },
        BufferedSessionChange: {
            applyAt: 'BlockNumber',
            validators: 'Vec<ValidatorId>',
            queued: 'Vec<ValidatorId>',
            sessionIndex: 'SessionIndex'
        },
        CandidateCommitments: {
            upwardMessages: 'Vec<UpwardMessage>',
            horizontalMessages: 'Vec<OutboundHrmpMessage>',
            newValidationCode: 'Option<ValidationCode>',
            headData: 'HeadData',
            processedDownwardMessages: 'u32',
            hrmpWatermark: 'BlockNumber'
        },
        CandidateDescriptor: {
            paraId: 'ParaId',
            relayParent: 'RelayChainHash',
            collatorId: 'CollatorId',
            persistedValidationDataHash: 'Hash',
            povHash: 'Hash',
            erasureRoot: 'Hash',
            signature: 'CollatorSignature',
            paraHead: 'Hash',
            validationCodeHash: 'ValidationCodeHash'
        },
        CandidateEvent: {
            _enum: {
                CandidateBacked: '(CandidateReceipt, HeadData, CoreIndex, GroupIndex)',
                CandidateIncluded: '(CandidateReceipt, HeadData, CoreIndex, GroupIndex)',
                CandidateTimedOut: '(CandidateReceipt, HeadData, CoreIndex)'
            }
        },
        CandidateHash: 'Hash',
        CandidateInfo: {
            who: 'AccountId',
            deposit: 'Balance'
        },
        CandidatePendingAvailability: {
            core: 'CoreIndex',
            hash: 'CandidateHash',
            descriptor: 'CandidateDescriptor',
            availabilityVotes: 'BitVec',
            backers: 'BitVec',
            relayParentNumber: 'BlockNumber',
            backedInNumber: 'BlockNumber',
            backingGroup: 'GroupIndex'
        },
        CandidateReceipt: {
            descriptor: 'CandidateDescriptor',
            commitmentsHash: 'Hash'
        },
        GlobalValidationData: {
            maxCodeSize: 'u32',
            maxHeadDataSize: 'u32',
            blockNumber: 'BlockNumber'
        },
        CollatorId: 'H256',
        CollatorSignature: 'Signature',
        CommittedCandidateReceipt: {
            descriptor: 'CandidateDescriptor',
            commitments: 'CandidateCommitments'
        },
        CoreAssignment: {
            core: 'CoreIndex',
            paraId: 'ParaId',
            kind: 'AssignmentKind',
            groupIdx: 'GroupIndex'
        },
        CoreIndex: 'u32',
        CoreOccupied: {
            _enum: {
                Parathread: 'ParathreadEntry',
                Parachain: 'Null'
            }
        },
        CoreState: {
            _enum: {
                Occupied: 'OccupiedCore',
                Scheduled: 'ScheduledCore',
                Free: 'Null'
            }
        },
        DisputeProof: {
            timeSlot: 'DisputesTimeSlot',
            kind: 'SlashingOffenceKind',
            validatorIndex: 'ValidatorIndex',
            validatorId: 'ValidatorId'
        },
        DisputesTimeSlot: {
            sessionIndex: 'SessionIndex',
            candidateHash: 'CandidateHash'
        },
        DoubleVoteReport: {
            identity: 'ValidatorId',
            first: '(Statement, ValidatorSignature)',
            second: '(Statement, ValidatorSignature)',
            proof: 'MembershipProof',
            signingContext: 'SigningContext'
        },
        DownwardMessage: 'Bytes',
        GroupIndex: 'u32',
        GroupRotationInfo: {
            sessionStartBlock: 'BlockNumber',
            groupRotationFrequency: 'BlockNumber',
            now: 'BlockNumber'
        },
        GlobalValidationSchedule: {
            maxCodeSize: 'u32',
            maxHeadDataSize: 'u32',
            blockNumber: 'BlockNumber'
        },
        HeadData: 'Bytes',
        HostConfiguration: {
            maxCodeSize: 'u32',
            maxHeadDataSize: 'u32',
            maxUpwardQueueCount: 'u32',
            maxUpwardQueueSize: 'u32',
            maxUpwardMessageSize: 'u32',
            maxUpwardMessageNumPerCandidate: 'u32',
            hrmpMaxMessageNumPerCandidate: 'u32',
            validationUpgradeFrequency: 'BlockNumber',
            validationUpgradeDelay: 'BlockNumber',
            maxPovSize: 'u32',
            maxDownwardMessageSize: 'u32',
            preferredDispatchableUpwardMessagesStepWeight: 'Weight',
            hrmpMaxParachainOutboundChannels: 'u32',
            hrmpMaxParathreadOutboundChannels: 'u32',
            hrmpOpenRequestTtl: 'u32',
            hrmpSenderDeposit: 'Balance',
            hrmpRecipientDeposit: 'Balance',
            hrmpChannelMaxCapacity: 'u32',
            hrmpChannelMaxTotalSize: 'u32',
            hrmpMaxParachainInboundChannels: 'u32',
            hrmpMaxParathreadInboundChannels: 'u32',
            hrmpChannelMaxMessageSize: 'u32',
            codeRetentionPeriod: 'BlockNumber',
            parathreadCores: 'u32',
            parathreadRetries: 'u32',
            groupRotationFrequency: 'BlockNumber',
            chainAvailabilityPeriod: 'BlockNumber',
            threadAvailabilityPeriod: 'BlockNumber',
            schedulingLookahead: 'u32',
            maxValidatorsPerCore: 'Option<u32>',
            maxValidators: 'Option<u32>',
            disputePeriod: 'SessionIndex',
            disputePostConclusionAcceptancePeriod: 'BlockNumber',
            disputeMaxSpamSlots: 'u32',
            disputeConclusionByTimeOutPeriod: 'BlockNumber',
            noShowSlots: 'u32',
            nDelayTranches: 'u32',
            zerothDelayTrancheWidth: 'u32',
            neededApprovals: 'u32',
            relayVrfModuloSamples: 'u32'
        },
        InboundDownwardMessage: {
            pubSentAt: 'BlockNumber',
            pubMsg: 'DownwardMessage'
        },
        InboundHrmpMessage: {
            sentAt: 'BlockNumber',
            data: 'Bytes'
        },
        InboundHrmpMessages: 'Vec<InboundHrmpMessage>',
        LocalValidationData: {
            parentHead: 'HeadData',
            balance: 'Balance',
            codeUpgradeAllowed: 'Option<BlockNumber>'
        },
        MessageIngestionType: {
            downwardMessages: 'Vec<InboundDownwardMessage>',
            horizontalMessages: 'BTreeMap<ParaId, InboundHrmpMessages>'
        },
        MessageQueueChain: 'RelayChainHash',
        OccupiedCore: {
            nextUpOnAvailable: 'Option<ScheduledCore>',
            occupiedSince: 'BlockNumber',
            timeOutAt: 'BlockNumber',
            nextUpOnTimeOut: 'Option<ScheduledCore>',
            availability: 'BitVec',
            groupResponsible: 'GroupIndex',
            candidateHash: 'CandidateHash',
            candidateDescriptor: 'CandidateDescriptor'
        },
        OccupiedCoreAssumption: {
            _enum: ['Included,', 'TimedOut', 'Free']
        },
        OutboundHrmpMessage: {
            recipient: 'u32',
            data: 'Bytes'
        },
        PendingSlashes: {
            _alias: {
                slashKeys: 'keys'
            },
            slashKeys: 'BTreeMap<ValidatorIndex, ValidatorId>',
            kind: 'SlashingOffenceKind'
        },
        ParachainDispatchOrigin: {
            _enum: ['Signed', 'Parachain', 'Root']
        },
        ParachainInherentData: {
            validationData: 'PersistedValidationData',
            relayChainState: 'StorageProof',
            downwardMessages: 'Vec<InboundDownwardMessage>',
            horizontalMessages: 'BTreeMap<ParaId, VecInboundHrmpMessage>'
        },
        ParachainsInherentData: {
            bitfields: 'SignedAvailabilityBitfields',
            backedCandidates: 'Vec<BackedCandidate>',
            disputes: 'MultiDisputeStatementSet',
            parentHeader: 'Header'
        },
        ParaGenesisArgs: {
            genesisHead: 'Bytes',
            validationCode: 'Bytes',
            parachain: 'bool'
        },
        ParaId: 'u32',
        ParaInfo: {
            manager: 'AccountId',
            deposit: 'Balance',
            locked: 'bool'
        },
        ParaLifecycle: {
            _enum: ['Onboarding', 'Parathread', 'Parachain', 'UpgradingToParachain', 'DowngradingToParathread', 'OutgoingParathread', 'OutgoingParachain']
        },
        ParaPastCodeMeta: {
            upgradeTimes: 'Vec<ReplacementTimes>',
            lastPruned: 'Option<BlockNumber>'
        },
        ParaScheduling: {
            _enum: ['Always', 'Dynamic']
        },
        ParathreadClaim: '(ParaId, CollatorId)',
        ParathreadClaimQueue: {
            queue: 'Vec<QueuedParathread>',
            nextCoreOffset: 'u32'
        },
        ParathreadEntry: {
            claim: 'ParathreadClaim',
            retries: 'u32'
        },
        ParaValidatorIndex: 'u32',
        PersistedValidationData: {
            parentHead: 'HeadData',
            relayParentNumber: 'RelayChainBlockNumber',
            relayParentStorageRoot: 'Hash',
            maxPovSize: 'u32'
        },
        PvfCheckStatement: {
            accept: 'bool',
            subject: 'ValidationCodeHash',
            sessionIndex: 'SessionIndex',
            validatorIndex: 'ParaValidatorIndex'
        },
        QueuedParathread: {
            claim: 'ParathreadEntry',
            coreOffset: 'u32'
        },
        RelayBlockNumber: 'u32',
        RelayChainBlockNumber: 'RelayBlockNumber',
        RelayHash: 'Hash',
        RelayChainHash: 'RelayHash',
        Remark: '[u8; 32]',
        ReplacementTimes: {
            expectedAt: 'BlockNumber',
            activatedAt: 'BlockNumber'
        },
        Retriable: {
            _enum: {
                Never: 'Null',
                WithRetries: 'u32'
            }
        },
        ScheduledCore: {
            paraId: 'ParaId',
            collator: 'Option<CollatorId>'
        },
        Scheduling: {
            _enum: ['Always', 'Dynamic']
        },
        ScrapedOnChainVotes: {
            session: 'SessionIndex',
            backingValidatorsPerCandidate: 'Vec<(CandidateReceipt, Vec<(ParaValidatorIndex, ValidityAttestation)>)>',
            disputes: 'MultiDisputeStatementSet'
        },
        SessionInfo: {
            activeValidatorIndices: 'Vec<ParaValidatorIndex>',
            randomSeed: '[u8; 32]',
            disputePeriod: 'SessionIndex',
            validators: 'Vec<ValidatorId>',
            discoveryKeys: 'Vec<AuthorityDiscoveryId>',
            assignmentKeys: 'Vec<AssignmentId>',
            validatorGroups: 'Vec<Vec<ValidatorIndex>>',
            nCores: 'u32',
            zerothDelayTrancheWidth: 'u32',
            relayVrfModuloSamples: 'u32',
            nDelayTranches: 'u32',
            noShowSlots: 'u32',
            neededApprovals: 'u32'
        },
        OldV1SessionInfo: {
            validators: 'Vec<ValidatorId>',
            discoveryKeys: 'Vec<AuthorityDiscoveryId>',
            assignmentKeys: 'Vec<AssignmentId>',
            validatorGroups: 'Vec<Vec<ParaValidatorIndex>>',
            nCores: 'u32',
            zerothDelayTrancheWidth: 'u32',
            relayVrfModuloSamples: 'u32',
            nDelayTranches: 'u32',
            noShowSlots: 'u32',
            neededApprovals: 'u32'
        },
        SessionInfoValidatorGroup: 'Vec<ParaValidatorIndex>',
        SignedAvailabilityBitfield: {
            payload: 'BitVec',
            validatorIndex: 'ParaValidatorIndex',
            signature: 'ValidatorSignature'
        },
        SignedAvailabilityBitfields: 'Vec<SignedAvailabilityBitfield>',
        SigningContext: {
            sessionIndex: 'SessionIndex',
            parentHash: 'Hash'
        },
        SlashingOffenceKind: {
            _enum: ['ForInvalid', 'AgainstValid']
        },
        Statement: {
            _enum: {
                Never: 'Null', // starts at 1
                Candidate: 'Hash',
                Valid: 'Hash',
                Invalid: 'Hash'
            }
        },
        TransientValidationData: {
            maxCodeSize: 'u32',
            maxHeadDataSize: 'u32',
            balance: 'Balance',
            codeUpgradeAllowed: 'Option<BlockNumber>',
            dmqLength: 'u32'
        },
        UpgradeGoAhead: {
            _enum: ['Abort', 'GoAhead']
        },
        UpgradeRestriction: {
            _enum: ['Present']
        },
        UpwardMessage: 'Bytes',
        ValidationFunctionParams: {
            maxCodeSize: 'u32',
            relayChainHeight: 'RelayChainBlockNumber',
            codeUpgradeAllowed: 'Option<RelayChainBlockNumber>'
        },
        ValidationCode: 'Bytes',
        ValidationCodeHash: 'Hash',
        ValidationData: {
            persisted: 'PersistedValidationData',
            transient: 'TransientValidationData'
        },
        ValidationDataType: {
            validationData: 'ValidationData',
            relayChainState: 'Vec<Bytes>'
        },
        ValidatorSignature: 'Signature',
        ValidityAttestation: {
            _enum: {
                Never: 'Null', // starts at 1
                Implicit: 'ValidatorSignature',
                Explicit: 'ValidatorSignature'
            }
        },
        MessagingStateSnapshot: {
            relayDispatchQueueSize: '(u32, u32)',
            egressChannels: 'Vec<MessagingStateSnapshotEgressEntry>'
        },
        MessagingStateSnapshotEgressEntry: '(ParaId, AbridgedHrmpChannel)',
        SystemInherentData: 'ParachainInherentData',
        VecInboundHrmpMessage: 'Vec<InboundHrmpMessage>'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/poll/definitions.js
/* harmony default export */ const poll_definitions = ({
    rpc: {},
    types: {
        Approvals: '[bool; 4]'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/purchase/definitions.js
/* harmony default export */ const purchase_definitions = ({
    rpc: {},
    types: {
        AccountStatus: {
            validity: 'AccountValidity',
            freeBalance: 'Balance',
            lockedBalance: 'Balance',
            signature: 'Vec<u8>',
            vat: 'Permill'
        },
        AccountValidity: {
            _enum: ['Invalid', 'Initiated', 'Pending', 'ValidLow', 'ValidHigh', 'Completed']
        }
    }
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-create@10.11.2/node_modules/@polkadot/types-create/util/xcm.js
var xcm = __webpack_require__(69200);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/xcm/v0.js
const v0_v0 = {
    FungibilityV0: 'FungibilityV1',
    WildFungibilityV0: 'WildFungibilityV1',
    AssetInstanceV0: {
        _enum: {
            Undefined: 'Null',
            Index8: 'u8',
            Index16: 'Compact<u16>',
            Index32: 'Compact<u32>',
            Index64: 'Compact<u64>',
            Index128: 'Compact<u128>',
            Array4: '[u8; 4]',
            Array8: '[u8; 8]',
            Array16: '[u8; 16]',
            Array32: '[u8; 32]',
            Blob: 'Vec<u8>'
        }
    },
    JunctionV0: {
        _enum: {
            Parent: 'Null',
            Parachain: 'Compact<u32>',
            AccountId32: {
                network: 'NetworkId',
                id: 'AccountId'
            },
            AccountIndex64: {
                network: 'NetworkId',
                index: 'Compact<u64>'
            },
            AccountKey20: {
                network: 'NetworkId',
                key: '[u8; 20]'
            },
            PalletInstance: 'u8',
            GeneralIndex: 'Compact<u128>',
            GeneralKey: 'Vec<u8>',
            OnlyChild: 'Null',
            Plurality: {
                id: 'BodyId',
                part: 'BodyPart'
            }
        }
    },
    MultiAssetV0: {
        _enum: {
            None: 'Null',
            All: 'Null',
            AllFungible: 'Null',
            AllNonFungible: 'Null',
            AllAbstractFungible: 'Vec<u8>',
            AllAbstractNonFungible: 'Vec<u8>',
            AllConcreteFungible: 'MultiLocationV0',
            AllConcreteNonFungible: 'MultiLocationV0',
            AbstractFungible: {
                id: 'Vec<u8>',
                instance: 'Compact<u128>'
            },
            AbstractNonFungible: {
                class: 'Vec<u8>',
                instance: 'AssetInstanceV0'
            },
            ConcreteFungible: {
                id: 'MultiLocationV0',
                amount: 'Compact<u128>'
            },
            ConcreteNonFungible: {
                class: 'MultiLocationV0',
                instance: 'AssetInstanceV0'
            }
        }
    },
    MultiLocationV0: {
        _enum: {
            Here: 'Null',
            X1: 'JunctionV0',
            X2: '(JunctionV0, JunctionV0)',
            X3: '(JunctionV0, JunctionV0, JunctionV0)',
            X4: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
            X5: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
            X6: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
            X7: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
            X8: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)'
        }
    },
    OriginKindV0: {
        _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
    },
    ResponseV0: {
        _enum: {
            Assets: 'Vec<MultiAssetV0>'
        }
    },
    XcmV0: {
        _enum: {
            WithdrawAsset: {
                assets: 'Vec<MultiAssetV0>',
                effects: 'Vec<XcmOrderV0>'
            },
            ReserveAssetDeposit: {
                assets: 'Vec<MultiAssetV0>',
                effects: 'Vec<XcmOrderV0>'
            },
            ReceiveTeleportedAsset: {
                assets: 'Vec<MultiAssetV0>',
                effects: 'Vec<XcmOrderV0>'
            },
            QueryResponse: {
                queryId: 'Compact<u64>',
                response: 'ResponseV0'
            },
            TransferAsset: {
                assets: 'Vec<MultiAssetV0>',
                dest: 'MultiLocationV0'
            },
            TransferReserveAsset: {
                assets: 'Vec<MultiAssetV0>',
                dest: 'MultiLocationV0',
                effects: 'Vec<XcmOrderV0>'
            },
            Transact: {
                originType: 'XcmOriginKind',
                requireWeightAtMost: 'u64',
                call: 'DoubleEncodedCall'
            },
            HrmpNewChannelOpenRequest: {
                sender: 'Compact<u32>',
                maxMessageSize: 'Compact<u32>',
                maxCapacity: 'Compact<u32>'
            },
            HrmpChannelAccepted: {
                recipient: 'Compact<u32>'
            },
            HrmpChannelClosing: {
                initiator: 'Compact<u32>',
                sender: 'Compact<u32>',
                recipient: 'Compact<u32>'
            },
            RelayedFrom: {
                who: 'MultiLocationV0',
                message: 'XcmV0'
            }
        }
    },
    XcmErrorV0: {
        _enum: {
            Undefined: 'Null',
            Overflow: 'Null',
            Unimplemented: 'Null',
            UnhandledXcmVersion: 'Null',
            UnhandledXcmMessage: 'Null',
            UnhandledEffect: 'Null',
            EscalationOfPrivilege: 'Null',
            UntrustedReserveLocation: 'Null',
            UntrustedTeleportLocation: 'Null',
            DestinationBufferOverflow: 'Null',
            SendFailed: 'Null',
            CannotReachDestination: '(MultiLocation, Xcm)',
            MultiLocationFull: 'Null',
            FailedToDecode: 'Null',
            BadOrigin: 'Null',
            ExceedsMaxMessageSize: 'Null',
            FailedToTransactAsset: 'Null',
            WeightLimitReached: 'Weight',
            Wildcard: 'Null',
            TooMuchWeightRequired: 'Null',
            NotHoldingFees: 'Null',
            WeightNotComputable: 'Null',
            Barrier: 'Null',
            NotWithdrawable: 'Null',
            LocationCannotHold: 'Null',
            TooExpensive: 'Null',
            AssetNotFound: 'Null',
            RecursionLimitReached: 'Null'
        }
    },
    XcmOrderV0: {
        _enum: {
            Null: 'Null',
            DepositAsset: {
                assets: 'Vec<MultiAssetV0>',
                dest: 'MultiLocationV0'
            },
            DepositReserveAsset: {
                assets: 'Vec<MultiAssetV0>',
                dest: 'MultiLocationV0',
                effects: 'Vec<XcmOrderV0>'
            },
            ExchangeAsset: {
                give: 'Vec<MultiAssetV0>',
                receive: 'Vec<MultiAssetV0>'
            },
            InitiateReserveWithdraw: {
                assets: 'Vec<MultiAssetV0>',
                reserve: 'MultiLocationV0',
                effects: 'Vec<XcmOrderV0>'
            },
            InitiateTeleport: {
                assets: 'Vec<MultiAssetV0>',
                dest: 'MultiLocationV0',
                effects: 'Vec<XcmOrderV0>'
            },
            QueryHolding: {
                queryId: 'Compact<u64>',
                dest: 'MultiLocationV0',
                assets: 'Vec<MultiAssetV0>'
            },
            BuyExecution: {
                fees: 'MultiAssetV0',
                weight: 'u64',
                debt: 'u64',
                haltOnError: 'bool',
                xcm: 'Vec<XcmV0>'
            }
        }
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/xcm/v1.js
const v1_v1 = {
    AssetInstanceV1: {
        _enum: {
            Undefined: 'Null',
            Index: 'Compact<u128>',
            Array4: '[u8; 4]',
            Array8: '[u8; 8]',
            Array16: '[u8; 16]',
            Array32: '[u8; 32]',
            Blob: 'Bytes'
        }
    },
    FungibilityV1: {
        _enum: {
            Fungible: 'Compact<u128>',
            NonFungible: 'AssetInstanceV1'
        }
    },
    JunctionV1: {
        _enum: {
            Parachain: 'Compact<u32>',
            AccountId32: {
                network: 'NetworkId',
                id: 'AccountId'
            },
            AccountIndex64: {
                network: 'NetworkId',
                index: 'Compact<u64>'
            },
            AccountKey20: {
                network: 'NetworkId',
                key: '[u8; 20]'
            },
            PalletInstance: 'u8',
            GeneralIndex: 'Compact<u128>',
            GeneralKey: 'Vec<u8>',
            OnlyChild: 'Null',
            Plurality: {
                id: 'BodyId',
                part: 'BodyPart'
            }
        }
    },
    JunctionsV1: {
        _enum: {
            Here: 'Null',
            X1: 'JunctionV1',
            X2: '(JunctionV1, JunctionV1)',
            X3: '(JunctionV1, JunctionV1, JunctionV1)',
            X4: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
            X5: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
            X6: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
            X7: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
            X8: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)'
        }
    },
    MultiAssetsV1: 'Vec<MultiAssetV1>',
    MultiAssetV1: {
        id: 'XcmAssetId',
        fungibility: 'FungibilityV1'
    },
    MultiAssetFilterV1: {
        _enum: {
            Definite: 'MultiAssetsV1',
            Wild: 'WildMultiAssetV1'
        }
    },
    MultiLocationV1: {
        parents: 'u8',
        interior: 'JunctionsV1'
    },
    OriginKindV1: 'OriginKindV0',
    ResponseV1: {
        _enum: {
            Assets: 'MultiAssetsV1'
        }
    },
    WildFungibilityV1: {
        _enum: ['Fungible', 'NonFungible']
    },
    WildMultiAssetV1: {
        _enum: {
            All: 'Null',
            AllOf: {
                id: 'XcmAssetId',
                fungibility: 'WildFungibilityV1'
            }
        }
    },
    XcmV1: {
        _enum: {
            WithdrawAsset: {
                assets: 'MultiAssetsV1',
                effects: 'Vec<XcmOrderV1>'
            },
            ReserveAssetDeposit: {
                assets: 'MultiAssetsV1',
                effects: 'Vec<XcmOrderV1>'
            },
            ReceiveTeleportedAsset: {
                assets: 'MultiAssetsV1',
                effects: 'Vec<XcmOrderV1>'
            },
            QueryResponse: {
                queryId: 'Compact<u64>',
                response: 'ResponseV1'
            },
            TransferAsset: {
                assets: 'MultiAssetsV1',
                dest: 'MultiLocationV1'
            },
            TransferReserveAsset: {
                assets: 'MultiAssetsV1',
                dest: 'MultiLocationV1',
                effects: 'Vec<XcmOrderV1>'
            },
            Transact: {
                originType: 'XcmOriginKind',
                requireWeightAtMost: 'u64',
                call: 'DoubleEncodedCall'
            },
            HrmpNewChannelOpenRequest: {
                sender: 'Compact<u32>',
                maxMessageSize: 'Compact<u32>',
                maxCapacity: 'Compact<u32>'
            },
            HrmpChannelAccepted: {
                recipient: 'Compact<u32>'
            },
            HrmpChannelClosing: {
                initiator: 'Compact<u32>',
                sender: 'Compact<u32>',
                recipient: 'Compact<u32>'
            },
            RelayedFrom: {
                who: 'MultiLocationV1',
                message: 'XcmV1'
            }
        }
    },
    XcmErrorV1: {
        _enum: {
            Undefined: 'Null',
            Overflow: 'Null',
            Unimplemented: 'Null',
            UnhandledXcmVersion: 'Null',
            UnhandledXcmMessage: 'Null',
            UnhandledEffect: 'Null',
            EscalationOfPrivilege: 'Null',
            UntrustedReserveLocation: 'Null',
            UntrustedTeleportLocation: 'Null',
            DestinationBufferOverflow: 'Null',
            SendFailed: 'Null',
            CannotReachDestination: '(MultiLocationV1, XcmV1)',
            MultiLocationFull: 'Null',
            FailedToDecode: 'Null',
            BadOrigin: 'Null',
            ExceedsMaxMessageSize: 'Null',
            FailedToTransactAsset: 'Null',
            WeightLimitReached: 'Weight',
            Wildcard: 'Null',
            TooMuchWeightRequired: 'Null',
            NotHoldingFees: 'Null',
            WeightNotComputable: 'Null',
            Barrier: 'Null',
            NotWithdrawable: 'Null',
            LocationCannotHold: 'Null',
            TooExpensive: 'Null',
            AssetNotFound: 'Null',
            DestinationUnsupported: 'Null',
            RecursionLimitReached: 'Null'
        }
    },
    XcmOrderV1: {
        _enum: {
            Noop: 'Null',
            DepositAsset: {
                assets: 'MultiAssetFilterV1',
                maxAssets: 'u32',
                beneficiary: 'MultiLocationV1'
            },
            DepositReserveAsset: {
                assets: 'MultiAssetFilterV1',
                maxAssets: 'u32',
                dest: 'MultiLocationV1',
                effects: 'Vec<XcmOrderV1>'
            },
            ExchangeAsset: {
                give: 'MultiAssetFilterV1',
                receive: 'MultiAssetsV1'
            },
            InitiateReserveWithdraw: {
                assets: 'MultiAssetFilterV1',
                reserve: 'MultiLocationV1',
                effects: 'Vec<XcmOrderV1>'
            },
            InitiateTeleport: {
                assets: 'MultiAssetFilterV1',
                dest: 'MultiLocationV1',
                effects: 'Vec<XcmOrderV1>'
            },
            QueryHolding: {
                queryId: 'Compact<u64>',
                dest: 'MultiLocationV1',
                assets: 'MultiAssetFilterV1'
            },
            BuyExecution: {
                fees: 'MultiAssetV1',
                weight: 'u64',
                debt: 'u64',
                haltOnError: 'bool',
                instructions: 'Vec<XcmV1>'
            }
        }
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/xcm/v2.js
const v2 = {
    AssetInstanceV2: 'AssetInstanceV1',
    FungibilityV2: 'FungibilityV1',
    JunctionV2: 'JunctionV1',
    JunctionsV2: 'JunctionsV1',
    MultiAssetsV2: 'MultiAssetsV1',
    MultiAssetV2: 'MultiAssetV1',
    MultiAssetFilterV2: 'MultiAssetFilterV1',
    MultiLocationV2: 'MultiLocationV1',
    OriginKindV2: 'OriginKindV1',
    WildFungibilityV2: 'WildFungibilityV1',
    ResponseV2: {
        _enum: {
            Null: 'Null',
            Assets: 'MultiAssetsV2',
            ExecutionResult: 'ResponseV2Result'
        }
    },
    ResponseV2Error: '(u32, XcmErrorV2)',
    ResponseV2Result: 'Result<Null, ResponseV2Error>',
    WeightLimitV2: {
        _enum: {
            Unlimited: 'Null',
            Limited: 'Compact<u64>'
        }
    },
    InstructionV2: {
        _enum: {
            WithdrawAsset: 'MultiAssetsV2',
            ReserveAssetDeposited: 'MultiAssetsV2',
            ReceiveTeleportedAsset: 'MultiAssetsV2',
            QueryResponse: {
                queryId: 'Compact<u64>',
                response: 'ResponseV2',
                maxWeight: 'Compact<u64>'
            },
            TransferAsset: {
                assets: 'MultiAssetsV2',
                beneficiary: 'MultiLocationV2'
            },
            TransferReserveAsset: {
                assets: 'MultiAssetsV2',
                dest: 'MultiLocationV2',
                xcm: 'XcmV2'
            },
            Transact: {
                originType: 'OriginKindV2',
                requireWeightAtMost: 'u64',
                call: 'DoubleEncodedCall'
            },
            HrmpNewChannelOpenRequest: {
                sender: 'Compact<u32>',
                maxMessageSize: 'Compact<u32>',
                maxCapacity: 'Compact<u32>'
            },
            HrmpChannelAccepted: {
                recipient: 'Compact<u32>'
            },
            HrmpChannelClosing: {
                initiator: 'Compact<u32>',
                sender: 'Compact<u32>',
                recipient: 'Compact<u32>'
            },
            ClearOrigin: 'Null',
            DescendOrigin: 'InteriorMultiLocation',
            ReportError: {
                queryId: 'Compact<u64>',
                dest: 'MultiLocationV2',
                maxResponseWeight: 'Compact<u64>'
            },
            DepositAsset: {
                assets: 'MultiAssetFilterV2',
                maxAssets: 'u32',
                beneficiary: 'MultiLocationV2'
            },
            DepositReserveAsset: {
                assets: 'MultiAssetFilterV2',
                maxAssets: 'u32',
                dest: 'MultiLocationV2',
                xcm: 'XcmV2'
            },
            ExchangeAsset: {
                give: 'MultiAssetFilterV2',
                receive: 'MultiAssetsV2'
            },
            InitiateReserveWithdraw: {
                assets: 'MultiAssetFilterV2',
                reserve: 'MultiLocationV2',
                xcm: 'XcmV2'
            },
            InitiateTeleport: {
                assets: 'MultiAssetFilterV2',
                dest: 'MultiLocationV2',
                xcm: 'XcmV2'
            },
            QueryHolding: {
                query_id: 'Compact<u64>',
                dest: 'MultiLocationV2',
                assets: 'MultiAssetFilterV2',
                maxResponse_Weight: 'Compact<u64>'
            },
            BuyExecution: {
                fees: 'MultiAssetV2',
                weightLimit: 'WeightLimitV2'
            },
            RefundSurplus: 'Null',
            SetErrorHandler: 'XcmV2',
            SetAppendix: 'XcmV2',
            ClearError: 'Null',
            ClaimAsset: {
                assets: 'MultiAssetsV2',
                ticket: 'MultiLocationV2'
            },
            Trap: 'u64'
        }
    },
    WildMultiAssetV2: 'WildMultiAssetV1',
    XcmV2: 'Vec<InstructionV2>',
    XcmErrorV2: {
        _enum: {
            Undefined: 'Null',
            Overflow: 'Null',
            Unimplemented: 'Null',
            UnhandledXcmVersion: 'Null',
            UnhandledXcmMessage: 'Null',
            UnhandledEffect: 'Null',
            EscalationOfPrivilege: 'Null',
            UntrustedReserveLocation: 'Null',
            UntrustedTeleportLocation: 'Null',
            DestinationBufferOverflow: 'Null',
            MultiLocationFull: 'Null',
            MultiLocationNotInvertible: 'Null',
            FailedToDecode: 'Null',
            BadOrigin: 'Null',
            ExceedsMaxMessageSize: 'Null',
            FailedToTransactAsset: 'Null',
            WeightLimitReached: 'Weight',
            Wildcard: 'Null',
            TooMuchWeightRequired: 'Null',
            NotHoldingFees: 'Null',
            WeightNotComputable: 'Null',
            Barrier: 'Null',
            NotWithdrawable: 'Null',
            LocationCannotHold: 'Null',
            TooExpensive: 'Null',
            AssetNotFound: 'Null',
            DestinationUnsupported: 'Null',
            RecursionLimitReached: 'Null',
            Transport: 'Null',
            Unroutable: 'Null',
            UnknownWeightRequired: 'Null',
            Trap: 'u64',
            UnknownClaim: 'Null',
            InvalidLocation: 'Null'
        }
    },
    XcmOrderV2: 'XcmOrderV1'
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/xcm/definitions.js




const XCM_LATEST = 'V2';
const definitions_xcm = {
    XcmOrigin: {
        _enum: {
            Xcm: 'MultiLocation'
        }
    },
    XcmpMessageFormat: {
        _enum: ['ConcatenatedVersionedXcm', 'ConcatenatedEncodedBlob', 'Signals']
    },
    XcmAssetId: {
        _enum: {
            Concrete: 'MultiLocation',
            Abstract: 'Bytes'
        }
    },
    InboundStatus: {
        _enum: ['Ok', 'Suspended']
    },
    OutboundStatus: {
        _enum: ['Ok', 'Suspended']
    },
    MultiAssets: 'Vec<MultiAsset>'
};
const definitions_location = {
    BodyId: {
        _enum: {
            Unit: 'Null',
            Named: 'Vec<u8>',
            Index: 'Compact<u32>',
            Executive: 'Null',
            Technical: 'Null',
            Legislative: 'Null',
            Judicial: 'Null'
        }
    },
    BodyPart: {
        _enum: {
            Voice: 'Null',
            Members: 'Compact<u32>',
            Fraction: {
                nom: 'Compact<u32>',
                denom: 'Compact<u32>'
            },
            AtLeastProportion: {
                nom: 'Compact<u32>',
                denom: 'Compact<u32>'
            },
            MoreThanProportion: {
                nom: 'Compact<u32>',
                denom: 'Compact<u32>'
            }
        }
    },
    InteriorMultiLocation: 'Junctions',
    NetworkId: {
        _enum: {
            Any: 'Null',
            Named: 'Vec<u8>',
            Polkadot: 'Null',
            Kusama: 'Null'
        }
    }
};
/* harmony default export */ const xcm_definitions = ({
    rpc: {},
    types: {
        ...definitions_location,
        ...definitions_xcm,
        ...v0_v0,
        ...v1_v1,
        ...v2,
        ...(0,xcm/* mapXcmTypes */.w)(XCM_LATEST),
        DoubleEncodedCall: {
            encoded: 'Vec<u8>'
        },
        XcmOriginKind: {
            _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
        },
        Outcome: {
            _enum: {
                Complete: 'Weight',
                Incomplete: '(Weight, XcmErrorV0)',
                Error: 'XcmErrorV0'
            }
        },
        QueryId: 'u64',
        QueryStatus: {
            _enum: {
                Pending: {
                    responder: 'VersionedMultiLocation',
                    maybeNotify: 'Option<(u8, u8)>',
                    timeout: 'BlockNumber'
                },
                Ready: {
                    response: 'VersionedResponse',
                    at: 'BlockNumber'
                }
            }
        },
        QueueConfigData: {
            suspendThreshold: 'u32',
            dropThreshold: 'u32',
            resumeThreshold: 'u32',
            thresholdWeight: 'Weight',
            weightRestrictDecay: 'Weight'
        },
        VersionMigrationStage: {
            _enum: {
                MigrateSupportedVersion: 'Null',
                MigrateVersionNotifiers: 'Null',
                NotifyCurrentTargets: 'Option<Bytes>',
                MigrateAndNotifyOldTargets: 'Null'
            }
        },
        VersionedMultiAsset: {
            _enum: {
                V0: 'MultiAssetV0',
                V1: 'MultiAssetV1',
                V2: 'MultiAssetV2'
            }
        },
        VersionedMultiAssets: {
            _enum: {
                V0: 'Vec<MultiAssetV0>',
                V1: 'MultiAssetsV1',
                V2: 'MultiAssetsV2'
            }
        },
        VersionedMultiLocation: {
            _enum: {
                V0: 'MultiLocationV0',
                V1: 'MultiLocationV1',
                V2: 'MultiLocationV2'
            }
        },
        VersionedResponse: {
            V0: 'ResponseV0',
            V1: 'ResponseV1',
            V2: 'ResponseV2'
        },
        VersionedXcm: {
            _enum: {
                V0: 'XcmV0',
                V1: 'XcmV1',
                V2: 'XcmV2'
            }
        },
        XcmVersion: 'u32'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/contractsAbi/definitions.js
/* eslint-disable sort-keys */
const layout = {
    ContractCryptoHasher: {
        _enum: ['Blake2x256', 'Sha2x256', 'Keccak256']
    },
    ContractDiscriminant: 'u32',
    ContractLayoutArray: {
        offset: 'ContractLayoutKey',
        len: 'u32',
        cellsPerElem: 'u64',
        layout: 'ContractStorageLayout'
    },
    ContractLayoutCell: {
        key: 'ContractLayoutKey',
        ty: 'SiLookupTypeId'
    },
    ContractLayoutEnum: {
        dispatchKey: 'ContractLayoutKey',
        variants: 'BTreeMap<ContractDiscriminant, ContractLayoutStruct>'
    },
    ContractLayoutHash: {
        offset: 'ContractLayoutKey',
        strategy: 'ContractLayoutHashingStrategy',
        layout: 'ContractStorageLayout'
    },
    ContractLayoutHashingStrategy: {
        hasher: 'ContractCryptoHasher',
        postfix: 'Vec<u8>',
        prefix: 'Vec<u8>'
    },
    ContractLayoutKey: '[u8; 32]',
    ContractLayoutStruct: {
        fields: 'Vec<ContractLayoutStructField>'
    },
    ContractLayoutStructField: {
        layout: 'ContractStorageLayout',
        name: 'Text'
    },
    ContractStorageLayout: {
        _enum: {
            Cell: 'ContractLayoutCell',
            Hash: 'ContractLayoutHash',
            Array: 'ContractLayoutArray',
            Struct: 'ContractLayoutStruct',
            Enum: 'ContractLayoutEnum'
        }
    }
};
const spec = {
    ContractConstructorSpecV0: {
        name: 'Text',
        selector: 'ContractSelector',
        args: 'Vec<ContractMessageParamSpecV0>',
        docs: 'Vec<Text>'
    },
    ContractConstructorSpecV1: {
        name: 'Vec<Text>',
        selector: 'ContractSelector',
        args: 'Vec<ContractMessageParamSpecV0>',
        docs: 'Vec<Text>'
    },
    ContractConstructorSpecV2: {
        label: 'Text',
        selector: 'ContractSelector',
        args: 'Vec<ContractMessageParamSpecV2>',
        docs: 'Vec<Text>'
    },
    ContractConstructorSpecV3: {
        label: 'Text',
        selector: 'ContractSelector',
        payable: 'bool',
        args: 'Vec<ContractMessageParamSpecV2>',
        docs: 'Vec<Text>'
    },
    ContractConstructorSpecV4: {
        label: 'Text',
        selector: 'ContractSelector',
        payable: 'bool',
        args: 'Vec<ContractMessageParamSpecV2>',
        docs: 'Vec<Text>',
        default: 'bool',
        returnType: 'Option<ContractTypeSpec>'
    },
    ContractContractSpecV0: {
        constructors: 'Vec<ContractConstructorSpecV0>',
        messages: 'Vec<ContractMessageSpecV0>',
        events: 'Vec<ContractEventSpecV0>',
        docs: 'Vec<Text>'
    },
    ContractContractSpecV1: {
        constructors: 'Vec<ContractConstructorSpecV1>',
        messages: 'Vec<ContractMessageSpecV1>',
        events: 'Vec<ContractEventSpecV1>',
        docs: 'Vec<Text>'
    },
    ContractContractSpecV2: {
        constructors: 'Vec<ContractConstructorSpecV2>',
        messages: 'Vec<ContractMessageSpecV2>',
        events: 'Vec<ContractEventSpecV2>',
        docs: 'Vec<Text>'
    },
    ContractContractSpecV3: {
        constructors: 'Vec<ContractConstructorSpecV3>',
        messages: 'Vec<ContractMessageSpecV2>',
        events: 'Vec<ContractEventSpecV2>',
        docs: 'Vec<Text>'
    },
    ContractContractSpecV4: {
        constructors: 'Vec<ContractConstructorSpecV4>',
        messages: 'Vec<ContractMessageSpecV3>',
        events: 'Vec<ContractEventSpecV2>',
        docs: 'Vec<Text>',
        environment: 'ContractEnvironmentV4'
    },
    ContractDisplayName: 'SiPath',
    ContractEventParamSpecV0: {
        name: 'Text',
        indexed: 'bool',
        type: 'ContractTypeSpec',
        docs: 'Vec<Text>'
    },
    ContractEventParamSpecV2: {
        label: 'Text',
        indexed: 'bool',
        type: 'ContractTypeSpec',
        docs: 'Vec<Text>'
    },
    ContractEventSpecV0: {
        name: 'Text',
        args: 'Vec<ContractEventParamSpecV0>',
        docs: 'Vec<Text>'
    },
    ContractEventSpecV1: {
        name: 'Text',
        args: 'Vec<ContractEventParamSpecV0>',
        docs: 'Vec<Text>'
    },
    ContractEventSpecV2: {
        label: 'Text',
        args: 'Vec<ContractEventParamSpecV2>',
        docs: 'Vec<Text>'
    },
    ContractMessageParamSpecV0: {
        name: 'Text',
        type: 'ContractTypeSpec'
    },
    ContractMessageParamSpecV2: {
        label: 'Text',
        type: 'ContractTypeSpec'
    },
    ContractMessageSpecV0: {
        name: 'Text',
        selector: 'ContractSelector',
        mutates: 'bool',
        payable: 'bool',
        args: 'Vec<ContractMessageParamSpecV0>',
        returnType: 'Option<ContractTypeSpec>',
        docs: 'Vec<Text>'
    },
    ContractMessageSpecV1: {
        name: 'Vec<Text>',
        selector: 'ContractSelector',
        mutates: 'bool',
        payable: 'bool',
        args: 'Vec<ContractMessageParamSpecV0>',
        returnType: 'Option<ContractTypeSpec>',
        docs: 'Vec<Text>'
    },
    ContractMessageSpecV2: {
        label: 'Text',
        selector: 'ContractSelector',
        mutates: 'bool',
        payable: 'bool',
        args: 'Vec<ContractMessageParamSpecV2>',
        returnType: 'Option<ContractTypeSpec>',
        docs: 'Vec<Text>'
    },
    ContractMessageSpecV3: {
        label: 'Text',
        selector: 'ContractSelector',
        mutates: 'bool',
        payable: 'bool',
        args: 'Vec<ContractMessageParamSpecV2>',
        returnType: 'Option<ContractTypeSpec>',
        docs: 'Vec<Text>',
        default: 'bool'
    },
    ContractSelector: '[u8; 4]',
    ContractTypeSpec: {
        type: 'SiLookupTypeId',
        displayName: 'ContractDisplayName'
    }
};
const latest = {
    ContractConstructorSpecLatest: 'ContractConstructorSpecV4',
    ContractEventSpecLatest: 'ContractEventSpecV2',
    ContractEventParamSpecLatest: 'ContractEventParamSpecV2',
    ContractMessageParamSpecLatest: 'ContractMessageParamSpecV2',
    ContractMessageSpecLatest: 'ContractMessageSpecV3',
    ContractMetadataLatest: 'ContractMetadataV4'
};
/* harmony default export */ const contractsAbi_definitions = ({
    rpc: {},
    types: {
        ...layout,
        ...spec,
        ...latest,
        ContractProjectInfo: {
            source: 'ContractProjectSource',
            contract: 'ContractProjectContract'
        },
        ContractMetadataV0: {
            metadataVersion: 'Text',
            types: 'Vec<Si0Type>',
            spec: 'ContractContractSpecV0'
        },
        ContractMetadataV1: {
            types: 'Vec<PortableType>',
            spec: 'ContractContractSpecV1'
        },
        ContractMetadataV2: {
            types: 'Vec<PortableType>',
            spec: 'ContractContractSpecV2'
        },
        ContractMetadataV3: {
            types: 'Vec<PortableType>',
            spec: 'ContractContractSpecV3'
        },
        ContractMetadataV4: {
            types: 'Vec<PortableType>',
            spec: 'ContractContractSpecV4'
        },
        ContractMetadata: {
            _enum: {
                V0: 'ContractMetadataV0',
                V1: 'ContractMetadataV1',
                V2: 'ContractMetadataV2',
                V3: 'ContractMetadataV3',
                V4: 'ContractMetadataV4'
            }
        },
        ContractProjectV0: {
            metadataVersion: 'Text',
            source: 'ContractProjectSource',
            contract: 'ContractProjectContract',
            types: 'Vec<Si0Type>',
            spec: 'ContractContractSpecV0'
        },
        ContractProject: '(ContractProjectInfo, ContractMetadata)',
        ContractProjectContract: {
            _alias: {
                docs: 'documentation'
            },
            name: 'Text',
            version: 'Text',
            authors: 'Vec<Text>',
            description: 'Option<Text>',
            docs: 'Option<Text>',
            repository: 'Option<Text>',
            homepage: 'Option<Text>',
            license: 'Option<Text>'
        },
        ContractProjectSource: {
            _alias: {
                wasmHash: 'hash'
            },
            wasmHash: '[u8; 32]',
            language: 'Text',
            compiler: 'Text',
            wasm: 'Raw'
        },
        ContractEnvironmentV4: {
            _alias: {
                hashType: 'hash'
            },
            // NOTE These are not marked optional in the Rust code, however since we
            // convert from older versions to newer, we may not have these fields.
            // The Option<...> works since our inputs are always JSON, so it will
            // be None when not specified.
            //
            // Additionally we don't mark the full structure as Option, rather we
            // do it on a per-field basis since fields may be added as the versions
            // progress.
            accountId: 'Option<ContractTypeSpec>',
            balance: 'Option<ContractTypeSpec>',
            blockNumber: 'Option<ContractTypeSpec>',
            hashType: 'Option<ContractTypeSpec>',
            timestamp: 'Option<ContractTypeSpec>',
            maxEventTopics: 'Option<u32>'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/eth/rpc.js
const netRpc = {
    listening: {
        aliasSection: 'net',
        description: 'Returns true if client is actively listening for network connections. Otherwise false.',
        params: [],
        type: 'bool'
    },
    peerCount: {
        aliasSection: 'net',
        description: 'Returns number of peers connected to node.',
        params: [],
        type: 'Text'
    },
    version: {
        aliasSection: 'net',
        description: 'Returns protocol version.',
        params: [],
        type: 'Text'
    }
};
const web3Rpc = {
    clientVersion: {
        aliasSection: 'web3',
        description: 'Returns current client version.',
        params: [],
        type: 'Text'
    },
    sha3: {
        aliasSection: 'web3',
        description: 'Returns sha3 of the given data',
        params: [{ name: 'data', type: 'Bytes' }],
        type: 'H256'
    }
};
const eth_rpc_rpc = {
    ...netRpc,
    ...web3Rpc,
    accounts: {
        description: 'Returns accounts list.',
        params: [],
        type: 'Vec<H160>'
    },
    blockNumber: {
        description: 'Returns the blockNumber',
        params: [],
        type: 'U256'
    },
    call: {
        description: 'Call contract, returning the output data.',
        params: [
            {
                name: 'request',
                type: 'EthCallRequest'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'Bytes'
    },
    chainId: {
        description: 'Returns the chain ID used for transaction signing at the current best block. None is returned if not available.',
        params: [],
        type: 'U64'
    },
    coinbase: {
        description: 'Returns block author.',
        params: [],
        type: 'H160'
    },
    estimateGas: {
        description: 'Estimate gas needed for execution of given contract.',
        params: [
            {
                name: 'request',
                type: 'EthCallRequest'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'U256'
    },
    feeHistory: {
        description: 'Returns fee history for given block count & reward percentiles',
        params: [
            {
                name: 'blockCount',
                type: 'U256'
            },
            {
                name: 'newestBlock',
                type: 'BlockNumber'
            },
            {
                name: 'rewardPercentiles',
                type: 'Option<Vec<f64>>'
            }
        ],
        type: 'EthFeeHistory'
    },
    gasPrice: {
        description: 'Returns current gas price.',
        params: [],
        type: 'U256'
    },
    getBalance: {
        description: 'Returns balance of the given account.',
        params: [
            {
                name: 'address',
                type: 'H160'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'U256'
    },
    getBlockByHash: {
        description: 'Returns block with given hash.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            },
            {
                name: 'full',
                type: 'bool'
            }
        ],
        type: 'Option<EthRichBlock>'
    },
    getBlockByNumber: {
        description: 'Returns block with given number.',
        params: [
            {
                name: 'block',
                type: 'BlockNumber'
            },
            { name: 'full', type: 'bool' }
        ],
        type: 'Option<EthRichBlock>'
    },
    getBlockTransactionCountByHash: {
        description: 'Returns the number of transactions in a block with given hash.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            }
        ],
        type: 'U256'
    },
    getBlockTransactionCountByNumber: {
        description: 'Returns the number of transactions in a block with given block number.',
        params: [
            {
                name: 'block',
                type: 'BlockNumber'
            }
        ],
        type: 'U256'
    },
    getCode: {
        description: 'Returns the code at given address at given time (block number).',
        params: [
            {
                name: 'address',
                type: 'H160'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'Bytes'
    },
    getFilterChanges: {
        description: 'Returns filter changes since last poll.',
        params: [
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'EthFilterChanges'
    },
    getFilterLogs: {
        description: 'Returns all logs matching given filter (in a range \'from\' - \'to\').',
        params: [
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'Vec<EthLog>'
    },
    getLogs: {
        description: 'Returns logs matching given filter object.',
        params: [
            {
                name: 'filter',
                type: 'EthFilter'
            }
        ],
        type: 'Vec<EthLog>'
    },
    getProof: {
        description: 'Returns proof for account and storage.',
        params: [
            {
                name: 'address',
                type: 'H160'
            },
            {
                name: 'storageKeys',
                type: 'Vec<H256>'
            },
            {
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'EthAccount'
    },
    getStorageAt: {
        description: 'Returns content of the storage at given address.',
        params: [
            {
                name: 'address',
                type: 'H160'
            },
            {
                name: 'index',
                type: 'U256'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'H256'
    },
    getTransactionByBlockHashAndIndex: {
        description: 'Returns transaction at given block hash and index.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            },
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'EthTransaction'
    },
    getTransactionByBlockNumberAndIndex: {
        description: 'Returns transaction by given block number and index.',
        params: [
            {
                name: 'number',
                type: 'BlockNumber'
            },
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'EthTransaction'
    },
    getTransactionByHash: {
        description: 'Get transaction by its hash.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            }
        ],
        type: 'EthTransaction'
    },
    getTransactionCount: {
        description: 'Returns the number of transactions sent from given address at given time (block number).',
        params: [
            {
                name: 'address',
                type: 'H160'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'U256'
    },
    getTransactionReceipt: {
        description: 'Returns transaction receipt by transaction hash.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            }
        ],
        type: 'EthReceipt'
    },
    getUncleByBlockHashAndIndex: {
        description: 'Returns an uncles at given block and index.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            },
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'EthRichBlock'
    },
    getUncleByBlockNumberAndIndex: {
        description: 'Returns an uncles at given block and index.',
        params: [
            {
                name: 'number',
                type: 'BlockNumber'
            },
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'EthRichBlock'
    },
    getUncleCountByBlockHash: {
        description: 'Returns the number of uncles in a block with given hash.',
        params: [
            {
                name: 'hash',
                type: 'H256'
            }
        ],
        type: 'U256'
    },
    getUncleCountByBlockNumber: {
        description: 'Returns the number of uncles in a block with given block number.',
        params: [
            {
                name: 'number',
                type: 'BlockNumber'
            }
        ],
        type: 'U256'
    },
    getWork: {
        description: 'Returns the hash of the current block, the seedHash, and the boundary condition to be met.',
        params: [],
        type: 'EthWork'
    },
    hashrate: {
        description: 'Returns the number of hashes per second that the node is mining with.',
        params: [],
        type: 'U256'
    },
    maxPriorityFeePerGas: {
        description: 'Returns max priority fee per gas',
        params: [],
        type: 'U256'
    },
    mining: {
        description: 'Returns true if client is actively mining new blocks.',
        params: [],
        type: 'bool'
    },
    newBlockFilter: {
        description: 'Returns id of new block filter.',
        params: [],
        type: 'U256'
    },
    newFilter: {
        description: 'Returns id of new filter.',
        params: [
            {
                name: 'filter',
                type: 'EthFilter'
            }
        ],
        type: 'U256'
    },
    newPendingTransactionFilter: {
        description: 'Returns id of new block filter.',
        params: [],
        type: 'U256'
    },
    protocolVersion: {
        description: 'Returns protocol version encoded as a string (quotes are necessary).',
        params: [],
        type: 'u64'
    },
    sendRawTransaction: {
        description: 'Sends signed transaction, returning its hash.',
        params: [
            {
                name: 'bytes',
                type: 'Bytes'
            }
        ],
        type: 'H256'
    },
    sendTransaction: {
        description: 'Sends transaction; will block waiting for signer to return the transaction hash',
        params: [
            {
                name: 'tx',
                type: 'EthTransactionRequest'
            }
        ],
        type: 'H256'
    },
    submitHashrate: {
        description: 'Used for submitting mining hashrate.',
        params: [
            {
                name: 'index',
                type: 'U256'
            },
            {
                name: 'hash',
                type: 'H256'
            }
        ],
        type: 'bool'
    },
    submitWork: {
        description: 'Used for submitting a proof-of-work solution.',
        params: [
            {
                name: 'nonce',
                type: 'H64'
            },
            {
                name: 'headerHash',
                type: 'H256'
            },
            {
                name: 'mixDigest',
                type: 'H256'
            }
        ],
        type: 'bool'
    },
    subscribe: {
        description: 'Subscribe to Eth subscription.',
        params: [
            { name: 'kind', type: 'EthSubKind' },
            {
                isOptional: true,
                name: 'params',
                type: 'EthSubParams'
            }
        ],
        pubsub: [
            'subscription',
            'subscribe',
            'unsubscribe'
        ],
        type: 'Null'
    },
    syncing: {
        description: 'Returns an object with data about the sync status or false.',
        params: [],
        type: 'EthSyncStatus'
    },
    uninstallFilter: {
        description: 'Uninstalls filter.',
        params: [
            {
                name: 'index',
                type: 'U256'
            }
        ],
        type: 'bool'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/eth/runtime.js
const ethMethodsV4 = {
    account_basic: {
        description: 'Returns pallet_evm::Accounts by address.',
        params: [
            {
                name: 'address',
                type: 'H160'
            }
        ],
        type: 'EvmAccount'
    },
    account_code_at: {
        description: 'For a given account address, returns pallet_evm::AccountCodes.',
        params: [
            {
                name: 'address',
                type: 'H160'
            }
        ],
        type: 'Bytes'
    },
    author: {
        description: 'Returns the converted FindAuthor::find_author authority id.',
        params: [],
        type: 'H160'
    },
    call: {
        description: 'Returns a frame_ethereum::call response. If `estimate` is true,',
        params: [
            {
                name: 'from',
                type: 'H160'
            },
            {
                name: 'to',
                type: 'H160'
            },
            {
                name: 'data',
                type: 'Vec<u8>'
            },
            {
                name: 'value',
                type: 'U256'
            },
            {
                name: 'gasLimit',
                type: 'U256'
            },
            {
                name: 'maxFeePerGas',
                type: 'Option<U256>'
            },
            {
                name: 'maxPriorityFeePerGas',
                type: 'Option<U256>'
            },
            {
                name: 'nonce',
                type: 'Option<U256>'
            },
            {
                name: 'estimate',
                type: 'bool'
            },
            {
                name: 'accessList',
                type: 'Option<Vec<(H160, Vec<H256>)>>'
            }
        ],
        type: 'Result<EvmCallInfo, DispatchError>'
    },
    chain_id: {
        description: 'Returns runtime defined pallet_evm::ChainId.',
        params: [],
        type: 'u64'
    },
    create: {
        description: 'Returns a frame_ethereum::call response. If `estimate` is true,',
        params: [
            {
                name: 'from',
                type: 'H160'
            },
            {
                name: 'data',
                type: 'Vec<u8>'
            },
            {
                name: 'value',
                type: 'U256'
            },
            {
                name: 'gasLimit',
                type: 'U256'
            },
            {
                name: 'maxFeePerGas',
                type: 'Option<U256>'
            },
            {
                name: 'maxPriorityFeePerGas',
                type: 'Option<U256>'
            },
            {
                name: 'nonce',
                type: 'Option<U256>'
            },
            {
                name: 'estimate',
                type: 'bool'
            },
            {
                name: 'accessList',
                type: 'Option<Vec<(H160, Vec<H256>)>>'
            }
        ],
        type: 'Result<EvmCreateInfo, DispatchError>'
    },
    current_all: {
        description: 'Return all the current data for a block in a single runtime call.',
        params: [],
        type: '(Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>)'
    },
    current_block: {
        description: 'Return the current block.',
        params: [],
        type: 'BlockV2'
    },
    current_receipts: {
        description: 'Return the current receipt.',
        params: [],
        type: 'Option<Vec<EthReceiptV3>>'
    },
    current_transaction_statuses: {
        description: 'Return the current transaction status.',
        params: [],
        type: 'Option<Vec<EthTransactionStatus>>'
    },
    elasticity: {
        description: 'Return the elasticity multiplier.',
        params: [],
        type: 'Option<Permill>'
    },
    extrinsic_filter: {
        description: 'Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.',
        params: [
            {
                name: 'xts',
                type: 'Vec<Extrinsic>'
            }
        ],
        type: 'Vec<TransactionV2>'
    },
    gas_price: {
        description: 'Returns FixedGasPrice::min_gas_price',
        params: [],
        type: 'u256'
    },
    storage_at: {
        description: 'For a given account address and index, returns pallet_evm::AccountStorages.',
        params: [
            {
                name: 'address',
                type: 'H160'
            },
            {
                name: 'index',
                type: 'u256'
            }
        ],
        type: 'H256'
    }
};
const ethMethodsV5 = {
    call: {
        description: 'Returns a frame_ethereum::call response. If `estimate` is true,',
        params: [
            {
                name: 'from',
                type: 'H160'
            },
            {
                name: 'to',
                type: 'H160'
            },
            {
                name: 'data',
                type: 'Vec<u8>'
            },
            {
                name: 'value',
                type: 'U256'
            },
            {
                name: 'gasLimit',
                type: 'U256'
            },
            {
                name: 'maxFeePerGas',
                type: 'Option<U256>'
            },
            {
                name: 'maxPriorityFeePerGas',
                type: 'Option<U256>'
            },
            {
                name: 'nonce',
                type: 'Option<U256>'
            },
            {
                name: 'estimate',
                type: 'bool'
            },
            {
                name: 'accessList',
                type: 'Option<Vec<(H160, Vec<H256>)>>'
            }
        ],
        type: 'Result<EvmCallInfoV2, DispatchError>'
    },
    create: {
        description: 'Returns a frame_ethereum::call response. If `estimate` is true,',
        params: [
            {
                name: 'from',
                type: 'H160'
            },
            {
                name: 'data',
                type: 'Vec<u8>'
            },
            {
                name: 'value',
                type: 'U256'
            },
            {
                name: 'gasLimit',
                type: 'U256'
            },
            {
                name: 'maxFeePerGas',
                type: 'Option<U256>'
            },
            {
                name: 'maxPriorityFeePerGas',
                type: 'Option<U256>'
            },
            {
                name: 'nonce',
                type: 'Option<U256>'
            },
            {
                name: 'estimate',
                type: 'bool'
            },
            {
                name: 'accessList',
                type: 'Option<Vec<(H160, Vec<H256>)>>'
            }
        ],
        type: 'Result<EvmCreateInfoV2, DispatchError>'
    }
};
const eth_runtime_runtime = {
    ConvertTransactionRuntimeApi: [
        {
            methods: {
                convert_transaction: {
                    description: 'Converts an Ethereum-style transaction to Extrinsic',
                    params: [
                        {
                            name: 'transaction',
                            type: 'TransactionV2'
                        }
                    ],
                    type: 'Extrinsic'
                }
            },
            version: 2
        }
    ],
    DebugRuntimeApi: [
        {
            methods: {
                trace_block: {
                    description: 'Trace all block extrinsics',
                    params: [
                        {
                            name: 'extrinsics',
                            type: 'Vec<Extrinsic>'
                        },
                        {
                            name: 'knownTransactions',
                            type: 'Vec<H256>'
                        }
                    ],
                    type: 'Result<(), DispatchError>'
                },
                trace_transaction: {
                    description: 'Trace transaction extrinsics',
                    params: [
                        {
                            name: 'extrinsics',
                            type: 'Vec<Extrinsic>'
                        },
                        {
                            name: 'transaction',
                            type: 'EthTransaction'
                        }
                    ],
                    type: 'Result<(), DispatchError>'
                }
            },
            version: 4
        }
    ],
    EthereumRuntimeRPCApi: [
        {
            methods: {
                ...ethMethodsV4
            },
            version: 4
        },
        {
            methods: {
                ...ethMethodsV4,
                ...ethMethodsV5
            },
            version: 5
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/eth/definitions.js


const V0 = {
    BlockV0: {
        header: 'EthHeader',
        transactions: 'Vec<TransactionV0>',
        ommers: 'Vec<EthHeader>'
    },
    LegacyTransaction: {
        nonce: 'U256',
        gasPrice: 'U256',
        gasLimit: 'U256',
        action: 'EthTransactionAction',
        value: 'U256',
        input: 'Bytes',
        signature: 'EthTransactionSignature'
    },
    TransactionV0: 'LegacyTransaction'
};
const V1 = {
    BlockV1: {
        header: 'EthHeader',
        transactions: 'Vec<TransactionV1>',
        ommers: 'Vec<EthHeader>'
    },
    EIP2930Transaction: {
        chainId: 'u64',
        nonce: 'U256',
        gasPrice: 'U256',
        gasLimit: 'U256',
        action: 'EthTransactionAction',
        value: 'U256',
        input: 'Bytes',
        accessList: 'EthAccessList',
        oddYParity: 'bool',
        r: 'H256',
        s: 'H256'
    },
    TransactionV1: {
        _enum: {
            Legacy: 'LegacyTransaction',
            EIP2930: 'EIP2930Transaction'
        }
    }
};
const V2 = {
    BlockV2: {
        header: 'EthHeader',
        transactions: 'Vec<TransactionV2>',
        ommers: 'Vec<EthHeader>'
    },
    EIP1559Transaction: {
        chainId: 'u64',
        nonce: 'U256',
        maxPriorityFeePerGas: 'U256',
        maxFeePerGas: 'U256',
        gasLimit: 'U256',
        action: 'EthTransactionAction',
        value: 'U256',
        input: 'Bytes',
        accessList: 'EthAccessList',
        oddYParity: 'bool',
        r: 'H256',
        s: 'H256'
    },
    TransactionV2: {
        _enum: {
            Legacy: 'LegacyTransaction',
            EIP2930: 'EIP2930Transaction',
            EIP1559: 'EIP1559Transaction'
        }
    }
};
const types = {
    ...V0,
    ...V1,
    ...V2,
    EthereumAccountId: 'GenericEthereumAccountId',
    EthereumAddress: 'GenericEthereumAccountId',
    EthereumLookupSource: 'GenericEthereumLookupSource',
    EthereumSignature: '[u8; 65]',
    EthAccessListItem: {
        address: 'EthAddress',
        slots: 'Vec<H256>'
    },
    EthAccessList: 'Vec<EthAccessListItem>',
    EthAccount: {
        address: 'EthAddress',
        balance: 'U256',
        nonce: 'U256',
        codeHash: 'H256',
        storageHash: 'H256',
        accountProof: 'Vec<Bytes>',
        storageProof: 'Vec<EthStorageProof>'
    },
    EthAddress: 'H160',
    EthBlock: {
        header: 'EthHeader',
        transactions: 'Vec<EthTransaction>',
        ommers: 'Vec<EthHeader>'
    },
    EthHeader: {
        parentHash: 'H256',
        ommersHash: 'H256',
        beneficiary: 'EthAddress',
        stateRoot: 'H256',
        transactionsRoot: 'H256',
        receiptsRoot: 'H256',
        logsBloom: 'EthBloom',
        difficulty: 'U256',
        number: 'U256',
        gasLimit: 'U256',
        gasUsed: 'U256',
        timestamp: 'u64',
        extraData: 'Bytes',
        mixMash: 'H256',
        nonce: 'H64'
    },
    EthRichBlock: {
        _alias: {
            blockHash: 'hash',
            blockSize: 'size'
        },
        blockHash: 'Option<H256>',
        parentHash: 'H256',
        sha3Uncles: 'H256',
        author: 'EthAddress',
        miner: 'EthAddress',
        stateRoot: 'H256',
        transactionsRoot: 'H256',
        receiptsRoot: 'H256',
        number: 'Option<U256>',
        gasUsed: 'U256',
        gasLimit: 'U256',
        extraData: 'Bytes',
        logsBloom: 'EthBloom',
        timestamp: 'U256',
        difficulty: 'U256',
        totalDifficulty: 'Option<U256>',
        sealFields: 'Vec<Bytes>',
        uncles: 'Vec<H256>',
        transactions: 'Vec<EthTransaction>',
        blockSize: 'Option<U256>'
    },
    EthBloom: 'H2048',
    EthCallRequest: {
        from: 'Option<EthAddress>',
        to: 'Option<EthAddress>',
        gasPrice: 'Option<U256>',
        gas: 'Option<U256>',
        value: 'Option<U256>',
        data: 'Option<Bytes>',
        nonce: 'Option<U256>'
    },
    EthFeeHistory: {
        oldestBlock: 'U256',
        baseFeePerGas: 'Vec<U256>',
        gasUsedRatio: 'Vec<f64>',
        reward: 'Option<Vec<Vec<U256>>>'
    },
    EthFilter: {
        fromBlock: 'Option<BlockNumber>',
        toBlock: 'Option<BlockNumber>',
        blockHash: 'Option<H256>',
        address: 'Option<EthFilterAddress>',
        topics: 'Option<EthFilterTopic>'
    },
    EthFilterAddress: {
        _enum: {
            Single: 'EthAddress',
            Multiple: 'Vec<EthAddress>',
            Null: 'Null'
        }
    },
    EthFilterChanges: {
        _enum: {
            Logs: 'Vec<EthLog>',
            Hashes: 'Vec<H256>',
            Empty: 'Null'
        }
    },
    EthFilterTopic: {
        _enum: {
            Single: 'EthFilterTopicInner',
            Multiple: 'Vec<EthFilterTopicInner>',
            Null: 'Null'
        }
    },
    EthFilterTopicEntry: 'Option<H256>',
    EthFilterTopicInner: {
        _enum: {
            Single: 'EthFilterTopicEntry',
            Multiple: 'Vec<EthFilterTopicEntry>',
            Null: 'Null'
        }
    },
    EthRichHeader: {
        _alias: {
            blockHash: 'hash',
            blockSize: 'size'
        },
        blockHash: 'Option<H256>',
        parentHash: 'H256',
        sha3Uncles: 'H256',
        author: 'EthAddress',
        miner: 'EthAddress',
        stateRoot: 'H256',
        transactionsRoot: 'H256',
        receiptsRoot: 'H256',
        number: 'Option<U256>',
        gasUsed: 'U256',
        gasLimit: 'U256',
        extraData: 'Bytes',
        logsBloom: 'EthBloom',
        timestamp: 'U256',
        difficulty: 'U256',
        sealFields: 'Vec<Bytes>',
        blockSize: 'Option<U256>'
    },
    EthLog: {
        address: 'EthAddress',
        topics: 'Vec<H256>',
        data: 'Bytes',
        blockHash: 'Option<H256>',
        blockNumber: 'Option<U256>',
        transactionHash: 'Option<H256>',
        transactionIndex: 'Option<U256>',
        logIndex: 'Option<U256>',
        transactionLogIndex: 'Option<U256>',
        removed: 'bool'
    },
    EthReceipt: {
        transactionHash: 'Option<H256>',
        transactionIndex: 'Option<U256>',
        blockHash: 'Option<H256>',
        from: 'Option<EthAddress>',
        to: 'Option<EthAddress>',
        blockNumber: 'Option<U256>',
        cumulativeGasUsed: 'U256',
        gasUsed: 'Option<U256>',
        contractAddress: 'Option<EthAddress>',
        logs: 'Vec<EthLog>',
        root: 'Option<H256>',
        logsBloom: 'EthBloom',
        statusCode: 'Option<U64>'
    },
    // not convinced, however the original commit matches, so... (maybe V3 is incorrect?)
    EthReceiptV0: 'EthReceipt',
    EthReceiptV3: 'EthReceipt',
    EthStorageProof: {
        key: 'U256',
        value: 'U256',
        proof: 'Vec<Bytes>'
    },
    EthSubKind: {
        _enum: ['newHeads', 'logs', 'newPendingTransactions', 'syncing']
    },
    EthSubParams: {
        _enum: {
            None: 'Null',
            Logs: 'EthFilter'
        }
    },
    EthSubResult: {
        _enum: {
            Header: 'EthRichHeader',
            Log: 'EthLog',
            TransactionHash: 'H256',
            SyncState: 'EthSyncStatus'
        }
    },
    EthSyncInfo: {
        startingBlock: 'U256',
        currentBlock: 'U256',
        highestBlock: 'U256',
        warpChunksAmount: 'Option<U256>',
        warpChunksProcessed: 'Option<U256>'
    },
    EthSyncStatus: {
        _enum: {
            Info: 'EthSyncInfo',
            None: 'Null'
        }
    },
    EthTransaction: {
        hash: 'H256',
        nonce: 'U256',
        blockHash: 'Option<H256>',
        blockNumber: 'Option<U256>',
        transactionIndex: 'Option<U256>',
        from: 'H160',
        to: 'Option<H160>',
        value: 'U256',
        gasPrice: 'Option<U256>',
        maxFeePerGas: 'Option<U256>',
        maxPriorityFeePerGas: 'Option<U256>',
        gas: 'U256',
        input: 'Bytes',
        creates: 'Option<H160>',
        raw: 'Bytes',
        publicKey: 'Option<H512>',
        chainId: 'Option<U64>',
        standardV: 'U256',
        v: 'U256',
        r: 'U256',
        s: 'U256',
        accessList: 'Option<Vec<EthAccessListItem>>',
        transactionType: 'Option<U256>'
    },
    EthTransactionSignature: {
        v: 'u64',
        r: 'H256',
        s: 'H256'
    },
    EthTransactionAction: {
        _enum: {
            Call: 'H160',
            Create: 'Null'
        }
    },
    EthTransactionCondition: {
        _enum: {
            block: 'u64',
            time: 'u64'
        }
    },
    EthTransactionRequest: {
        from: 'Option<EthAddress>',
        to: 'Option<EthAddress>',
        gasPrice: 'Option<U256>',
        gas: 'Option<U256>',
        value: 'Option<U256>',
        data: 'Option<Bytes>',
        nonce: 'Option<U256>'
    },
    EthTransactionStatus: {
        transactionHash: 'H256',
        transactionIndex: 'u32',
        from: 'EthAddress',
        to: 'Option<EthAddress>',
        contractAddress: 'Option<EthAddress>',
        logs: 'Vec<EthLog>',
        logsBloom: 'EthBloom'
    },
    EthWork: {
        powHash: 'H256',
        seedHash: 'H256',
        target: 'H256',
        number: 'Option<u64>'
    }
};
/* harmony default export */ const eth_definitions = ({ rpc: eth_rpc_rpc, runtime: eth_runtime_runtime, types });

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/nimbus/runtime.js
const nimbus_runtime_runtime = {
    // deprecated, the NimbusApi is current - this is for backwards compat
    AuthorFilterAPI: [
        {
            methods: {
                can_author: {
                    description: 'The runtime api used to predict whether an author will be eligible in the given slot',
                    params: [
                        {
                            name: 'author',
                            type: 'AccountId'
                        },
                        {
                            name: 'relayParent',
                            type: 'u32'
                        },
                        {
                            name: 'parentHeader',
                            type: 'Header'
                        }
                    ],
                    type: 'bool'
                }
            },
            version: 2
        },
        {
            methods: {
                can_author: {
                    description: 'The runtime api used to predict whether an author will be eligible in the given slot',
                    params: [
                        {
                            name: 'author',
                            type: 'AccountId'
                        },
                        {
                            name: 'relayParent',
                            type: 'u32'
                        }
                    ],
                    type: 'bool'
                }
            },
            version: 1
        }
    ],
    NimbusApi: [
        {
            methods: {
                can_author: {
                    description: 'The runtime api used to predict whether a Nimbus author will be eligible in the given slot',
                    params: [
                        {
                            name: 'author',
                            type: 'AccountId'
                        },
                        {
                            name: 'relayParent',
                            type: 'u32'
                        },
                        {
                            name: 'parentHeader',
                            type: 'Header'
                        }
                    ],
                    type: 'bool'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/nimbus/definitions.js

/* harmony default export */ const nimbus_definitions = ({
    rpc: {},
    runtime: nimbus_runtime_runtime,
    types: {}
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/ormlOracle/runtime.js
const ormlOracle_runtime_runtime = {
    // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/oracle/rpc/runtime-api/src/lib.rs#L12-L21
    OracleApi: [
        {
            methods: {
                get_all_values: {
                    description: 'Retrieves all values',
                    params: [
                        {
                            name: 'providerId',
                            // This is a Codec type
                            type: 'Raw'
                        }
                    ],
                    // This won't actually work as expected - since we have
                    // no information about the actual Raw sizes, we cannot
                    // handle it in this format (it would need an override
                    // for the specific Codec). So return the Raw value.
                    // type: 'Vec<(Raw, Option<Raw>)>'
                    type: 'Raw'
                },
                get_value: {
                    description: 'Retrieves a single value',
                    params: [
                        {
                            name: 'providerId',
                            // This is a Codec type
                            type: 'Raw'
                        },
                        {
                            name: 'key',
                            // This is a Codec type
                            type: 'Raw'
                        }
                    ],
                    // This is an Option<Codec> type
                    type: 'Option<Raw>'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/ormlOracle/definitions.js

/* harmony default export */ const ormlOracle_definitions = ({
    rpc: {},
    runtime: ormlOracle_runtime_runtime,
    types: {}
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/ormlTokens/runtime.js
const ormlTokens_runtime_runtime = {
    // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/tokens/rpc/runtime-api/src/lib.rs#L11-L18
    TokensApi: [
        {
            methods: {
                query_existential_deposit: {
                    description: 'Query the existential amount for a specific currency',
                    params: [
                        {
                            name: 'currencyId',
                            // This is CurrencyId, as per the return value, we are unsure
                            // if this is specialized and/or global to the chain or not
                            type: 'Raw'
                        }
                    ],
                    // This is Balance - since we don't understand enough about the way
                    // in which this is used, we default to u128 here (it certainly could
                    // be a specialized type that doesn't map to the on-chain Balance)
                    type: 'u128'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/ormlTokens/definitions.js

/* harmony default export */ const ormlTokens_definitions = ({
    rpc: {},
    runtime: ormlTokens_runtime_runtime,
    types: {}
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/rpc/rpc.js
const rpc_rpc_rpc = {
    methods: {
        description: 'Retrieves the list of RPC methods that are exposed by the node',
        params: [],
        type: 'RpcMethods'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/rpc/definitions.js

/* harmony default export */ const rpc_definitions = ({
    rpc: rpc_rpc_rpc,
    types: {
        RpcMethods: {
            version: 'u32',
            methods: 'Vec<Text>'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/author/rpc.js
const author_rpc_rpc = {
    hasKey: {
        description: 'Returns true if the keystore has private keys for the given public key and key type.',
        isUnsafe: true,
        params: [
            {
                name: 'publicKey',
                type: 'Bytes'
            },
            {
                name: 'keyType',
                type: 'Text'
            }
        ],
        type: 'bool'
    },
    hasSessionKeys: {
        description: 'Returns true if the keystore has private keys for the given session public keys.',
        isUnsafe: true,
        params: [
            {
                name: 'sessionKeys',
                type: 'Bytes'
            }
        ],
        type: 'bool'
    },
    insertKey: {
        description: 'Insert a key into the keystore.',
        isUnsafe: true,
        params: [
            {
                name: 'keyType',
                type: 'Text'
            },
            {
                name: 'suri',
                type: 'Text'
            },
            {
                name: 'publicKey',
                type: 'Bytes'
            }
        ],
        type: 'Bytes'
    },
    pendingExtrinsics: {
        description: 'Returns all pending extrinsics, potentially grouped by sender',
        params: [],
        type: 'Vec<Extrinsic>'
    },
    removeExtrinsic: {
        description: 'Remove given extrinsic from the pool and temporarily ban it to prevent reimporting',
        isUnsafe: true,
        params: [
            {
                name: 'bytesOrHash',
                type: 'Vec<ExtrinsicOrHash>'
            }
        ],
        type: 'Vec<Hash>'
    },
    rotateKeys: {
        description: 'Generate new session keys and returns the corresponding public keys',
        isUnsafe: true,
        params: [],
        type: 'Bytes'
    },
    submitAndWatchExtrinsic: {
        description: 'Submit and subscribe to watch an extrinsic until unsubscribed',
        isSigned: true,
        params: [
            {
                name: 'extrinsic',
                type: 'Extrinsic'
            }
        ],
        pubsub: [
            'extrinsicUpdate',
            'submitAndWatchExtrinsic',
            'unwatchExtrinsic'
        ],
        type: 'ExtrinsicStatus'
    },
    submitExtrinsic: {
        description: 'Submit a fully formatted extrinsic for block inclusion',
        isSigned: true,
        params: [
            {
                name: 'extrinsic',
                type: 'Extrinsic'
            }
        ],
        type: 'Hash'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/author/definitions.js

/* harmony default export */ const author_definitions = ({
    rpc: author_rpc_rpc,
    types: {
        ExtrinsicOrHash: {
            _enum: {
                Hash: 'Hash',
                Extrinsic: 'Bytes'
            }
        },
        ExtrinsicStatus: {
            _enum: {
                Future: 'Null',
                Ready: 'Null',
                Broadcast: 'Vec<Text>',
                InBlock: 'Hash',
                Retracted: 'Hash',
                FinalityTimeout: 'Hash',
                Finalized: 'Hash',
                Usurped: 'Hash',
                Dropped: 'Null',
                Invalid: 'Null'
            }
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/chain/rpc.js
const chain_rpc_rpc = {
    getBlock: {
        description: 'Get header and body of a relay chain block',
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: 'hash',
                type: 'BlockHash'
            }
        ],
        type: 'SignedBlock'
    },
    getBlockHash: {
        description: 'Get the block hash for a specific block',
        params: [
            {
                isOptional: true,
                name: 'blockNumber',
                type: 'BlockNumber'
            }
        ],
        type: 'BlockHash'
    },
    getFinalizedHead: {
        alias: ['chain_getFinalisedHead'],
        description: 'Get hash of the last finalized block in the canon chain',
        params: [],
        type: 'BlockHash'
    },
    getHeader: {
        alias: ['chain_getHead'],
        description: 'Retrieves the header for a specific block',
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: 'hash',
                type: 'BlockHash'
            }
        ],
        type: 'Header'
    },
    subscribeAllHeads: {
        description: 'Retrieves the newest header via subscription',
        params: [],
        pubsub: [
            'allHead',
            'subscribeAllHeads',
            'unsubscribeAllHeads'
        ],
        type: 'Header'
    },
    subscribeFinalizedHeads: {
        alias: ['chain_subscribeFinalisedHeads', 'chain_unsubscribeFinalisedHeads'],
        description: 'Retrieves the best finalized header via subscription',
        params: [],
        pubsub: [
            'finalizedHead',
            'subscribeFinalizedHeads',
            'unsubscribeFinalizedHeads'
        ],
        type: 'Header'
    },
    subscribeNewHeads: {
        alias: ['chain_unsubscribeNewHeads', 'subscribe_newHead', 'unsubscribe_newHead'],
        description: 'Retrieves the best header via subscription',
        params: [],
        // NOTE These still has the aliassed version, compatible with 1.x
        pubsub: [
            'newHead',
            'subscribeNewHead',
            'unsubscribeNewHead'
        ],
        type: 'Header'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/chain/definitions.js

/* harmony default export */ const chain_definitions = ({
    rpc: chain_rpc_rpc,
    types: {
        BlockHash: 'Hash'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/childstate/rpc.js
const childstate_rpc_rpc = {
    getKeys: {
        description: 'Returns the keys with prefix from a child storage, leave empty to get all the keys',
        params: [
            {
                name: 'childKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'prefix',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Vec<StorageKey>'
    },
    getKeysPaged: {
        alias: ['childstate_getKeysPagedAt'],
        description: 'Returns the keys with prefix from a child storage with pagination support',
        params: [
            {
                name: 'childKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'prefix',
                type: 'StorageKey'
            },
            {
                name: 'count',
                type: 'u32'
            },
            {
                isOptional: true,
                name: 'startKey',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Vec<StorageKey>'
    },
    getStorage: {
        description: 'Returns a child storage entry at a specific block state',
        params: [
            {
                name: 'childKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Option<StorageData>'
    },
    getStorageEntries: {
        description: 'Returns child storage entries for multiple keys at a specific block state',
        params: [
            {
                name: 'childKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'keys',
                type: 'Vec<StorageKey>'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Vec<Option<StorageData>>'
    },
    getStorageHash: {
        description: 'Returns the hash of a child storage entry at a block state',
        params: [
            {
                name: 'childKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Option<Hash>'
    },
    getStorageSize: {
        description: 'Returns the size of a child storage entry at a block state',
        params: [
            {
                name: 'childKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'Hash'
            }
        ],
        type: 'Option<u64>'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/childstate/definitions.js

/* harmony default export */ const childstate_definitions = ({
    rpc: childstate_rpc_rpc,
    types: {
        // StorageKey extends Bytes
        PrefixedStorageKey: 'StorageKey'
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/offchain/rpc.js
const offchain_rpc_rpc = {
    localStorageGet: {
        description: 'Get offchain local storage under given key and prefix',
        isUnsafe: true,
        params: [
            {
                name: 'kind',
                type: 'StorageKind'
            },
            {
                name: 'key',
                type: 'Bytes'
            }
        ],
        type: 'Option<Bytes>'
    },
    localStorageSet: {
        description: 'Set offchain local storage under given key and prefix',
        isUnsafe: true,
        params: [
            {
                name: 'kind',
                type: 'StorageKind'
            },
            {
                name: 'key',
                type: 'Bytes'
            },
            {
                name: 'value',
                type: 'Bytes'
            }
        ],
        type: 'Null'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/offchain/runtime.js
const offchain_runtime_runtime = {
    OffchainWorkerApi: [
        {
            methods: {
                offchain_worker: {
                    description: 'Starts the off-chain task for given block header.',
                    params: [
                        {
                            name: 'header',
                            type: 'Header'
                        }
                    ],
                    type: 'Null'
                }
            },
            version: 2
        },
        {
            methods: {
                offchain_worker: {
                    description: 'Starts the off-chain task for given block header.',
                    params: [
                        {
                            name: 'number',
                            type: 'BlockNumber'
                        }
                    ],
                    type: 'Null'
                }
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/offchain/definitions.js


/* harmony default export */ const offchain_definitions = ({
    rpc: offchain_rpc_rpc,
    runtime: offchain_runtime_runtime,
    types: {
        StorageKind: {
            _enum: {
                PERSISTENT: 1,
                LOCAL: 2
            }
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/payment/rpc.js
const payment_rpc_rpc = {
    queryFeeDetails: {
        // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
        deprecated: 'Use `api.call.transactionPaymentApi.queryFeeDetails` instead',
        description: 'Query the detailed fee of a given encoded extrinsic',
        params: [
            {
                name: 'extrinsic',
                type: 'Bytes'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'FeeDetails'
    },
    queryInfo: {
        // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
        deprecated: 'Use `api.call.transactionPaymentApi.queryInfo` instead',
        description: 'Retrieves the fee information for an encoded extrinsic',
        params: [
            {
                name: 'extrinsic',
                type: 'Bytes'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        // NOTE: Stuck on V1 forever (at least for the time being)
        type: 'RuntimeDispatchInfoV1'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/payment/runtime.js
const V1_TO_V4_SHARED_PAY = {
    query_fee_details: {
        description: 'The transaction fee details',
        params: [
            {
                name: 'uxt',
                type: 'Extrinsic'
            },
            {
                name: 'len',
                type: 'u32'
            }
        ],
        type: 'FeeDetails'
    }
};
const V1_TO_V3_SHARED_CALL = {
    query_call_fee_details: {
        description: 'The call fee details',
        params: [
            {
                name: 'call',
                type: 'Call'
            },
            {
                name: 'len',
                type: 'u32'
            }
        ],
        type: 'FeeDetails'
    }
};
const V2_TO_V4_SHARED_PAY = {
    query_info: {
        description: 'The transaction info',
        params: [
            {
                name: 'uxt',
                type: 'Extrinsic'
            },
            {
                name: 'len',
                type: 'u32'
            }
        ],
        type: 'RuntimeDispatchInfo'
    }
};
const V2_V3_SHARED_CALL = {
    query_call_info: {
        description: 'The call info',
        params: [
            {
                name: 'call',
                type: 'Call'
            },
            {
                name: 'len',
                type: 'u32'
            }
        ],
        type: 'RuntimeDispatchInfo'
    }
};
const V3_SHARED_PAY_CALL = {
    query_length_to_fee: {
        description: 'Query the output of the current LengthToFee given some input',
        params: [
            {
                name: 'length',
                type: 'u32'
            }
        ],
        type: 'Balance'
    },
    query_weight_to_fee: {
        description: 'Query the output of the current WeightToFee given some input',
        params: [
            {
                name: 'weight',
                type: 'Weight'
            }
        ],
        type: 'Balance'
    }
};
const payment_runtime_runtime = {
    TransactionPaymentApi: [
        {
            // V4 is equivalent to V3 (V4 just dropped all V1 references)
            methods: {
                ...V3_SHARED_PAY_CALL,
                ...V2_TO_V4_SHARED_PAY,
                ...V1_TO_V4_SHARED_PAY
            },
            version: 4
        },
        {
            methods: {
                ...V3_SHARED_PAY_CALL,
                ...V2_TO_V4_SHARED_PAY,
                ...V1_TO_V4_SHARED_PAY
            },
            version: 3
        },
        {
            methods: {
                ...V2_TO_V4_SHARED_PAY,
                ...V1_TO_V4_SHARED_PAY
            },
            version: 2
        },
        {
            methods: {
                query_info: {
                    description: 'The transaction info',
                    params: [
                        {
                            name: 'uxt',
                            type: 'Extrinsic'
                        },
                        {
                            name: 'len',
                            type: 'u32'
                        }
                    ],
                    // NOTE: _Should_ be V1 (as per current Substrate), however the interface was
                    // changed mid-flight between versions. So we have some of each depending on
                    // runtime. (We do detect the weight type, so correct)
                    type: 'RuntimeDispatchInfo'
                },
                ...V1_TO_V4_SHARED_PAY
            },
            version: 1
        }
    ],
    TransactionPaymentCallApi: [
        {
            methods: {
                ...V3_SHARED_PAY_CALL,
                ...V2_V3_SHARED_CALL,
                ...V1_TO_V3_SHARED_CALL
            },
            version: 3
        },
        {
            methods: {
                ...V2_V3_SHARED_CALL,
                ...V1_TO_V3_SHARED_CALL
            },
            version: 2
        },
        {
            methods: {
                CALL: {
                    description: 'The call info',
                    params: [
                        {
                            name: 'call',
                            type: 'Call'
                        },
                        {
                            name: 'len',
                            type: 'u32'
                        }
                    ],
                    // NOTE: As per the above comment, the below is correct according to Substrate, but
                    // _may_ yield fallback decoding on some versions of the runtime
                    type: 'RuntimeDispatchInfo'
                },
                ...V1_TO_V3_SHARED_CALL
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/payment/definitions.js


/* harmony default export */ const payment_definitions = ({
    rpc: payment_rpc_rpc,
    runtime: payment_runtime_runtime,
    types: {
        FeeDetails: {
            inclusionFee: 'Option<InclusionFee>'
            // skipped in serde
            // tip: 'Balance'
        },
        InclusionFee: {
            baseFee: 'Balance',
            lenFee: 'Balance',
            adjustedWeightFee: 'Balance'
        },
        RuntimeDispatchInfo: {
            weight: 'Weight',
            class: 'DispatchClass',
            partialFee: 'Balance'
        },
        RuntimeDispatchInfoV1: {
            weight: 'WeightV1',
            class: 'DispatchClass',
            partialFee: 'Balance'
        },
        RuntimeDispatchInfoV2: {
            weight: 'WeightV2',
            class: 'DispatchClass',
            partialFee: 'Balance'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/state/rpc.js
const state_rpc_rpc = {
    call: {
        alias: ['state_callAt'],
        description: 'Perform a call to a builtin on the chain',
        params: [
            {
                name: 'method',
                type: 'Text'
            },
            {
                name: 'data',
                type: 'Bytes'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Bytes'
    },
    getChildKeys: {
        description: 'Retrieves the keys with prefix of a specific child storage',
        params: [
            {
                name: 'childStorageKey',
                type: 'StorageKey'
            },
            {
                name: 'childDefinition',
                type: 'StorageKey'
            },
            {
                name: 'childType',
                type: 'u32'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Vec<StorageKey>'
    },
    getChildReadProof: {
        description: 'Returns proof of storage for child key entries at a specific block state.',
        params: [
            {
                name: 'childStorageKey',
                type: 'PrefixedStorageKey'
            },
            {
                name: 'keys',
                type: 'Vec<StorageKey>'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'ReadProof'
    },
    getChildStorage: {
        description: 'Retrieves the child storage for a key',
        params: [
            {
                name: 'childStorageKey',
                type: 'StorageKey'
            },
            {
                name: 'childDefinition',
                type: 'StorageKey'
            },
            {
                name: 'childType',
                type: 'u32'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'StorageData'
    },
    getChildStorageHash: {
        description: 'Retrieves the child storage hash',
        params: [
            {
                name: 'childStorageKey',
                type: 'StorageKey'
            },
            {
                name: 'childDefinition',
                type: 'StorageKey'
            },
            {
                name: 'childType',
                type: 'u32'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Hash'
    },
    getChildStorageSize: {
        description: 'Retrieves the child storage size',
        params: [
            {
                name: 'childStorageKey',
                type: 'StorageKey'
            },
            {
                name: 'childDefinition',
                type: 'StorageKey'
            },
            {
                name: 'childType',
                type: 'u32'
            },
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'u64'
    },
    getKeys: {
        deprecated: 'Use `api.rpc.state.getKeysPaged` to retrieve keys',
        description: 'Retrieves the keys with a certain prefix',
        params: [
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Vec<StorageKey>'
    },
    getKeysPaged: {
        alias: ['state_getKeysPagedAt'],
        description: 'Returns the keys with prefix with pagination support.',
        params: [
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                name: 'count',
                type: 'u32'
            },
            {
                isOptional: true,
                name: 'startKey',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Vec<StorageKey>'
    },
    getMetadata: {
        description: 'Returns the runtime metadata',
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Metadata'
    },
    getPairs: {
        deprecated: 'Use `api.rpc.state.getKeysPaged` to retrieve keys',
        description: 'Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)',
        isUnsafe: true,
        params: [
            {
                name: 'prefix',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Vec<KeyValue>'
    },
    getReadProof: {
        description: 'Returns proof of storage entries at a specific block state',
        params: [
            {
                name: 'keys',
                type: 'Vec<StorageKey>'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'ReadProof'
    },
    getRuntimeVersion: {
        alias: ['chain_getRuntimeVersion'],
        description: 'Get the runtime version',
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'RuntimeVersion'
    },
    getStorage: {
        alias: ['state_getStorageAt'],
        description: 'Retrieves the storage for a key',
        params: [
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'StorageData'
    },
    getStorageHash: {
        alias: ['state_getStorageHashAt'],
        description: 'Retrieves the storage hash',
        params: [
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Hash'
    },
    getStorageSize: {
        alias: ['state_getStorageSizeAt'],
        description: 'Retrieves the storage size',
        params: [
            {
                name: 'key',
                type: 'StorageKey'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'u64'
    },
    queryStorage: {
        description: 'Query historical storage entries (by key) starting from a start block',
        isUnsafe: true,
        params: [
            {
                name: 'keys',
                type: 'Vec<StorageKey>'
            },
            {
                name: 'fromBlock',
                type: 'Hash'
            },
            {
                isOptional: true,
                name: 'toBlock',
                type: 'BlockHash'
            }
        ],
        type: 'Vec<StorageChangeSet>'
    },
    queryStorageAt: {
        description: 'Query storage entries (by key) starting at block hash given as the second parameter',
        params: [
            {
                name: 'keys',
                type: 'Vec<StorageKey>'
            },
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'Vec<StorageChangeSet>'
    },
    subscribeRuntimeVersion: {
        alias: ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'],
        description: 'Retrieves the runtime version via subscription',
        params: [],
        pubsub: [
            'runtimeVersion',
            'subscribeRuntimeVersion',
            'unsubscribeRuntimeVersion'
        ],
        type: 'RuntimeVersion'
    },
    subscribeStorage: {
        description: 'Subscribes to storage changes for the provided keys',
        // NOTE Just marking it here to follow the logic - this is unsafe when no
        // keys are provided (i.e. subscribing to all), generally this is used
        // extensively with normal subscriptions
        // isUnsafe: true,
        params: [
            {
                isOptional: true,
                name: 'keys',
                type: 'Vec<StorageKey>'
            }
        ],
        pubsub: [
            'storage',
            'subscribeStorage',
            'unsubscribeStorage'
        ],
        type: 'StorageChangeSet'
    },
    traceBlock: {
        description: 'Provides a way to trace the re-execution of a single block',
        isUnsafe: true,
        params: [
            {
                name: 'block',
                type: 'Hash'
            },
            {
                name: 'targets',
                type: 'Option<Text>'
            },
            {
                name: 'storageKeys',
                type: 'Option<Text>'
            },
            {
                name: 'methods',
                type: 'Option<Text>'
            }
        ],
        type: 'TraceBlockResponse'
    },
    trieMigrationStatus: {
        description: 'Check current migration state',
        isUnsafe: true,
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: 'at',
                type: 'BlockHash'
            }
        ],
        type: 'MigrationStatusResult'
    }
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/state/definitions.js

/* harmony default export */ const state_definitions = ({
    rpc: state_rpc_rpc,
    types: {
        ApiId: '[u8; 8]',
        BlockTrace: {
            blockHash: 'Text',
            parentHash: 'Text',
            tracingTargets: 'Text',
            storageKeys: 'Text',
            spans: 'Vec<BlockTraceSpan>',
            events: 'Vec<BlockTraceEvent>'
        },
        BlockTraceEvent: {
            target: 'Text',
            data: 'BlockTraceEventData',
            parentId: 'Option<u64>'
        },
        BlockTraceEventData: {
            stringValues: 'HashMap<Text, Text>'
        },
        BlockTraceSpan: {
            id: 'u64',
            parentId: 'Option<u64>',
            name: 'Text',
            target: 'Text',
            wasm: 'bool'
        },
        KeyValueOption: '(StorageKey, Option<StorageData>)',
        MigrationStatusResult: {
            topRemainingToMigrate: 'u64',
            childRemainingToMigrate: 'u64'
        },
        ReadProof: {
            at: 'Hash',
            proof: 'Vec<Bytes>'
        },
        RuntimeVersionApi: '(ApiId, u32)',
        RuntimeVersion: {
            specName: 'Text',
            implName: 'Text',
            authoringVersion: 'u32',
            specVersion: 'u32',
            implVersion: 'u32',
            apis: 'Vec<RuntimeVersionApi>',
            transactionVersion: 'u32',
            stateVersion: 'u8'
        },
        RuntimeVersionPre4: {
            specName: 'Text',
            implName: 'Text',
            authoringVersion: 'u32',
            specVersion: 'u32',
            implVersion: 'u32',
            apis: 'Vec<RuntimeVersionApi>',
            transactionVersion: 'u32'
        },
        RuntimeVersionPre3: {
            specName: 'Text',
            implName: 'Text',
            authoringVersion: 'u32',
            specVersion: 'u32',
            implVersion: 'u32',
            apis: 'Vec<RuntimeVersionApi>'
        },
        RuntimeVersionPartial: {
            specName: 'Text',
            specVersion: 'u32',
            apis: 'Vec<RuntimeVersionApi>'
        },
        SpecVersion: 'u32',
        StorageChangeSet: {
            block: 'Hash',
            changes: 'Vec<KeyValueOption>'
        },
        TraceBlockResponse: {
            _enum: {
                TraceError: 'TraceError',
                BlockTrace: 'BlockTrace'
            }
        },
        TraceError: {
            error: 'Text'
        }
    }
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/definitions.js







































































/***/ }),

/***/ 28275:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53472);
/* harmony import */ var _definitions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(87997);


const jsonrpc = {};
Object.keys(_definitions_js__WEBPACK_IMPORTED_MODULE_0__).forEach((s) => Object.entries(_definitions_js__WEBPACK_IMPORTED_MODULE_0__[s].rpc || {}).forEach(([method, def]) => {
    // allow for section overrides
    const section = def.aliasSection || s;
    if (!jsonrpc[section]) {
        jsonrpc[section] = {};
    }
    jsonrpc[section][method] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .objectSpread */ .Z)({}, def, {
        isSubscription: !!def.pubsub,
        jsonrpc: `${section}_${method}`,
        method,
        section
    });
}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (jsonrpc);


/***/ }),

/***/ 21657:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Z: () => (/* binding */ definitions),
  J: () => (/* binding */ knownOrigins)
});

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/runtime/runtime.js
const CORE_V1_TO_V4 = {
    execute_block: {
        description: 'Execute the given block.',
        params: [
            {
                name: 'block',
                type: 'Block'
            }
        ],
        type: 'Null'
    }
};
const CORE_V1_TO_V2 = {
    version: {
        description: 'Returns the version of the runtime.',
        params: [],
        type: 'RuntimeVersionPre3'
    }
};
const CORE_V2_TO_V4 = {
    initialize_block: {
        description: 'Initialize a block with the given header.',
        params: [
            {
                name: 'header',
                type: 'Header'
            }
        ],
        type: 'Null'
    }
};
const runtime = {
    Core: [
        {
            methods: {
                version: {
                    description: 'Returns the version of the runtime.',
                    params: [],
                    type: 'RuntimeVersion'
                },
                ...CORE_V1_TO_V4,
                ...CORE_V2_TO_V4
            },
            version: 4
        },
        {
            methods: {
                version: {
                    description: 'Returns the version of the runtime.',
                    params: [],
                    type: 'RuntimeVersionPre4'
                },
                ...CORE_V1_TO_V4,
                ...CORE_V2_TO_V4
            },
            version: 3
        },
        {
            methods: {
                ...CORE_V1_TO_V2,
                ...CORE_V1_TO_V4,
                ...CORE_V2_TO_V4
            },
            version: 2
        },
        {
            methods: {
                initialise_block: {
                    description: 'Initialize a block with the given header.',
                    params: [
                        {
                            name: 'header',
                            type: 'Header'
                        }
                    ],
                    type: 'Null'
                },
                ...CORE_V1_TO_V2,
                ...CORE_V1_TO_V4
            },
            version: 1
        }
    ]
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/runtime/definitions.js

const numberTypes = {
    Fixed64: 'Int<64, Fixed64>',
    FixedI64: 'Int<64, FixedI64>',
    FixedU64: 'UInt<64, FixedU64>',
    Fixed128: 'Int<128, Fixed128>',
    FixedI128: 'Int<128, FixedI128>',
    FixedU128: 'UInt<128, FixedU128>',
    I32F32: 'Int<64, I32F32>',
    U32F32: 'UInt<64, U32F32>',
    PerU16: 'UInt<16, PerU16>',
    Perbill: 'UInt<32, Perbill>',
    Percent: 'UInt<8, Percent>',
    Permill: 'UInt<32, Permill>',
    Perquintill: 'UInt<64, Perquintill>'
};
const knownOrigins = {
    //
    // (1) Defaults from Substrate
    //
    Council: 'CollectiveOrigin',
    System: 'SystemOrigin',
    TechnicalCommittee: 'CollectiveOrigin',
    //
    // (2) Defaults from Polkadot
    //
    Xcm: 'XcmOrigin',
    XcmPallet: 'XcmOrigin',
    //
    // (3) Defaults from Acala
    //
    Authority: 'AuthorityOrigin',
    GeneralCouncil: 'CollectiveOrigin'
};
/* harmony default export */ const definitions = ({
    rpc: {},
    runtime: runtime,
    types: {
        ...numberTypes,
        AccountId: 'AccountId32',
        AccountId20: 'GenericEthereumAccountId',
        AccountId32: 'GenericAccountId32',
        AccountId33: 'GenericAccountId33',
        AccountIdOf: 'AccountId',
        AccountIndex: 'GenericAccountIndex',
        Address: 'MultiAddress',
        AssetId: 'u32',
        Balance: 'UInt<128, Balance>',
        BalanceOf: 'Balance',
        Block: 'GenericBlock',
        BlockNumber: 'u32',
        BlockNumberFor: 'BlockNumber',
        BlockNumberOf: 'BlockNumber',
        Call: 'GenericCall',
        CallHash: 'Hash',
        CallHashOf: 'CallHash',
        ChangesTrieConfiguration: {
            digestInterval: 'u32',
            digestLevels: 'u32'
        },
        ChangesTrieSignal: {
            _enum: {
                NewConfiguration: 'Option<ChangesTrieConfiguration>'
            }
        },
        ConsensusEngineId: 'GenericConsensusEngineId',
        CodecHash: 'Hash',
        CrateVersion: {
            major: 'u16',
            minor: 'u8',
            patch: 'u8'
        },
        Digest: {
            logs: 'Vec<DigestItem>'
        },
        DigestItem: {
            _enum: {
                Other: 'Bytes', // 0
                AuthoritiesChange: 'Vec<AuthorityId>', // 1
                ChangesTrieRoot: 'Hash', // 2
                SealV0: 'SealV0', // 3
                Consensus: 'Consensus', // 4
                Seal: 'Seal', // 5
                PreRuntime: 'PreRuntime', // 6
                ChangesTrieSignal: 'ChangesTrieSignal', // 7
                RuntimeEnvironmentUpdated: 'Null' // 8
            }
        },
        ExtrinsicsWeight: {
            normal: 'Weight',
            operational: 'Weight'
        },
        H32: '[u8; 4; H32]',
        H64: '[u8; 8; H64]',
        H128: '[u8; 16; H128]',
        H160: '[u8; 20; H160]',
        H256: '[u8; 32; H256]',
        H512: '[u8; 64; H512]',
        H1024: '[u8; 128; H1024]',
        H2048: '[u8; 256; H2048]',
        Hash: 'H256',
        Header: {
            parentHash: 'Hash',
            number: 'Compact<BlockNumber>',
            stateRoot: 'Hash',
            extrinsicsRoot: 'Hash',
            digest: 'Digest'
        },
        HeaderPartial: {
            parentHash: 'Hash',
            // since we only parse JSON with this, having non-compact works
            number: 'BlockNumber'
        },
        IndicesLookupSource: 'GenericLookupSource',
        Index: 'u32',
        Justification: '(ConsensusEngineId, EncodedJustification)',
        EncodedJustification: 'Bytes',
        Justifications: 'Vec<Justification>',
        KeyValue: '(StorageKey, StorageData)',
        KeyTypeId: 'u32',
        LockIdentifier: '[u8; 8]',
        LookupSource: 'MultiAddress',
        LookupTarget: 'AccountId',
        ModuleId: 'LockIdentifier',
        MultiAddress: 'GenericMultiAddress',
        MultiSigner: {
            _enum: {
                Ed25519: '[u8; 32]',
                Sr25519: '[u8; 32]',
                Ecdsa: '[u8; 33]'
            }
        },
        Moment: 'UInt<64, Moment>',
        OpaqueCall: 'Bytes',
        Origin: 'DoNotConstruct<Origin>',
        OriginCaller: {
            _enum: {
                // this should be dynamically built from the actual modules, based on index
                System: 'SystemOrigin'
            }
        },
        PalletId: 'LockIdentifier',
        PalletsOrigin: 'OriginCaller',
        PalletVersion: {
            major: 'u16',
            minor: 'u8',
            patch: 'u8'
        },
        Pays: {
            _enum: ['Yes', 'No']
        },
        Phantom: 'Null',
        PhantomData: 'Null',
        Releases: {
            _enum: ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
        },
        RuntimeCall: 'Call',
        RuntimeEvent: 'Event',
        RuntimeDbWeight: {
            read: 'Weight',
            write: 'Weight'
        },
        SignedBlock: 'SignedBlockWithJustifications',
        SignedBlockWithJustification: {
            block: 'Block',
            justification: 'Option<EncodedJustification>'
        },
        SignedBlockWithJustifications: {
            block: 'Block',
            justifications: 'Option<Justifications>'
        },
        Slot: 'u64',
        SlotDuration: 'u64',
        StorageData: 'Bytes',
        StorageInfo: {
            palletName: 'Bytes',
            storage_name: 'Bytes',
            prefix: 'Bytes',
            maxValues: 'Option<u32>',
            maxSize: 'Option<u32>'
        },
        StorageProof: {
            trieNodes: 'Vec<Bytes>'
        },
        TransactionPriority: 'u64',
        TransactionLongevity: 'u64',
        TransactionTag: 'Bytes',
        TransactionInfo: {
            _alias: {
                dataSize: 'size'
            },
            chunkRoot: 'H256',
            contentHash: 'H256',
            dataSize: 'u32',
            blockChunks: 'u32'
        },
        TransactionStorageProof: {
            chunk: 'Vec<u8>',
            proof: 'Vec<Vec<u8>>'
        },
        ValidatorId: 'AccountId',
        ValidatorIdOf: 'ValidatorId',
        WeightV0: 'u32',
        WeightV1: 'u64',
        WeightV2: {
            refTime: 'Compact<u64>',
            proofSize: 'Compact<u64>'
        },
        Weight: 'WeightV2',
        WeightMultiplier: 'Fixed64',
        // digest
        PreRuntime: '(ConsensusEngineId, Bytes)',
        SealV0: '(u64, Signature)',
        Seal: '(ConsensusEngineId, Bytes)',
        Consensus: '(ConsensusEngineId, Bytes)'
    }
});


/***/ }),

/***/ 50270:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   S: () => (/* binding */ Metadata)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42740);
/* harmony import */ var _MetadataVersioned_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(92538);


const EMPTY_METADATA = new Uint8Array([0x6d, 0x65, 0x74, 0x61, 9]);
const VERSION_IDX = EMPTY_METADATA.length - 1;
/** @internal */
function decodeU8a(registry, u8a) {
    if (u8a.length === 0) {
        return EMPTY_METADATA;
    }
    else if (u8a[VERSION_IDX] === 9) {
        // This is an f-ing hack as a follow-up to another ugly hack
        // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2
        // when we fail on V9, try to re-parse it as v10...
        try {
            return new _MetadataVersioned_js__WEBPACK_IMPORTED_MODULE_0__.MetadataVersioned(registry, u8a);
        }
        catch {
            u8a[VERSION_IDX] = 10;
        }
    }
    return u8a;
}
/**
 * @name Metadata
 * @description
 * The versioned runtime metadata as a decoded structure
 */
class Metadata extends _MetadataVersioned_js__WEBPACK_IMPORTED_MODULE_0__.MetadataVersioned {
    constructor(registry, value) {
        // const timeStart = performance.now()
        super(registry, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isU8a */ .U)(value) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .isString */ .H)(value)
            ? decodeU8a(registry, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .u8aToU8a */ .Y)(value))
            : value);
        // console.log('Metadata', `${(performance.now() - timeStart).toFixed(2)}ms`)
    }
}


/***/ }),

/***/ 92538:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  MetadataVersioned: () => (/* binding */ MetadataVersioned)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/native/Struct.js
var Struct = __webpack_require__(43330);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/object/spread.js
var spread = __webpack_require__(53472);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/util/toCallsOnly.js

function trimDocs(docs) {
    const strings = docs.map((d) => d.toString().trim());
    const firstEmpty = strings.findIndex((d) => !d.length);
    return firstEmpty === -1
        ? strings
        : strings.slice(0, firstEmpty);
}
/** @internal */
function toCallsOnly(registry, { extrinsic, lookup, pallets }) {
    return registry.createTypeUnsafe('MetadataLatest', [{
            extrinsic,
            lookup: {
                types: lookup.types.map(({ id, type }) => registry.createTypeUnsafe('PortableType', [{
                        id,
                        type: (0,spread/* objectSpread */.Z)({}, type, { docs: trimDocs(type.docs) })
                    }]))
            },
            pallets: pallets.map(({ calls, index, name }) => ({
                calls: registry.createTypeUnsafe('Option<PalletCallMetadataLatest>', [calls.unwrapOr(null)]),
                index,
                name
            }))
        }]).toJSON();
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/util/flattenUniq.js
/** @internal */
function flattenUniq(list, result = []) {
    for (let i = 0, count = list.length; i < count; i++) {
        const entry = list[i];
        if (Array.isArray(entry)) {
            flattenUniq(entry, result);
        }
        else {
            result.push(entry);
        }
    }
    return [...new Set(result)];
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/logger.js
var logger = __webpack_require__(63985);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-create@10.11.2/node_modules/@polkadot/types-create/types/types.js
var types = __webpack_require__(3754);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-create@10.11.2/node_modules/@polkadot/types-create/util/getTypeDef.js
var getTypeDef = __webpack_require__(60045);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/util/extractTypes.js

function extractSubSingle(_, { sub }) {
    const { lookupName, type } = sub;
    return extractTypes([lookupName || type]);
}
function extractSubArray(_, { sub }) {
    return extractTypes(sub.map(({ lookupName, type }) => lookupName || type));
}
function unhandled(type, { info }) {
    throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${types/* TypeDefInfo */.u[info]})`);
}
const mapping = {
    [types/* TypeDefInfo */.u.BTreeMap]: extractSubArray,
    [types/* TypeDefInfo */.u.BTreeSet]: extractSubSingle,
    [types/* TypeDefInfo */.u.Compact]: extractSubSingle,
    [types/* TypeDefInfo */.u.DoNotConstruct]: unhandled,
    [types/* TypeDefInfo */.u.Enum]: extractSubArray,
    [types/* TypeDefInfo */.u.HashMap]: extractSubArray,
    [types/* TypeDefInfo */.u.Int]: unhandled,
    [types/* TypeDefInfo */.u.Linkage]: extractSubSingle,
    [types/* TypeDefInfo */.u.Null]: unhandled,
    [types/* TypeDefInfo */.u.Option]: extractSubSingle,
    [types/* TypeDefInfo */.u.Plain]: (_, typeDef) => typeDef.lookupName || typeDef.type,
    [types/* TypeDefInfo */.u.Range]: extractSubSingle,
    [types/* TypeDefInfo */.u.RangeInclusive]: extractSubSingle,
    [types/* TypeDefInfo */.u.Result]: extractSubArray,
    [types/* TypeDefInfo */.u.Set]: extractSubArray,
    [types/* TypeDefInfo */.u.Si]: unhandled,
    [types/* TypeDefInfo */.u.Struct]: extractSubArray,
    [types/* TypeDefInfo */.u.Tuple]: extractSubArray,
    [types/* TypeDefInfo */.u.UInt]: unhandled,
    [types/* TypeDefInfo */.u.Vec]: extractSubSingle,
    [types/* TypeDefInfo */.u.VecFixed]: extractSubSingle,
    [types/* TypeDefInfo */.u.WrapperKeepOpaque]: extractSubSingle,
    [types/* TypeDefInfo */.u.WrapperOpaque]: extractSubSingle
};
/** @internal */
function extractTypes(types) {
    const count = types.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
        const type = types[i];
        const typeDef = (0,getTypeDef/* getTypeDef */.s)(type);
        result[i] = mapping[typeDef.info](type, typeDef);
    }
    return result;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/util/validateTypes.js



const l = (0,logger/* logger */.k)('metadata');
/** @internal */
function validateTypes(registry, throwError, types) {
    const missing = flattenUniq(extractTypes(types))
        .filter((type) => !registry.hasType(type) &&
        !registry.isLookupType(type))
        .sort();
    if (missing.length !== 0) {
        const message = `Unknown types found, no types for ${missing.join(', ')}`;
        if (throwError) {
            throw new Error(message);
        }
        else {
            l.warn(message);
        }
    }
    return types;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/util/getUniqTypes.js


/** @internal */
function getUniqTypes_extractTypes(lookup, types) {
    return types.map(({ type }) => lookup.getTypeDef(type).type);
}
/** @internal */
function extractFieldTypes(lookup, type) {
    return lookup.getSiType(type).def.asVariant.variants.map(({ fields }) => getUniqTypes_extractTypes(lookup, fields));
}
/** @internal */
function getPalletNames({ lookup, pallets }) {
    return pallets.reduce((all, { calls, constants, events, storage }) => {
        all.push([getUniqTypes_extractTypes(lookup, constants)]);
        if (calls.isSome) {
            all.push(extractFieldTypes(lookup, calls.unwrap().type));
        }
        if (events.isSome) {
            all.push(extractFieldTypes(lookup, events.unwrap().type));
        }
        if (storage.isSome) {
            all.push(storage.unwrap().items.map(({ type }) => {
                if (type.isPlain) {
                    return [lookup.getTypeDef(type.asPlain).type];
                }
                const { hashers, key, value } = type.asMap;
                return hashers.length === 1
                    ? [
                        lookup.getTypeDef(value).type,
                        lookup.getTypeDef(key).type
                    ]
                    : [
                        lookup.getTypeDef(value).type,
                        ...lookup.getSiType(key).def.asTuple.map((t) => lookup.getTypeDef(t).type)
                    ];
            }));
        }
        return all;
    }, []);
}
/** @internal */
function getUniqTypes(registry, meta, throwError) {
    return validateTypes(registry, throwError, flattenUniq(getPalletNames(meta)));
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/v9/toV10.js

/** @internal */
function createStorageHasher(registry, hasher) {
    // Blake2_128_Concat has been added at index 2, so we increment all the
    // indexes greater than 2
    if (hasher.toNumber() >= 2) {
        return registry.createTypeUnsafe('StorageHasherV10', [hasher.toNumber() + 1]);
    }
    return registry.createTypeUnsafe('StorageHasherV10', [hasher]);
}
/** @internal */
function createStorageType(registry, entryType) {
    if (entryType.isMap) {
        return [(0,spread/* objectSpread */.Z)({}, entryType.asMap, {
                hasher: createStorageHasher(registry, entryType.asMap.hasher)
            }), 1];
    }
    if (entryType.isDoubleMap) {
        return [(0,spread/* objectSpread */.Z)({}, entryType.asDoubleMap, {
                hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
                key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
            }), 2];
    }
    return [entryType.asPlain, 0];
}
/** @internal */
function convertModule(registry, mod) {
    const storage = mod.storage.unwrapOr(null);
    return registry.createTypeUnsafe('ModuleMetadataV10', [(0,spread/* objectSpread */.Z)({}, mod, {
            storage: storage
                ? (0,spread/* objectSpread */.Z)({}, storage, {
                    items: storage.items.map((item) => (0,spread/* objectSpread */.Z)({}, item, {
                        type: registry.createTypeUnsafe('StorageEntryTypeV10', createStorageType(registry, item.type))
                    }))
                })
                : null
        })]);
}
/** @internal */
function toV10(registry, { modules }) {
    return registry.createTypeUnsafe('MetadataV10', [{
            modules: modules.map((mod) => convertModule(registry, mod))
        }]);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/v10/toV11.js
/** @internal */
function toV11(registry, { modules }) {
    return registry.createTypeUnsafe('MetadataV11', [{
            // This is new in V11, pass V0 here - something non-existing, telling the API to use
            // the fallback for this information (on-chain detection)
            extrinsic: {
                signedExtensions: [],
                version: 0
            },
            modules
        }]);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/v11/toV12.js

/**
 * @internal
 **/
function toV12(registry, { extrinsic, modules }) {
    return registry.createTypeUnsafe('MetadataV12', [{
            extrinsic,
            modules: modules.map((mod) => registry.createTypeUnsafe('ModuleMetadataV12', [(0,spread/* objectSpread */.Z)({}, mod, { index: 255 })]))
        }]);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/v12/toV13.js
/**
 * @internal
 **/
function toV13(registry, v12) {
    return registry.createTypeUnsafe('MetadataV13', [v12]);
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/string/camelCase.js
var camelCase = __webpack_require__(36600);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/alias.js
const typesAlias = {
    assets: {
        Approval: 'AssetApproval',
        ApprovalKey: 'AssetApprovalKey',
        Balance: 'TAssetBalance',
        DestroyWitness: 'AssetDestroyWitness'
    },
    babe: {
        EquivocationProof: 'BabeEquivocationProof'
    },
    balances: {
        Status: 'BalanceStatus'
    },
    beefy: {
        AuthorityId: 'BeefyId'
    },
    contracts: {
        StorageKey: 'ContractStorageKey'
    },
    electionProviderMultiPhase: {
        Phase: 'ElectionPhase'
    },
    ethereum: {
        Block: 'EthBlock',
        Header: 'EthHeader',
        Receipt: 'EthReceipt',
        Transaction: 'EthTransaction',
        TransactionStatus: 'EthTransactionStatus'
    },
    evm: {
        Account: 'EvmAccount',
        Log: 'EvmLog',
        Vicinity: 'EvmVicinity'
    },
    grandpa: {
        Equivocation: 'GrandpaEquivocation',
        EquivocationProof: 'GrandpaEquivocationProof'
    },
    identity: {
        Judgement: 'IdentityJudgement'
    },
    inclusion: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    paraDisputes: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    paraInclusion: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    paraScheduler: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    paraShared: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    parachains: {
        Id: 'ParaId'
    },
    parasDisputes: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    parasInclusion: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    parasScheduler: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    parasShared: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    proposeParachain: {
        Proposal: 'ParachainProposal'
    },
    proxy: {
        Announcement: 'ProxyAnnouncement'
    },
    scheduler: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    shared: {
        ValidatorIndex: 'ParaValidatorIndex'
    },
    society: {
        Judgement: 'SocietyJudgement',
        Vote: 'SocietyVote'
    },
    staking: {
        Compact: 'CompactAssignments'
    },
    treasury: {
        Proposal: 'TreasuryProposal'
    },
    xcm: {
        AssetId: 'XcmAssetId'
    },
    xcmPallet: {
        AssetId: 'XcmAssetId'
    }
};
/**
 * @description Get types for specific modules (metadata override)
 */
function getAliasTypes({ knownTypes }, section) {
    return {
        ...(typesAlias[section] ?? {}),
        ...(knownTypes.typesAlias?.[section] ?? {})
    };
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/interfaces/runtime/definitions.js + 1 modules
var definitions = __webpack_require__(21657);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/v13/toV14.js



const BOXES = [['<', '>'], ['<', ','], [',', '>'], ['(', ')'], ['(', ','], [',', ','], [',', ')']];
/**
 * Creates a compatible type mapping
 * @internal
 **/
function compatType(specs, _type) {
    const type = _type.toString();
    const index = specs.findIndex(({ def }) => def.HistoricMetaCompat === type);
    if (index !== -1) {
        return index;
    }
    return specs.push({
        def: {
            HistoricMetaCompat: type
        }
    }) - 1;
}
function compatTypes(specs, ...types) {
    for (let i = 0, count = types.length; i < count; i++) {
        compatType(specs, types[i]);
    }
}
function makeTupleType(specs, entries) {
    return specs.push({
        def: {
            Tuple: entries
        }
    }) - 1;
}
function makeVariantType(modName, variantType, specs, variants) {
    return specs.push({
        def: {
            Variant: { variants }
        },
        path: [`pallet_${modName.toString()}`, 'pallet', variantType]
    }) - 1;
}
/**
 * @internal
 * generate & register the OriginCaller type
 **/
function registerOriginCaller(registry, modules, metaVersion) {
    registry.register({
        OriginCaller: {
            _enum: modules
                .map((mod, index) => [
                mod.name.toString(),
                metaVersion >= 12
                    ? mod.index.toNumber()
                    : index
            ])
                .sort((a, b) => a[1] - b[1])
                .reduce((result, [name, index]) => {
                for (let i = Object.keys(result).length; i < index; i++) {
                    result[`Empty${i}`] = 'Null';
                }
                result[name] = definitions/* knownOrigins */.J[name] || 'Null';
                return result;
            }, {})
        }
    });
}
/**
 * Find and apply the correct type override
 * @internal
 **/
function setTypeOverride(sectionTypes, types) {
    types.forEach((type) => {
        const override = Object.keys(sectionTypes).find((aliased) => type.eq(aliased));
        if (override) {
            type.setOverride(sectionTypes[override]);
        }
        else {
            // FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)
            const orig = type.toString();
            const alias = Object
                .entries(sectionTypes)
                .reduce((result, [src, dst]) => BOXES.reduce((result, [a, z]) => result.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);
            if (orig !== alias) {
                type.setOverride(alias);
            }
        }
    });
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 **/
function convertCalls(specs, registry, modName, calls, sectionTypes) {
    const variants = calls.map(({ args, docs, name }, index) => {
        setTypeOverride(sectionTypes, args.map(({ type }) => type));
        return registry.createTypeUnsafe('SiVariant', [{
                docs,
                fields: args.map(({ name, type }) => registry.createTypeUnsafe('SiField', [{ name, type: compatType(specs, type) }])),
                index,
                name
            }]);
    });
    return registry.createTypeUnsafe('PalletCallMetadataV14', [{
            type: makeVariantType(modName, 'Call', specs, variants)
        }]);
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 */
function convertConstants(specs, registry, constants, sectionTypes) {
    return constants.map(({ docs, name, type, value }) => {
        setTypeOverride(sectionTypes, [type]);
        return registry.createTypeUnsafe('PalletConstantMetadataV14', [{
                docs,
                name,
                type: compatType(specs, type),
                value
            }]);
    });
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 */
function convertErrors(specs, registry, modName, errors, _sectionTypes) {
    const variants = errors.map(({ docs, name }, index) => registry.createTypeUnsafe('SiVariant', [{
            docs,
            fields: [],
            index,
            name
        }]));
    return registry.createTypeUnsafe('PalletErrorMetadataV14', [{
            type: makeVariantType(modName, 'Error', specs, variants)
        }]);
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 **/
function convertEvents(specs, registry, modName, events, sectionTypes) {
    const variants = events.map(({ args, docs, name }, index) => {
        setTypeOverride(sectionTypes, args);
        return registry.createTypeUnsafe('SiVariant', [{
                docs,
                fields: args.map((t) => registry.createTypeUnsafe('SiField', [{ type: compatType(specs, t) }])),
                index,
                name
            }]);
    });
    return registry.createTypeUnsafe('PalletEventMetadataV14', [{
            type: makeVariantType(modName, 'Event', specs, variants)
        }]);
}
function createMapEntry(specs, registry, sectionTypes, { hashers, isLinked, isOptional, keys, value }) {
    setTypeOverride(sectionTypes, [value, ...(Array.isArray(keys) ? keys : [keys])]);
    return registry.createTypeUnsafe('StorageEntryTypeV14', [{
            Map: {
                hashers,
                key: hashers.length === 1
                    ? compatType(specs, keys[0])
                    : makeTupleType(specs, keys.map((t) => compatType(specs, t))),
                value: isLinked
                    // For previous-generation linked-map support, the actual storage result
                    // is a Tuple with the value and the Linkage (Option appears in teh value-part only)
                    ? compatType(specs, `(${isOptional ? `Option<${value.toString()}>` : value.toString()}, Linkage<${keys[0].toString()}>)`)
                    : compatType(specs, value)
            }
        }]);
}
/**
 * Apply module-specific storage type overrides (always part of toV14)
 * @internal
 **/
function convertStorage(specs, registry, { items, prefix }, sectionTypes) {
    return registry.createTypeUnsafe('PalletStorageMetadataV14', [{
            items: items.map(({ docs, fallback, modifier, name, type }) => {
                let entryType;
                if (type.isPlain) {
                    const plain = type.asPlain;
                    setTypeOverride(sectionTypes, [plain]);
                    entryType = registry.createTypeUnsafe('StorageEntryTypeV14', [{
                            Plain: compatType(specs, plain)
                        }]);
                }
                else if (type.isMap) {
                    const map = type.asMap;
                    entryType = createMapEntry(specs, registry, sectionTypes, {
                        hashers: [map.hasher],
                        isLinked: map.linked.isTrue,
                        isOptional: modifier.isOptional,
                        keys: [map.key],
                        value: map.value
                    });
                }
                else if (type.isDoubleMap) {
                    const dm = type.asDoubleMap;
                    entryType = createMapEntry(specs, registry, sectionTypes, {
                        hashers: [dm.hasher, dm.key2Hasher],
                        isLinked: false,
                        isOptional: modifier.isOptional,
                        keys: [dm.key1, dm.key2],
                        value: dm.value
                    });
                }
                else {
                    const nm = type.asNMap;
                    entryType = createMapEntry(specs, registry, sectionTypes, {
                        hashers: nm.hashers,
                        isLinked: false,
                        isOptional: modifier.isOptional,
                        keys: nm.keyVec,
                        value: nm.value
                    });
                }
                return registry.createTypeUnsafe('StorageEntryMetadataV14', [{
                        docs,
                        fallback,
                        modifier,
                        name,
                        type: entryType
                    }]);
            }),
            prefix
        }]);
}
/** @internal */
function convertExtrinsic(registry, { signedExtensions, version }) {
    return registry.createTypeUnsafe('ExtrinsicMetadataV14', [{
            signedExtensions: signedExtensions.map((identifier) => ({
                identifier,
                type: 0 // we don't map the fields at all
            })),
            type: 0, // Map to extrinsic like in v14?
            version
        }]);
}
/** @internal */
function createPallet(specs, registry, mod, { calls, constants, errors, events, storage }) {
    const sectionTypes = getAliasTypes(registry, (0,camelCase/* stringCamelCase */.yZ)(mod.name));
    return registry.createTypeUnsafe('PalletMetadataV14', [{
            calls: calls && convertCalls(specs, registry, mod.name, calls, sectionTypes),
            constants: convertConstants(specs, registry, constants, sectionTypes),
            errors: errors && convertErrors(specs, registry, mod.name, errors, sectionTypes),
            events: events && convertEvents(specs, registry, mod.name, events, sectionTypes),
            index: mod.index,
            name: mod.name,
            storage: storage && convertStorage(specs, registry, storage, sectionTypes)
        }]);
}
/**
 * Convert the Metadata to v14
 * @internal
 **/
function toV14(registry, v13, metaVersion) {
    const specs = [];
    // position 0 always has Null, additionally add internal defaults
    compatTypes(specs, 'Null', 'u8', 'u16', 'u32', 'u64');
    registerOriginCaller(registry, v13.modules, metaVersion);
    const extrinsic = convertExtrinsic(registry, v13.extrinsic);
    const pallets = v13.modules.map((mod) => createPallet(specs, registry, mod, {
        calls: mod.calls.unwrapOr(null),
        constants: mod.constants,
        errors: mod.errors.length ? mod.errors : null,
        events: mod.events.unwrapOr(null),
        storage: mod.storage.unwrapOr(null)
    }));
    return registry.createTypeUnsafe('MetadataV14', [{
            extrinsic,
            lookup: {
                types: specs.map((type, id) => registry.createTypeUnsafe('PortableType', [{ id, type }]))
            },
            pallets
        }]);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/v14/toV15.js

/**
 * Convert the Metadata to v15
 * @internal
 **/
function toV15(registry, v14, _) {
    // V15 is mostly equivalent to v14 however it does add
    //
    // 1. The top-level apis entry - it is assumed that in usage we would
    //    just check for all-empty (like this would construct)
    // 2. A docs param on the pallet itself
    // 3. Additional extrinsic parameters
    //
    // A straight conversion with createTypeUndafe magic fills in details
    // We need the UncheckedExtrinsic to extract the types, at least for v14
    // which does have these details embedded (previous-gen won't populate)
    const unchecked = v14.lookup.paramTypes.SpRuntimeUncheckedExtrinsic;
    return registry.createTypeUnsafe('MetadataV15', [
        (0,spread/* objectSpread */.Z)({}, v14, {
            extrinsic: registry.createTypeUnsafe('ExtrinsicMetadataV15', [
                (0,spread/* objectSpread */.Z)({}, v14.extrinsic, {
                    addressType: unchecked?.[0].type.unwrapOr(0),
                    callType: unchecked?.[1].type.unwrapOr(0),
                    extraType: unchecked?.[3].type.unwrapOr(0),
                    signatureType: unchecked?.[2].type.unwrapOr(0)
                })
            ]),
            outerEnums: registry.createTypeUnsafe('OuterEnums15', [{
                    // FIXME We need to extract & add the errorType in here
                    // (these doesn't seem to be an esay way to detect & extract it)
                    callType: unchecked?.[1].type.unwrapOr(0),
                    eventType: v14.lookup.paramTypes.FrameSystemEventRecord?.[0].type.unwrapOr(0)
                }])
        })
    ]);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/v15/toLatest.js
/**
 * Convert the Metadata (which is an alias) to latest
 * @internal
 **/
function toLatest(_registry, v15, _metaVersion) {
    return v15;
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/primitive/U32.js
var U32 = __webpack_require__(53488);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/MagicNumber.js

const MAGIC_NUMBER = 0x6174656d; // `meta`, reversed for Little Endian encoding
class MagicNumber extends U32/* u32 */.J {
    constructor(registry, value) {
        super(registry, value);
        if (!this.isEmpty && !this.eq(MAGIC_NUMBER)) {
            throw new Error(`MagicNumber mismatch: expected ${registry.createTypeUnsafe('u32', [MAGIC_NUMBER]).toHex()}, found ${this.toHex()}`);
        }
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/versions.js
const KNOWN_VERSIONS = [15, 14, 13, 12, 11, 10, 9];
const LATEST_VERSION = KNOWN_VERSIONS[0];
const TO_CALLS_VERSION = 14; // LATEST_VERSION;

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/MetadataVersioned.js











/**
 * @name MetadataVersioned
 * @description
 * The versioned runtime metadata as a decoded structure
 */
class MetadataVersioned extends Struct/* Struct */.A {
    __internal__converted = new Map();
    constructor(registry, value) {
        // const timeStart = performance.now()
        super(registry, {
            magicNumber: MagicNumber,
            metadata: 'MetadataAll'
        }, value);
        // console.log('MetadataVersioned', `${(performance.now() - timeStart).toFixed(2)}ms`)
    }
    __internal__assertVersion = (version) => {
        if (this.version > version) {
            throw new Error(`Cannot convert metadata from version ${this.version} to ${version}`);
        }
        return this.version === version;
    };
    __internal__getVersion = (version, fromPrev) => {
        if (version !== 'latest' && this.__internal__assertVersion(version)) {
            const asCurr = `asV${version}`;
            return this.__internal__metadata()[asCurr];
        }
        if (!this.__internal__converted.has(version)) {
            const asPrev = version === 'latest'
                ? `asV${LATEST_VERSION}`
                : `asV${(version - 1)}`;
            this.__internal__converted.set(version, fromPrev(this.registry, this[asPrev], this.version));
        }
        return this.__internal__converted.get(version);
    };
    /**
     * @description the metadata wrapped
     */
    __internal__metadata = () => {
        return this.getT('metadata');
    };
    /**
     * @description Returns the wrapped metadata as a limited calls-only (latest) version
     */
    get asCallsOnly() {
        return new MetadataVersioned(this.registry, {
            magicNumber: this.magicNumber,
            metadata: this.registry.createTypeUnsafe('MetadataAll', [toCallsOnly(this.registry, this.asLatest), TO_CALLS_VERSION])
        });
    }
    /**
     * @description Returns the wrapped metadata as a V9 object
     */
    get asV9() {
        this.__internal__assertVersion(9);
        return this.__internal__metadata().asV9;
    }
    /**
     * @description Returns the wrapped values as a V10 object
     */
    get asV10() {
        return this.__internal__getVersion(10, toV10);
    }
    /**
     * @description Returns the wrapped values as a V11 object
     */
    get asV11() {
        return this.__internal__getVersion(11, toV11);
    }
    /**
     * @description Returns the wrapped values as a V12 object
     */
    get asV12() {
        return this.__internal__getVersion(12, toV12);
    }
    /**
     * @description Returns the wrapped values as a V13 object
     */
    get asV13() {
        return this.__internal__getVersion(13, toV13);
    }
    /**
     * @description Returns the wrapped values as a V14 object
     */
    get asV14() {
        return this.__internal__getVersion(14, toV14);
    }
    /**
     * @description Returns the wrapped values as a V14 object
     */
    get asV15() {
        return this.__internal__getVersion(15, toV15);
    }
    /**
     * @description Returns the wrapped values as a latest version object
     */
    get asLatest() {
        return this.__internal__getVersion('latest', toLatest);
    }
    /**
     * @description The magicNumber for the Metadata (known constant)
     */
    get magicNumber() {
        return this.getT('magicNumber');
    }
    /**
     * @description the metadata version this structure represents
     */
    get version() {
        return this.__internal__metadata().index;
    }
    getUniqTypes(throwError) {
        return getUniqTypes(this.registry, this.asLatest, throwError);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        // HACK(y): ensure that we apply the aliases if we have not done so already, this is
        // needed to ensure we have the correct overrides (which is only applied in toLatest)
        // eslint-disable-next-line no-unused-expressions
        this.asLatest;
        return super.toJSON();
    }
}


/***/ }),

/***/ 14832:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ PortableRegistry)
/* harmony export */ });
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(43330);
/* harmony import */ var _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(20046);
/* harmony import */ var _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3754);
/* harmony import */ var _polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(95689);
/* harmony import */ var _polkadot_types_create__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(60045);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63985);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(36600);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(30518);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(52906);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5035);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(53393);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(53472);



const l = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .logger */ .k)('PortableRegistry');
const TYPE_UNWRAP = { toNumber: () => -1 };
const PRIMITIVE_ALIAS = {
    Char: 'u32', // Rust char is 4-bytes
    Str: 'Text'
};
const PATHS_ALIAS = splitNamespace([
    // full matching on exact names...
    // these are well-known types with additional encoding
    'sp_core::crypto::AccountId32',
    'sp_runtime::generic::era::Era',
    'sp_runtime::multiaddress::MultiAddress',
    // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
    'fp_account::AccountId20',
    'account::AccountId20',
    'polkadot_runtime_common::claims::EthereumAddress',
    // weights 2 is a structure, however for 1.5. with a single field it
    // should be flatenned (can appear in Compact<Weight> extrinsics)
    'frame_support::weights::weight_v2::Weight',
    'sp_weights::weight_v2::Weight',
    // wildcard matching in place...
    // these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
    '*_democracy::vote::Vote',
    '*_conviction_voting::vote::Vote',
    '*_identity::types::Data',
    // these are opaque Vec<u8> wrappers
    'sp_core::OpaqueMetadata',
    'sp_core::OpaquePeerId',
    'sp_core::offchain::OpaqueMultiaddr',
    // shorten some well-known types
    'primitive_types::*',
    'sp_arithmetic::per_things::*',
    // runtime
    '*_runtime::RuntimeCall',
    '*_runtime::RuntimeEvent',
    // ink!
    'ink::env::types::*',
    'ink::primitives::types::*',
    'ink_env::types::*',
    'ink_primitives::types::*',
    // noir
    'np_runtime::accountname::AccountName',
    'np_runtime::universaladdress::UniversalAddress'
]);
const PATHS_SET = splitNamespace([
    'pallet_identity::types::BitFlags'
]);
const BITVEC_NS_LSB = ['bitvec::order::Lsb0', 'BitOrderLsb0'];
const BITVEC_NS_MSB = ['bitvec::order::Msb0', 'BitOrderMsb0'];
const BITVEC_NS = [...BITVEC_NS_LSB, ...BITVEC_NS_MSB];
const WRAPPERS = ['BoundedBTreeMap', 'BoundedBTreeSet', 'BoundedVec', 'Box', 'BTreeMap', 'BTreeSet', 'Cow', 'Option', 'Range', 'RangeInclusive', 'Result', 'WeakBoundedVec', 'WrapperKeepOpaque', 'WrapperOpaque'];
const RESERVED = [
    // JS reserved words
    'entries', 'keys', 'new', 'size',
    // exposed by all Codec objects
    'hash', 'registry'
];
const PATH_RM_INDEX_1 = ['generic', 'misc', 'pallet', 'traits', 'types'];
/** @internal Converts a Text[] into string[] (used as part of definitions) */
function sanitizeDocs(docs) {
    const count = docs.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
        result[i] = docs[i].toString();
    }
    return result;
}
/** @internal Split a namespace with :: into individual parts */
function splitNamespace(values) {
    const count = values.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
        result[i] = values[i].split('::');
    }
    return result;
}
/** @internal Match a namespace based on parts (alongside wildcards) */
function matchParts(first, second) {
    return first.length === second.length && first.every((a, index) => {
        const b = second[index].toString();
        if ((a === '*') || (a === b)) {
            return true;
        }
        if (a.includes('*') && a.includes('_') && b.includes('_')) {
            let suba = a.split('_');
            let subb = b.split('_');
            // match initial *'s to multiples if we have a match for the other
            if (suba[0] === '*') {
                const indexOf = subb.indexOf(suba[1]);
                if (indexOf !== -1) {
                    suba = suba.slice(1);
                    subb = subb.slice(indexOf);
                }
            }
            // check for * matches at the end, adjust accordingly
            if ((suba.length === 2) && (suba[1] === '*') && (suba[0] === subb[0])) {
                return true;
            }
            return matchParts(suba, subb);
        }
        return false;
    });
}
/** @internal check if the path matches the PATHS_ALIAS (with wildcards) */
function getAliasPath({ def, path }) {
    // specific logic for weights - we override when non-complex struct
    // (as applied in Weight 1.5 where we also have `Compact<{ refTime: u64 }>)
    if (['frame_support::weights::weight_v2::Weight', 'sp_weights::weight_v2::Weight'].includes(path.join('::'))) {
        return !def.isComposite || def.asComposite.fields.length === 1
            ? 'WeightV1'
            : null;
    }
    // TODO We need to handle ink! Balance in some way
    return path.length && PATHS_ALIAS.some((a) => matchParts(a, path))
        ? path[path.length - 1].toString()
        : null;
}
/** @internal Converts a type name into a JS-API compatible name */
function extractNameFlat(portable, lookupIndex, params, path, isInternal = false) {
    const count = path.length;
    // if we have no path or determined as a wrapper, we just skip it
    if (count === 0 || WRAPPERS.includes(path[count - 1].toString())) {
        return null;
    }
    const camels = new Array(count);
    const lowers = new Array(count);
    // initially just create arrays of the camelCase and lowercase path
    // parts - we will check these to extract the final values. While
    // we have 2 loops here, we also don't do the same operation twice
    for (let i = 0; i < count; i++) {
        const c = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringPascalCase */ .KT)(isInternal
            ? path[i].replace('pallet_', '')
            : path[i]);
        const l = c.toLowerCase();
        camels[i] = c;
        lowers[i] = l;
    }
    let name = '';
    for (let i = 0; i < count; i++) {
        const l = lowers[i];
        // Remove ::{generic, misc, pallet, traits, types}::
        if (i !== 1 || !PATH_RM_INDEX_1.includes(l)) {
            // sp_runtime::generic::digest::Digest -> sp_runtime::generic::Digest
            // sp_runtime::multiaddress::MultiAddress -> sp_runtime::MultiAddress
            if (l !== lowers[i + 1]) {
                name += camels[i];
            }
        }
    }
    // do magic for RawOrigin lookup, e.g. pallet_collective::RawOrigin
    if (camels[1] === 'RawOrigin' && count === 2 && params.length === 2 && params[1].type.isSome) {
        const instanceType = portable[params[1].type.unwrap().toNumber()];
        if (instanceType.type.path.length === 2) {
            name = `${name}${instanceType.type.path[1].toString()}`;
        }
    }
    return { lookupIndex, name, params };
}
/** @internal Alias for extractNameFlat with PortableType as a last parameter */
function extractName(portable, lookupIndex, { type: { params, path } }) {
    return extractNameFlat(portable, lookupIndex, params, path);
}
/** @internal Check for dupes from a specific index onwards */
function nextDupeMatches(name, startAt, names) {
    const result = [names[startAt]];
    for (let i = startAt + 1, count = names.length; i < count; i++) {
        const v = names[i];
        if (v.name === name) {
            result.push(v);
        }
    }
    return result;
}
/** @internal Checks to see if a type is a full duplicate (with all params matching) */
function rewriteDupes(input, rewrite) {
    const count = input.length;
    for (let i = 0; i < count; i++) {
        const a = input[i];
        for (let j = i + 1; j < count; j++) {
            const b = input[j];
            // if the indexes are not the same and the names match, we have a dupe
            if (a.lookupIndex !== b.lookupIndex && a.name === b.name) {
                return false;
            }
        }
    }
    // add all the adjusted values to the rewite map
    for (let i = 0; i < count; i++) {
        const p = input[i];
        rewrite[p.lookupIndex] = p.name;
    }
    return true;
}
/** @internal Find duplicates and adjust the names based on parameters */
function removeDupeNames(lookup, portable, names) {
    const rewrite = {};
    return names
        .map((original, startAt) => {
        const { lookupIndex, name, params } = original;
        if (!name) {
            // the name is empty (this is not expected, but have a failsafe)
            return null;
        }
        else if (rewrite[lookupIndex]) {
            // we have already rewritten this one, we can skip it
            return original;
        }
        // those where the name is matching starting from this index
        const allSame = nextDupeMatches(name, startAt, names);
        // we only have one, so all ok
        if (allSame.length === 1) {
            return original;
        }
        // are there param differences between matching names
        const anyDiff = allSame.some((o) => params.length !== o.params.length ||
            params.some((p, index) => !p.name.eq(o.params[index].name) ||
                p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== o.params[index].type.unwrapOr(TYPE_UNWRAP).toNumber()));
        // everything matches, we can combine these
        if (!anyDiff) {
            return original;
        }
        // TODO We probably want to attach all the indexes with differences,
        // not just the first
        // find the first parameter that yields differences
        const paramIdx = params.findIndex(({ type }, index) => allSame.every(({ params }, aIndex) => params[index].type.isSome && (aIndex === 0 ||
            !params[index].type.eq(type))));
        // No param found that is different
        if (paramIdx === -1) {
            return original;
        }
        // see if using the param type helps
        const sameCount = allSame.length;
        const adjusted = new Array(sameCount);
        // loop through all, specifically checking that index where the
        // first param yields differences
        for (let i = 0; i < sameCount; i++) {
            const { lookupIndex, name, params } = allSame[i];
            const { def, path } = lookup.getSiType(params[paramIdx].type.unwrap());
            // if it is not a primitive and it doesn't have a path, we really cannot
            // do anything at this point
            if (!def.isPrimitive && !path.length) {
                return null;
            }
            adjusted[i] = {
                lookupIndex,
                name: def.isPrimitive
                    ? `${name}${def.asPrimitive.toString()}`
                    : `${name}${path[path.length - 1].toString()}`
            };
        }
        // check to see if the adjusted names have no issues
        if (rewriteDupes(adjusted, rewrite)) {
            return original;
        }
        // TODO This is duplicated from the section just above...
        // ... we certainly need a better solution here
        //
        // Last-ditch effort to use the full type path - ugly
        // loop through all, specifically checking that index where the
        // first param yields differences
        for (let i = 0; i < sameCount; i++) {
            const { lookupIndex, name, params } = allSame[i];
            const { def, path } = lookup.getSiType(params[paramIdx].type.unwrap());
            const flat = extractNameFlat(portable, lookupIndex, params, path, true);
            if (def.isPrimitive || !flat) {
                return null;
            }
            adjusted[i] = {
                lookupIndex,
                name: `${name}${flat.name}`
            };
        }
        // check to see if the adjusted names have no issues
        if (rewriteDupes(adjusted, rewrite)) {
            return original;
        }
        return null;
    })
        .filter((n) => !!n)
        .map(({ lookupIndex, name, params }) => ({
        lookupIndex,
        name: rewrite[lookupIndex] || name,
        params
    }));
}
/** @internal Detect on-chain types (AccountId/Signature) as set as the default */
function registerTypes(lookup, lookups, names, params) {
    // Register the types we extracted
    lookup.registry.register(lookups);
    // Try and extract the AccountId/Address/Signature type from UncheckedExtrinsic
    if (params.SpRuntimeUncheckedExtrinsic) {
        // Address, Call, Signature, Extra
        const [addrParam, , sigParam] = params.SpRuntimeUncheckedExtrinsic;
        const siAddress = lookup.getSiType(addrParam.type.unwrap());
        const siSignature = lookup.getSiType(sigParam.type.unwrap());
        const nsSignature = siSignature.path.join('::');
        let nsAccountId = siAddress.path.join('::');
        const isMultiAddress = nsAccountId === 'sp_runtime::multiaddress::MultiAddress';
        // With multiaddress, we check the first type param again
        if (isMultiAddress) {
            // AccountId, AccountIndex
            const [idParam] = siAddress.params;
            nsAccountId = lookup.getSiType(idParam.type.unwrap()).path.join('::');
        }
        lookup.registry.register({
            // known: account::AccountId20, fp_account::AccountId20, primitive_types::H160
            AccountId: nsAccountId.endsWith('::AccountId20') || nsAccountId.endsWith('::H160')
                ? 'AccountId20'
                : 'AccountId32',
            Address: isMultiAddress
                ? 'MultiAddress'
                : 'AccountId',
            ExtrinsicSignature: ['sp_runtime::MultiSignature'].includes(nsSignature)
                ? 'MultiSignature'
                : names[sigParam.type.unwrap().toNumber()] || 'MultiSignature'
        });
    }
}
/**
 * @internal Extracts aliases based on what we know the runtime config looks like in a
 * Substrate chain. Specifically we want to have access to the Call and Event params
 **/
function extractAliases(params, isContract) {
    const hasParams = Object.keys(params).some((k) => !k.startsWith('Pallet'));
    const alias = {};
    if (params.SpRuntimeUncheckedExtrinsic) {
        // Address, Call, Signature, Extra
        const [, { type }] = params.SpRuntimeUncheckedExtrinsic;
        alias[type.unwrap().toNumber()] = 'Call';
    }
    else if (hasParams && !isContract) {
        l.warn('Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic');
    }
    if (params.FrameSystemEventRecord) {
        // Event, Topic
        const [{ type }] = params.FrameSystemEventRecord;
        alias[type.unwrap().toNumber()] = 'Event';
    }
    else if (hasParams && !isContract) {
        l.warn('Unable to determine runtime Event type, cannot inspect frame_system::EventRecord');
    }
    return alias;
}
/** @internal Extracts all the intreresting type information for this registry */
function extractTypeInfo(lookup, portable) {
    const nameInfo = [];
    const types = {};
    for (let i = 0, count = portable.length; i < count; i++) {
        const type = portable[i];
        const lookupIndex = type.id.toNumber();
        const extracted = extractName(portable, lookupIndex, portable[i]);
        if (extracted) {
            nameInfo.push(extracted);
        }
        types[lookupIndex] = type;
    }
    const lookups = {};
    const names = {};
    const params = {};
    const dedup = removeDupeNames(lookup, portable, nameInfo);
    for (let i = 0, count = dedup.length; i < count; i++) {
        const { lookupIndex, name, params: p } = dedup[i];
        names[lookupIndex] = name;
        lookups[name] = lookup.registry.createLookupType(lookupIndex);
        params[name] = p;
    }
    return { lookups, names, params, types };
}
class PortableRegistry extends _polkadot_types_codec__WEBPACK_IMPORTED_MODULE_2__/* .Struct */ .A {
    __internal__alias;
    __internal__lookups;
    __internal__names;
    __internal__params;
    __internal__typeDefs = {};
    __internal__types;
    constructor(registry, value, isContract) {
        // const timeStart = performance.now()
        super(registry, {
            types: 'Vec<PortableType>'
        }, value);
        const { lookups, names, params, types } = extractTypeInfo(this, this.types);
        this.__internal__alias = extractAliases(params, isContract);
        this.__internal__lookups = lookups;
        this.__internal__names = names;
        this.__internal__params = params;
        this.__internal__types = types;
        // console.log('PortableRegistry', `${(performance.now() - timeStart).toFixed(2)}ms`)
    }
    /**
     * @description Returns all the available type names for this chain
     **/
    get names() {
        return Object.values(this.__internal__names).sort();
    }
    /**
     * @description Returns all the available parameterized types for this chain
     **/
    get paramTypes() {
        return this.__internal__params;
    }
    /**
     * @description The types of the registry
     */
    get types() {
        return this.getT('types');
    }
    /**
     * @description Register all available types into the registry (generally for internal usage)
     */
    register() {
        registerTypes(this, this.__internal__lookups, this.__internal__names, this.__internal__params);
    }
    /**
     * @description Returns the name for a specific lookup
     */
    getName(lookupId) {
        return this.__internal__names[this.__internal__getLookupId(lookupId)];
    }
    /**
     * @description Finds a specific type in the registry
     */
    getSiType(lookupId) {
        // NOTE catch-22 - this may already be used as part of the constructor, so
        // ensure that we have actually initialized it correctly
        const found = (this.__internal__types || this.types)[this.__internal__getLookupId(lookupId)];
        if (!found) {
            throw new Error(`PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
        }
        return found.type;
    }
    /**
     * @description Lookup the type definition for the index
     */
    getTypeDef(lookupId) {
        const lookupIndex = this.__internal__getLookupId(lookupId);
        if (!this.__internal__typeDefs[lookupIndex]) {
            const lookupName = this.__internal__names[lookupIndex];
            const empty = {
                info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.DoNotConstruct,
                lookupIndex,
                lookupName,
                type: this.registry.createLookupType(lookupIndex)
            };
            // Set named items since we will get into circular lookups along the way
            if (lookupName) {
                this.__internal__typeDefs[lookupIndex] = empty;
            }
            const extracted = this.__internal__extract(this.getSiType(lookupId), lookupIndex);
            // For non-named items, we only set this right at the end
            if (!lookupName) {
                this.__internal__typeDefs[lookupIndex] = empty;
            }
            Object.keys(extracted).forEach((k) => {
                if (k !== 'lookupName' || extracted[k]) {
                    // these are safe since we are looking through the keys as set
                    this.__internal__typeDefs[lookupIndex][k] = extracted[k];
                }
            });
            // don't set lookupName on lower-level, we want to always direct to the type
            if (extracted.info === _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Plain) {
                this.__internal__typeDefs[lookupIndex].lookupNameRoot = this.__internal__typeDefs[lookupIndex].lookupName;
                delete this.__internal__typeDefs[lookupIndex].lookupName;
            }
        }
        return this.__internal__typeDefs[lookupIndex];
    }
    /**
     * @description For a specific field, perform adjustments to not have built-in conflicts
     */
    sanitizeField(name) {
        let nameField = null;
        let nameOrig = null;
        if (name.isSome) {
            nameField = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringCamelCase */ .yZ)(name.unwrap());
            if (nameField.includes('#')) {
                nameOrig = nameField;
                nameField = nameOrig.replace(/#/g, '_');
            }
            else if (RESERVED.includes(nameField)) {
                nameOrig = nameField;
                nameField = `${nameField}_`;
            }
        }
        return [nameField, nameOrig];
    }
    /** @internal Creates a TypeDef based on an internal lookupId */
    __internal__createSiDef(lookupId) {
        const typeDef = this.getTypeDef(lookupId);
        const lookupIndex = lookupId.toNumber();
        // Setup for a lookup on complex types
        return [_polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.DoNotConstruct, _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Enum, _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Struct].includes(typeDef.info) && typeDef.lookupName
            ? {
                docs: typeDef.docs,
                info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Si,
                lookupIndex,
                lookupName: this.__internal__names[lookupIndex],
                type: this.registry.createLookupType(lookupId)
            }
            : typeDef;
    }
    /** @internal Converts a lookupId input to the actual lookup index */
    __internal__getLookupId(lookupId) {
        if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .isString */ .H)(lookupId)) {
            if (!this.registry.isLookupType(lookupId)) {
                throw new Error(`PortableRegistry: Expected a lookup string type, found ${lookupId}`);
            }
            return parseInt(lookupId.replace('Lookup', ''), 10);
        }
        else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isNumber */ .h)(lookupId)) {
            return lookupId;
        }
        return lookupId.toNumber();
    }
    /** @internal Converts a type into a TypeDef for Codec usage */
    __internal__extract(type, lookupIndex) {
        const namespace = type.path.join('::');
        let typeDef;
        const aliasType = this.__internal__alias[lookupIndex] || getAliasPath(type);
        try {
            if (aliasType) {
                typeDef = this.__internal__extractAliasPath(lookupIndex, aliasType);
            }
            else {
                switch (type.def.type) {
                    case 'Array':
                        typeDef = this.__internal__extractArray(lookupIndex, type.def.asArray);
                        break;
                    case 'BitSequence':
                        typeDef = this.__internal__extractBitSequence(lookupIndex, type.def.asBitSequence);
                        break;
                    case 'Compact':
                        typeDef = this.__internal__extractCompact(lookupIndex, type.def.asCompact);
                        break;
                    case 'Composite':
                        typeDef = this.__internal__extractComposite(lookupIndex, type, type.def.asComposite);
                        break;
                    case 'HistoricMetaCompat':
                        typeDef = this.__internal__extractHistoric(lookupIndex, type.def.asHistoricMetaCompat);
                        break;
                    case 'Primitive':
                        typeDef = this.__internal__extractPrimitive(lookupIndex, type);
                        break;
                    case 'Sequence':
                        typeDef = this.__internal__extractSequence(lookupIndex, type.def.asSequence);
                        break;
                    case 'Tuple':
                        typeDef = this.__internal__extractTuple(lookupIndex, type.def.asTuple);
                        break;
                    case 'Variant':
                        typeDef = this.__internal__extractVariant(lookupIndex, type, type.def.asVariant);
                        break;
                    default: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .assertUnreachable */ .UT)(type.def.type);
                }
            }
        }
        catch (error) {
            throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ''}: Error extracting ${(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__/* .stringify */ .P)(type)}: ${error.message}`);
        }
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .objectSpread */ .Z)({
            docs: sanitizeDocs(type.docs),
            namespace
        }, typeDef);
    }
    /** @internal Extracts a ScaleInfo Array into TypeDef.VecFixed */
    __internal__extractArray(_, { len, type }) {
        const length = len.toNumber();
        if (length > 2048) {
            throw new Error('Only support for [Type; <length>], where length <= 2048');
        }
        return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, {
            info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.VecFixed,
            length,
            sub: this.__internal__createSiDef(type)
        });
    }
    /** @internal Extracts a ScaleInfo BitSequence into TypeDef.Plain */
    __internal__extractBitSequence(_, { bitOrderType, bitStoreType }) {
        // With the v3 of scale-info this swapped around, but obviously the decoder cannot determine
        // the order. With that in-mind, we apply a detection for LSb0/Msb and set accordingly
        const a = this.__internal__createSiDef(bitOrderType);
        const b = this.__internal__createSiDef(bitStoreType);
        const [bitOrder, bitStore] = BITVEC_NS.includes(a.namespace || '')
            ? [a, b]
            : [b, a];
        if (!bitOrder.namespace || !BITVEC_NS.includes(bitOrder.namespace)) {
            throw new Error(`Unexpected bitOrder found as ${bitOrder.namespace || '<unknown>'}`);
        }
        else if (bitStore.info !== _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Plain || bitStore.type !== 'u8') {
            throw new Error(`Only u8 bitStore is currently supported, found ${bitStore.type}`);
        }
        const isLsb = BITVEC_NS_LSB.includes(bitOrder.namespace);
        if (!isLsb) {
            // TODO To remove this limitation, we need to pass an extra info flag
            // through to the TypeDef (Here we could potentially re-use something
            // like index (???) to indicate and ensure we use it to pass to the
            // BitVec constructor - which does handle this type)
            //
            // See https://github.com/polkadot-js/api/issues/5588
            // throw new Error(`Only LSB BitVec is currently supported, found ${bitOrder.namespace}`);
        }
        return {
            info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Plain,
            type: 'BitVec'
        };
    }
    /** @internal Extracts a ScaleInfo Compact into TypeDef.Compact */
    __internal__extractCompact(_, { type }) {
        return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, {
            info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Compact,
            sub: this.__internal__createSiDef(type)
        });
    }
    /** @internal Extracts a ScaleInfo Composite into TypeDef.{BTree*, Range*, Wrapper*} */
    __internal__extractComposite(lookupIndex, { params, path }, { fields }) {
        if (path.length) {
            const pathFirst = path[0].toString();
            const pathLast = path[path.length - 1].toString();
            if (path.length === 1 && pathFirst === 'BTreeMap') {
                if (params.length !== 2) {
                    throw new Error(`BTreeMap requires 2 parameters, found ${params.length}`);
                }
                return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, {
                    info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.BTreeMap,
                    sub: params.map(({ type }) => this.__internal__createSiDef(type.unwrap()))
                });
            }
            else if (path.length === 1 && pathFirst === 'BTreeSet') {
                if (params.length !== 1) {
                    throw new Error(`BTreeSet requires 1 parameter, found ${params.length}`);
                }
                return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, {
                    info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.BTreeSet,
                    sub: this.__internal__createSiDef(params[0].type.unwrap())
                });
            }
            else if (['Range', 'RangeInclusive'].includes(pathFirst)) {
                if (params.length !== 1) {
                    throw new Error(`Range requires 1 parameter, found ${params.length}`);
                }
                return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, {
                    info: pathFirst === 'Range'
                        ? _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Range
                        : _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.RangeInclusive,
                    sub: this.__internal__createSiDef(params[0].type.unwrap()),
                    type: pathFirst
                });
            }
            else if (['WrapperKeepOpaque', 'WrapperOpaque'].includes(pathLast)) {
                if (params.length !== 1) {
                    throw new Error(`WrapperOpaque requires 1 parameter, found ${params.length}`);
                }
                return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, {
                    info: pathLast === 'WrapperKeepOpaque'
                        ? _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.WrapperKeepOpaque
                        : _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.WrapperOpaque,
                    sub: this.__internal__createSiDef(params[0].type.unwrap()),
                    type: pathLast
                });
            }
        }
        return PATHS_SET.some((p) => matchParts(p, path))
            ? this.__internal__extractCompositeSet(lookupIndex, params, fields)
            : this.__internal__extractFields(lookupIndex, fields);
    }
    /** @internal Extracts a ScaleInfo CompositeSet into TypeDef.Set */
    __internal__extractCompositeSet(_, params, fields) {
        if (params.length !== 1 || fields.length !== 1) {
            throw new Error('Set handling expects param/field as single entries');
        }
        return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, {
            info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Set,
            length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
            sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({ index, name }) => ({
                // This will be an issue > 2^53 - 1 ... don't have those (yet)
                index: index.toNumber(),
                info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Plain,
                name: name.toString(),
                type: 'Null'
            }))
        });
    }
    /** @internal Extracts ScaleInfo enum/struct fields into TypeDef.{Struct, Tuple} */
    __internal__extractFields(lookupIndex, fields) {
        let isStruct = true;
        let isTuple = true;
        const count = fields.length;
        for (let f = 0; f < count; f++) {
            const { name } = fields[f];
            isStruct = isStruct && name.isSome;
            isTuple = isTuple && name.isNone;
        }
        if (!isTuple && !isStruct) {
            throw new Error('Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)');
        }
        if (count === 0) {
            return {
                info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Null,
                type: 'Null'
            };
        }
        else if (isTuple && count === 1) {
            const typeDef = this.__internal__createSiDef(fields[0].type);
            return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .objectSpread */ .Z)({}, typeDef, lookupIndex === -1
                ? null
                : {
                    lookupIndex,
                    lookupName: this.__internal__names[lookupIndex],
                    lookupNameRoot: typeDef.lookupName
                }, fields[0].typeName.isSome
                ? { typeName: (0,_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_10__/* .sanitize */ .Nw)(fields[0].typeName.unwrap()) }
                : null);
        }
        const [sub, alias] = this.__internal__extractFieldsAlias(fields);
        return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .objectSpread */ .Z)({
            info: isTuple // Tuple check first
                ? _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Tuple
                : _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Struct,
            sub
        }, alias.size
            ? { alias }
            : null, lookupIndex === -1
            ? null
            : {
                lookupIndex,
                lookupName: this.__internal__names[lookupIndex]
            }));
    }
    /** @internal Apply field aliassed (with no JS conflicts) */
    __internal__extractFieldsAlias(fields) {
        const alias = new Map();
        const count = fields.length;
        const sub = new Array(count);
        for (let i = 0; i < count; i++) {
            const { docs, name, type, typeName } = fields[i];
            const typeDef = this.__internal__createSiDef(type);
            if (name.isNone) {
                sub[i] = typeDef;
            }
            else {
                const [nameField, nameOrig] = this.sanitizeField(name);
                if (nameField && nameOrig) {
                    alias.set(nameField, nameOrig);
                }
                sub[i] = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .objectSpread */ .Z)({
                    docs: sanitizeDocs(docs),
                    name: nameField
                }, typeDef, typeName.isSome
                    ? { typeName: (0,_polkadot_types_codec__WEBPACK_IMPORTED_MODULE_10__/* .sanitize */ .Nw)(typeName.unwrap()) }
                    : null);
            }
        }
        return [sub, alias];
    }
    /** @internal Extracts an internal Historic (pre V14) type  */
    __internal__extractHistoric(_, type) {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .objectSpread */ .Z)({
            displayName: type.toString(),
            isFromSi: true
        }, (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_11__/* .getTypeDef */ .s)(type));
    }
    /** @internal Extracts a ScaleInfo Primitive into TypeDef.Plain */
    __internal__extractPrimitive(_, type) {
        const typeStr = type.def.asPrimitive.type.toString();
        return {
            info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Plain,
            type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
        };
    }
    /** @internal Applies an alias path onto the TypeDef */
    __internal__extractAliasPath(_, type) {
        return {
            info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Plain,
            type
        };
    }
    /** @internal Extracts a ScaleInfo Sequence into TypeDef.Vec (with Bytes shortcut) */
    __internal__extractSequence(lookupIndex, { type }) {
        const sub = this.__internal__createSiDef(type);
        if (sub.type === 'u8') {
            return {
                info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Plain,
                type: 'Bytes'
            };
        }
        return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, {
            info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Vec,
            lookupIndex,
            lookupName: this.__internal__names[lookupIndex],
            sub
        });
    }
    /** @internal Extracts a ScaleInfo Tuple into TypeDef.Tuple */
    __internal__extractTuple(lookupIndex, ids) {
        if (ids.length === 0) {
            return {
                info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Null,
                type: 'Null'
            };
        }
        else if (ids.length === 1) {
            return this.getTypeDef(ids[0]);
        }
        const sub = ids.map((t) => this.__internal__createSiDef(t));
        return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, {
            info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Tuple,
            lookupIndex,
            lookupName: this.__internal__names[lookupIndex],
            sub
        });
    }
    /** @internal Extracts a ScaleInfo Variant into TypeDef.{Option, Result, Enum} */
    __internal__extractVariant(lookupIndex, { params, path }, { variants }) {
        if (path.length) {
            const specialVariant = path[0].toString();
            if (specialVariant === 'Option') {
                if (params.length !== 1) {
                    throw new Error(`Option requires 1 parameter, found ${params.length}`);
                }
                // NOTE This is opt-in (unhandled), not by default
                // if (sub.type === 'bool') {
                //   return withTypeString(this.registry, {
                //     info: TypeDefInfo.Plain,
                //     type: 'OptionBool'
                //   });
                // }
                return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, {
                    info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Option,
                    sub: this.__internal__createSiDef(params[0].type.unwrap())
                });
            }
            else if (specialVariant === 'Result') {
                if (params.length !== 2) {
                    throw new Error(`Result requires 2 parameters, found ${params.length}`);
                }
                return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, {
                    info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Result,
                    sub: params.map(({ type }, index) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .objectSpread */ .Z)({
                        name: ['Ok', 'Error'][index]
                    }, this.__internal__createSiDef(type.unwrap())))
                });
            }
        }
        if (variants.length === 0) {
            return {
                info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Null,
                type: 'Null'
            };
        }
        return this.__internal__extractVariantEnum(lookupIndex, variants);
    }
    /** @internal Extracts a ScaleInfo Variant into TypeDef.Enum */
    __internal__extractVariantEnum(lookupIndex, variants) {
        const sub = [];
        // we may get entries out of order, arrange them first before creating with gaps filled
        // NOTE: Since we mutate, use a copy of the array as an input
        variants
            .slice()
            .sort((a, b) => a.index.cmp(b.index))
            .forEach(({ fields, index: bnIndex, name }) => {
            const index = bnIndex.toNumber();
            while (sub.length !== index) {
                sub.push({
                    index: sub.length,
                    info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Null,
                    name: `__Unused${sub.length}`,
                    type: 'Null'
                });
            }
            sub.push((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__/* .objectSpread */ .Z)(this.__internal__extractFields(-1, fields), {
                index,
                name: name.toString()
            }));
        });
        return (0,_polkadot_types_create__WEBPACK_IMPORTED_MODULE_9__/* .withTypeString */ .He)(this.registry, {
            info: _polkadot_types_create__WEBPACK_IMPORTED_MODULE_3__/* .TypeDefInfo */ .u.Enum,
            lookupIndex,
            lookupName: this.__internal__names[lookupIndex],
            sub
        });
    }
}


/***/ }),

/***/ 24832:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ decorateConstants)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56810);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(36600);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82025);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(21381);


/** @internal */
function decorateConstants(registry, { pallets }, _version) {
    const result = {};
    for (let i = 0, count = pallets.length; i < count; i++) {
        const { constants, name } = pallets[i];
        if (!constants.isEmpty) {
            (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .lazyMethod */ .W)(result, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringCamelCase */ .yZ)(name), () => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .lazyMethods */ .G)({}, constants, (constant) => {
                const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .hexToU8a */ .G)(constant.value.toHex())]);
                // We are casting here since we are assigning to a read-only property
                codec.meta = constant;
                return codec;
            }, _util_js__WEBPACK_IMPORTED_MODULE_3__/* .objectNameToCamel */ .q));
        }
    }
    return result;
}


/***/ }),

/***/ 37119:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   T: () => (/* binding */ variantToMeta),
/* harmony export */   s: () => (/* binding */ decorateErrors)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53472);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56810);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(36600);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14769);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(38589);
/* harmony import */ var _create_lazy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(34904);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(21381);



function variantToMeta(lookup, variant) {
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .objectSpread */ .Z)({ args: variant.fields.map(({ type }) => lookup.getTypeDef(type).type) }, variant);
}
/** @internal */
function decorateErrors(registry, { lookup, pallets }, version) {
    const result = {};
    for (let i = 0, count = pallets.length; i < count; i++) {
        const { errors, index, name } = pallets[i];
        if (errors.isSome) {
            const sectionIndex = version >= 12 ? index.toNumber() : i;
            (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .lazyMethod */ .W)(result, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .stringCamelCase */ .yZ)(name), () => (0,_create_lazy_js__WEBPACK_IMPORTED_MODULE_3__/* .lazyVariants */ .Y)(lookup, errors.unwrap(), _util_js__WEBPACK_IMPORTED_MODULE_4__/* .objectNameToString */ .c, (variant) => ({
                // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
                is: (errorMod) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isCodec */ .c)(errorMod) &&
                    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isCodec */ .c)(errorMod.index) &&
                    errorMod.index.eq(sectionIndex) && ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__/* .isU8a */ .U)(errorMod.error)
                    ? errorMod.error[0] === variant.index.toNumber()
                    : (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isCodec */ .c)(errorMod.error) && errorMod.error.eq(variant.index)),
                meta: registry.createTypeUnsafe('ErrorMetadataLatest', [variantToMeta(lookup, variant)])
            })));
        }
    }
    return result;
}


/***/ }),

/***/ 23266:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   W: () => (/* binding */ decorateEvents),
/* harmony export */   w: () => (/* binding */ filterEventsSome)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56810);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(36600);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14769);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(38589);
/* harmony import */ var _create_lazy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(34904);
/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(37119);
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(21381);




function filterEventsSome({ events }) {
    return events.isSome;
}
/** @internal */
function decorateEvents(registry, { lookup, pallets }, version) {
    const result = {};
    const filtered = pallets.filter(filterEventsSome);
    for (let i = 0, count = filtered.length; i < count; i++) {
        const { events, index, name } = filtered[i];
        const sectionIndex = version >= 12 ? index.toNumber() : i;
        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .lazyMethod */ .W)(result, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .stringCamelCase */ .yZ)(name), () => (0,_create_lazy_js__WEBPACK_IMPORTED_MODULE_2__/* .lazyVariants */ .Y)(lookup, events.unwrap(), _util_js__WEBPACK_IMPORTED_MODULE_3__/* .objectNameToString */ .c, (variant) => ({
            // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
            is: (eventRecord) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .isCodec */ .c)(eventRecord) &&
                (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__/* .isU8a */ .U)(eventRecord.index) &&
                sectionIndex === eventRecord.index[0] &&
                variant.index.eq(eventRecord.index[1]),
            meta: registry.createTypeUnsafe('EventMetadataLatest', [(0,_errors_index_js__WEBPACK_IMPORTED_MODULE_6__/* .variantToMeta */ .T)(lookup, variant)])
        })));
    }
    return result;
}


/***/ }),

/***/ 66045:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  _W: () => (/* binding */ createCallFunction),
  YE: () => (/* binding */ decorateExtrinsics),
  Uq: () => (/* binding */ filterCallsSome)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/object/spread.js
var spread = __webpack_require__(53472);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/string/camelCase.js
var camelCase = __webpack_require__(36600);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/lazy.js
var lazy = __webpack_require__(56810);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/create/lazy.js
var create_lazy = __webpack_require__(34904);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/util/getSiName.js
var getSiName = __webpack_require__(85725);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/util.js
var util = __webpack_require__(21381);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/extrinsics/createUnchecked.js

function isTx(tx, callIndex) {
    return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
}
/** @internal */
function createUnchecked(registry, section, callIndex, callMetadata) {
    const expectedArgs = callMetadata.fields;
    const funcName = (0,camelCase/* stringCamelCase */.yZ)(callMetadata.name);
    const extrinsicFn = (...args) => {
        if (expectedArgs.length !== args.length) {
            throw new Error(`Extrinsic ${section}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
        }
        return registry.createTypeUnsafe('Call', [{ args, callIndex }, callMetadata]);
    };
    extrinsicFn.is = (tx) => isTx(tx, callIndex);
    extrinsicFn.callIndex = callIndex;
    extrinsicFn.meta = callMetadata;
    extrinsicFn.method = funcName;
    extrinsicFn.section = section;
    extrinsicFn.toJSON = () => callMetadata.toJSON();
    return extrinsicFn;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/extrinsics/index.js





function filterCallsSome({ calls }) {
    return calls.isSome;
}
function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
    const { fields, index } = variant;
    const count = fields.length;
    const args = new Array(count);
    for (let i = 0; i < count; i++) {
        const { name, type, typeName } = fields[i];
        args[i] = (0,spread/* objectSpread */.Z)({
            name: (0,camelCase/* stringCamelCase */.yZ)(name.unwrapOr(`param${i}`)),
            type: (0,getSiName/* getSiName */.I)(lookup, type)
        }, typeName.isSome
            ? { typeName: typeName.unwrap() }
            : null);
    }
    return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createTypeUnsafe('FunctionMetadataLatest', [(0,spread/* objectSpread */.Z)({ args }, variant)]));
}
/** @internal */
function decorateExtrinsics(registry, { lookup, pallets }, version) {
    const result = {};
    const filtered = pallets.filter(filterCallsSome);
    for (let i = 0, count = filtered.length; i < count; i++) {
        const { calls, index, name } = filtered[i];
        const sectionName = (0,camelCase/* stringCamelCase */.yZ)(name);
        const sectionIndex = version >= 12 ? index.toNumber() : i;
        (0,lazy/* lazyMethod */.W)(result, sectionName, () => (0,create_lazy/* lazyVariants */.Y)(lookup, calls.unwrap(), util/* objectNameToCamel */.q, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
    }
    return result;
}


/***/ }),

/***/ 58416:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   expandMetadata: () => (/* binding */ expandMetadata)
/* harmony export */ });
/* harmony import */ var _Metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50270);
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(24832);
/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(37119);
/* harmony import */ var _events_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(23266);
/* harmony import */ var _extrinsics_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(66045);
/* harmony import */ var _storage_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(36422);






/**
 * Expands the metadata by decoration into consts, query and tx sections
 */
function expandMetadata(registry, metadata) {
    if (!(metadata instanceof _Metadata_js__WEBPACK_IMPORTED_MODULE_0__/* .Metadata */ .S)) {
        throw new Error('You need to pass a valid Metadata instance to Decorated');
    }
    const latest = metadata.asLatest;
    const version = metadata.version;
    return {
        consts: (0,_constants_index_js__WEBPACK_IMPORTED_MODULE_1__/* .decorateConstants */ .U)(registry, latest, version),
        errors: (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_2__/* .decorateErrors */ .s)(registry, latest, version),
        events: (0,_events_index_js__WEBPACK_IMPORTED_MODULE_3__/* .decorateEvents */ .W)(registry, latest, version),
        query: (0,_storage_index_js__WEBPACK_IMPORTED_MODULE_4__/* .decorateStorage */ .x)(registry, latest, version),
        registry,
        tx: (0,_extrinsics_index_js__WEBPACK_IMPORTED_MODULE_5__/* .decorateExtrinsics */ .YE)(registry, latest, version)
    };
}



/***/ }),

/***/ 36422:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  x: () => (/* binding */ decorateStorage)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/string/camelCase.js
var camelCase = __webpack_require__(36600);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/lazy.js
var lazy = __webpack_require__(56810);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/util.js
var util = __webpack_require__(21381);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-codec@10.11.2/node_modules/@polkadot/types-codec/native/Raw.js
var Raw = __webpack_require__(9088);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/undefined.js
var is_undefined = __webpack_require__(34644);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/concat.js
var concat = __webpack_require__(93173);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/compact/addLength.js
var addLength = __webpack_require__(44214);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toU8a.js
var toU8a = __webpack_require__(42740);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/object/spread.js
var spread = __webpack_require__(53472);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/compact/stripLength.js
var stripLength = __webpack_require__(45155);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/xxhash/asU8a.js + 1 modules
var asU8a = __webpack_require__(39521);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/util/getSiName.js
var getSiName = __webpack_require__(85725);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/blake2/asU8a.js + 2 modules
var blake2_asU8a = __webpack_require__(89753);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/storage/getHasher.js


const DEFAULT_FN = (data) => (0,asU8a/* xxhashAsU8a */.r)(data, 128);
const HASHERS = {
    Blake2_128: (data) => // eslint-disable-line camelcase
     (0,blake2_asU8a/* blake2AsU8a */.b)(data, 128),
    Blake2_128Concat: (data) => // eslint-disable-line camelcase
     (0,concat/* u8aConcat */.e)((0,blake2_asU8a/* blake2AsU8a */.b)(data, 128), (0,toU8a/* u8aToU8a */.Y)(data)),
    Blake2_256: (data) => // eslint-disable-line camelcase
     (0,blake2_asU8a/* blake2AsU8a */.b)(data, 256),
    Identity: (data) => (0,toU8a/* u8aToU8a */.Y)(data),
    Twox128: (data) => (0,asU8a/* xxhashAsU8a */.r)(data, 128),
    Twox256: (data) => (0,asU8a/* xxhashAsU8a */.r)(data, 256),
    Twox64Concat: (data) => (0,concat/* u8aConcat */.e)((0,asU8a/* xxhashAsU8a */.r)(data, 64), (0,toU8a/* u8aToU8a */.Y)(data))
};
/** @internal */
function getHasher(hasher) {
    return HASHERS[hasher.type] || DEFAULT_FN;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/storage/createFunction.js





const NO_RAW_ARGS = {
    args: [],
    hashers: [],
    keys: []
};
/** @internal */
function filterDefined(a) {
    return !(0,is_undefined/* isUndefined */.o)(a);
}
/** @internal */
function assertArgs({ method, section }, { args, keys }) {
    if (!Array.isArray(args)) {
        throw new Error(`Call to ${(0,camelCase/* stringCamelCase */.yZ)(section || 'unknown')}.${(0,camelCase/* stringCamelCase */.yZ)(method || 'unknown')} needs ${keys.length} arguments`);
    }
    else if (args.filter(filterDefined).length !== keys.length) {
        throw new Error(`Call to ${(0,camelCase/* stringCamelCase */.yZ)(section || 'unknown')}.${(0,camelCase/* stringCamelCase */.yZ)(method || 'unknown')} needs ${keys.length} arguments, found [${args.join(', ')}]`);
    }
}
/** @internal */
function createKeyRawParts(registry, itemFn, { args, hashers, keys }) {
    const count = keys.length;
    const extra = new Array(count);
    for (let i = 0; i < count; i++) {
        extra[i] = getHasher(hashers[i])(registry.createTypeUnsafe(registry.createLookupType(keys[i]), [args[i]]).toU8a());
    }
    return [
        [
            (0,asU8a/* xxhashAsU8a */.r)(itemFn.prefix, 128),
            (0,asU8a/* xxhashAsU8a */.r)(itemFn.method, 128)
        ],
        extra
    ];
}
/** @internal */
function createKeyInspect(registry, itemFn, args) {
    assertArgs(itemFn, args);
    const { meta } = itemFn;
    const [prefix, extra] = createKeyRawParts(registry, itemFn, args);
    let types = [];
    if (meta.type.isMap) {
        const { hashers, key } = meta.type.asMap;
        types = hashers.length === 1
            ? [`${hashers[0].type}(${(0,getSiName/* getSiName */.I)(registry.lookup, key)})`]
            : registry.lookup.getSiType(key).def.asTuple.map((k, i) => `${hashers[i].type}(${(0,getSiName/* getSiName */.I)(registry.lookup, k)})`);
    }
    const names = ['module', 'method'].concat(...args.args.map((_, i) => types[i]));
    return {
        inner: prefix
            .concat(...extra)
            .map((v, i) => ({ name: names[i], outer: [v] }))
    };
}
/** @internal */
function createKeyRaw(registry, itemFn, args) {
    const [prefix, extra] = createKeyRawParts(registry, itemFn, args);
    return (0,concat/* u8aConcat */.e)(...prefix, ...extra);
}
/** @internal */
function createKey(registry, itemFn, args) {
    assertArgs(itemFn, args);
    // always add the length prefix (underlying it is Bytes)
    return (0,addLength/* compactAddLength */.N)(createKeyRaw(registry, itemFn, args));
}
/** @internal */
function createStorageInspect(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    return (...args) => {
        if (type.isPlain) {
            return options.skipHashing
                ? { inner: [], name: 'wellKnown', outer: [(0,toU8a/* u8aToU8a */.Y)(options.key)] }
                : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
        }
        const { hashers, key } = type.asMap;
        return hashers.length === 1
            ? createKeyInspect(registry, itemFn, { args, hashers, keys: [key] })
            : createKeyInspect(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
    };
}
/** @internal */
function createStorageFn(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    let cacheKey = null;
    // Can only have zero or one argument:
    //   - storage.system.account(address)
    //   - storage.timestamp.blockPeriod()
    // For higher-map queries the params are passed in as an tuple, [key1, key2]
    return (...args) => {
        if (type.isPlain) {
            if (!cacheKey) {
                cacheKey = options.skipHashing
                    ? (0,addLength/* compactAddLength */.N)((0,toU8a/* u8aToU8a */.Y)(options.key))
                    : createKey(registry, itemFn, NO_RAW_ARGS);
            }
            return cacheKey;
        }
        const { hashers, key } = type.asMap;
        return hashers.length === 1
            ? createKey(registry, itemFn, { args, hashers, keys: [key] })
            : createKey(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
    };
}
/** @internal */
function createWithMeta(registry, itemFn, options) {
    const { meta, method, prefix, section } = itemFn;
    const storageFn = createStorageFn(registry, itemFn, options);
    storageFn.inspect = createStorageInspect(registry, itemFn, options);
    storageFn.meta = meta;
    storageFn.method = (0,camelCase/* stringCamelCase */.yZ)(method);
    storageFn.prefix = prefix;
    storageFn.section = section;
    // explicitly add the actual method in the toJSON, this gets used to determine caching and without it
    // instances (e.g. collective) will not work since it is only matched on param meta
    storageFn.toJSON = () => (0,spread/* objectSpread */.Z)({ storage: { method, prefix, section } }, meta.toJSON());
    return storageFn;
}
/** @internal */
function extendHeadMeta(registry, { meta: { docs, name, type }, section }, { method }, iterFn) {
    // metadata with a fallback value using the type of the key, the normal
    // meta fallback only applies to actual entry values, create one for head
    const meta = registry.createTypeUnsafe('StorageEntryMetadataLatest', [{
            docs,
            fallback: registry.createTypeUnsafe('Bytes', []),
            modifier: registry.createTypeUnsafe('StorageEntryModifierLatest', [1]), // required
            name,
            type: registry.createTypeUnsafe('StorageEntryTypeLatest', [type.asMap.key, 0])
        }]);
    iterFn.meta = meta;
    const fn = (...args) => registry.createTypeUnsafe('StorageKey', [iterFn(...args), { method, section }]);
    fn.meta = meta;
    return fn;
}
/** @internal */
function extendPrefixedMap(registry, itemFn, storageFn) {
    const { meta: { type }, method, section } = itemFn;
    storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
        if (args.length && (type.isPlain || (args.length >= type.asMap.hashers.length))) {
            throw new Error(`Iteration of ${(0,camelCase/* stringCamelCase */.yZ)(section || 'unknown')}.${(0,camelCase/* stringCamelCase */.yZ)(method || 'unknown')} needs arguments to be at least one less than the full arguments, found [${args.join(', ')}]`);
        }
        if (args.length) {
            if (type.isMap) {
                const { hashers, key } = type.asMap;
                const keysVec = hashers.length === 1
                    ? [key]
                    : registry.lookup.getSiType(key).def.asTuple;
                return new Raw/* Raw */.N(registry, createKeyRaw(registry, itemFn, { args, hashers: hashers.slice(0, args.length), keys: keysVec.slice(0, args.length) }));
            }
        }
        return new Raw/* Raw */.N(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
    });
    return storageFn;
}
/** @internal */
function createFunction(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    const storageFn = createWithMeta(registry, itemFn, options);
    if (type.isMap) {
        extendPrefixedMap(registry, itemFn, storageFn);
    }
    storageFn.keyPrefix = (...args) => (storageFn.iterKey && storageFn.iterKey(...args)) ||
        (0,stripLength/* compactStripLength */.o)(storageFn())[1];
    return storageFn;
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+types-create@10.11.2/node_modules/@polkadot/types-create/util/getTypeDef.js
var getTypeDef = __webpack_require__(60045);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/storage/util.js


function findSiPrimitive(registry, type) {
    const prim = type.toLowerCase();
    return registry.lookup.types.find((t) => (t.type.def.isPrimitive &&
        t.type.def.asPrimitive.toString().toLowerCase() === prim) || (t.type.def.isHistoricMetaCompat &&
        t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim));
}
function findSiType(registry, type) {
    let portable = findSiPrimitive(registry, type);
    // some types are either Sequence or Arrays, cater for these
    // specifically (these all come from the base substrate known keys)
    if (!portable && (type === 'Bytes' || type.startsWith('[u8;'))) {
        const u8 = findSiPrimitive(registry, 'u8');
        if (u8) {
            if (type === 'Bytes') {
                portable = registry.lookup.types.find((t) => (t.type.def.isSequence &&
                    t.type.def.asSequence.type.eq(u8.id)) || (t.type.def.isHistoricMetaCompat &&
                    t.type.def.asHistoricMetaCompat.eq(type)));
            }
            else {
                const td = (0,getTypeDef/* getTypeDef */.s)(type);
                portable = registry.lookup.types.find((t) => (t.type.def.isArray &&
                    t.type.def.asArray.eq({
                        len: td.length,
                        type: u8.id
                    })) || (t.type.def.isHistoricMetaCompat &&
                    t.type.def.asHistoricMetaCompat.eq(type)));
            }
        }
    }
    if (!portable) {
        // Not fatal, however if this happens the storage key using this
        // type will not return valid values, rather it will most probably
        // be decoded incorrectly
        console.warn(`Unable to map ${type} to a lookup index`);
    }
    return portable;
}
/** @internal */
function createRuntimeFunction({ method, prefix, section }, key, { docs, type }) {
    return (registry) => createFunction(registry, {
        meta: registry.createTypeUnsafe('StorageEntryMetadataLatest', [{
                docs: registry.createTypeUnsafe('Vec<Text>', [[docs]]),
                modifier: registry.createTypeUnsafe('StorageEntryModifierLatest', ['Required']),
                name: registry.createTypeUnsafe('Text', [method]),
                toJSON: () => key,
                type: registry.createTypeUnsafe('StorageEntryTypeLatest', [{ Plain: findSiType(registry, type)?.id || 0 }])
            }]),
        method,
        prefix,
        section
    }, { key, skipHashing: true });
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/storage/substrate.js

const prefix = 'Substrate';
const section = 'substrate';
function createSubstrateFn(method, key, meta) {
    return createRuntimeFunction({ method, prefix, section }, key, meta);
}
const substrate = {
    changesTrieConfig: createSubstrateFn('changesTrieConfig', ':changes_trie', {
        docs: 'Changes trie configuration is stored under this key.',
        type: 'u32'
    }),
    childStorageKeyPrefix: createSubstrateFn('childStorageKeyPrefix', ':child_storage:', {
        docs: 'Prefix of child storage keys.',
        type: 'u32'
    }),
    code: createSubstrateFn('code', ':code', {
        docs: 'Wasm code of the runtime.',
        type: 'Bytes'
    }),
    extrinsicIndex: createSubstrateFn('extrinsicIndex', ':extrinsic_index', {
        docs: 'Current extrinsic index (u32) is stored under this key.',
        type: 'u32'
    }),
    heapPages: createSubstrateFn('heapPages', ':heappages', {
        docs: 'Number of wasm linear memory pages required for execution of the runtime.',
        type: 'u64'
    }),
    intrablockEntropy: createSubstrateFn('intrablockEntropy', ':intrablock_entropy', {
        docs: 'Current intra-block entropy (a universally unique `[u8; 32]` value) is stored here.',
        type: '[u8; 32]'
    })
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/storage/getStorage.js

/** @internal */
function getStorage(registry) {
    const storage = {};
    const entries = Object.entries(substrate);
    for (let e = 0, count = entries.length; e < count; e++) {
        storage[entries[e][0]] = entries[e][1](registry);
    }
    return { substrate: storage };
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+types@10.11.2/node_modules/@polkadot/types/metadata/decorate/storage/index.js





const VERSION_NAME = 'palletVersion';
const VERSION_KEY = ':__STORAGE_VERSION__:';
const VERSION_DOCS = { docs: 'Returns the current pallet version from storage', type: 'u16' };
/** @internal */
function decorateStorage(registry, { pallets }, _metaVersion) {
    const result = getStorage(registry);
    for (let i = 0, count = pallets.length; i < count; i++) {
        const { name, storage } = pallets[i];
        if (storage.isSome) {
            const section = (0,camelCase/* stringCamelCase */.yZ)(name);
            const { items, prefix: _prefix } = storage.unwrap();
            const prefix = _prefix.toString();
            (0,lazy/* lazyMethod */.W)(result, section, () => (0,lazy/* lazyMethods */.G)({
                palletVersion: createRuntimeFunction({ method: VERSION_NAME, prefix, section }, createKeyRaw(registry, { method: VERSION_KEY, prefix: name.toString() }, NO_RAW_ARGS), VERSION_DOCS)(registry)
            }, items, (meta) => createFunction(registry, { meta, method: meta.name.toString(), prefix, section }, {}), util/* objectNameToCamel */.q));
        }
    }
    return result;
}


/***/ }),

/***/ 21381:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ objectNameToString),
/* harmony export */   q: () => (/* binding */ objectNameToCamel)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(36600);

function convert(fn) {
    return ({ name }) => fn(name);
}
const objectNameToCamel = /*#__PURE__*/ convert(_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .stringCamelCase */ .yZ);
const objectNameToString = /*#__PURE__*/ convert((n) => n.toString());


/***/ }),

/***/ 85725:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I: () => (/* binding */ getSiName)
/* harmony export */ });
function getSiName(lookup, type) {
    const typeDef = lookup.getTypeDef(type);
    return typeDef.lookupName || typeDef.type;
}


/***/ }),

/***/ 88293:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ unwrapStorageType)
/* harmony export */ });
/* unused harmony export unwrapStorageSi */
/* harmony import */ var _metadata_util_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85725);

/** @internal */
function unwrapStorageSi(type) {
    return type.isPlain
        ? type.asPlain
        : type.asMap.value;
}
/** @internal */
function unwrapStorageType(registry, type, isOptional) {
    const outputType = (0,_metadata_util_index_js__WEBPACK_IMPORTED_MODULE_0__/* .getSiName */ .I)(registry.lookup, unwrapStorageSi(type));
    return isOptional
        ? `Option<${outputType}>`
        : outputType;
}


/***/ }),

/***/ 41955:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   l: () => (/* binding */ checkAddressChecksum)
/* harmony export */ });
/* harmony import */ var _sshash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12413);

function checkAddressChecksum(decoded) {
    const ss58Length = (decoded[0] & 64) ? 2 : 1;
    const ss58Decoded = ss58Length === 1
        ? decoded[0]
        : ((decoded[0] & 63) << 2) | (decoded[1] >> 6) | ((decoded[1] & 63) << 8);
    // 32/33 bytes public + 2 bytes checksum + prefix
    const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
    const length = decoded.length - (isPublicKey ? 2 : 1);
    // calculate the hash and do the checksum byte checks
    const hash = (0,_sshash_js__WEBPACK_IMPORTED_MODULE_0__/* .sshash */ .b)(decoded.subarray(0, length));
    const isValid = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey
        ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1]
        : decoded[decoded.length - 1] === hash[0]);
    return [isValid, length, ss58Length, ss58Decoded];
}


/***/ }),

/***/ 82628:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: () => (/* binding */ decodeAddress)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38589);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14911);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42740);
/* harmony import */ var _base58_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42575);
/* harmony import */ var _checksum_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(41955);
/* harmony import */ var _defaults_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6600);




function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
    if (!encoded) {
        throw new Error('Invalid empty address passed');
    }
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isU8a */ .U)(encoded) || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .isHex */ .vq)(encoded)) {
        return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aToU8a */ .Y)(encoded);
    }
    try {
        const decoded = (0,_base58_index_js__WEBPACK_IMPORTED_MODULE_3__/* .base58Decode */ .MW)(encoded);
        if (!_defaults_js__WEBPACK_IMPORTED_MODULE_4__/* .defaults */ .c.allowedEncodedLengths.includes(decoded.length)) {
            throw new Error('Invalid decoded address length');
        }
        const [isValid, endPos, ss58Length, ss58Decoded] = (0,_checksum_js__WEBPACK_IMPORTED_MODULE_5__/* .checkAddressChecksum */ .l)(decoded);
        if (!isValid && !ignoreChecksum) {
            throw new Error('Invalid decoded address checksum');
        }
        else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
            throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
        }
        return decoded.slice(ss58Length, endPos);
    }
    catch (error) {
        throw new Error(`Decoding ${encoded}: ${error.message}`);
    }
}


/***/ }),

/***/ 6600:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ defaults)
/* harmony export */ });
/* harmony import */ var _networks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94646);

const defaults = {
    allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
    // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
    allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
    allowedPrefix: _networks_js__WEBPACK_IMPORTED_MODULE_0__/* .availableNetworks */ .oc.map(({ prefix }) => prefix),
    prefix: 42
};


/***/ }),

/***/ 65439:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: () => (/* binding */ encodeAddress)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(93173);
/* harmony import */ var _base58_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42575);
/* harmony import */ var _decode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82628);
/* harmony import */ var _defaults_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6600);
/* harmony import */ var _sshash_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12413);





function encodeAddress(key, ss58Format = _defaults_js__WEBPACK_IMPORTED_MODULE_0__/* .defaults */ .c.prefix) {
    // decode it, this means we can re-encode an address
    const u8a = (0,_decode_js__WEBPACK_IMPORTED_MODULE_1__/* .decodeAddress */ .m)(key);
    if ((ss58Format < 0) || (ss58Format > 16383) || [46, 47].includes(ss58Format)) {
        throw new Error('Out of range ss58Format specified');
    }
    else if (!_defaults_js__WEBPACK_IMPORTED_MODULE_0__/* .defaults */ .c.allowedDecodedLengths.includes(u8a.length)) {
        throw new Error(`Expected a valid key to convert, with length ${_defaults_js__WEBPACK_IMPORTED_MODULE_0__/* .defaults */ .c.allowedDecodedLengths.join(', ')}`);
    }
    const input = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aConcat */ .e)(ss58Format < 64
        ? [ss58Format]
        : [
            ((ss58Format & 252) >> 2) | 64,
            (ss58Format >> 8) | ((ss58Format & 3) << 6)
        ], u8a);
    return (0,_base58_index_js__WEBPACK_IMPORTED_MODULE_3__/* .base58Encode */ .ni)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aConcat */ .e)(input, (0,_sshash_js__WEBPACK_IMPORTED_MODULE_4__/* .sshash */ .b)(input).subarray(0, [32, 33].includes(u8a.length) ? 2 : 1)));
}


/***/ }),

/***/ 12413:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ sshash)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56358);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(93173);
/* harmony import */ var _blake2_asU8a_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(89753);


const SS58_PREFIX = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .stringToU8a */ .d)('SS58PRE');
function sshash(key) {
    return (0,_blake2_asU8a_js__WEBPACK_IMPORTED_MODULE_1__/* .blake2AsU8a */ .b)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aConcat */ .e)(SS58_PREFIX, key), 512);
}


/***/ }),

/***/ 8583:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PC: () => (/* binding */ createEncode),
/* harmony export */   ps: () => (/* binding */ createValidate),
/* harmony export */   zQ: () => (/* binding */ createDecode)
/* harmony export */ });
/* unused harmony export createIs */
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42740);

/** @internal */
function createDecode({ coder, ipfs }, validate) {
    return (value, ipfsCompat) => {
        validate(value, ipfsCompat);
        return coder.decode(ipfs && ipfsCompat
            ? value.substring(1)
            : value);
    };
}
/** @internal */
function createEncode({ coder, ipfs }) {
    return (value, ipfsCompat) => {
        const out = coder.encode((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .u8aToU8a */ .Y)(value));
        return ipfs && ipfsCompat
            ? `${ipfs}${out}`
            : out;
    };
}
/** @internal */
function createIs(validate) {
    return (value, ipfsCompat) => {
        try {
            return validate(value, ipfsCompat);
        }
        catch {
            return false;
        }
    };
}
/** @internal */
function createValidate({ chars, ipfs, type, withPadding }) {
    return (value, ipfsCompat) => {
        if (typeof value !== 'string') {
            throw new Error(`Expected ${type} string input`);
        }
        else if (ipfs && ipfsCompat && !value.startsWith(ipfs)) {
            throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
        }
        for (let i = (ipfsCompat ? 1 : 0), count = value.length; i < count; i++) {
            if (chars.includes(value[i])) {
                // all ok, character found
            }
            else if (withPadding && value[i] === '=') {
                if (i === count - 1) {
                    // last character, everything ok
                }
                else if (value[i + 1] === '=') {
                    // next one is also padding, sequence ok
                }
                else {
                    throw new Error(`Invalid ${type} padding sequence "${value[i]}${value[i + 1]}" at index ${i}`);
                }
            }
            else {
                throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
            }
        }
        return true;
    };
}


/***/ }),

/***/ 42575:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MW: () => (/* binding */ base58Decode),
/* harmony export */   ni: () => (/* binding */ base58Encode)
/* harmony export */ });
/* unused harmony exports base58Validate, isBase58 */
/* harmony import */ var _scure_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27449);
/* harmony import */ var _base32_helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8583);


const config = {
    chars: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',
    coder: _scure_base__WEBPACK_IMPORTED_MODULE_0__/* .base58 */ .Jq,
    ipfs: 'z',
    type: 'base58'
};
/**
 * @name base58Validate
 * @summary Validates a base58 value.
 * @description
 * Validates that the supplied value is valid base58, throwing exceptions if not
 */
const base58Validate = /*#__PURE__*/ (0,_base32_helpers_js__WEBPACK_IMPORTED_MODULE_1__/* .createValidate */ .ps)(config);
/**
 * @name base58Decode
 * @summary Decodes a base58 value.
 * @description
 * From the provided input, decode the base58 and return the result as an `Uint8Array`.
 */
const base58Decode = /*#__PURE__*/ (0,_base32_helpers_js__WEBPACK_IMPORTED_MODULE_1__/* .createDecode */ .zQ)(config, base58Validate);
/**
* @name base58Encode
* @summary Creates a base58 value.
* @description
* From the provided input, create the base58 and return the result as a string.
*/
const base58Encode = /*#__PURE__*/ (0,_base32_helpers_js__WEBPACK_IMPORTED_MODULE_1__/* .createEncode */ .PC)(config);
/**
* @name isBase58
* @description Checks if the input is in base58, returning true/false
*/
const isBase58 = /*#__PURE__*/ (/* unused pure expression or super */ null && (createIs(base58Validate)));


/***/ }),

/***/ 89753:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  $: () => (/* binding */ blake2AsHex),
  b: () => (/* binding */ blake2AsU8a)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/_assert.js
var _assert = __webpack_require__(76871);
// EXTERNAL MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/utils.js + 1 modules
var utils = __webpack_require__(82478);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/_blake2.js


// Blake is based on ChaCha permutation.
// For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].
// prettier-ignore
const SIGMA = /* @__PURE__ */ new Uint8Array([
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
    12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
    13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
    6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
    10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
]);
class BLAKE2 extends utils/* Hash */.kb {
    constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.length = 0;
        this.pos = 0;
        this.finished = false;
        this.destroyed = false;
        (0,_assert/* number */.Rx)(blockLen);
        (0,_assert/* number */.Rx)(outputLen);
        (0,_assert/* number */.Rx)(keyLen);
        if (outputLen < 0 || outputLen > keyLen)
            throw new Error('outputLen bigger than keyLen');
        if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen))
            throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
        if (opts.salt !== undefined && opts.salt.length !== saltLen)
            throw new Error(`salt must be ${saltLen} byte long or undefined`);
        if (opts.personalization !== undefined && opts.personalization.length !== persLen)
            throw new Error(`personalization must be ${persLen} byte long or undefined`);
        this.buffer32 = (0,utils/* u32 */.Jq)((this.buffer = new Uint8Array(blockLen)));
    }
    update(data) {
        (0,_assert/* exists */.Gg)(this);
        // Main difference with other hashes: there is flag for last block,
        // so we cannot process current block before we know that there
        // is the next one. This significantly complicates logic and reduces ability
        // to do zero-copy processing
        const { blockLen, buffer, buffer32 } = this;
        data = (0,utils/* toBytes */.O0)(data);
        const len = data.length;
        const offset = data.byteOffset;
        const buf = data.buffer;
        for (let pos = 0; pos < len;) {
            // If buffer is full and we still have input (don't process last block, same as blake2s)
            if (this.pos === blockLen) {
                this.compress(buffer32, 0, false);
                this.pos = 0;
            }
            const take = Math.min(blockLen - this.pos, len - pos);
            const dataOffset = offset + pos;
            // full block && aligned to 4 bytes && not last in input
            if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
                const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
                for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
                    this.length += blockLen;
                    this.compress(data32, pos32, false);
                }
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            this.length += take;
            pos += take;
        }
        return this;
    }
    digestInto(out) {
        (0,_assert/* exists */.Gg)(this);
        (0,_assert/* output */.J8)(out, this);
        const { pos, buffer32 } = this;
        this.finished = true;
        // Padding
        this.buffer.subarray(pos).fill(0);
        this.compress(buffer32, 0, true);
        const out32 = (0,utils/* u32 */.Jq)(out);
        this.get().forEach((v, i) => (out32[i] = v));
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        const { buffer, length, finished, destroyed, outputLen, pos } = this;
        to || (to = new this.constructor({ dkLen: outputLen }));
        to.set(...this.get());
        to.length = length;
        to.finished = finished;
        to.destroyed = destroyed;
        to.outputLen = outputLen;
        to.buffer.set(buffer);
        to.pos = pos;
        return to;
    }
}
//# sourceMappingURL=_blake2.js.map
// EXTERNAL MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/_u64.js
var _u64 = __webpack_require__(32173);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/blake2b.js



// Same as SHA-512 but LE
// prettier-ignore
const IV = /* @__PURE__ */ new Uint32Array([
    0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,
    0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19
]);
// Temporary buffer
const BUF = /* @__PURE__ */ new Uint32Array(32);
// Mixing function G splitted in two halfs
function G1(a, b, c, d, msg, x) {
    // NOTE: V is LE here
    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
    // v[a] = (v[a] + v[b] + x) | 0;
    let ll = _u64/* default.add3L */.ZP.add3L(Al, Bl, Xl);
    Ah = _u64/* default.add3H */.ZP.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    // v[d] = rotr(v[d] ^ v[a], 32)
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: _u64/* default.rotr32H */.ZP.rotr32H(Dh, Dl), Dl: _u64/* default.rotr32L */.ZP.rotr32L(Dh, Dl) });
    // v[c] = (v[c] + v[d]) | 0;
    ({ h: Ch, l: Cl } = _u64/* default.add */.ZP.add(Ch, Cl, Dh, Dl));
    // v[b] = rotr(v[b] ^ v[c], 24)
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: _u64/* default.rotrSH */.ZP.rotrSH(Bh, Bl, 24), Bl: _u64/* default.rotrSL */.ZP.rotrSL(Bh, Bl, 24) });
    (BUF[2 * a] = Al), (BUF[2 * a + 1] = Ah);
    (BUF[2 * b] = Bl), (BUF[2 * b + 1] = Bh);
    (BUF[2 * c] = Cl), (BUF[2 * c + 1] = Ch);
    (BUF[2 * d] = Dl), (BUF[2 * d + 1] = Dh);
}
function G2(a, b, c, d, msg, x) {
    // NOTE: V is LE here
    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
    // v[a] = (v[a] + v[b] + x) | 0;
    let ll = _u64/* default.add3L */.ZP.add3L(Al, Bl, Xl);
    Ah = _u64/* default.add3H */.ZP.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    // v[d] = rotr(v[d] ^ v[a], 16)
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: _u64/* default.rotrSH */.ZP.rotrSH(Dh, Dl, 16), Dl: _u64/* default.rotrSL */.ZP.rotrSL(Dh, Dl, 16) });
    // v[c] = (v[c] + v[d]) | 0;
    ({ h: Ch, l: Cl } = _u64/* default.add */.ZP.add(Ch, Cl, Dh, Dl));
    // v[b] = rotr(v[b] ^ v[c], 63)
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: _u64/* default.rotrBH */.ZP.rotrBH(Bh, Bl, 63), Bl: _u64/* default.rotrBL */.ZP.rotrBL(Bh, Bl, 63) });
    (BUF[2 * a] = Al), (BUF[2 * a + 1] = Ah);
    (BUF[2 * b] = Bl), (BUF[2 * b + 1] = Bh);
    (BUF[2 * c] = Cl), (BUF[2 * c + 1] = Ch);
    (BUF[2 * d] = Dl), (BUF[2 * d + 1] = Dh);
}
class BLAKE2b extends BLAKE2 {
    constructor(opts = {}) {
        super(128, opts.dkLen === undefined ? 64 : opts.dkLen, opts, 64, 16, 16);
        // Same as SHA-512, but LE
        this.v0l = IV[0] | 0;
        this.v0h = IV[1] | 0;
        this.v1l = IV[2] | 0;
        this.v1h = IV[3] | 0;
        this.v2l = IV[4] | 0;
        this.v2h = IV[5] | 0;
        this.v3l = IV[6] | 0;
        this.v3h = IV[7] | 0;
        this.v4l = IV[8] | 0;
        this.v4h = IV[9] | 0;
        this.v5l = IV[10] | 0;
        this.v5h = IV[11] | 0;
        this.v6l = IV[12] | 0;
        this.v6h = IV[13] | 0;
        this.v7l = IV[14] | 0;
        this.v7h = IV[15] | 0;
        const keyLength = opts.key ? opts.key.length : 0;
        this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);
        if (opts.salt) {
            const salt = (0,utils/* u32 */.Jq)((0,utils/* toBytes */.O0)(opts.salt));
            this.v4l ^= salt[0];
            this.v4h ^= salt[1];
            this.v5l ^= salt[2];
            this.v5h ^= salt[3];
        }
        if (opts.personalization) {
            const pers = (0,utils/* u32 */.Jq)((0,utils/* toBytes */.O0)(opts.personalization));
            this.v6l ^= pers[0];
            this.v6h ^= pers[1];
            this.v7l ^= pers[2];
            this.v7h ^= pers[3];
        }
        if (opts.key) {
            // Pad to blockLen and update
            const tmp = new Uint8Array(this.blockLen);
            tmp.set((0,utils/* toBytes */.O0)(opts.key));
            this.update(tmp);
        }
    }
    // prettier-ignore
    get() {
        let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
        return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
    }
    // prettier-ignore
    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
        this.v0l = v0l | 0;
        this.v0h = v0h | 0;
        this.v1l = v1l | 0;
        this.v1h = v1h | 0;
        this.v2l = v2l | 0;
        this.v2h = v2h | 0;
        this.v3l = v3l | 0;
        this.v3h = v3h | 0;
        this.v4l = v4l | 0;
        this.v4h = v4h | 0;
        this.v5l = v5l | 0;
        this.v5h = v5h | 0;
        this.v6l = v6l | 0;
        this.v6h = v6h | 0;
        this.v7l = v7l | 0;
        this.v7h = v7h | 0;
    }
    compress(msg, offset, isLast) {
        this.get().forEach((v, i) => (BUF[i] = v)); // First half from state.
        BUF.set(IV, 16); // Second half from IV.
        let { h, l } = _u64/* default.fromBig */.ZP.fromBig(BigInt(this.length));
        BUF[24] = IV[8] ^ l; // Low word of the offset.
        BUF[25] = IV[9] ^ h; // High word.
        // Invert all bits for last block
        if (isLast) {
            BUF[28] = ~BUF[28];
            BUF[29] = ~BUF[29];
        }
        let j = 0;
        const s = SIGMA;
        for (let i = 0; i < 12; i++) {
            G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
            G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
            G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
            G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
            G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
            G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
            G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
            G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
            G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
            G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
            G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
            G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
            G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
            G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
            G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
            G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
        }
        this.v0l ^= BUF[0] ^ BUF[16];
        this.v0h ^= BUF[1] ^ BUF[17];
        this.v1l ^= BUF[2] ^ BUF[18];
        this.v1h ^= BUF[3] ^ BUF[19];
        this.v2l ^= BUF[4] ^ BUF[20];
        this.v2h ^= BUF[5] ^ BUF[21];
        this.v3l ^= BUF[6] ^ BUF[22];
        this.v3h ^= BUF[7] ^ BUF[23];
        this.v4l ^= BUF[8] ^ BUF[24];
        this.v4h ^= BUF[9] ^ BUF[25];
        this.v5l ^= BUF[10] ^ BUF[26];
        this.v5h ^= BUF[11] ^ BUF[27];
        this.v6l ^= BUF[12] ^ BUF[28];
        this.v6h ^= BUF[13] ^ BUF[29];
        this.v7l ^= BUF[14] ^ BUF[30];
        this.v7h ^= BUF[15] ^ BUF[31];
        BUF.fill(0);
    }
    destroy() {
        this.destroyed = true;
        this.buffer32.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
/**
 * BLAKE2b - optimized for 64-bit platforms. JS doesn't have uint64, so it's slower than BLAKE2s.
 * @param msg - message that would be hashed
 * @param opts - dkLen, key, salt, personalization
 */
const blake2b = /* @__PURE__ */ (0,utils/* wrapConstructorWithOpts */.K$)((opts) => new BLAKE2b(opts));
//# sourceMappingURL=blake2b.js.map
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toU8a.js
var toU8a = __webpack_require__(42740);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/has.js
var has = __webpack_require__(37117);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+wasm-crypto@7.3.2_@polkadot+util@12.6.2_@polkadot+x-randomvalues@12.6.2/node_modules/@polkadot/wasm-crypto/bundle.js + 8 modules
var bundle = __webpack_require__(22374);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/helpers.js
var helpers = __webpack_require__(58568);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/blake2/asU8a.js




/**
 * @name blake2AsU8a
 * @summary Creates a blake2b u8a from the input.
 * @description
 * From a `Uint8Array` input, create the blake2b and return the result as a u8a with the specified `bitLength`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { blake2AsU8a } from '@polkadot/util-crypto';
 *
 * blake2AsU8a('abc'); // => [0xba, 0x80, 0xa5, 0x3f, 0x98, 0x1c, 0x4d, 0x0d]
 * ```
 */
function blake2AsU8a(data, bitLength = 256, key, onlyJs) {
    const byteLength = Math.ceil(bitLength / 8);
    const u8a = (0,toU8a/* u8aToU8a */.Y)(data);
    return !has/* hasBigInt */.vc || (!onlyJs && (0,bundle/* isReady */.DK)())
        ? (0,bundle/* blake2b */.Rg)(u8a, (0,toU8a/* u8aToU8a */.Y)(key), byteLength)
        : key
            ? blake2b(u8a, { dkLen: byteLength, key })
            : blake2b(u8a, { dkLen: byteLength });
}
/**
 * @name blake2AsHex
 * @description Creates a blake2b hex from the input.
 */
const blake2AsHex = /*#__PURE__*/ (0,helpers/* createAsHex */.sh)(blake2AsU8a);


/***/ }),

/***/ 36684:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tq: () => (/* binding */ BN_BE_256_OPTS)
/* harmony export */ });
/* unused harmony exports BN_BE_OPTS, BN_LE_OPTS, BN_LE_16_OPTS, BN_BE_32_OPTS, BN_LE_32_OPTS, BN_LE_256_OPTS, BN_LE_512_OPTS */
const BN_BE_OPTS = { isLe: false };
const BN_LE_OPTS = { isLe: true };
const BN_LE_16_OPTS = { bitLength: 16, isLe: true };
const BN_BE_32_OPTS = { bitLength: 32, isLe: false };
const BN_LE_32_OPTS = { bitLength: 32, isLe: true };
const BN_BE_256_OPTS = { bitLength: 256, isLe: false };
const BN_LE_256_OPTS = { bitLength: 256, isLe: true };
const BN_LE_512_OPTS = { bitLength: 512, isLe: true };


/***/ }),

/***/ 92782:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I: () => (/* binding */ cryptoWaitReady)
/* harmony export */ });
/* unused harmony export cryptoIsReady */
/* harmony import */ var _polkadot_wasm_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(22374);

const cryptoIsReady = (/* unused pure expression or super */ null && (isReady));
function cryptoWaitReady() {
    return (0,_polkadot_wasm_crypto__WEBPACK_IMPORTED_MODULE_0__/* .waitReady */ .q$)()
        .then(() => {
        if (!(0,_polkadot_wasm_crypto__WEBPACK_IMPORTED_MODULE_0__/* .isReady */ .DK)()) {
            throw new Error('Unable to initialize @polkadot/util-crypto');
        }
        return true;
    })
        .catch(() => false);
}


/***/ }),

/***/ 42173:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   K: () => (/* binding */ ethereumEncode)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(26048);
/* harmony import */ var _keccak_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16520);
/* harmony import */ var _secp256k1_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(91905);



function getH160(u8a) {
    if ([33, 65].includes(u8a.length)) {
        u8a = (0,_keccak_index_js__WEBPACK_IMPORTED_MODULE_0__/* .keccakAsU8a */ .ij)((0,_secp256k1_index_js__WEBPACK_IMPORTED_MODULE_1__/* .secp256k1Expand */ .o)(u8a));
    }
    return u8a.slice(-20);
}
function ethereumEncode(addressOrPublic) {
    if (!addressOrPublic) {
        return '0x';
    }
    const u8aAddress = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .u8aToU8a */ .Y)(addressOrPublic);
    if (![20, 32, 33, 65].includes(u8aAddress.length)) {
        throw new Error(`Invalid address or publicKey provided, received ${u8aAddress.length} bytes input`);
    }
    const address = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .u8aToHex */ .c)(getH160(u8aAddress), -1, false);
    const hash = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .u8aToHex */ .c)((0,_keccak_index_js__WEBPACK_IMPORTED_MODULE_0__/* .keccakAsU8a */ .ij)(address), -1, false);
    let result = '';
    for (let i = 0; i < 40; i++) {
        result = `${result}${parseInt(hash[i], 16) > 7 ? address[i].toUpperCase() : address[i]}`;
    }
    return `0x${result}`;
}


/***/ }),

/***/ 23143:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ isEthereumAddress)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14911);
/* harmony import */ var _isChecksum_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20222);


function isEthereumAddress(address) {
    if (!address || address.length !== 42 || !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .isHex */ .vq)(address)) {
        return false;
    }
    else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
        return true;
    }
    return (0,_isChecksum_js__WEBPACK_IMPORTED_MODULE_1__/* .isEthereumChecksum */ .V)(address);
}


/***/ }),

/***/ 20222:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   V: () => (/* binding */ isEthereumChecksum)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26048);
/* harmony import */ var _keccak_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16520);


function isInvalidChar(char, byte) {
    return char !== (byte > 7
        ? char.toUpperCase()
        : char.toLowerCase());
}
function isEthereumChecksum(_address) {
    const address = _address.replace('0x', '');
    const hash = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .u8aToHex */ .c)((0,_keccak_index_js__WEBPACK_IMPORTED_MODULE_1__/* .keccakAsU8a */ .ij)(address.toLowerCase()), -1, false);
    for (let i = 0; i < 40; i++) {
        if (isInvalidChar(address[i], parseInt(hash[i], 16))) {
            return false;
        }
    }
    return true;
}


/***/ }),

/***/ 58568:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   nY: () => (/* binding */ createDualHasher),
/* harmony export */   sh: () => (/* binding */ createAsHex)
/* harmony export */ });
/* unused harmony export createBitHasher */
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26048);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(42740);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(37117);
/* harmony import */ var _polkadot_wasm_crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22374);


/** @internal */
function createAsHex(fn) {
    return (...args) => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .u8aToHex */ .c)(fn(...args));
}
/** @internal */
function createBitHasher(bitLength, fn) {
    return (data, onlyJs) => fn(data, bitLength, onlyJs);
}
/** @internal */
function createDualHasher(wa, js) {
    return (value, bitLength = 256, onlyJs) => {
        const u8a = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__/* .u8aToU8a */ .Y)(value);
        return !_polkadot_util__WEBPACK_IMPORTED_MODULE_2__/* .hasBigInt */ .vc || (!onlyJs && (0,_polkadot_wasm_crypto__WEBPACK_IMPORTED_MODULE_3__/* .isReady */ .DK)())
            ? wa[bitLength](u8a)
            : js[bitLength](u8a);
    };
}


/***/ }),

/***/ 16520:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ij: () => (/* binding */ keccakAsU8a)
});

// UNUSED EXPORTS: keccak256AsU8a, keccak512AsU8a, keccakAsHex

// EXTERNAL MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/_assert.js
var _assert = __webpack_require__(76871);
// EXTERNAL MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/_u64.js
var _u64 = __webpack_require__(32173);
// EXTERNAL MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/utils.js + 1 modules
var utils = __webpack_require__(82478);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/sha3.js



// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.
// It's called a sponge function.
// Various per round constants calculations
const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
const _0n = /* @__PURE__ */ BigInt(0);
const _1n = /* @__PURE__ */ BigInt(1);
const _2n = /* @__PURE__ */ BigInt(2);
const _7n = /* @__PURE__ */ BigInt(7);
const _256n = /* @__PURE__ */ BigInt(256);
const _0x71n = /* @__PURE__ */ BigInt(0x71);
for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
    // Pi
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
    // Iota
    let t = _0n;
    for (let j = 0; j < 7; j++) {
        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;
        if (R & _2n)
            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);
    }
    _SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0,_u64/* split */.Vl)(_SHA3_IOTA, true);
// Left rotation (without 0, 32, 64)
const rotlH = (h, l, s) => (s > 32 ? (0,_u64/* rotlBH */.SD)(h, l, s) : (0,_u64/* rotlSH */.EP)(h, l, s));
const rotlL = (h, l, s) => (s > 32 ? (0,_u64/* rotlBL */.mk)(h, l, s) : (0,_u64/* rotlSL */.gm)(h, l, s));
// Same as keccakf1600, but allows to skip some rounds
function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for (let round = 24 - rounds; round < 24; round++) {
        // Theta θ
        for (let x = 0; x < 10; x++)
            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for (let y = 0; y < 50; y += 10) {
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (ρ) and Pi (π)
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (χ)
        for (let y = 0; y < 50; y += 10) {
            for (let x = 0; x < 10; x++)
                B[x] = s[y + x];
            for (let x = 0; x < 10; x++)
                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (ι)
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
}
class Keccak extends utils/* Hash */.kb {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        // Can be passed from user as dkLen
        (0,_assert/* number */.Rx)(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        if (0 >= this.blockLen || this.blockLen >= 200)
            throw new Error('Sha3 supports only keccak-f1600 function');
        this.state = new Uint8Array(200);
        this.state32 = (0,utils/* u32 */.Jq)(this.state);
    }
    keccak() {
        keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        (0,_assert/* exists */.Gg)(this);
        const { blockLen, state } = this;
        data = (0,utils/* toBytes */.O0)(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            for (let i = 0; i < take; i++)
                state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen)
                this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished)
            return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
            this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        (0,_assert/* exists */.Gg)(this, false);
        (0,_assert/* bytes */.aI)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len;) {
            if (this.posOut >= blockLen)
                this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF)
            throw new Error('XOF is not possible for this instance');
        return this.writeInto(out);
    }
    xof(bytes) {
        (0,_assert/* number */.Rx)(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        (0,_assert/* output */.J8)(out, this);
        if (this.finished)
            throw new Error('digest() was already called');
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        this.state.fill(0);
    }
    _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
const gen = (suffix, blockLen, outputLen) => (0,utils/* wrapConstructor */.hE)(() => new Keccak(blockLen, suffix, outputLen));
const sha3_224 = /* @__PURE__ */ (/* unused pure expression or super */ null && (gen(0x06, 144, 224 / 8)));
/**
 * SHA3-256 hash function
 * @param message - that would be hashed
 */
const sha3_256 = /* @__PURE__ */ (/* unused pure expression or super */ null && (gen(0x06, 136, 256 / 8)));
const sha3_384 = /* @__PURE__ */ (/* unused pure expression or super */ null && (gen(0x06, 104, 384 / 8)));
const sha3_512 = /* @__PURE__ */ (/* unused pure expression or super */ null && (gen(0x06, 72, 512 / 8)));
const keccak_224 = /* @__PURE__ */ (/* unused pure expression or super */ null && (gen(0x01, 144, 224 / 8)));
/**
 * keccak-256 hash function. Different from SHA3-256.
 * @param message - that would be hashed
 */
const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);
const keccak_384 = /* @__PURE__ */ (/* unused pure expression or super */ null && (gen(0x01, 104, 384 / 8)));
const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);
const genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
const shake128 = /* @__PURE__ */ (/* unused pure expression or super */ null && (genShake(0x1f, 168, 128 / 8)));
const shake256 = /* @__PURE__ */ (/* unused pure expression or super */ null && (genShake(0x1f, 136, 256 / 8)));
//# sourceMappingURL=sha3.js.map
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+wasm-crypto@7.3.2_@polkadot+util@12.6.2_@polkadot+x-randomvalues@12.6.2/node_modules/@polkadot/wasm-crypto/bundle.js + 8 modules
var bundle = __webpack_require__(22374);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/helpers.js
var helpers = __webpack_require__(58568);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/keccak/asU8a.js



/**
 * @name keccakAsU8a
 * @summary Creates a keccak Uint8Array from the input.
 * @description
 * From either a `string` or a `Buffer` input, create the keccak and return the result as a `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { keccakAsU8a } from '@polkadot/util-crypto';
 *
 * keccakAsU8a('123'); // => Uint8Array
 * ```
 */
const keccakAsU8a = /*#__PURE__*/ (0,helpers/* createDualHasher */.nY)({ 256: bundle/* keccak256 */.wn, 512: bundle/* keccak512 */.nU }, { 256: keccak_256, 512: keccak_512 });
/**
 * @name keccak256AsU8a
 * @description Creates a keccak256 Uint8Array from the input.
 */
const keccak256AsU8a = /*#__PURE__*/ (/* unused pure expression or super */ null && (createBitHasher(256, keccakAsU8a)));
/**
 * @name keccak512AsU8a
 * @description Creates a keccak512 Uint8Array from the input.
 */
const keccak512AsU8a = /*#__PURE__*/ (/* unused pure expression or super */ null && (createBitHasher(512, keccakAsU8a)));
/**
 * @name keccakAsHex
 * @description Creates a keccak hex string from the input.
 */
const keccakAsHex = /*#__PURE__*/ (/* unused pure expression or super */ null && (createAsHex(keccakAsU8a)));


/***/ }),

/***/ 91905:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: () => (/* binding */ secp256k1Expand)
/* harmony export */ });
/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56181);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37117);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(93173);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82144);
/* harmony import */ var _polkadot_wasm_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22374);
/* harmony import */ var _bn_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(36684);




function secp256k1Expand(publicKey, onlyJs) {
    if (![33, 65].includes(publicKey.length)) {
        throw new Error(`Invalid publicKey provided, received ${publicKey.length} bytes input`);
    }
    if (publicKey.length === 65) {
        return publicKey.subarray(1);
    }
    if (!_polkadot_util__WEBPACK_IMPORTED_MODULE_0__/* .hasBigInt */ .vc || (!onlyJs && (0,_polkadot_wasm_crypto__WEBPACK_IMPORTED_MODULE_1__/* .isReady */ .DK)())) {
        return (0,_polkadot_wasm_crypto__WEBPACK_IMPORTED_MODULE_1__/* .secp256k1Expand */ .o3)(publicKey).subarray(1);
    }
    const { px, py } = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__/* .secp256k1 */ .kA.ProjectivePoint.fromHex(publicKey);
    return (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__/* .u8aConcat */ .e)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .bnToU8a */ .a)(px, _bn_js__WEBPACK_IMPORTED_MODULE_5__/* .BN_BE_256_OPTS */ .tq), (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__/* .bnToU8a */ .a)(py, _bn_js__WEBPACK_IMPORTED_MODULE_5__/* .BN_BE_256_OPTS */ .tq));
}


/***/ }),

/***/ 39521:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  r: () => (/* binding */ xxhashAsU8a)
});

// UNUSED EXPORTS: xxhashAsHex

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toU8a.js
var toU8a = __webpack_require__(42740);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/has.js
var has = __webpack_require__(37117);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+wasm-crypto@7.3.2_@polkadot+util@12.6.2_@polkadot+x-randomvalues@12.6.2/node_modules/@polkadot/wasm-crypto/bundle.js + 8 modules
var bundle = __webpack_require__(22374);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bi/consts.js
var consts = __webpack_require__(2523);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+x-bigint@12.6.2/node_modules/@polkadot/x-bigint/index.js
var x_bigint = __webpack_require__(70735);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/xxhash/xxhash64.js


const P64_1 = (0,x_bigint/* BigInt */.t)('11400714785074694791');
const P64_2 = (0,x_bigint/* BigInt */.t)('14029467366897019727');
const P64_3 = (0,x_bigint/* BigInt */.t)('1609587929392839161');
const P64_4 = (0,x_bigint/* BigInt */.t)('9650029242287828579');
const P64_5 = (0,x_bigint/* BigInt */.t)('2870177450012600261');
const U64 = (0,x_bigint/* BigInt */.t)('0xffffffffffffffff');
const _7n = (0,x_bigint/* BigInt */.t)(7);
const _11n = (0,x_bigint/* BigInt */.t)(11);
const _12n = (0,x_bigint/* BigInt */.t)(12);
const _16n = (0,x_bigint/* BigInt */.t)(16);
const _18n = (0,x_bigint/* BigInt */.t)(18);
const _23n = (0,x_bigint/* BigInt */.t)(23);
const _27n = (0,x_bigint/* BigInt */.t)(27);
const _29n = (0,x_bigint/* BigInt */.t)(29);
const _31n = (0,x_bigint/* BigInt */.t)(31);
const _32n = (0,x_bigint/* BigInt */.t)(32);
const _33n = (0,x_bigint/* BigInt */.t)(33);
const _64n = (0,x_bigint/* BigInt */.t)(64);
const _256n = (0,x_bigint/* BigInt */.t)(256);
function rotl(a, b) {
    const c = a & U64;
    return ((c << b) | (c >> (_64n - b))) & U64;
}
function fromU8a(u8a, p, count) {
    const bigints = new Array(count);
    let offset = 0;
    for (let i = 0; i < count; i++, offset += 2) {
        bigints[i] = (0,x_bigint/* BigInt */.t)(u8a[p + offset] | (u8a[p + 1 + offset] << 8));
    }
    let result = consts/* _0n */.s6;
    for (let i = count - 1; i >= 0; i--) {
        result = (result << _16n) + bigints[i];
    }
    return result;
}
function init(seed, input) {
    const state = {
        seed,
        u8a: new Uint8Array(32),
        u8asize: 0,
        v1: seed + P64_1 + P64_2,
        v2: seed + P64_2,
        v3: seed,
        v4: seed - P64_1
    };
    if (input.length < 32) {
        state.u8a.set(input);
        state.u8asize = input.length;
        return state;
    }
    const limit = input.length - 32;
    let p = 0;
    if (limit >= 0) {
        const adjustV = (v) => P64_1 * rotl(v + P64_2 * fromU8a(input, p, 4), _31n);
        do {
            state.v1 = adjustV(state.v1);
            p += 8;
            state.v2 = adjustV(state.v2);
            p += 8;
            state.v3 = adjustV(state.v3);
            p += 8;
            state.v4 = adjustV(state.v4);
            p += 8;
        } while (p <= limit);
    }
    if (p < input.length) {
        state.u8a.set(input.subarray(p, input.length));
        state.u8asize = input.length - p;
    }
    return state;
}
function xxhash64(input, initSeed) {
    const { seed, u8a, u8asize, v1, v2, v3, v4 } = init((0,x_bigint/* BigInt */.t)(initSeed), input);
    let p = 0;
    let h64 = U64 & ((0,x_bigint/* BigInt */.t)(input.length) + (input.length >= 32
        ? (((((((((rotl(v1, consts/* _1n */.wF) + rotl(v2, _7n) + rotl(v3, _12n) + rotl(v4, _18n)) ^ (P64_1 * rotl(v1 * P64_2, _31n))) * P64_1 + P64_4) ^ (P64_1 * rotl(v2 * P64_2, _31n))) * P64_1 + P64_4) ^ (P64_1 * rotl(v3 * P64_2, _31n))) * P64_1 + P64_4) ^ (P64_1 * rotl(v4 * P64_2, _31n))) * P64_1 + P64_4)
        : (seed + P64_5)));
    while (p <= (u8asize - 8)) {
        h64 = U64 & (P64_4 + P64_1 * rotl(h64 ^ (P64_1 * rotl(P64_2 * fromU8a(u8a, p, 4), _31n)), _27n));
        p += 8;
    }
    if ((p + 4) <= u8asize) {
        h64 = U64 & (P64_3 + P64_2 * rotl(h64 ^ (P64_1 * fromU8a(u8a, p, 2)), _23n));
        p += 4;
    }
    while (p < u8asize) {
        h64 = U64 & (P64_1 * rotl(h64 ^ (P64_5 * (0,x_bigint/* BigInt */.t)(u8a[p++])), _11n));
    }
    h64 = U64 & (P64_2 * (h64 ^ (h64 >> _33n)));
    h64 = U64 & (P64_3 * (h64 ^ (h64 >> _29n)));
    h64 = U64 & (h64 ^ (h64 >> _32n));
    const result = new Uint8Array(8);
    for (let i = 7; i >= 0; i--) {
        result[i] = Number(h64 % _256n);
        h64 = h64 / _256n;
    }
    return result;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+util-crypto@12.6.2_@polkadot+util@12.6.2/node_modules/@polkadot/util-crypto/xxhash/asU8a.js




/**
 * @name xxhashAsU8a
 * @summary Creates a xxhash64 u8a from the input.
 * @description
 * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { xxhashAsU8a } from '@polkadot/util-crypto';
 *
 * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999
 * ```
 */
function xxhashAsU8a(data, bitLength = 64, onlyJs) {
    const rounds = Math.ceil(bitLength / 64);
    const u8a = (0,toU8a/* u8aToU8a */.Y)(data);
    if (!has/* hasBigInt */.vc || (!onlyJs && (0,bundle/* isReady */.DK)())) {
        return (0,bundle/* twox */.Qf)(u8a, rounds);
    }
    const result = new Uint8Array(rounds * 8);
    for (let seed = 0; seed < rounds; seed++) {
        result.set(xxhash64(u8a, seed).reverse(), seed * 8);
    }
    return result;
}
/**
 * @name xxhashAsHex
 * @description Creates a xxhash64 hex from the input.
 */
const xxhashAsHex = /*#__PURE__*/ (/* unused pure expression or super */ null && (createAsHex(xxhashAsU8a)));


/***/ }),

/***/ 94742:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ arrayChunk)
/* harmony export */ });
/**
 * @name arrayChunk
 * @summary Split T[] into T[][] based on the defind size
 * @description
 * Returns a set ao arrays based on the chunksize
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayChunk } from '@polkadot/util';
 *
 * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]
 * ```
 */
function arrayChunk(array, chunkSize) {
    const outputSize = Math.ceil(array.length / chunkSize);
    // shortcut for the single-split case
    if (outputSize === 1) {
        return [array];
    }
    const output = Array(outputSize);
    for (let i = 0; i < outputSize; i++) {
        const offset = i * chunkSize;
        output[i] = array.slice(offset, offset + chunkSize);
    }
    return output;
}


/***/ }),

/***/ 71833:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayFlatten)
/* harmony export */ });
/**
 * @name arrayFlatten
 * @summary Merge T[][] into T[]
 * @description
 * Returns a new array with all arrays merged into one
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayFlatten } from '@polkadot/util';
 *
 * arrayFlatten([[1, 2], [3, 4], [5]]); // [1, 2, 3, 4, 5]
 * ```
 */
function arrayFlatten(arrays) {
    const num = arrays.length;
    // shortcuts for the empty & single-entry case
    if (num === 0) {
        return [];
    }
    else if (num === 1) {
        return arrays[0];
    }
    // pre-allocate based on the combined size
    let size = 0;
    for (let i = 0; i < num; i++) {
        size += arrays[i].length;
    }
    const output = new Array(size);
    let i = -1;
    for (let j = 0; j < num; j++) {
        const a = arrays[j];
        // instead of pushing, we just set the entries
        for (let e = 0, count = a.length; e < count; e++) {
            output[++i] = a[e];
        }
    }
    return output;
}


/***/ }),

/***/ 5035:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UT: () => (/* binding */ assertUnreachable),
/* harmony export */   k8: () => (/* binding */ assertReturn)
/* harmony export */ });
/* unused harmony export assert */
/* harmony import */ var _is_function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73092);

/**
 * @name assert
 * @summary Checks for a valid test, if not Error is thrown.
 * @description
 * Checks that `test` is a truthy value. If value is falsy (`null`, `undefined`, `false`, ...), it throws an Error with the supplied `message`. When `test` passes, `true` is returned.
 * @example
 * <BR>
 *
 * ```javascript
 * const { assert } from '@polkadot/util';
 *
 * assert(true, 'True should be true'); // passes
 * assert(false, 'False should not be true'); // Error thrown
 * assert(false, () => 'message'); // Error with 'message'
 * ```
 */
function assert(condition, message) {
    if (!condition) {
        throw new Error((0,_is_function_js__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(message)
            ? message()
            : message);
    }
}
/**
 * @name assertReturn
 * @description Returns when the value is not undefined/null, otherwise throws assertion error
 */
function assertReturn(value, message) {
    assert(value !== undefined && value !== null, message);
    return value;
}
/**
 * @name assertUnreachable
 * @description An assertion helper that ensures all codepaths are followed
 */
function assertUnreachable(x) {
    throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
}


/***/ }),

/***/ 2523:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   s6: () => (/* binding */ _0n),
/* harmony export */   wF: () => (/* binding */ _1n)
/* harmony export */ });
/* unused harmony exports _2n, _3n, _4n, _5n, _6n, _7n, _8n, _9n, _10n, _100n, _1000n, _1Mn, _1Bn, _1Qn, _2pow53n, _sqrt2pow53n */
/* harmony import */ var _polkadot_x_bigint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70735);

/**
 * @name _0n
 * @summary BigInt constant for 0.
 */
const _0n = /*#__PURE__*/ (0,_polkadot_x_bigint__WEBPACK_IMPORTED_MODULE_0__/* .BigInt */ .t)(0);
/**
 * @name _1n
 * @summary BigInt constant for 1.
 */
const _1n = /*#__PURE__*/ (0,_polkadot_x_bigint__WEBPACK_IMPORTED_MODULE_0__/* .BigInt */ .t)(1);
/**
 * @name _2n
 * @summary BigInt constant for 2.
 */
const _2n = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(2)));
/**
 * @name _3n
 * @summary BigInt constant for 3.
 */
const _3n = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(3)));
/**
 * @name _4n
 * @summary BigInt constant for 4.
 */
const _4n = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(4)));
/**
 * @name _5n
 * @summary BigInt constant for 5.
 */
const _5n = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(5)));
/**
 * @name _6n
 * @summary BigInt constant for 6.
 */
const _6n = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(6)));
/**
 * @name _7n
 * @summary BigInt constant for 7.
 */
const _7n = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(7)));
/**
 * @name _8n
 * @summary BigInt constant for 8.
 */
const _8n = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(8)));
/**
 * @name _9n
 * @summary BigInt constant for 9.
 */
const _9n = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(9)));
/**
 * @name _10n
 * @summary BigInt constant for 10.
 */
const _10n = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(10)));
/**
 * @name _100n
 * @summary BigInt constant for 100.
 */
const _100n = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(100)));
/**
 * @name _1000n
 * @summary BigInt constant for 1000.
 */
const _1000n = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(1000)));
/**
 * @name _1Mn
 * @summary BigInt constant for 1,000,000 (million).
 */
const _1Mn = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(1000000)));
/**
* @name _1Bn
* @summary BigInt constant for 1,000,000,000 (billion).
*/
const _1Bn = /*#__PURE__*/ (0,_polkadot_x_bigint__WEBPACK_IMPORTED_MODULE_0__/* .BigInt */ .t)(1000000000);
/**
* @name _1Qn
* @summary BigInt constant for 1,000,000,000,000,000,000 (quitillion).
*/
const _1Qn = _1Bn * _1Bn;
/**
* @name _2pow53n
* @summary BigInt constant for MAX_SAFE_INTEGER
*/
const _2pow53n = /*#__PURE__*/ (0,_polkadot_x_bigint__WEBPACK_IMPORTED_MODULE_0__/* .BigInt */ .t)(Number.MAX_SAFE_INTEGER);
/**
 * @name _sqrt2pow53n
 * @summary BigInt constant for Math.sqrt(MAX_SAFE_INTEGER)
 */
const _sqrt2pow53n = /*#__PURE__*/ (/* unused pure expression or super */ null && (BigInt(94906265)));


/***/ }),

/***/ 3736:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _: () => (/* binding */ createCmp)
/* harmony export */ });
/** @internal */
function createCmp(cmp) {
    return (...items) => {
        const count = items.length;
        if (count === 0) {
            throw new Error('Must provide one or more arguments');
        }
        let result = items[0];
        for (let i = 1; i < count; i++) {
            if (cmp(items[i], result)) {
                result = items[i];
            }
        }
        return result;
    };
}


/***/ }),

/***/ 38252:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ew: () => (/* binding */ BN_MAX_INTEGER),
/* harmony export */   If: () => (/* binding */ BN_ONE),
/* harmony export */   S8: () => (/* binding */ BN_HUNDRED),
/* harmony export */   Wi: () => (/* binding */ BN_QUINTILL),
/* harmony export */   Wn: () => (/* binding */ BN_SQRT_MAX_INTEGER),
/* harmony export */   ed: () => (/* binding */ BN_BILLION),
/* harmony export */   nw: () => (/* binding */ BN_ZERO),
/* harmony export */   um: () => (/* binding */ BN_TWO),
/* harmony export */   uy: () => (/* binding */ BN_MILLION)
/* harmony export */ });
/* unused harmony exports BN_THREE, BN_FOUR, BN_FIVE, BN_SIX, BN_SEVEN, BN_EIGHT, BN_NINE, BN_TEN, BN_THOUSAND */
/* harmony import */ var _bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39098);

/**
 * @name BN_ZERO
 * @summary BN constant for 0.
 */
const BN_ZERO = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(0);
/**
 * @name BN_ONE
 * @summary BN constant for 1.
 */
const BN_ONE = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(1);
/**
 * @name BN_TWO
 * @summary BN constant for 2.
 */
const BN_TWO = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(2);
/**
 * @name BN_THREE
 * @summary BN constant for 3.
 */
const BN_THREE = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(3);
/**
 * @name BN_FOUR
 * @summary BN constant for 4.
 */
const BN_FOUR = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(4);
/**
 * @name BN_FIVE
 * @summary BN constant for 5.
 */
const BN_FIVE = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(5);
/**
 * @name BN_SIX
 * @summary BN constant for 6.
 */
const BN_SIX = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(6);
/**
 * @name BN_SEVEN
 * @summary BN constant for 7.
 */
const BN_SEVEN = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(7);
/**
 * @name BN_EIGHT
 * @summary BN constant for 8.
 */
const BN_EIGHT = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(8);
/**
 * @name BN_NINE
 * @summary BN constant for 9.
 */
const BN_NINE = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(9);
/**
 * @name BN_TEN
 * @summary BN constant for 10.
 */
const BN_TEN = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(10);
/**
 * @name BN_HUNDRED
 * @summary BN constant for 100.
 */
const BN_HUNDRED = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(100);
/**
 * @name BN_THOUSAND
 * @summary BN constant for 1,000.
 */
const BN_THOUSAND = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(1000);
/**
 * @name BN_MILLION
 * @summary BN constant for 1,000,000.
 */
const BN_MILLION = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(1000000);
/**
 * @name BN_BILLION
 * @summary BN constant for 1,000,000,000.
 */
const BN_BILLION = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(1000000000);
/**
 * @name BN_QUINTILL
 * @summary BN constant for 1,000,000,000,000,000,000.
 */
const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
/**
 * @name BN_MAX_INTEGER
 * @summary BN constant for MAX_SAFE_INTEGER
 */
const BN_MAX_INTEGER = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(Number.MAX_SAFE_INTEGER);
/**
 * @name BN_SQRT_MAX_INTEGER
 * @summary BN constant for Math.sqrt(MAX_SAFE_INTEGER)
 */
const BN_SQRT_MAX_INTEGER = /*#__PURE__*/ new _bn_js__WEBPACK_IMPORTED_MODULE_0__(94906265);


/***/ }),

/***/ 91449:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   N: () => (/* binding */ bnMin),
/* harmony export */   x: () => (/* binding */ bnMax)
/* harmony export */ });
/* harmony import */ var _bi_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3736);

/**
 * @name bnMax
 * @summary Finds and returns the highest value in an array of BNs.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnMax } from '@polkadot/util';
 *
 * bnMax([new BN(1), new BN(3), new BN(2)]).toString(); // => '3'
 * ```
 */
const bnMax = /*#__PURE__*/ (0,_bi_helpers_js__WEBPACK_IMPORTED_MODULE_0__/* .createCmp */ ._)((a, b) => a.gt(b));
/**
 * @name bnMin
 * @summary Finds and returns the smallest value in an array of BNs.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnMin } from '@polkadot/util';
 *
 * bnMin([new BN(1), new BN(3), new BN(2)]).toString(); // => '1'
 * ```
 */
const bnMin = /*#__PURE__*/ (0,_bi_helpers_js__WEBPACK_IMPORTED_MODULE_0__/* .createCmp */ ._)((a, b) => a.lt(b));


/***/ }),

/***/ 83097:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ bnSqrt)
/* harmony export */ });
/* harmony import */ var _bn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(39098);
/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38252);
/* harmony import */ var _toBn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(54556);



/**
 * @name bnSqrt
 * @summary Calculates the integer square root of a BN
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnSqrt } from '@polkadot/util';
 *
 * bnSqrt(new BN(16)).toString(); // => '4'
 * ```
 */
function bnSqrt(value) {
    const n = (0,_toBn_js__WEBPACK_IMPORTED_MODULE_0__/* .bnToBn */ .G)(value);
    if (n.isNeg()) {
        throw new Error('square root of negative numbers is not supported');
    }
    // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/
    // shortcut <= 2^53 - 1 to use the JS utils
    if (n.lte(_consts_js__WEBPACK_IMPORTED_MODULE_1__/* .BN_MAX_INTEGER */ .Ew)) {
        // ~~ More performant version of Math.floor
        return new _bn_js__WEBPACK_IMPORTED_MODULE_2__(~~Math.sqrt(n.toNumber()));
    }
    // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the
    // output will be larger than this, we expect this to be a safe start
    let x0 = _consts_js__WEBPACK_IMPORTED_MODULE_1__/* .BN_SQRT_MAX_INTEGER */ .Wn.clone();
    while (true) {
        const x1 = n.div(x0).iadd(x0).ishrn(1);
        if (x0.eq(x1) || x0.eq(x1.sub(_consts_js__WEBPACK_IMPORTED_MODULE_1__/* .BN_ONE */ .If))) {
            return x0;
        }
        x0 = x1;
    }
}


/***/ }),

/***/ 54556:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ bnToBn)
/* harmony export */ });
/* harmony import */ var _hex_toBn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(55632);
/* harmony import */ var _is_bigInt_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(46770);
/* harmony import */ var _is_hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14911);
/* harmony import */ var _is_toBigInt_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(39917);
/* harmony import */ var _is_toBn_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(44761);
/* harmony import */ var _bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39098);






/**
 * @name bnToBn
 * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.
 * @description
 * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnToBn } from '@polkadot/util';
 *
 * bnToBn(0x1234); // => BN(0x1234)
 * bnToBn(new BN(0x1234)); // => BN(0x1234)
 * ```
 */
function bnToBn(value) {
    return value
        ? _bn_js__WEBPACK_IMPORTED_MODULE_0__.isBN(value)
            ? value
            : (0,_is_hex_js__WEBPACK_IMPORTED_MODULE_1__/* .isHex */ .vq)(value)
                ? (0,_hex_toBn_js__WEBPACK_IMPORTED_MODULE_2__/* .hexToBn */ .m)(value.toString())
                : (0,_is_bigInt_js__WEBPACK_IMPORTED_MODULE_3__/* .isBigInt */ .C)(value)
                    ? new _bn_js__WEBPACK_IMPORTED_MODULE_0__(value.toString())
                    : (0,_is_toBn_js__WEBPACK_IMPORTED_MODULE_4__/* .isToBn */ .S)(value)
                        ? value.toBn()
                        : (0,_is_toBigInt_js__WEBPACK_IMPORTED_MODULE_5__/* .isToBigInt */ .G)(value)
                            ? new _bn_js__WEBPACK_IMPORTED_MODULE_0__(value.toBigInt().toString())
                            : new _bn_js__WEBPACK_IMPORTED_MODULE_0__(value)
        : new _bn_js__WEBPACK_IMPORTED_MODULE_0__(0);
}


/***/ }),

/***/ 26563:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ bnToHex)
/* harmony export */ });
/* harmony import */ var _u8a_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26048);
/* harmony import */ var _toU8a_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82144);


/**
 * @name bnToHex
 * @summary Creates a hex value from a BN.js bignumber object.
 * @description
 * `null` inputs returns a `0x` result, BN values return the actual value as a `0x` prefixed hex value. Anything that is not a BN object throws an error. With `bitLength` set, it fixes the number to the specified length.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnToHex } from '@polkadot/util';
 *
 * bnToHex(new BN(0x123456)); // => '0x123456'
 * ```
 */
function bnToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {
    return (0,_u8a_index_js__WEBPACK_IMPORTED_MODULE_0__/* .u8aToHex */ .c)((0,_toU8a_js__WEBPACK_IMPORTED_MODULE_1__/* .bnToU8a */ .a)(value, { bitLength, isLe, isNegative }));
}


/***/ }),

/***/ 82144:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ bnToU8a)
/* harmony export */ });
/* harmony import */ var _toBn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(54556);

const DEFAULT_OPTS = { bitLength: -1, isLe: true, isNegative: false };
/**
 * @name bnToU8a
 * @summary Creates a Uint8Array object from a BN.
 * @description
 * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.
 * @example
 * <BR>
 *
 * ```javascript
 * import { bnToU8a } from '@polkadot/util';
 *
 * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]
 * ```
 */
function bnToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {
    const valueBn = (0,_toBn_js__WEBPACK_IMPORTED_MODULE_0__/* .bnToBn */ .G)(value);
    const byteLength = bitLength === -1
        ? Math.ceil(valueBn.bitLength() / 8)
        : Math.ceil((bitLength || 0) / 8);
    if (!value) {
        return bitLength === -1
            ? new Uint8Array(1)
            : new Uint8Array(byteLength);
    }
    const output = new Uint8Array(byteLength);
    const bn = isNegative
        ? valueBn.toTwos(byteLength * 8)
        : valueBn;
    output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);
    return output;
}


/***/ }),

/***/ 44214:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   N: () => (/* binding */ compactAddLength)
/* harmony export */ });
/* harmony import */ var _u8a_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(93173);
/* harmony import */ var _toU8a_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51892);


/**
 * @name compactAddLength
 * @description Adds a length prefix to the input value
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactAddLength } from '@polkadot/util';
 *
 * console.log(compactAddLength(new Uint8Array([0xde, 0xad, 0xbe, 0xef]))); // Uint8Array([4 << 2, 0xde, 0xad, 0xbe, 0xef])
 * ```
 */
function compactAddLength(input) {
    return (0,_u8a_index_js__WEBPACK_IMPORTED_MODULE_0__/* .u8aConcatStrict */ .d)([
        (0,_toU8a_js__WEBPACK_IMPORTED_MODULE_1__/* .compactToU8a */ .Y)(input.length),
        input
    ]);
}


/***/ }),

/***/ 44961:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ compactFromU8a),
/* harmony export */   j: () => (/* binding */ compactFromU8aLim)
/* harmony export */ });
/* harmony import */ var _bn_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39098);
/* harmony import */ var _u8a_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42740);
/* harmony import */ var _u8a_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(91693);


/**
 * @name compactFromU8a
 * @description Retrives the offset and encoded length from a compact-prefixed value
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactFromU8a } from '@polkadot/util';
 *
 * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));
 *
 * console.log('value offset=', offset, 'length=', length); // 4, 0xffff
 * ```
 */
function compactFromU8a(input) {
    const u8a = (0,_u8a_index_js__WEBPACK_IMPORTED_MODULE_0__/* .u8aToU8a */ .Y)(input);
    // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
    // than doing an additional call to u8aToBn (as with variable length)
    switch (u8a[0] & 0b11) {
        case 0b00:
            return [1, new _bn_index_js__WEBPACK_IMPORTED_MODULE_1__(u8a[0] >>> 2)];
        case 0b01:
            return [2, new _bn_index_js__WEBPACK_IMPORTED_MODULE_1__((u8a[0] + (u8a[1] << 8)) >>> 2)];
        case 0b10:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return [4, new _bn_index_js__WEBPACK_IMPORTED_MODULE_1__((u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + (u8a[3] * 16777216)) >>> 2)];
        // 0b11
        default: {
            // add 5 to shifted (4 for base length, 1 for this byte)
            const offset = (u8a[0] >>> 2) + 5;
            // we unroll the loop
            switch (offset) {
                // there still could be 4 bytes data, similar to 0b10 above (with offsets)
                case 5:
                    // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                    // 32-bit, in the case where the top-most bit is set this yields a negative value
                    return [5, new _bn_index_js__WEBPACK_IMPORTED_MODULE_1__(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] * 16777216))];
                case 6:
                    return [6, new _bn_index_js__WEBPACK_IMPORTED_MODULE_1__(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8)) * 16777216))];
                // 6 bytes data is the maximum, 48 bits (56 would overflow)
                case 7:
                    return [7, new _bn_index_js__WEBPACK_IMPORTED_MODULE_1__(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216))];
                // for anything else, use the non-unrolled version
                default:
                    return [offset, (0,_u8a_index_js__WEBPACK_IMPORTED_MODULE_2__/* .u8aToBn */ ._)(u8a.subarray(1, offset))];
            }
        }
    }
}
/**
 * @name compactFromU8aLim
 * @description A limited version of [[compactFromU8a]], accepting only Uint8Array inputs for values <= 48 bits
 */
function compactFromU8aLim(u8a) {
    // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
    // than doing an additional call to u8aToBn (as with variable length)
    switch (u8a[0] & 0b11) {
        case 0b00:
            return [1, u8a[0] >>> 2];
        case 0b01:
            return [2, (u8a[0] + (u8a[1] << 8)) >>> 2];
        case 0b10:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return [4, (u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + (u8a[3] * 16777216)) >>> 2];
        // 0b11
        default: {
            // add 5 to shifted (4 for base length, 1 for this byte)
            // we unroll the loop
            switch ((u8a[0] >>> 2) + 5) {
                // there still could be 4 bytes data, similar to 0b10 above (with offsets)
                case 5:
                    return [5, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] * 16777216)];
                case 6:
                    return [6, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8)) * 16777216)];
                // 6 bytes data is the maximum, 48 bits (56 would overflow)
                case 7:
                    return [7, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216)];
                // for anything else, we are above the actual MAX_SAFE_INTEGER - bail out
                default:
                    throw new Error('Compact input is > Number.MAX_SAFE_INTEGER');
            }
        }
    }
}


/***/ }),

/***/ 45155:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: () => (/* binding */ compactStripLength)
/* harmony export */ });
/* harmony import */ var _fromU8a_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44961);

/**
 * @name compactStripLength
 * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactStripLength } from '@polkadot/util';
 *
 * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]
 * ```
 */
function compactStripLength(input) {
    const [offset, length] = (0,_fromU8a_js__WEBPACK_IMPORTED_MODULE_0__/* .compactFromU8a */ .P)(input);
    const total = offset + length.toNumber();
    return [
        total,
        input.subarray(offset, total)
    ];
}


/***/ }),

/***/ 51892:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Y: () => (/* binding */ compactToU8a)
/* harmony export */ });
/* harmony import */ var _bn_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38252);
/* harmony import */ var _bn_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39098);
/* harmony import */ var _bn_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(54556);
/* harmony import */ var _bn_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82144);
/* harmony import */ var _u8a_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(93173);


const MAX_U8 = _bn_index_js__WEBPACK_IMPORTED_MODULE_0__/* .BN_TWO */ .um.pow(new _bn_index_js__WEBPACK_IMPORTED_MODULE_1__(8 - 2)).isub(_bn_index_js__WEBPACK_IMPORTED_MODULE_0__/* .BN_ONE */ .If);
const MAX_U16 = _bn_index_js__WEBPACK_IMPORTED_MODULE_0__/* .BN_TWO */ .um.pow(new _bn_index_js__WEBPACK_IMPORTED_MODULE_1__(16 - 2)).isub(_bn_index_js__WEBPACK_IMPORTED_MODULE_0__/* .BN_ONE */ .If);
const MAX_U32 = _bn_index_js__WEBPACK_IMPORTED_MODULE_0__/* .BN_TWO */ .um.pow(new _bn_index_js__WEBPACK_IMPORTED_MODULE_1__(32 - 2)).isub(_bn_index_js__WEBPACK_IMPORTED_MODULE_0__/* .BN_ONE */ .If);
const BL_16 = { bitLength: 16 };
const BL_32 = { bitLength: 32 };
/**
 * @name compactToU8a
 * @description Encodes a number into a compact representation
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactToU8a } from '@polkadot/util';
 *
 * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])
 * ```
 */
function compactToU8a(value) {
    const bn = (0,_bn_index_js__WEBPACK_IMPORTED_MODULE_2__/* .bnToBn */ .G)(value);
    if (bn.lte(MAX_U8)) {
        return new Uint8Array([bn.toNumber() << 2]);
    }
    else if (bn.lte(MAX_U16)) {
        return (0,_bn_index_js__WEBPACK_IMPORTED_MODULE_3__/* .bnToU8a */ .a)(bn.shln(2).iadd(_bn_index_js__WEBPACK_IMPORTED_MODULE_0__/* .BN_ONE */ .If), BL_16);
    }
    else if (bn.lte(MAX_U32)) {
        return (0,_bn_index_js__WEBPACK_IMPORTED_MODULE_3__/* .bnToU8a */ .a)(bn.shln(2).iadd(_bn_index_js__WEBPACK_IMPORTED_MODULE_0__/* .BN_TWO */ .um), BL_32);
    }
    const u8a = (0,_bn_index_js__WEBPACK_IMPORTED_MODULE_3__/* .bnToU8a */ .a)(bn);
    let length = u8a.length;
    // adjust to the minimum number of bytes
    while (u8a[length - 1] === 0) {
        length--;
    }
    if (length < 4) {
        throw new Error('Invalid length, previous checks match anything less than 2^30');
    }
    return (0,_u8a_index_js__WEBPACK_IMPORTED_MODULE_4__/* .u8aConcatStrict */ .d)([
        // subtract 4 as minimum (also catered for in decoding)
        new Uint8Array([((length - 4) << 2) + 0b11]),
        u8a.subarray(0, length)
    ]);
}


/***/ }),

/***/ 6441:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: () => (/* binding */ floatToU8a)
/* harmony export */ });
/**
 * @name floatToU8a
 * @description Converts a float into a U8a representation (While we don't use BE in SCALE
 * we still allow for either representation, although, as elsewhere, isLe is default)
 */
function floatToU8a(value = 0.0, { bitLength = 32, isLe = true } = {}) {
    if (bitLength !== 32 && bitLength !== 64) {
        throw new Error('Invalid bitLength provided, expected 32 or 64');
    }
    const result = new Uint8Array(bitLength / 8);
    const dv = new DataView(result.buffer, result.byteOffset);
    if (bitLength === 32) {
        dv.setFloat32(0, Number(value), isLe);
    }
    else {
        dv.setFloat64(0, Number(value), isLe);
    }
    return result;
}


/***/ }),

/***/ 63603:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ formatBalance)
/* harmony export */ });
/* harmony import */ var _bn_toBn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(54556);
/* harmony import */ var _is_boolean_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(54782);
/* harmony import */ var _formatDecimal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(76678);
/* harmony import */ var _getSeparator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(64338);
/* harmony import */ var _si_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23696);





const DEFAULT_DECIMALS = 0;
const DEFAULT_UNIT = _si_js__WEBPACK_IMPORTED_MODULE_0__.SI[_si_js__WEBPACK_IMPORTED_MODULE_0__/* .SI_MID */ .iA].text;
let defaultDecimals = DEFAULT_DECIMALS;
let defaultUnit = DEFAULT_UNIT;
function _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = 'en', withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
    // we only work with string inputs here - convert anything
    // into the string-only value
    let text = (0,_bn_toBn_js__WEBPACK_IMPORTED_MODULE_1__/* .bnToBn */ .G)(input).toString();
    if (text.length === 0 || text === '0') {
        return '0';
    }
    // strip the negative sign so we can work with clean groupings, re-add this in the
    // end when we return the result (from here on we work with positive numbers)
    let sign = '';
    if (text[0].startsWith('-')) {
        sign = '-';
        text = text.substring(1);
    }
    // We start at midpoint (8) minus 1 - this means that values display as
    // 123.4567 instead of 0.1234 k (so we always have the most relevant).
    const si = (0,_si_js__WEBPACK_IMPORTED_MODULE_0__/* .calcSi */ .Xx)(text, decimals, forceUnit);
    const mid = text.length - (decimals + si.power);
    const pre = mid <= 0 ? '0' : text.substring(0, mid);
    // get the post from the midpoint onward and then first add max decimals
    // before trimming to the correct (calculated) amount of decimals again
    let post = text
        .padStart(mid < 0 ? decimals : 1, '0')
        .substring(mid < 0 ? 0 : mid)
        .padEnd(withAll ? Math.max(decimals, 4) : 4, '0')
        .substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
    // remove all trailing 0's (if required via flag)
    if (!withZero) {
        let end = post.length - 1;
        // This looks inefficient, however it is better to do the checks and
        // only make one final slice than it is to do it in multiples
        do {
            if (post[end] === '0') {
                end--;
            }
        } while (post[end] === '0');
        post = post.substring(0, end + 1);
    }
    // the display unit
    const unit = (0,_is_boolean_js__WEBPACK_IMPORTED_MODULE_2__/* .isBoolean */ .j)(withUnit)
        ? _si_js__WEBPACK_IMPORTED_MODULE_0__.SI[_si_js__WEBPACK_IMPORTED_MODULE_0__/* .SI_MID */ .iA].text
        : withUnit;
    // format the units for display based on the flags
    const units = withSi || withSiFull
        ? si.value === '-'
            ? withUnit
                ? ` ${unit}`
                : ''
            : ` ${withSiFull ? `${si.text}${withUnit ? ' ' : ''}` : si.value}${withUnit ? unit : ''}`
        : '';
    const { decimal, thousand } = (0,_getSeparator_js__WEBPACK_IMPORTED_MODULE_3__/* .getSeparator */ .f)(locale);
    return `${sign}${(0,_formatDecimal_js__WEBPACK_IMPORTED_MODULE_4__/* .formatDecimal */ .V)(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
const formatBalance = _formatBalance;
formatBalance.calcSi = (text, decimals = defaultDecimals) => (0,_si_js__WEBPACK_IMPORTED_MODULE_0__/* .calcSi */ .Xx)(text, decimals);
formatBalance.findSi = _si_js__WEBPACK_IMPORTED_MODULE_0__/* .findSi */ .Ns;
formatBalance.getDefaults = () => {
    return {
        decimals: defaultDecimals,
        unit: defaultUnit
    };
};
formatBalance.getOptions = (decimals = defaultDecimals) => {
    return _si_js__WEBPACK_IMPORTED_MODULE_0__.SI.filter(({ power }) => power < 0
        ? (decimals + power) >= 0
        : true);
};
formatBalance.setDefaults = ({ decimals, unit }) => {
    defaultDecimals = (Array.isArray(decimals)
        ? decimals[0]
        : decimals) ?? defaultDecimals;
    defaultUnit = (Array.isArray(unit)
        ? unit[0]
        : unit) ?? defaultUnit;
    _si_js__WEBPACK_IMPORTED_MODULE_0__.SI[_si_js__WEBPACK_IMPORTED_MODULE_0__/* .SI_MID */ .iA].text = defaultUnit;
};


/***/ }),

/***/ 48917:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   p: () => (/* binding */ formatDate)
/* harmony export */ });
/** @internal */
function zeroPad(value) {
    return value.toString().padStart(2, '0');
}
/**
 * @name formatDate
 * @description Formats a date in CCYY-MM-DD HH:MM:SS format
 */
function formatDate(date) {
    const year = date.getFullYear().toString();
    const month = zeroPad((date.getMonth() + 1));
    const day = zeroPad(date.getDate());
    const hour = zeroPad(date.getHours());
    const minute = zeroPad(date.getMinutes());
    const second = zeroPad(date.getSeconds());
    return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}


/***/ }),

/***/ 76678:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   V: () => (/* binding */ formatDecimal)
/* harmony export */ });
const NUMBER_REGEX = new RegExp('(\\d+?)(?=(\\d{3})+(?!\\d)|$)', 'g');
/**
 * @name formatDecimal
 * @description Formats a number into string format with thousand separators
 */
function formatDecimal(value, separator = ',') {
    // We can do this by adjusting the regx, however for the sake of clarity
    // we rather strip and re-add the negative sign in the output
    const isNegative = value[0].startsWith('-');
    const matched = isNegative
        ? value.substring(1).match(NUMBER_REGEX)
        : value.match(NUMBER_REGEX);
    return matched
        ? `${isNegative ? '-' : ''}${matched.join(separator)}`
        : value;
}


/***/ }),

/***/ 64983:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ formatNumber)
/* harmony export */ });
/* harmony import */ var _bn_toBn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(54556);
/* harmony import */ var _formatDecimal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76678);
/* harmony import */ var _getSeparator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64338);



/**
 * @name formatNumber
 * @description Formats a number into string format with thousand separators
 */
function formatNumber(value, { locale = 'en' } = {}) {
    const { thousand } = (0,_getSeparator_js__WEBPACK_IMPORTED_MODULE_0__/* .getSeparator */ .f)(locale);
    return (0,_formatDecimal_js__WEBPACK_IMPORTED_MODULE_1__/* .formatDecimal */ .V)((0,_bn_toBn_js__WEBPACK_IMPORTED_MODULE_2__/* .bnToBn */ .G)(value).toString(), thousand);
}


/***/ }),

/***/ 64338:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ getSeparator)
/* harmony export */ });
/**
 * Get the decimal and thousand separator of a locale
 * @param locale
 * @returns {decimal: string, thousand: string}
 */
function getSeparator(locale) {
    return {
        decimal: (0.1).toLocaleString(locale).substring(1, 2),
        thousand: (1000).toLocaleString(locale).substring(1, 2)
    };
}


/***/ }),

/***/ 23696:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ns: () => (/* binding */ findSi),
/* harmony export */   SI: () => (/* binding */ SI),
/* harmony export */   Xx: () => (/* binding */ calcSi),
/* harmony export */   iA: () => (/* binding */ SI_MID)
/* harmony export */ });
/** @internal */
const SI_MID = 8;
/** @internal */
const SI = [
    { power: -24, text: 'yocto', value: 'y' },
    { power: -21, text: 'zepto', value: 'z' },
    { power: -18, text: 'atto', value: 'a' },
    { power: -15, text: 'femto', value: 'f' },
    { power: -12, text: 'pico', value: 'p' },
    { power: -9, text: 'nano', value: 'n' },
    { power: -6, text: 'micro', value: 'µ' },
    { power: -3, text: 'milli', value: 'm' },
    { power: 0, text: 'Unit', value: '-' }, // position 8
    { power: 3, text: 'Kilo', value: 'k' },
    { power: 6, text: 'Mill', value: 'M' }, // Mega, M
    { power: 9, text: 'Bill', value: 'B' }, // Giga, G
    { power: 12, text: 'Tril', value: 'T' }, // Tera, T
    { power: 15, text: 'Peta', value: 'P' },
    { power: 18, text: 'Exa', value: 'E' },
    { power: 21, text: 'Zeta', value: 'Z' },
    { power: 24, text: 'Yotta', value: 'Y' }
];
/** @internal */
function findSi(type) {
    // use a loop here, better RN support (which doesn't have [].find)
    for (let i = 0, count = SI.length; i < count; i++) {
        if (SI[i].value === type) {
            return SI[i];
        }
    }
    return SI[SI_MID];
}
/** @internal */
function calcSi(text, decimals, forceUnit) {
    if (forceUnit) {
        return findSi(forceUnit);
    }
    const siDefIndex = (SI_MID - 1) + Math.ceil((text.length - decimals) / 3);
    return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
}


/***/ }),

/***/ 37117:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cR: () => (/* binding */ hasBuffer),
/* harmony export */   vc: () => (/* binding */ hasBigInt)
/* harmony export */ });
/* unused harmony exports hasCjs, hasDirname, hasEsm, hasWasm, hasProcess */
/* harmony import */ var _polkadot_x_bigint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70735);
/* harmony import */ var _polkadot_x_global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(80496);


/** true if the environment has proper BigInt support */
const hasBigInt = typeof _polkadot_x_bigint__WEBPACK_IMPORTED_MODULE_0__/* .BigInt */ .t === 'function' && typeof _polkadot_x_bigint__WEBPACK_IMPORTED_MODULE_0__/* .BigInt */ .t.asIntN === 'function';
/** true if the environment is CJS */
const hasCjs = typeof require === 'function' && typeof module !== 'undefined';
/** true if the environment has __dirname available */
const hasDirname = typeof __dirname !== 'undefined';
/** true if the environment is ESM */
const hasEsm = !hasCjs;
/** true if the environment has WebAssembly available */
const hasWasm = typeof WebAssembly !== 'undefined';
/** true if the environment has support for Buffer (typically Node.js) */
const hasBuffer = typeof _polkadot_x_global__WEBPACK_IMPORTED_MODULE_1__/* .xglobal */ .Ur.Buffer === 'function' && typeof _polkadot_x_global__WEBPACK_IMPORTED_MODULE_1__/* .xglobal */ .Ur.Buffer.isBuffer === 'function';
/** true if the environment has process available (typically Node.js) */
const hasProcess = typeof _polkadot_x_global__WEBPACK_IMPORTED_MODULE_1__/* .xglobal */ .Ur.process === 'object';


/***/ }),

/***/ 84677:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   V: () => (/* binding */ hexStripPrefix)
/* harmony export */ });
/* harmony import */ var _is_hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14911);

/**
 * @name hexStripPrefix
 * @summary Strips any leading `0x` prefix.
 * @description
 * Tests for the existence of a `0x` prefix, and returns the value without the prefix. Un-prefixed values are returned as-is.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexStripPrefix } from '@polkadot/util';
 *
 * console.log('stripped', hexStripPrefix('0x1234')); // => 1234
 * ```
 */
function hexStripPrefix(value) {
    if (!value || value === '0x') {
        return '';
    }
    else if (_is_hex_js__WEBPACK_IMPORTED_MODULE_0__/* .REGEX_HEX_PREFIXED */ .Dh.test(value)) {
        return value.substring(2);
    }
    else if (_is_hex_js__WEBPACK_IMPORTED_MODULE_0__/* .REGEX_HEX_NOPREFIX */ .y$.test(value)) {
        return value;
    }
    throw new Error(`Expected hex value to convert, found '${value}'`);
}


/***/ }),

/***/ 55632:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: () => (/* binding */ hexToBn)
/* harmony export */ });
/* harmony import */ var _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39098);
/* harmony import */ var _stripPrefix_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(84677);


/**
 * @name hexToBn
 * @summary Creates a BN.js object from a hex string.
 * @description
 * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.
 * @param _value The value to convert
 * @param _options Options to pass while converting
 * @param _options.isLe Convert using Little Endian
 * @param _options.isNegative Convert using two's complement
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexToBn } from '@polkadot/util';
 *
 * hexToBn('0x123480001f'); // => BN(0x123480001f)
 * ```
 */
function hexToBn(value, { isLe = false, isNegative = false } = {}) {
    if (!value || value === '0x') {
        return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(0);
    }
    const stripped = (0,_stripPrefix_js__WEBPACK_IMPORTED_MODULE_1__/* .hexStripPrefix */ .V)(value);
    const bn = new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(stripped, 16, isLe ? 'le' : 'be');
    // fromTwos takes as parameter the number of bits, which is the hex length
    // multiplied by 4 (2 bytes being 8 bits)
    return isNegative
        ? bn.fromTwos(stripped.length * 4)
        : bn;
}


/***/ }),

/***/ 82025:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ hexToU8a)
/* harmony export */ });
const CHR = '0123456789abcdef';
const U8 = new Uint8Array(256);
const U16 = new Uint8Array(256 * 256);
for (let i = 0, count = CHR.length; i < count; i++) {
    U8[CHR[i].charCodeAt(0) | 0] = i | 0;
    if (i > 9) {
        U8[CHR[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
    }
}
for (let i = 0; i < 256; i++) {
    const s = i << 8;
    for (let j = 0; j < 256; j++) {
        U16[s | j] = (U8[i] << 4) | U8[j];
    }
}
/**
 * @name hexToU8a
 * @summary Creates a Uint8Array object from a hex string.
 * @description
 * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexToU8a } from '@polkadot/util';
 *
 * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])
 * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])
 * ```
 */
function hexToU8a(value, bitLength = -1) {
    if (!value) {
        return new Uint8Array();
    }
    let s = value.startsWith('0x')
        ? 2
        : 0;
    const decLength = Math.ceil((value.length - s) / 2);
    const endLength = Math.ceil(bitLength === -1
        ? decLength
        : bitLength / 8);
    const result = new Uint8Array(endLength);
    const offset = endLength > decLength
        ? endLength - decLength
        : 0;
    for (let i = offset; i < endLength; i++, s += 2) {
        // The big factor here is actually the string lookups. If we do
        // HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
        // same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
        // also the faster operation by at least 2x with the character map above
        result[i] = U16[(value.charCodeAt(s) << 8) | value.charCodeAt(s + 1)];
    }
    return result;
}


/***/ }),

/***/ 20420:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _: () => (/* binding */ isAscii)
/* harmony export */ });
/* harmony import */ var _u8a_toU8a_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42740);
/* harmony import */ var _hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14911);
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30518);



/** @internal */
function isAsciiStr(str) {
    for (let i = 0, count = str.length; i < count; i++) {
        const b = str.charCodeAt(i);
        // check is inlined here, it is faster than making a call
        if (b < 32 || b > 126) {
            return false;
        }
    }
    return true;
}
/** @internal */
function isAsciiBytes(u8a) {
    for (let i = 0, count = u8a.length; i < count; i++) {
        const b = u8a[i] | 0;
        // check is inlined here, it is faster than making a call
        if (b < 32 || b > 126) {
            return false;
        }
    }
    return true;
}
/**
 * @name isAscii
 * @summary Tests if the input is printable ASCII
 * @description
 * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters
 */
function isAscii(value) {
    return (0,_string_js__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .H)(value)
        ? (0,_hex_js__WEBPACK_IMPORTED_MODULE_1__/* .isHex */ .vq)(value)
            ? isAsciiBytes((0,_u8a_toU8a_js__WEBPACK_IMPORTED_MODULE_2__/* .u8aToU8a */ .Y)(value))
            : isAsciiStr(value)
        : value
            ? isAsciiBytes(value)
            : false;
}


/***/ }),

/***/ 46770:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ isBigInt)
/* harmony export */ });
/**
 * @name isBigInt
 * @summary Tests for a `BigInt` object instance.
 * @description
 * Checks to see if the input object is an instance of `BigInt`
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBigInt } from '@polkadot/util';
 *
 * console.log('isBigInt', isBigInt(123_456n)); // => true
 * ```
 */
function isBigInt(value) {
    return typeof value === 'bigint';
}


/***/ }),

/***/ 16996:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   H: () => (/* binding */ isBn)
/* harmony export */ });
/* harmony import */ var _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39098);

/**
 * @name isBn
 * @summary Tests for a `BN` object instance.
 * @description
 * Checks to see if the input object is an instance of `BN` (bn.js).
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { isBn } from '@polkadot/util';
 *
 * console.log('isBn', isBn(new BN(1))); // => true
 * ```
 */
function isBn(value) {
    return _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__.isBN(value);
}


/***/ }),

/***/ 54782:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   j: () => (/* binding */ isBoolean)
/* harmony export */ });
/**
 * @name isBoolean
 * @summary Tests for a boolean value.
 * @description
 * Checks to see if the input value is a JavaScript boolean.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBoolean } from '@polkadot/util';
 *
 * isBoolean(false); // => true
 * ```
 */
function isBoolean(value) {
    return typeof value === 'boolean';
}


/***/ }),

/***/ 3570:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: () => (/* binding */ isBuffer)
/* harmony export */ });
/* harmony import */ var _polkadot_x_global__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(80496);
/* harmony import */ var _has_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37117);
/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73092);



/**
 * @name isBuffer
 * @summary Tests for a `Buffer` object instance.
 * @description
 * Checks to see if the input object is an instance of `Buffer`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBuffer } from '@polkadot/util';
 *
 * console.log('isBuffer', isBuffer(Buffer.from([]))); // => true
 * ```
 */
function isBuffer(value) {
    // we do check a function first, since it is slightly faster than isBuffer itself
    return _has_js__WEBPACK_IMPORTED_MODULE_0__/* .hasBuffer */ .cR && !!value && (0,_function_js__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(value.readDoubleLE) && _polkadot_x_global__WEBPACK_IMPORTED_MODULE_2__/* .xglobal */ .Ur.Buffer.isBuffer(value);
}


/***/ }),

/***/ 28660:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   H: () => (/* binding */ isChildClass)
/* harmony export */ });
/* harmony import */ var _class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(47053);

/**
 * @name isChildClass
 * @summary Tests if the child extends the parent Class
 * @description
 * Checks to see if the child Class extends the parent Class
 * @example
 * <BR>
 *
 * ```javascript
 * import { isChildClass } from '@polkadot/util';
 *
 * console.log('isChildClass', isChildClass(BN, BN); // => true
 * console.log('isChildClass', isChildClass(BN, Uint8Array); // => false
 * ```
 */
function isChildClass(Parent, Child) {
    // https://stackoverflow.com/questions/30993434/check-if-a-constructor-inherits-another-in-es6/30993664
    return (0,_class_js__WEBPACK_IMPORTED_MODULE_0__/* .isClass */ .H)(Child) && (0,_class_js__WEBPACK_IMPORTED_MODULE_0__/* .isClass */ .H)(Parent)
        // eslint-disable-next-line no-prototype-builtins
        ? Parent === Child || Parent.isPrototypeOf(Child)
        : false;
}


/***/ }),

/***/ 47053:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   H: () => (/* binding */ isClass)
/* harmony export */ });
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15798);

/**
 * @name isClass
 * Tests if the supplied argument is a Class
 */
const isClass = /*#__PURE__*/ (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__/* .isOnFunction */ .Sn)('isPrototypeOf', 'hasOwnProperty');


/***/ }),

/***/ 14769:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ isCodec)
/* harmony export */ });
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15798);

const checkCodec = /*#__PURE__*/ (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__/* .isOnObject */ .be)('toHex', 'toHuman', 'toU8a');
const checkRegistry = /*#__PURE__*/ (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__/* .isOnObject */ .be)('get');
function isCodec(value) {
    return checkCodec(value) && checkRegistry(value.registry);
}


/***/ }),

/***/ 96759:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ isCompact)
/* harmony export */ });
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15798);

/**
 * @name isCompact
 * @summary Tests for SCALE-Compact-like object instance.
 */
const isCompact = /*#__PURE__*/ (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__/* .isOnObject */ .be)('toBigInt', 'toBn', 'toNumber', 'unwrap');


/***/ }),

/***/ 64322:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   V: () => (/* binding */ isError)
/* harmony export */ });
/**
 * @name isError
 * @summary Tests for a `Error` object instance.
 * @description
 * Checks to see if the input object is an instance of `Error`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isError } from '@polkadot/util';
 *
 * console.log('isError', isError(new Error('message'))); // => true
 * ```
 */
function isError(value) {
    return (((value && value.constructor) === Error) ||
        value instanceof Error);
}


/***/ }),

/***/ 73092:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: () => (/* binding */ isFunction)
/* harmony export */ });
/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */
function isFunction(value) {
    return typeof value === 'function';
}


/***/ }),

/***/ 15798:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   F7: () => (/* binding */ isOn),
/* harmony export */   Sn: () => (/* binding */ isOnFunction),
/* harmony export */   be: () => (/* binding */ isOnObject)
/* harmony export */ });
/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73092);
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9716);


function isOn(...fns) {
    return (value) => ((0,_object_js__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .K)(value) || (0,_function_js__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(value)) &&
        fns.every((f) => (0,_function_js__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(value[f]));
}
function isOnFunction(...fns) {
    return (value) => (0,_function_js__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(value) &&
        fns.every((f) => (0,_function_js__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(value[f]));
}
function isOnObject(...fns) {
    return (value) => (0,_object_js__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .K)(value) &&
        fns.every((f) => (0,_function_js__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(value[f]));
}


/***/ }),

/***/ 14911:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Dh: () => (/* binding */ REGEX_HEX_PREFIXED),
/* harmony export */   vq: () => (/* binding */ isHex),
/* harmony export */   y$: () => (/* binding */ REGEX_HEX_NOPREFIX)
/* harmony export */ });
const REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
const REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
/**
 * @name isHex
 * @summary Tests for a hex string.
 * @description
 * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isHex } from '@polkadot/util';
 *
 * isHex('0x1234'); // => true
 * isHex('0x1234', 8); // => false
 * ```
 */
function isHex(value, bitLength = -1, ignoreLength) {
    return (typeof value === 'string' && (value === '0x' ||
        REGEX_HEX_PREFIXED.test(value))) && (bitLength === -1
        ? (ignoreLength || (value.length % 2 === 0))
        : (value.length === (2 + Math.ceil(bitLength / 4))));
}


/***/ }),

/***/ 59833:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   F: () => (/* binding */ isNull)
/* harmony export */ });
/**
 * @name isNull
 * @summary Tests for a `null` values.
 * @description
 * Checks to see if the input value is `null`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNull } from '@polkadot/util';
 *
 * console.log('isNull', isNull(null)); // => true
 * ```
 */
function isNull(value) {
    return value === null;
}


/***/ }),

/***/ 52906:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   h: () => (/* binding */ isNumber)
/* harmony export */ });
/**
 * @name isNumber
 * @summary Tests for a JavaScript number.
 * @description
 * Checks to see if the input value is a valid number.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNumber } from '@polkadot/util';
 *
 * console.log('isNumber', isNumber(1234)); // => true
 * ```
 */
function isNumber(value) {
    return typeof value === 'number';
}


/***/ }),

/***/ 9716:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   K: () => (/* binding */ isObject)
/* harmony export */ });
/**
 * @name isObject
 * @summary Tests for an `object`.
 * @description
 * Checks to see if the input value is a JavaScript object.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isObject } from '@polkadot/util';
 *
 * isObject({}); // => true
 * isObject('something'); // => false
 * ```
 */
function isObject(value) {
    return !!value && typeof value === 'object';
}


/***/ }),

/***/ 30518:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   H: () => (/* binding */ isString)
/* harmony export */ });
/**
 * @name isString
 * @summary Tests for a string.
 * @description
 * Checks to see if the input value is a JavaScript string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isString } from '@polkadot/util';
 *
 * console.log('isString', isString('test')); // => true
 * ```
 */
function isString(value) {
    return typeof value === 'string' || value instanceof String;
}


/***/ }),

/***/ 39917:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ isToBigInt)
/* harmony export */ });
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15798);

const isToBigInt = /*#__PURE__*/ (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__/* .isOn */ .F7)('toBigInt');


/***/ }),

/***/ 44761:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   S: () => (/* binding */ isToBn)
/* harmony export */ });
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15798);

const isToBn = /*#__PURE__*/ (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__/* .isOn */ .F7)('toBn');


/***/ }),

/***/ 38589:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ isU8a)
/* harmony export */ });
/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */
function isU8a(value) {
    // here we defer the instanceof check which is actually slightly
    // slower than just checking the constrctor (direct instances)
    return (((value && value.constructor) === Uint8Array) ||
        value instanceof Uint8Array);
}


/***/ }),

/***/ 34644:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: () => (/* binding */ isUndefined)
/* harmony export */ });
/**
 * @name isUndefined
 * @summary Tests for a `undefined` values.
 * @description
 * Checks to see if the input value is `undefined`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUndefined } from '@polkadot/util';
 *
 * console.log('isUndefined', isUndefined(void(0))); // => true
 * ```
 */
function isUndefined(value) {
    return value === undefined;
}


/***/ }),

/***/ 62954:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   O: () => (/* binding */ isUtf8)
/* harmony export */ });
/* harmony import */ var _u8a_toU8a_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(42740);
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30518);


/**
 * @name isUtf8
 * @summary Tests if the input is valid Utf8
 * @description
 * Checks to see if the input string or Uint8Array is valid Utf8
 */
function isUtf8(value) {
    if (!value) {
        return (0,_string_js__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .H)(value);
    }
    const u8a = (0,_u8a_toU8a_js__WEBPACK_IMPORTED_MODULE_1__/* .u8aToU8a */ .Y)(value);
    const len = u8a.length;
    let i = 0;
    while (i < len) {
        if (u8a[i] <= 0x7F) /* 00..7F */ {
            i += 1;
        }
        else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF) /* C2..DF 80..BF */ {
            if (i + 1 < len) /* Expect a 2nd byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                    // *message = "After a first byte between C2 and DF, expecting a 2nd byte between 80 and BF";
                    // *faulty_bytes = 2;
                    return false;
                }
            }
            else {
                // *message = "After a first byte between C2 and DF, expecting a 2nd byte.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 2;
        }
        else if (u8a[i] === 0xE0) /* E0 A0..BF 80..BF */ {
            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) {
                    // *message = "After a first byte of E0, expecting a 2nd byte between A0 and BF.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte of E0, expecting a 3nd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
            }
            else {
                // *message = "After a first byte of E0, expecting two following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 3;
        }
        else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC) /* E1..EC 80..BF 80..BF */ {
            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                    // *message = "After a first byte between E1 and EC, expecting the 2nd byte between 80 and BF.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte between E1 and EC, expecting the 3rd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
            }
            else {
                // *message = "After a first byte between E1 and EC, expecting two following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 3;
        }
        else if (u8a[i] === 0xED) /* ED 80..9F 80..BF */ {
            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) {
                    // *message = "After a first byte of ED, expecting 2nd byte between 80 and 9F.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte of ED, expecting 3rd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
            }
            else {
                // *message = "After a first byte of ED, expecting two following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 3;
        }
        else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF) /* EE..EF 80..BF 80..BF */ {
            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                    // *message = "After a first byte between EE and EF, expecting 2nd byte between 80 and BF.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte between EE and EF, expecting 3rd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
            }
            else {
                // *message = "After a first byte between EE and EF, two following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 3;
        }
        else if (u8a[i] === 0xF0) /* F0 90..BF 80..BF 80..BF */ {
            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {
                if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) {
                    // *message = "After a first byte of F0, expecting 2nd byte between 90 and BF.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte of F0, expecting 3rd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                    // *message = "After a first byte of F0, expecting 4th byte between 80 and BF.";
                    // *faulty_bytes = 4;
                    return false;
                }
            }
            else {
                // *message = "After a first byte of F0, expecting three following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 4;
        }
        else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3) /* F1..F3 80..BF 80..BF 80..BF */ {
            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                    // *message = "After a first byte of F1, F2, or F3, expecting a 2nd byte between 80 and BF.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte of F1, F2, or F3, expecting a 3rd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                    // *message = "After a first byte of F1, F2, or F3, expecting a 4th byte between 80 and BF.";
                    // *faulty_bytes = 4;
                    return false;
                }
            }
            else {
                // *message = "After a first byte of F1, F2, or F3, expecting three following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 4;
        }
        else if (u8a[i] === 0xF4) /* F4 80..8F 80..BF 80..BF */ {
            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {
                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) {
                    // *message = "After a first byte of F4, expecting 2nd byte between 80 and 8F.";
                    // *faulty_bytes = 2;
                    return false;
                }
                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                    // *message = "After a first byte of F4, expecting 3rd byte between 80 and BF.";
                    // *faulty_bytes = 3;
                    return false;
                }
                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                    // *message = "After a first byte of F4, expecting 4th byte between 80 and BF.";
                    // *faulty_bytes = 4;
                    return false;
                }
            }
            else {
                // *message = "After a first byte of F4, expecting three following bytes.";
                // *faulty_bytes = 1;
                return false;
            }
            i += 4;
        }
        else {
            // *message = "Expecting bytes in the following ranges: 00..7F C2..F4.";
            // *faulty_bytes = 1;
            return false;
        }
    }
    return true;
}


/***/ }),

/***/ 56810:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ lazyMethods),
/* harmony export */   W: () => (/* binding */ lazyMethod)
/* harmony export */ });
/**
 * @name lazyMethod
 * @description
 * Creates a lazy, on-demand getter for the specific value. Upon get the value will be evaluated.
 */
function lazyMethod(result, item, creator, getName, index = 0) {
    const name = getName
        ? getName(item, index)
        : item.toString();
    let value;
    Object.defineProperty(result, name, {
        // This allows for re-configuration with the embedded defineProperty below
        // and ensures that on tested browsers and Node, it _will_ be redefined
        // and thus short-circuited for future access
        configurable: true,
        enumerable: true,
        // Use a function here, we don't want to capture the outer this, i.e.
        // don't use arrow functions in this context since we have a this inside
        get: function () {
            // This check should _always_ be false and unneeded, since we override
            // with a value below ... however we ensure we are quire vigilant against
            // all environment failures, so we are rather be safe than sorry
            if (value === undefined) {
                value = creator(item, index, this);
                try {
                    // re-define the property as a value, next time around this
                    // getter will only return the computed value
                    Object.defineProperty(this, name, { value });
                }
                catch {
                    // ignore any errors, since this _should_ not happen due to
                    // the "configurable" property above. But if it ever does
                    // from here-on we will be the cached value the next time
                    // around (with a very slight dip in performance)
                }
            }
            return value;
        }
    });
}
/**
 * @name lazyMethods
 * @description
 * Creates lazy, on-demand getters for the specific values.
 */
function lazyMethods(result, items, creator, getName) {
    for (let i = 0, count = items.length; i < count; i++) {
        lazyMethod(result, items[i], creator, getName, i);
    }
    return result;
}


/***/ }),

/***/ 63985:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   k: () => (/* binding */ logger)
/* harmony export */ });
/* unused harmony export loggerFormat */
/* harmony import */ var _polkadot_x_global__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(80496);
/* harmony import */ var _format_formatDate_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(48917);
/* harmony import */ var _is_bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16996);
/* harmony import */ var _is_buffer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3570);
/* harmony import */ var _is_function_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(73092);
/* harmony import */ var _is_object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9716);
/* harmony import */ var _is_u8a_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38589);
/* harmony import */ var _u8a_toHex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(26048);
/* harmony import */ var _u8a_toU8a_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(42740);
/* harmony import */ var _noop_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(12275);










const logTo = {
    debug: 'log',
    error: 'error',
    log: 'log',
    warn: 'warn'
};
function formatOther(value) {
    if (value && (0,_is_object_js__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .K)(value) && value.constructor === Object) {
        const result = {};
        for (const [k, v] of Object.entries(value)) {
            result[k] = loggerFormat(v);
        }
        return result;
    }
    return value;
}
function loggerFormat(value) {
    if (Array.isArray(value)) {
        return value.map(loggerFormat);
    }
    else if ((0,_is_bn_js__WEBPACK_IMPORTED_MODULE_1__/* .isBn */ .H)(value)) {
        return value.toString();
    }
    else if ((0,_is_u8a_js__WEBPACK_IMPORTED_MODULE_2__/* .isU8a */ .U)(value) || (0,_is_buffer_js__WEBPACK_IMPORTED_MODULE_3__/* .isBuffer */ .z)(value)) {
        return (0,_u8a_toHex_js__WEBPACK_IMPORTED_MODULE_4__/* .u8aToHex */ .c)((0,_u8a_toU8a_js__WEBPACK_IMPORTED_MODULE_5__/* .u8aToU8a */ .Y)(value));
    }
    return formatOther(value);
}
function formatWithLength(maxLength) {
    return (v) => {
        if (maxLength <= 0) {
            return v;
        }
        const r = `${v}`;
        return r.length < maxLength
            ? v
            : `${r.substring(0, maxLength)} ...`;
    };
}
function apply(log, type, values, maxSize = -1) {
    if (values.length === 1 && (0,_is_function_js__WEBPACK_IMPORTED_MODULE_6__/* .isFunction */ .m)(values[0])) {
        const fnResult = values[0]();
        return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
    }
    console[logTo[log]]((0,_format_formatDate_js__WEBPACK_IMPORTED_MODULE_7__/* .formatDate */ .p)(new Date()), type, ...values
        .map(loggerFormat)
        .map(formatWithLength(maxSize)));
}
function isDebugOn(e, type) {
    return !!e && (e === '*' ||
        type === e ||
        (e.endsWith('*') &&
            type.startsWith(e.slice(0, -1))));
}
function isDebugOff(e, type) {
    return !!e && (e.startsWith('-') &&
        (type === e.slice(1) ||
            (e.endsWith('*') &&
                type.startsWith(e.slice(1, -1)))));
}
function getDebugFlag(env, type) {
    let flag = false;
    for (const e of env) {
        if (isDebugOn(e, type)) {
            flag = true;
        }
        else if (isDebugOff(e, type)) {
            flag = false;
        }
    }
    return flag;
}
function parseEnv(type) {
    const maxSize = parseInt(_polkadot_x_global__WEBPACK_IMPORTED_MODULE_8__/* .xglobal */ .Ur.process?.env?.['DEBUG_MAX'] || '-1', 10);
    return [
        getDebugFlag((_polkadot_x_global__WEBPACK_IMPORTED_MODULE_8__/* .xglobal */ .Ur.process?.env?.['DEBUG'] || '').toLowerCase().split(','), type),
        isNaN(maxSize)
            ? -1
            : maxSize
    ];
}
/**
 * @name Logger
 * @summary Creates a consistent log interface for messages
 * @description
 * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.
 * @example
 * <BR>
 *
 * ```javascript
 * import { logger } from '@polkadot/util';
 *
 * const l = logger('test');
 * ```
 */
function logger(origin) {
    const type = `${origin.toUpperCase()}:`.padStart(16);
    const [isDebug, maxSize] = parseEnv(origin.toLowerCase());
    return {
        debug: isDebug
            ? (...values) => apply('debug', type, values, maxSize)
            : _noop_js__WEBPACK_IMPORTED_MODULE_9__/* .noop */ .Z,
        error: (...values) => apply('error', type, values),
        log: (...values) => apply('log', type, values),
        noop: _noop_js__WEBPACK_IMPORTED_MODULE_9__/* .noop */ .Z,
        warn: (...values) => apply('warn', type, values)
    };
}


/***/ }),

/***/ 85268:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   H: () => (/* binding */ memoize)
/* harmony export */ });
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53393);

function defaultGetId() {
    return 'none';
}
/**
 * @name memoize
 * @description Memomize the function with a specific instanceId
 */
function memoize(fn, { getInstanceId = defaultGetId } = {}) {
    const cache = {};
    const memoized = (...args) => {
        const stringParams = (0,_stringify_js__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)(args);
        const instanceId = getInstanceId();
        if (!cache[instanceId]) {
            cache[instanceId] = {};
        }
        if (cache[instanceId][stringParams] === undefined) {
            cache[instanceId][stringParams] = fn(...args);
        }
        return cache[instanceId][stringParams];
    };
    memoized.unmemoize = (...args) => {
        const stringParams = (0,_stringify_js__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)(args);
        const instanceId = getInstanceId();
        if (cache[instanceId]?.[stringParams] !== undefined) {
            delete cache[instanceId][stringParams];
        }
    };
    return memoized;
}


/***/ }),

/***/ 92901:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Y: () => (/* binding */ nextTick)
/* harmony export */ });
/**
 * @name nextTick
 * @description Defer the operation to the queue for evaluation on the next tick
 */
function nextTick(onExec, onError) {
    // While Promise.resolve().then(...) would defer to the nextTick, this
    // actually does not play as nicely in browsers like the setTimeout(...)
    // approach. So the safer, though less optimal approach is the one taken here
    setTimeout(() => {
        Promise
            .resolve()
            .then(() => {
            onExec();
        })
            .catch((error) => {
            if (onError) {
                onError(error);
            }
            else {
                console.error(error);
            }
        });
    }, 0);
}


/***/ }),

/***/ 12275:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ noop),
/* harmony export */   y: () => (/* binding */ identity)
/* harmony export */ });
/**
 * A sharable identity function. Returns the input as-is with no transformation applied.
 */
function identity(value) {
    return value;
}
/**
 * A sharable noop function. As the name suggests, does nothing
 */
function noop() {
    // noop
}


/***/ }),

/***/ 18754:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   n: () => (/* binding */ objectClear)
/* harmony export */ });
/**
 * @name objectClear
 * @summary Removes all the keys from the input object
 */
function objectClear(value) {
    const keys = Object.keys(value);
    for (let i = 0, count = keys.length; i < count; i++) {
        delete value[keys[i]];
    }
    return value;
}


/***/ }),

/***/ 57620:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ objectProperty),
/* harmony export */   a: () => (/* binding */ objectProperties)
/* harmony export */ });
/**
 * @name objectProperty
 * @summary Assign a get property on the input object
 */
function objectProperty(that, key, getter, getName, index = 0) {
    const name = getName
        ? getName(key, index)
        : key;
    // There are 3 approaches here -
    //  - Object.prototype.hasOwnProperty.call(that, key) - this only checks the current class, i.e
    //    will retuirn false if the property is set in the parent class
    //  - isUndefined(...) - this may yield a false positive when the property is there, but not set.
    //    Additionally, on pre-defined getters it may make a call
    //  - key in that - Does not need to be combined with either of the above and checks the full chain
    if (!(name in that)) {
        Object.defineProperty(that, name, {
            enumerable: true,
            // Unlike in lazy, we always call into the upper function, i.e. this method
            // does not cache old values (it is expected to be used for dynamic values)
            get: function () {
                return getter(key, index, this);
            }
        });
    }
}
/**
 * @name objectProperties
 * @summary Assign get properties on the input object
 */
function objectProperties(that, keys, getter, getName) {
    for (let i = 0, count = keys.length; i < count; i++) {
        objectProperty(that, keys[i], getter, getName, i);
    }
}


/***/ }),

/***/ 53472:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ objectSpread)
/* harmony export */ });
/**
 * @name objectSpread
 * @summary Concats all sources into the destination
 */
function objectSpread(dest, ...sources) {
    for (let i = 0, count = sources.length; i < count; i++) {
        const src = sources[i];
        if (src) {
            if (typeof src.entries === 'function') {
                for (const [key, value] of src.entries()) {
                    dest[key] = value;
                }
            }
            else {
                Object.assign(dest, src);
            }
        }
    }
    return dest;
}


/***/ }),

/***/ 36600:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Fc: () => (/* binding */ CC_TO_UP),
/* harmony export */   KT: () => (/* binding */ stringPascalCase),
/* harmony export */   yZ: () => (/* binding */ stringCamelCase)
/* harmony export */ });
/* unused harmony export CC_TO_LO */
const CC_TO_UP = new Array(256);
const CC_TO_LO = new Array(256);
for (let i = 0, count = CC_TO_UP.length; i < count; i++) {
    CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();
    CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();
}
/** @internal */
function formatAllCaps(w) {
    return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];
}
/**
 * @internal
 *
 * Inspired by https://stackoverflow.com/a/2970667
 *
 * This is not as optimal as the original SO answer (we split into per-word),
 * however it does pass the tests (which the SO version doesn't) and is still
 * a major improvement over the original camelcase npm package -
 *
 *   camelcase: 20.88 μs/op
 *        this:  1.00 μs/op
 *
 * Caveat of this: only Ascii, but acceptable for the intended usecase
 */
function converter(format) {
    return (value) => {
        const parts = value
            // replace all separators (including consequtive) with spaces
            .replace(/[-_., ]+/g, ' ')
            // we don't want leading or trailing spaces
            .trim()
            // split into words
            .split(' ');
        let result = '';
        for (let i = 0, count = parts.length; i < count; i++) {
            const w = parts[i];
            // apply the formatting
            result += format(/^[\dA-Z]+$/.test(w)
                // all full uppercase + letters are changed to lowercase
                ? w.toLowerCase()
                // all consecutive capitals + letters are changed to lowercase
                // e.g. UUID64 -> uuid64, while preserving splits, eg. NFTOrder -> nftOrder
                : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps), i);
        }
        return result;
    };
}
/**
 * @name stringCamelCase
 * @summary Convert a dash/dot/underscore/space separated Ascii string/String to camelCase
 */
const stringCamelCase = /*#__PURE__*/ converter((w, i) => 
(i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));
/**
 * @name stringPascalCase
 * @summary Convert a dash/dot/underscore/space separated Ascii string/String to PascalCase
 */
const stringPascalCase = /*#__PURE__*/ converter((w) => 
CC_TO_UP[w.charCodeAt(0)] + w.slice(1));


/***/ }),

/***/ 96566:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   k: () => (/* binding */ stringUpperFirst)
/* harmony export */ });
/* unused harmony export stringLowerFirst */
/* harmony import */ var _camelCase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(36600);

/** @internal */
function converter(map) {
    return (value) => value
        ? map[value.charCodeAt(0)] + value.slice(1)
        : '';
}
/**
 * @name stringLowerFirst
 * @summary Lowercase the first letter of a string
 * @description
 * Lowercase the first letter of a string
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringLowerFirst } from '@polkadot/util';
 *
 * stringLowerFirst('ABC'); // => 'aBC'
 * ```
 */
const stringLowerFirst = /*#__PURE__*/ (/* unused pure expression or super */ null && (converter(CC_TO_LO)));
/**
 * @name stringUpperFirst
 * @summary Uppercase the first letter of a string
 * @description
 * Lowercase the first letter of a string
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringUpperFirst } from '@polkadot/util';
 *
 * stringUpperFirst('abc'); // => 'Abc'
 * ```
 */
const stringUpperFirst = /*#__PURE__*/ converter(_camelCase_js__WEBPACK_IMPORTED_MODULE_0__/* .CC_TO_UP */ .Fc);


/***/ }),

/***/ 37173:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $: () => (/* binding */ stringToHex)
/* harmony export */ });
/* harmony import */ var _u8a_toHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26048);
/* harmony import */ var _toU8a_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56358);


/**
 * @name stringToHex
 * @summary Creates a hex string from a utf-8 string
 * @description
 * String input values return the actual encoded hex value.
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringToHex } from '@polkadot/util';
 *
 * stringToU8a('hello'); // 0x68656c6c6f
 * ```
 */
function stringToHex(value) {
    return (0,_u8a_toHex_js__WEBPACK_IMPORTED_MODULE_0__/* .u8aToHex */ .c)((0,_toU8a_js__WEBPACK_IMPORTED_MODULE_1__/* .stringToU8a */ .d)(value));
}


/***/ }),

/***/ 56358:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  d: () => (/* binding */ stringToU8a)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+x-global@12.6.2/node_modules/@polkadot/x-global/index.js
var x_global = __webpack_require__(80496);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+x-textencoder@12.6.2/node_modules/@polkadot/x-textencoder/fallback.js
class TextEncoder {
    encode(value) {
        const count = value.length;
        const u8a = new Uint8Array(count);
        for (let i = 0; i < count; i++) {
            u8a[i] = value.charCodeAt(i);
        }
        return u8a;
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+x-textencoder@12.6.2/node_modules/@polkadot/x-textencoder/browser.js



const browser_TextEncoder = /*#__PURE__*/ (0,x_global/* extractGlobal */.o)('TextEncoder', TextEncoder);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/string/toU8a.js

const encoder = new browser_TextEncoder();
/**
 * @name stringToU8a
 * @summary Creates a Uint8Array object from a utf-8 string.
 * @description
 * String input values return the actual encoded `UInt8Array`. `null` or `undefined` values returns an empty encoded array.
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringToU8a } from '@polkadot/util';
 *
 * stringToU8a('hello'); // [0x68, 0x65, 0x6c, 0x6c, 0x6f]
 * ```
 */
function stringToU8a(value) {
    return value
        ? encoder.encode(value.toString())
        : new Uint8Array();
}


/***/ }),

/***/ 53393:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ stringify)
/* harmony export */ });
/* harmony import */ var _is_bigInt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46770);

/** @internal */
function replacer(_, v) {
    return (0,_is_bigInt_js__WEBPACK_IMPORTED_MODULE_0__/* .isBigInt */ .C)(v)
        ? v.toString()
        : v;
}
/**
 * @name stringify
 * @summary Performs a JSON.stringify, with BigInt handling
 * @description A wrapper for JSON.stringify that handles BigInt values transparently, converting them to string. No differences from the native JSON.stringify function otherwise.
 */
function stringify(value, space) {
    return JSON.stringify(value, replacer, space);
}


/***/ }),

/***/ 93173:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   d: () => (/* binding */ u8aConcatStrict),
/* harmony export */   e: () => (/* binding */ u8aConcat)
/* harmony export */ });
/* harmony import */ var _toU8a_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42740);

/**
 * @name u8aConcat
 * @summary Creates a concatenated Uint8Array from the inputs.
 * @description
 * Concatenates the input arrays into a single `UInt8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { { u8aConcat } from '@polkadot/util';
 *
 * u8aConcat(
 *   new Uint8Array([1, 2, 3]),
 *   new Uint8Array([4, 5, 6])
 * ); // [1, 2, 3, 4, 5, 6]
 * ```
 */
function u8aConcat(...list) {
    const count = list.length;
    const u8as = new Array(count);
    let length = 0;
    for (let i = 0; i < count; i++) {
        u8as[i] = (0,_toU8a_js__WEBPACK_IMPORTED_MODULE_0__/* .u8aToU8a */ .Y)(list[i]);
        length += u8as[i].length;
    }
    return u8aConcatStrict(u8as, length);
}
/**
 * @name u8aConcatStrict
 * @description A strict version of [[u8aConcat]], accepting only Uint8Array inputs
 */
function u8aConcatStrict(u8as, length = 0) {
    const count = u8as.length;
    let offset = 0;
    if (!length) {
        for (let i = 0; i < count; i++) {
            length += u8as[i].length;
        }
    }
    const result = new Uint8Array(length);
    for (let i = 0; i < count; i++) {
        result.set(u8as[i], offset);
        offset += u8as[i].length;
    }
    return result;
}


/***/ }),

/***/ 84061:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   S: () => (/* binding */ u8aEq)
/* harmony export */ });
/* harmony import */ var _toU8a_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42740);

/**
 * @name u8aEq
 * @summary Compares two Uint8Arrays for equality.
 * @description
 * For `UInt8Array` (or hex string) input values true if there is a match.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aEq } from '@polkadot/util';
 *
 * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true
 * ```
 */
function u8aEq(a, b) {
    const u8aa = (0,_toU8a_js__WEBPACK_IMPORTED_MODULE_0__/* .u8aToU8a */ .Y)(a);
    const u8ab = (0,_toU8a_js__WEBPACK_IMPORTED_MODULE_0__/* .u8aToU8a */ .Y)(b);
    if (u8aa.length === u8ab.length) {
        const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
        const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
        const mod = (u8aa.length % 4) | 0;
        const length = (u8aa.length - mod) | 0;
        for (let i = 0; i < length; i += 4) {
            if (dvA.getUint32(i) !== dvB.getUint32(i)) {
                return false;
            }
        }
        for (let i = length, count = u8aa.length; i < count; i++) {
            if (u8aa[i] !== u8ab[i]) {
                return false;
            }
        }
        return true;
    }
    return false;
}


/***/ }),

/***/ 91693:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _: () => (/* binding */ u8aToBn)
/* harmony export */ });
/* harmony import */ var _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39098);

/**
 * @name u8aToBn
 * @summary Creates a BN from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.
 * @param value The value to convert
 * @param options Options to pass while converting
 * @param options.isLe Convert using Little Endian (default)
 * @param options.isNegative Convert using two's complement
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToBn } from '@polkadot/util';
 *
 * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
 * ```
 */
function u8aToBn(value, { isLe = true, isNegative = false } = {}) {
    // slice + reverse is expensive, however SCALE is LE by default so this is the path
    // we are most interested in (the BE is added for the sake of being comprehensive)
    if (!isLe) {
        value = value.slice().reverse();
    }
    const count = value.length;
    // shortcut for <= u48 values - in this case the manual conversion
    // here seems to be more efficient than passing the full array
    if (isNegative && count && (value[count - 1] & 0x80)) {
        // Most common case i{8, 16, 32} default LE SCALE-encoded
        // For <= 32, we also optimize the xor to a single op
        switch (count) {
            case 0:
                return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(0);
            case 1:
                return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(((value[0] ^ 255) * -1) - 1);
            case 2:
                return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__((((value[0] + (value[1] << 8)) ^ 65535) * -1) - 1);
            case 3:
                return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__((((value[0] + (value[1] << 8) + (value[2] << 16)) ^ 16777215) * -1) - 1);
            case 4:
                // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                // 32-bit, in the case where the top-most bit is set this yields a negative value
                return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) * -1) - 1);
            case 5:
                return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + ((value[4] ^ 0xff) * 4294967296)) * -1) - 1);
            case 6:
                return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + (((value[4] + (value[5] << 8)) ^ 65535) * 4294967296)) * -1) - 1);
            default:
                return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(value, 'le').fromTwos(count * 8);
        }
    }
    // Most common case - u{8, 16, 32} default LE SCALE-encoded
    //
    // There are some slight benefits in unrolling this specific loop,
    // however it comes with diminishing returns since here the actual
    // `new BN` does seem to take up the bulk of the time
    switch (count) {
        case 0:
            return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(0);
        case 1:
            return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(value[0]);
        case 2:
            return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(value[0] + (value[1] << 8));
        case 3:
            return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(value[0] + (value[1] << 8) + (value[2] << 16));
        case 4:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216));
        case 5:
            return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8)) * 16777216));
        case 6:
            return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216));
        default:
            return new _bn_bn_js__WEBPACK_IMPORTED_MODULE_0__(value, 'le');
    }
}


/***/ }),

/***/ 38994:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   W: () => (/* binding */ u8aToFloat)
/* harmony export */ });
/**
 * @name u8aToFloat
 * @description Converts a Uint8Array value into the float (either 32 or 64-bit)
 * representation.
 */
function u8aToFloat(value, { bitLength = 32, isLe = true } = {}) {
    if (bitLength !== 32 && bitLength !== 64) {
        throw new Error('Invalid bitLength provided, expected 32 or 64');
    }
    else if (value.length < (bitLength / 8)) {
        throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);
    }
    const dv = new DataView(value.buffer, value.byteOffset);
    return bitLength === 32
        ? dv.getFloat32(0, isLe)
        : dv.getFloat64(0, isLe);
}


/***/ }),

/***/ 26048:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ u8aToHex)
/* harmony export */ });
const U8 = new Array(256);
const U16 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
    U8[n] = n.toString(16).padStart(2, '0');
}
for (let i = 0; i < 256; i++) {
    const s = i << 8;
    for (let j = 0; j < 256; j++) {
        U16[s | j] = U8[i] + U8[j];
    }
}
/** @internal */
function hex(value, result) {
    const mod = (value.length % 2) | 0;
    const length = (value.length - mod) | 0;
    for (let i = 0; i < length; i += 2) {
        result += U16[(value[i] << 8) | value[i + 1]];
    }
    if (mod) {
        result += U8[value[length] | 0];
    }
    return result;
}
/**
 * @name u8aToHex
 * @summary Creates a hex string from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToHex } from '@polkadot/util';
 *
 * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
 * ```
 */
function u8aToHex(value, bitLength = -1, isPrefixed = true) {
    // this is not 100% correct sinmce we support isPrefixed = false....
    const empty = isPrefixed
        ? '0x'
        : '';
    if (!value?.length) {
        return empty;
    }
    else if (bitLength > 0) {
        const length = Math.ceil(bitLength / 8);
        if (value.length > length) {
            return `${hex(value.subarray(0, length / 2), empty)}…${hex(value.subarray(value.length - length / 2), '')}`;
        }
    }
    return hex(value, empty);
}


/***/ }),

/***/ 31822:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ u8aToNumber)
/* harmony export */ });
/**
 * @name u8aToNumber
 * @summary Creates a number from a Uint8Array object.
 */
function u8aToNumber(value, { isLe = true, isNegative = false } = {}) {
    // slice + reverse is expensive, however SCALE is LE by default so this is the path
    // we are most interested in (the BE is added for the sake of being comprehensive)
    if (!isLe) {
        value = value.slice().reverse();
    }
    const count = value.length;
    // When the value is a i{8, 16, 24, 32, 40, 40} values and the top-most bit
    // indicates a signed value, we use a two's complement conversion. If one of these
    // flags are not set, we just do a normal unsigned conversion (the same shortcut
    // applies in both the u8aTo{BigInt, Bn} conversions as well)
    if (isNegative && count && (value[count - 1] & 0x80)) {
        switch (count) {
            case 0:
                return 0;
            case 1:
                return (((value[0] ^ 255) * -1) - 1);
            case 2:
                return ((((value[0] + (value[1] << 8)) ^ 65535) * -1) - 1);
            case 3:
                return ((((value[0] + (value[1] << 8) + (value[2] << 16)) ^ 16777215) * -1) - 1);
            case 4:
                // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                // 32-bit, in the case where the top-most bit is set this yields a negative value
                return ((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) * -1) - 1);
            case 5:
                return (((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + ((value[4] ^ 0xff) * 4294967296)) * -1) - 1);
            case 6:
                return (((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + (((value[4] + (value[5] << 8)) ^ 65535) * 4294967296)) * -1) - 1);
            default:
                throw new Error('Value more than 48-bits cannot be reliably converted');
        }
    }
    switch (count) {
        case 0:
            return 0;
        case 1:
            return value[0];
        case 2:
            return value[0] + (value[1] << 8);
        case 3:
            return value[0] + (value[1] << 8) + (value[2] << 16);
        case 4:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216);
        case 5:
            return value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8)) * 16777216);
        case 6:
            return value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
        default:
            throw new Error('Value more than 48-bits cannot be reliably converted');
    }
}


/***/ }),

/***/ 91873:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  z: () => (/* binding */ u8aToString)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+x-global@12.6.2/node_modules/@polkadot/x-global/index.js
var x_global = __webpack_require__(80496);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+x-textdecoder@12.6.2/node_modules/@polkadot/x-textdecoder/fallback.js
class TextDecoder {
    __encoding;
    constructor(encoding) {
        this.__encoding = encoding;
    }
    decode(value) {
        let result = '';
        for (let i = 0, count = value.length; i < count; i++) {
            result += String.fromCharCode(value[i]);
        }
        return result;
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+x-textdecoder@12.6.2/node_modules/@polkadot/x-textdecoder/browser.js



const browser_TextDecoder = /*#__PURE__*/ (0,x_global/* extractGlobal */.o)('TextDecoder', TextDecoder);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toString.js

const decoder = new browser_TextDecoder('utf-8');
/**
 * @name u8aToString
 * @summary Creates a utf-8 string from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual decoded utf-8 string. `null` or `undefined` values returns an empty string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToString } from '@polkadot/util';
 *
 * u8aToString(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f])); // hello
 * ```
 */
function u8aToString(value) {
    return value
        ? decoder.decode(value)
        : '';
}


/***/ }),

/***/ 42740:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Y: () => (/* binding */ u8aToU8a)
/* harmony export */ });
/* harmony import */ var _hex_toU8a_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82025);
/* harmony import */ var _is_buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3570);
/* harmony import */ var _is_hex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14911);
/* harmony import */ var _is_u8a_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38589);
/* harmony import */ var _string_toU8a_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(56358);





/**
 * @name u8aToU8a
 * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.
 * @description
 * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToU8a } from '@polkadot/util';
 *
 * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])
 * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])
 * ```
 */
function u8aToU8a(value) {
    return (0,_is_u8a_js__WEBPACK_IMPORTED_MODULE_0__/* .isU8a */ .U)(value)
        // NOTE isBuffer needs to go here since it actually extends
        // Uint8Array on Node.js environments, so all Buffer are Uint8Array,
        // but Uint8Array is not Buffer
        ? (0,_is_buffer_js__WEBPACK_IMPORTED_MODULE_1__/* .isBuffer */ .z)(value)
            ? new Uint8Array(value)
            : value
        : (0,_is_hex_js__WEBPACK_IMPORTED_MODULE_2__/* .isHex */ .vq)(value)
            ? (0,_hex_toU8a_js__WEBPACK_IMPORTED_MODULE_3__/* .hexToU8a */ .G)(value)
            : Array.isArray(value)
                ? new Uint8Array(value)
                : (0,_string_toU8a_js__WEBPACK_IMPORTED_MODULE_4__/* .stringToU8a */ .d)(value);
}


/***/ }),

/***/ 22374:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Rg: () => (/* binding */ blake2b),
  DK: () => (/* binding */ isReady),
  wn: () => (/* binding */ keccak256),
  nU: () => (/* binding */ keccak512),
  o3: () => (/* binding */ secp256k1Expand),
  Qf: () => (/* binding */ twox),
  q$: () => (/* binding */ waitReady)
});

// UNUSED EXPORTS: bip39Generate, bip39ToEntropy, bip39ToMiniSecret, bip39ToSeed, bip39Validate, bridge, ed25519KeypairFromSeed, ed25519Sign, ed25519Verify, hmacSha256, hmacSha512, packageInfo, pbkdf2, scrypt, secp256k1Compress, secp256k1FromSeed, secp256k1Recover, secp256k1Sign, sha256, sha512, sr25519Agree, sr25519DeriveKeypairHard, sr25519DeriveKeypairSoft, sr25519DerivePublicSoft, sr25519KeypairFromSeed, sr25519Sign, sr25519Verify, vrfSign, vrfVerify

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toString.js + 2 modules
var u8a_toString = __webpack_require__(91873);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/string/toU8a.js + 2 modules
var toU8a = __webpack_require__(56358);
// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+x-randomvalues@12.6.2_@polkadot+util@12.6.2_@polkadot+wasm-util@7.3.2/node_modules/@polkadot/x-randomvalues/browser.js
var browser = __webpack_require__(97792);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+wasm-bridge@7.3.2_@polkadot+util@12.6.2_@polkadot+x-randomvalues@12.6.2/node_modules/@polkadot/wasm-bridge/wbg.js

const DEFAULT_CRYPTO = { getRandomValues: browser/* getRandomValues */.PP };
const DEFAULT_SELF = { crypto: DEFAULT_CRYPTO };
/**
 * @name Wbg
 * @description
 * This defines the internal interfaces that wasm-bindgen used to communicate
 * with the host layer. None of these functions are available to the user, rather
 * they are called internally from the WASM code itself.
 *
 * The interfaces here are exposed in the imports on the created WASM interfaces.
 *
 * Internally the implementation does a thin layer into the supplied bridge.
 */
class Wbg {
    __internal__bridge;
    constructor(bridge) {
        this.__internal__bridge = bridge;
    }
    /** @internal */
    abort = () => {
        throw new Error('abort');
    };
    /** @internal */
    __wbindgen_is_undefined = (idx) => {
        return this.__internal__bridge.getObject(idx) === undefined;
    };
    /** @internal */
    __wbindgen_throw = (ptr, len) => {
        throw new Error(this.__internal__bridge.getString(ptr, len));
    };
    /** @internal */
    __wbg_self_1b7a39e3a92c949c = () => {
        return this.__internal__bridge.addObject(DEFAULT_SELF);
    };
    /** @internal */
    __wbg_require_604837428532a733 = (ptr, len) => {
        throw new Error(`Unable to require ${this.__internal__bridge.getString(ptr, len)}`);
    };
    /** @internal */
    __wbg_crypto_968f1772287e2df0 = (_idx) => {
        return this.__internal__bridge.addObject(DEFAULT_CRYPTO);
    };
    /** @internal */
    __wbg_getRandomValues_a3d34b4fee3c2869 = (_idx) => {
        return this.__internal__bridge.addObject(DEFAULT_CRYPTO.getRandomValues);
    };
    /** @internal */
    __wbg_getRandomValues_f5e14ab7ac8e995d = (_arg0, ptr, len) => {
        DEFAULT_CRYPTO.getRandomValues(this.__internal__bridge.getU8a(ptr, len));
    };
    /** @internal */
    __wbg_randomFillSync_d5bd2d655fdf256a = (_idx, _ptr, _len) => {
        throw new Error('randomFillsync is not available');
        // getObject(idx).randomFillSync(getU8a(ptr, len));
    };
    /** @internal */
    __wbindgen_object_drop_ref = (idx) => {
        this.__internal__bridge.takeObject(idx);
    };
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+wasm-bridge@7.3.2_@polkadot+util@12.6.2_@polkadot+x-randomvalues@12.6.2/node_modules/@polkadot/wasm-bridge/bridge.js


/**
 * @name Bridge
 * @description
 * Creates a bridge between the JS and WASM environments.
 *
 * For any bridge it is passed an function which is then called internally at the
 * time of initialization. This affectively implements the layer between WASM and
 * the native environment, providing all the plumbing needed for the Wbg classes.
 */
class Bridge {
    __internal__createWasm;
    __internal__heap;
    __internal__wbg;
    __internal__cachegetInt32;
    __internal__cachegetUint8;
    __internal__heapNext;
    __internal__wasm;
    __internal__wasmError;
    __internal__wasmPromise;
    __internal__type;
    constructor(createWasm) {
        this.__internal__createWasm = createWasm;
        this.__internal__cachegetInt32 = null;
        this.__internal__cachegetUint8 = null;
        this.__internal__heap = new Array(32)
            .fill(undefined)
            .concat(undefined, null, true, false);
        this.__internal__heapNext = this.__internal__heap.length;
        this.__internal__type = 'none';
        this.__internal__wasm = null;
        this.__internal__wasmError = null;
        this.__internal__wasmPromise = null;
        this.__internal__wbg = { ...new Wbg(this) };
    }
    /** @description Returns the init error */
    get error() {
        return this.__internal__wasmError;
    }
    /** @description Returns the init type */
    get type() {
        return this.__internal__type;
    }
    /** @description Returns the created wasm interface */
    get wasm() {
        return this.__internal__wasm;
    }
    /** @description Performs the wasm initialization */
    async init(createWasm) {
        if (!this.__internal__wasmPromise || createWasm) {
            this.__internal__wasmPromise = (createWasm || this.__internal__createWasm)(this.__internal__wbg);
        }
        const { error, type, wasm } = await this.__internal__wasmPromise;
        this.__internal__type = type;
        this.__internal__wasm = wasm;
        this.__internal__wasmError = error;
        return this.__internal__wasm;
    }
    /**
     * @internal
     * @description Gets an object from the heap
     */
    getObject(idx) {
        return this.__internal__heap[idx];
    }
    /**
     * @internal
     * @description Removes an object from the heap
     */
    dropObject(idx) {
        if (idx < 36) {
            return;
        }
        this.__internal__heap[idx] = this.__internal__heapNext;
        this.__internal__heapNext = idx;
    }
    /**
     * @internal
     * @description Retrieves and removes an object to the heap
     */
    takeObject(idx) {
        const ret = this.getObject(idx);
        this.dropObject(idx);
        return ret;
    }
    /**
     * @internal
     * @description Adds an object to the heap
     */
    addObject(obj) {
        if (this.__internal__heapNext === this.__internal__heap.length) {
            this.__internal__heap.push(this.__internal__heap.length + 1);
        }
        const idx = this.__internal__heapNext;
        this.__internal__heapNext = this.__internal__heap[idx];
        this.__internal__heap[idx] = obj;
        return idx;
    }
    /**
     * @internal
     * @description Retrieve an Int32 in the WASM interface
     */
    getInt32() {
        if (this.__internal__cachegetInt32 === null || this.__internal__cachegetInt32.buffer !== this.__internal__wasm.memory.buffer) {
            this.__internal__cachegetInt32 = new Int32Array(this.__internal__wasm.memory.buffer);
        }
        return this.__internal__cachegetInt32;
    }
    /**
     * @internal
     * @description Retrieve an Uint8Array in the WASM interface
     */
    getUint8() {
        if (this.__internal__cachegetUint8 === null || this.__internal__cachegetUint8.buffer !== this.__internal__wasm.memory.buffer) {
            this.__internal__cachegetUint8 = new Uint8Array(this.__internal__wasm.memory.buffer);
        }
        return this.__internal__cachegetUint8;
    }
    /**
     * @internal
     * @description Retrieves an Uint8Array in the WASM interface
     */
    getU8a(ptr, len) {
        return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
    }
    /**
     * @internal
     * @description Retrieves a string in the WASM interface
     */
    getString(ptr, len) {
        return (0,u8a_toString/* u8aToString */.z)(this.getU8a(ptr, len));
    }
    /**
     * @internal
     * @description Allocates an Uint8Array in the WASM interface
     */
    allocU8a(arg) {
        const ptr = this.__internal__wasm.__wbindgen_malloc(arg.length * 1);
        this.getUint8().set(arg, ptr / 1);
        return [ptr, arg.length];
    }
    /**
     * @internal
     * @description Allocates a string in the WASM interface
     */
    allocString(arg) {
        return this.allocU8a((0,toU8a/* stringToU8a */.d)(arg));
    }
    /**
     * @internal
     * @description Retrieves an Uint8Array from the WASM interface
     */
    resultU8a() {
        const r0 = this.getInt32()[8 / 4 + 0];
        const r1 = this.getInt32()[8 / 4 + 1];
        const ret = this.getU8a(r0, r1).slice();
        this.__internal__wasm.__wbindgen_free(r0, r1 * 1);
        return ret;
    }
    /**
     * @internal
     * @description Retrieve a string from the WASM interface
     */
    resultString() {
        return (0,u8a_toString/* u8aToString */.z)(this.resultU8a());
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+wasm-bridge@7.3.2_@polkadot+util@12.6.2_@polkadot+x-randomvalues@12.6.2/node_modules/@polkadot/wasm-bridge/init.js
/**
 * @name createWasmFn
 * @description
 * Create a WASM (or ASM.js) creator interface based on the supplied information.
 *
 * It will attempt to create a WASM interface first and if this fails or is not available in
 * the environment, will fallback to attempting to create an ASM.js interface.
 */
function createWasmFn(root, wasmBytes, asmFn) {
    return async (wbg) => {
        const result = {
            error: null,
            type: 'none',
            wasm: null
        };
        try {
            if (!wasmBytes?.length) {
                throw new Error('No WebAssembly provided for initialization');
            }
            else if (typeof WebAssembly !== 'object' || typeof WebAssembly.instantiate !== 'function') {
                throw new Error('WebAssembly is not available in your environment');
            }
            const source = await WebAssembly.instantiate(wasmBytes, { wbg });
            result.wasm = source.instance.exports;
            result.type = 'wasm';
        }
        catch (error) {
            // if we have a valid supplied asm.js, return that
            if (typeof asmFn === 'function') {
                result.wasm = asmFn(wbg);
                result.type = 'asm';
            }
            else {
                result.error = `FATAL: Unable to initialize @polkadot/wasm-${root}:: ${error.message}`;
                console.error(result.error);
            }
        }
        return result;
    };
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+wasm-util@7.3.2_@polkadot+util@12.6.2/node_modules/@polkadot/wasm-util/fflate.js
const u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;
const clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
const fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);
const fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);
const freb = (eb, start) => {
    const b = new u16(31);
    for (let i = 0; i < 31; ++i) {
        b[i] = start += 1 << eb[i - 1];
    }
    // numbers here are at max 18 bits
    const r = new u32(b[30]);
    for (let i = 1; i < 30; ++i) {
        for (let j = b[i]; j < b[i + 1]; ++j) {
            r[j] = ((j - b[i]) << 5) | i;
        }
    }
    return [b, r];
};
const [fl, revfl] = freb(fleb, 2);
fl[28] = 258, revfl[258] = 28;
const [fd] = freb(fdeb, 0);
const rev = new u16(32768);
for (let i = 0; i < 32768; ++i) {
    // reverse table algorithm from SO
    let x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);
    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);
    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);
    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;
}
const hMap = ((cd, mb, r) => {
    const s = cd.length;
    // index
    let i = 0;
    // u16 "map": index -> # of codes with bit length = index
    const l = new u16(mb);
    // length of cd must be 288 (total # of codes)
    for (; i < s; ++i) {
        if (cd[i])
            ++l[cd[i] - 1];
    }
    // u16 "map": index -> minimum code for bit length = index
    const le = new u16(mb);
    for (i = 1; i < mb; ++i) {
        le[i] = (le[i - 1] + l[i - 1]) << 1;
    }
    let co;
    if (r) {
        // u16 "map": index -> number of actual bits, symbol for code
        co = new u16(1 << mb);
        // bits to remove for reverser
        const rvb = 15 - mb;
        for (i = 0; i < s; ++i) {
            // ignore 0 lengths
            if (cd[i]) {
                // num encoding both symbol and bits read
                const sv = (i << 4) | cd[i];
                // free bits
                const r = mb - cd[i];
                // start value
                let v = le[cd[i] - 1]++ << r;
                // m is end value
                for (const m = v | ((1 << r) - 1); v <= m; ++v) {
                    // every 16 bit value starting with the code yields the same result
                    co[rev[v] >> rvb] = sv;
                }
            }
        }
    }
    else {
        co = new u16(s);
        for (i = 0; i < s; ++i) {
            if (cd[i]) {
                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);
            }
        }
    }
    return co;
});
const flt = new u8(288);
for (let i = 0; i < 144; ++i)
    flt[i] = 8;
for (let i = 144; i < 256; ++i)
    flt[i] = 9;
for (let i = 256; i < 280; ++i)
    flt[i] = 7;
for (let i = 280; i < 288; ++i)
    flt[i] = 8;
const fdt = new u8(32);
for (let i = 0; i < 32; ++i)
    fdt[i] = 5;
const flrm = hMap(flt, 9, 1);
const fdrm = hMap(fdt, 5, 1);
const bits = (d, p, m) => {
    const o = p >>> 3;
    return ((d[o] | (d[o + 1] << 8)) >>> (p & 7)) & m;
};
const bits16 = (d, p) => {
    const o = p >>> 3;
    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >>> (p & 7));
};
const shft = (p) => (p >>> 3) + (p & 7 && 1);
const slc = (v, s, e) => {
    if (s == null || s < 0)
        s = 0;
    if (e == null || e > v.length)
        e = v.length;
    // can't use .constructor in case user-supplied
    const n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
    n.set(v.subarray(s, e));
    return n;
};
const max = (a) => {
    let m = a[0];
    for (let i = 1, count = a.length; i < count; ++i) {
        if (a[i] > m)
            m = a[i];
    }
    return m;
};
const inflt = (dat, buf, st) => {
    const noSt = !st || st.i;
    if (!st)
        st = {};
    // source length
    const sl = dat.length;
    // have to estimate size
    const noBuf = !buf || !noSt;
    // Assumes roughly 33% compression ratio average
    if (!buf)
        buf = new u8(sl * 3);
    // ensure buffer can fit at least l elements
    const cbuf = (l) => {
        let bl = buf.length;
        // need to increase size to fit
        if (l > bl) {
            // Double or set to necessary, whichever is greater
            const nbuf = new u8(Math.max(bl << 1, l));
            nbuf.set(buf);
            buf = nbuf;
        }
    };
    //  last chunk         bitpos           bytes
    let final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    if (final && !lm)
        return buf;
    // total bits
    const tbts = sl << 3;
    do {
        if (!lm) {
            // BFINAL - this is only 1 when last chunk is next
            st.f = final = bits(dat, pos, 1);
            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
            const type = bits(dat, pos + 1, 3);
            pos += 3;
            if (!type) {
                // go to end of byte boundary
                const s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;
                if (t > sl) {
                    if (noSt)
                        throw 'unexpected EOF';
                    break;
                }
                // ensure size
                if (noBuf)
                    cbuf(bt + l);
                // Copy over uncompressed data
                buf.set(dat.subarray(s, t), bt);
                // Get new bitpos, update byte count
                st.b = bt += l, st.p = pos = t << 3;
                continue;
            }
            else if (type == 1)
                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
            else if (type == 2) {
                //  literal                            lengths
                const hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
                const tl = hLit + bits(dat, pos + 5, 31) + 1;
                pos += 14;
                // length+distance tree
                const ldt = new u8(tl);
                // code length tree
                const clt = new u8(19);
                for (let i = 0; i < hcLen; ++i) {
                    // use index map to get real code
                    clt[clim[i]] = bits(dat, pos + i * 3, 7);
                }
                pos += hcLen * 3;
                // code lengths bits
                const clb = max(clt), clbmsk = (1 << clb) - 1;
                if (!noSt && pos + tl * (clb + 7) > tbts)
                    break;
                // code lengths map
                const clm = hMap(clt, clb, 1);
                for (let i = 0; i < tl;) {
                    const r = clm[bits(dat, pos, clbmsk)];
                    // bits read
                    pos += r & 15;
                    // symbol
                    const s = r >>> 4;
                    // code length to copy
                    if (s < 16) {
                        ldt[i++] = s;
                    }
                    else {
                        //  copy   count
                        let c = 0, n = 0;
                        if (s == 16)
                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
                        else if (s == 17)
                            n = 3 + bits(dat, pos, 7), pos += 3;
                        else if (s == 18)
                            n = 11 + bits(dat, pos, 127), pos += 7;
                        while (n--)
                            ldt[i++] = c;
                    }
                }
                //    length tree                 distance tree
                const lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
                // max length bits
                lbt = max(lt);
                // max dist bits
                dbt = max(dt);
                lm = hMap(lt, lbt, 1);
                dm = hMap(dt, dbt, 1);
            }
            else
                throw 'invalid block type';
            if (pos > tbts)
                throw 'unexpected EOF';
        }
        // Make sure the buffer can hold this + the largest possible addition
        // maximum chunk size (practically, theoretically infinite) is 2^17;
        if (noBuf)
            cbuf(bt + 131072);
        const lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        const mxa = lbt + dbt + 18;
        while (noSt || pos + mxa < tbts) {
            // bits read, code
            const c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
            pos += c & 15;
            if (pos > tbts)
                throw 'unexpected EOF';
            if (!c)
                throw 'invalid length/literal';
            if (sym < 256)
                buf[bt++] = sym;
            else if (sym == 256) {
                lm = undefined;
                break;
            }
            else {
                let add = sym - 254;
                // no extra bits needed if less
                if (sym > 264) {
                    // index
                    const i = sym - 257, b = fleb[i];
                    add = bits(dat, pos, (1 << b) - 1) + fl[i];
                    pos += b;
                }
                // dist
                const d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
                if (!d)
                    throw 'invalid distance';
                pos += d & 15;
                let dt = fd[dsym];
                if (dsym > 3) {
                    const b = fdeb[dsym];
                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;
                }
                if (pos > tbts)
                    throw 'unexpected EOF';
                if (noBuf)
                    cbuf(bt + 131072);
                const end = bt + add;
                for (; bt < end; bt += 4) {
                    buf[bt] = buf[bt - dt];
                    buf[bt + 1] = buf[bt + 1 - dt];
                    buf[bt + 2] = buf[bt + 2 - dt];
                    buf[bt + 3] = buf[bt + 3 - dt];
                }
                bt = end;
            }
        }
        st.l = lm, st.p = pos, st.b = bt;
        if (lm)
            final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    } while (!final);
    return bt == buf.length ? buf : slc(buf, 0, bt);
};
const zlv = (d) => {
    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))
        throw 'invalid zlib data';
    if (d[1] & 32)
        throw 'invalid zlib data: preset dictionaries not supported';
};
/**
 * Expands Zlib data
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */
function unzlibSync(data, out) {
    return inflt((zlv(data), data.subarray(2, -4)), out);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+wasm-util@7.3.2_@polkadot+util@12.6.2/node_modules/@polkadot/wasm-util/base64.js
const CHR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
const map = new Array(256);
for (let i = 0, count = CHR.length; i < count; i++) {
    map[CHR.charCodeAt(i)] = i;
}
/**
 * @name base64Decode
 * @description
 * A base64 decoding function that operates in all environments. Unlike decoding
 * from Buffer (Node.js only) or atob (browser-only) this implementation is
 * slightly slower, but it is platform independent.
 *
 * For our usage, since we have access to the static final size, so we decode
 * to a specified output buffer. This also means we have applied a number of
 * optimizations based on this - checking output position instead of chars.
 */
function base64Decode(data, out) {
    let byte = 0;
    let bits = 0;
    let pos = -1;
    for (let i = 0, last = out.length - 1; pos !== last; i++) {
        // each character represents 6 bits
        byte = (byte << 6) | map[data.charCodeAt(i)];
        // each byte needs to contain 8 bits
        if ((bits += 6) >= 8) {
            out[++pos] = (byte >>> (bits -= 8)) & 0xff;
        }
    }
    return out;
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@polkadot+wasm-crypto-wasm@7.3.2_@polkadot+util@12.6.2/node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js
var bytes = __webpack_require__(65908);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+wasm-crypto-wasm@7.3.2_@polkadot+util@12.6.2/node_modules/@polkadot/wasm-crypto-wasm/bundle.js



/**
 * @name wasmBytes
 * @description
 * The decoded WASM interface as exposed by this package.
 *
 * The build process will output into cjs/* into a compressed base64 format.
 * Upon loading the exposed bytes will be decoded and decompressed from this
 * specific format and returned.
 */
const wasmBytes = /*#__PURE__*/ unzlibSync(base64Decode(bytes/* bytes */.aI, new Uint8Array(bytes/* lenIn */.lY)), new Uint8Array(bytes/* lenOut */.JH));

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+wasm-crypto-init@7.3.2_@polkadot+util@12.6.2_@polkadot+x-randomvalues@12.6.2/node_modules/@polkadot/wasm-crypto-init/wasm.js



/**
 * @name createWasm
 * @description
 * Creates an interface using only WASM
 */
const createWasm = /*#__PURE__*/ createWasmFn('crypto', wasmBytes, null);

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+wasm-crypto@7.3.2_@polkadot+util@12.6.2_@polkadot+x-randomvalues@12.6.2/node_modules/@polkadot/wasm-crypto/init.js


/**
 * @name bridge
 * @description
 * The JS <-> WASM bridge that is in operation. For the specific package
 * it is a global, i.e. all operations happens on this specific bridge
 */
const init_bridge = new Bridge(createWasm);
/**
 * @name initBridge
 * @description
 * Creates a new bridge interface with the (optional) initialization function
 */
async function initBridge(createWasm) {
    return init_bridge.init(createWasm);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/@polkadot+wasm-crypto@7.3.2_@polkadot+util@12.6.2_@polkadot+x-randomvalues@12.6.2/node_modules/@polkadot/wasm-crypto/bundle.js



/**
 * @internal
 * @description
 * This create an extenal interface function from the signature, all the while checking
 * the actual bridge wasm interface to ensure it has been initialized.
 *
 * This means that we can call it
 *
 *   withWasm(wasm: WasmCryptoInstance, a: number, b: string) => Uint8Array
 *
 * and in this case it will create an interface function with the signarure
 *
 *   (a: number, b: string) => Uint8Array
 */
function withWasm(fn) {
    return (...params) => {
        if (!init_bridge.wasm) {
            throw new Error('The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.');
        }
        return fn(init_bridge.wasm, ...params);
    };
}
const bip39Generate = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, words) => {
    wasm.ext_bip39_generate(8, words);
    return bridge.resultString();
})));
const bip39ToEntropy = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, phrase) => {
    wasm.ext_bip39_to_entropy(8, ...bridge.allocString(phrase));
    return bridge.resultU8a();
})));
const bip39ToMiniSecret = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, phrase, password) => {
    wasm.ext_bip39_to_mini_secret(8, ...bridge.allocString(phrase), ...bridge.allocString(password));
    return bridge.resultU8a();
})));
const bip39ToSeed = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, phrase, password) => {
    wasm.ext_bip39_to_seed(8, ...bridge.allocString(phrase), ...bridge.allocString(password));
    return bridge.resultU8a();
})));
const bip39Validate = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, phrase) => {
    const ret = wasm.ext_bip39_validate(...bridge.allocString(phrase));
    return ret !== 0;
})));
const ed25519KeypairFromSeed = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, seed) => {
    wasm.ext_ed_from_seed(8, ...bridge.allocU8a(seed));
    return bridge.resultU8a();
})));
const ed25519Sign = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, pubkey, seckey, message) => {
    wasm.ext_ed_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(seckey), ...bridge.allocU8a(message));
    return bridge.resultU8a();
})));
const ed25519Verify = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, signature, message, pubkey) => {
    const ret = wasm.ext_ed_verify(...bridge.allocU8a(signature), ...bridge.allocU8a(message), ...bridge.allocU8a(pubkey));
    return ret !== 0;
})));
const secp256k1FromSeed = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, seckey) => {
    wasm.ext_secp_from_seed(8, ...bridge.allocU8a(seckey));
    return bridge.resultU8a();
})));
const secp256k1Compress = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, pubkey) => {
    wasm.ext_secp_pub_compress(8, ...bridge.allocU8a(pubkey));
    return bridge.resultU8a();
})));
const secp256k1Expand = /*#__PURE__*/ withWasm((wasm, pubkey) => {
    wasm.ext_secp_pub_expand(8, ...init_bridge.allocU8a(pubkey));
    return init_bridge.resultU8a();
});
const secp256k1Recover = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, msgHash, sig, recovery) => {
    wasm.ext_secp_recover(8, ...bridge.allocU8a(msgHash), ...bridge.allocU8a(sig), recovery);
    return bridge.resultU8a();
})));
const secp256k1Sign = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, msgHash, seckey) => {
    wasm.ext_secp_sign(8, ...bridge.allocU8a(msgHash), ...bridge.allocU8a(seckey));
    return bridge.resultU8a();
})));
const sr25519DeriveKeypairHard = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, pair, cc) => {
    wasm.ext_sr_derive_keypair_hard(8, ...bridge.allocU8a(pair), ...bridge.allocU8a(cc));
    return bridge.resultU8a();
})));
const sr25519DeriveKeypairSoft = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, pair, cc) => {
    wasm.ext_sr_derive_keypair_soft(8, ...bridge.allocU8a(pair), ...bridge.allocU8a(cc));
    return bridge.resultU8a();
})));
const sr25519DerivePublicSoft = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, pubkey, cc) => {
    wasm.ext_sr_derive_public_soft(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(cc));
    return bridge.resultU8a();
})));
const sr25519KeypairFromSeed = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, seed) => {
    wasm.ext_sr_from_seed(8, ...bridge.allocU8a(seed));
    return bridge.resultU8a();
})));
const sr25519Sign = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, pubkey, secret, message) => {
    wasm.ext_sr_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(secret), ...bridge.allocU8a(message));
    return bridge.resultU8a();
})));
const sr25519Verify = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, signature, message, pubkey) => {
    const ret = wasm.ext_sr_verify(...bridge.allocU8a(signature), ...bridge.allocU8a(message), ...bridge.allocU8a(pubkey));
    return ret !== 0;
})));
const sr25519Agree = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, pubkey, secret) => {
    wasm.ext_sr_agree(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(secret));
    return bridge.resultU8a();
})));
const vrfSign = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, secret, context, message, extra) => {
    wasm.ext_vrf_sign(8, ...bridge.allocU8a(secret), ...bridge.allocU8a(context), ...bridge.allocU8a(message), ...bridge.allocU8a(extra));
    return bridge.resultU8a();
})));
const vrfVerify = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, pubkey, context, message, extra, outAndProof) => {
    const ret = wasm.ext_vrf_verify(...bridge.allocU8a(pubkey), ...bridge.allocU8a(context), ...bridge.allocU8a(message), ...bridge.allocU8a(extra), ...bridge.allocU8a(outAndProof));
    return ret !== 0;
})));
const blake2b = /*#__PURE__*/ withWasm((wasm, data, key, size) => {
    wasm.ext_blake2b(8, ...init_bridge.allocU8a(data), ...init_bridge.allocU8a(key), size);
    return init_bridge.resultU8a();
});
const hmacSha256 = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, key, data) => {
    wasm.ext_hmac_sha256(8, ...bridge.allocU8a(key), ...bridge.allocU8a(data));
    return bridge.resultU8a();
})));
const hmacSha512 = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, key, data) => {
    wasm.ext_hmac_sha512(8, ...bridge.allocU8a(key), ...bridge.allocU8a(data));
    return bridge.resultU8a();
})));
const keccak256 = /*#__PURE__*/ withWasm((wasm, data) => {
    wasm.ext_keccak256(8, ...init_bridge.allocU8a(data));
    return init_bridge.resultU8a();
});
const keccak512 = /*#__PURE__*/ withWasm((wasm, data) => {
    wasm.ext_keccak512(8, ...init_bridge.allocU8a(data));
    return init_bridge.resultU8a();
});
const pbkdf2 = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, data, salt, rounds) => {
    wasm.ext_pbkdf2(8, ...bridge.allocU8a(data), ...bridge.allocU8a(salt), rounds);
    return bridge.resultU8a();
})));
const scrypt = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, password, salt, log2n, r, p) => {
    wasm.ext_scrypt(8, ...bridge.allocU8a(password), ...bridge.allocU8a(salt), log2n, r, p);
    return bridge.resultU8a();
})));
const sha256 = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, data) => {
    wasm.ext_sha256(8, ...bridge.allocU8a(data));
    return bridge.resultU8a();
})));
const sha512 = /*#__PURE__*/ (/* unused pure expression or super */ null && (withWasm((wasm, data) => {
    wasm.ext_sha512(8, ...bridge.allocU8a(data));
    return bridge.resultU8a();
})));
const twox = /*#__PURE__*/ withWasm((wasm, data, rounds) => {
    wasm.ext_twox(8, ...init_bridge.allocU8a(data), rounds);
    return init_bridge.resultU8a();
});
function isReady() {
    return !!init_bridge.wasm;
}
async function waitReady() {
    try {
        const wasm = await initBridge();
        return !!wasm;
    }
    catch {
        return false;
    }
}


/***/ }),

/***/ 70735:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   t: () => (/* binding */ BigInt)
/* harmony export */ });
/* harmony import */ var _polkadot_x_global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80496);


/**
 * @internal
 *
 * There are _still_ some older environments (specifically RN < 0.70), that does
 * not have proper BigInt support - a non-working fallback is provided for those.
 *
 * We detect availability of BigInt upon usage, so this is purely to allow functional
 * compilation & bundling. Since we have operators such as *+-/ top-level, a number-ish
 * result is used here.
 */
function invalidFallback() {
    return Number.NaN;
}
const BigInt = /*#__PURE__*/ (0,_polkadot_x_global__WEBPACK_IMPORTED_MODULE_0__/* .extractGlobal */ .o)('BigInt', invalidFallback);


/***/ }),

/***/ 80496:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ur: () => (/* binding */ xglobal),
/* harmony export */   o: () => (/* binding */ extractGlobal)
/* harmony export */ });
/* unused harmony export exposeGlobal */

/** @internal Last-resort "this", if it gets here it probably would fail anyway */
function evaluateThis(fn) {
    return fn('return this');
}
/**
 * A cross-environment implementation for globalThis
 */
const xglobal = /*#__PURE__*/ (typeof globalThis !== 'undefined'
    ? globalThis
    : typeof global !== 'undefined'
        ? global
        : typeof self !== 'undefined'
            ? self
            : typeof window !== 'undefined'
                ? window
                : evaluateThis(Function));
/**
 * Extracts a known global from the environment, applying a fallback if not found
 */
function extractGlobal(name, fallback) {
    // Not quite sure why this is here - snuck in with TS 4.7.2 with no real idea
    // (as of now) as to why this looks like an "any" when we do cast it to a T
    //
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return typeof xglobal[name] === 'undefined'
        ? fallback
        : xglobal[name];
}
/**
 * Expose a value as a known global, if not already defined
 */
function exposeGlobal(name, fallback) {
    if (typeof xglobal[name] === 'undefined') {
        xglobal[name] = fallback;
    }
}


/***/ }),

/***/ 97792:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PP: () => (/* binding */ getRandomValues)
/* harmony export */ });
/* unused harmony export crypto */
/* harmony import */ var _polkadot_x_global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80496);


const crypto = _polkadot_x_global__WEBPACK_IMPORTED_MODULE_0__/* .xglobal */ .Ur.crypto;
function getRandomValues(arr) {
    return crypto.getRandomValues(arr);
}


/***/ }),

/***/ 51891:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   X: () => (/* binding */ WebSocket)
/* harmony export */ });
/* harmony import */ var _polkadot_x_global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80496);


const WebSocket = _polkadot_x_global__WEBPACK_IMPORTED_MODULE_0__/* .xglobal */ .Ur.WebSocket;


/***/ }),

/***/ 2473:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Q: () => (/* binding */ createBasicEncoder)
/* harmony export */ });
/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(28263);
/* harmony import */ var _memory_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40374);



const FUNCTION = '_@f';
function createBasicEncoder(api) {
  const functionsToId = new Map();
  const idsToFunction = new Map();
  const idsToProxy = new Map();
  return {
    encode,
    decode,

    async call(id, args) {
      const stackFrame = new _memory_mjs__WEBPACK_IMPORTED_MODULE_0__/* .StackFrame */ .Di();
      const func = idsToFunction.get(id);

      if (func == null) {
        throw new Error('You attempted to call a function that was already released.');
      }

      try {
        const retainedBy = (0,_memory_mjs__WEBPACK_IMPORTED_MODULE_0__/* .isMemoryManageable */ .pk)(func) ? [stackFrame, ...func[_types_mjs__WEBPACK_IMPORTED_MODULE_1__/* .RETAINED_BY */ .TK]] : [stackFrame];
        const result = await func(...decode(args, retainedBy));
        return result;
      } finally {
        stackFrame.release();
      }
    },

    release(id) {
      const func = idsToFunction.get(id);

      if (func) {
        idsToFunction.delete(id);
        functionsToId.delete(func);
      }
    },

    terminate() {
      functionsToId.clear();
      idsToFunction.clear();
      idsToProxy.clear();
    }

  };

  function encode(value, seen = new Map()) {
    if (value == null) {
      return [value];
    }

    const seenValue = seen.get(value);

    if (seenValue) {
      return seenValue;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        seen.set(value, [undefined]);
        const transferables = [];
        const result = value.map(item => {
          const [result, nestedTransferables = []] = encode(item, seen);
          transferables.push(...nestedTransferables);
          return result;
        });
        const fullResult = [result, transferables];
        seen.set(value, fullResult);
        return fullResult;
      }

      if ((0,_memory_mjs__WEBPACK_IMPORTED_MODULE_0__/* .isBasicObject */ .i3)(value)) {
        seen.set(value, [undefined]);
        const transferables = [];
        const result = Object.keys(value).reduce((object, key) => {
          const [result, nestedTransferables = []] = encode(value[key], seen);
          transferables.push(...nestedTransferables);
          return { ...object,
            [key]: result
          };
        }, {});
        const fullResult = [result, transferables];
        seen.set(value, fullResult);
        return fullResult;
      }
    }

    if (typeof value === 'function') {
      if (functionsToId.has(value)) {
        const id = functionsToId.get(value);
        const result = [{
          [FUNCTION]: id
        }];
        seen.set(value, result);
        return result;
      }

      const id = api.uuid();
      functionsToId.set(value, id);
      idsToFunction.set(id, value);
      const result = [{
        [FUNCTION]: id
      }];
      seen.set(value, result);
      return result;
    }

    const result = [value];
    seen.set(value, result);
    return result;
  }

  function decode(value, retainedBy) {
    if (typeof value === 'object') {
      if (value == null) {
        return value;
      }

      if (value instanceof ArrayBuffer) {
        return value;
      }

      if (Array.isArray(value)) {
        return value.map(value => decode(value, retainedBy));
      }

      if (FUNCTION in value) {
        const id = value[FUNCTION];

        if (idsToProxy.has(id)) {
          return idsToProxy.get(id);
        }

        let retainCount = 0;
        let released = false;

        const release = () => {
          retainCount -= 1;

          if (retainCount === 0) {
            released = true;
            idsToProxy.delete(id);
            api.release(id);
          }
        };

        const retain = () => {
          retainCount += 1;
        };

        const retainers = new Set(retainedBy);

        const proxy = (...args) => {
          if (released) {
            throw new Error('You attempted to call a function that was already released.');
          }

          if (!idsToProxy.has(id)) {
            throw new Error('You attempted to call a function that was already revoked.');
          }

          return api.call(id, args);
        };

        Object.defineProperties(proxy, {
          [_types_mjs__WEBPACK_IMPORTED_MODULE_1__/* .RELEASE_METHOD */ .$h]: {
            value: release,
            writable: false
          },
          [_types_mjs__WEBPACK_IMPORTED_MODULE_1__/* .RETAIN_METHOD */ .U4]: {
            value: retain,
            writable: false
          },
          [_types_mjs__WEBPACK_IMPORTED_MODULE_1__/* .RETAINED_BY */ .TK]: {
            value: retainers,
            writable: false
          }
        });

        for (const retainer of retainers) {
          retainer.add(proxy);
        }

        idsToProxy.set(id, proxy);
        return proxy;
      }

      return Object.keys(value).reduce((object, key) => ({ ...object,
        [key]: decode(value[key], retainedBy)
      }), {});
    }

    return value;
  }
}




/***/ }),

/***/ 21913:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dg: () => (/* binding */ createEndpoint)
/* harmony export */ });
/* unused harmony exports CALL, FUNCTION_APPLY, FUNCTION_RESULT, RELEASE, RESULT, TERMINATE */
/* harmony import */ var _memory_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40374);
/* harmony import */ var _encoding_basic_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2473);



const CALL = 0;
const RESULT = 1;
const TERMINATE = 2;
const RELEASE = 3;
const FUNCTION_APPLY = 5;
const FUNCTION_RESULT = 6;

/**
 * An endpoint wraps around a messenger, acting as the intermediary for all
 * messages both send from, and received by, that messenger. The endpoint sends
 * all messages as arrays, where the first element is the message type, and the
 * second is the arguments for that message (as an array). For messages that send
 * meaningful content across the wire (e.g., arguments to function calls, return
 * results), the endpoint first encodes these values.
 *
 * Encoding is done using a CBOR-like encoding scheme. The value is encoded into
 * an array buffer, and is paired with an additional array buffer that contains all
 * the strings used in that message (in the encoded value, strings are encoded as
 * their index in the "strings" encoding to reduce the cost of heavily-duplicated
 * strings, which is more likely in payloads containing UI). This encoding also takes
 * care of encoding functions: it uses a "tagged" item in CBOR to represent a
 * function as a string ID, which the opposite endpoint will be capable of turning
 * into a consistent, memory-manageable function proxy.
 *
 * The main CBOR encoding is entirely take from the [cbor.js package](https://github.com/paroga/cbor-js).
 * The special behavior for encoding strings and functions was then added in to the
 * encoder and decoder. For additional details on CBOR:
 *
 * @see https://tools.ietf.org/html/rfc7049
 */
function createEndpoint(initialMessenger, {
  uuid = defaultUuid,
  createEncoder = _encoding_basic_mjs__WEBPACK_IMPORTED_MODULE_0__/* .createBasicEncoder */ .Q,
  callable
} = {}) {
  let terminated = false;
  let messenger = initialMessenger;
  const activeApi = new Map();
  const callIdsToResolver = new Map();
  const call = createCallable(handlerForCall, callable);
  const encoder = createEncoder({
    uuid,

    release(id) {
      send(RELEASE, [id]);
    },

    call(id, args, retainedBy) {
      const callId = uuid();
      const done = waitForResult(callId, retainedBy);
      const [encoded, transferables] = encoder.encode(args);
      send(FUNCTION_APPLY, [callId, id, encoded], transferables);
      return done;
    }

  });
  messenger.addEventListener('message', listener);
  return {
    call,

    replace(newMessenger) {
      const oldMessenger = messenger;
      messenger = newMessenger;
      oldMessenger.removeEventListener('message', listener);
      newMessenger.addEventListener('message', listener);
    },

    expose(api) {
      for (const key of Object.keys(api)) {
        const value = api[key];

        if (typeof value === 'function') {
          activeApi.set(key, value);
        } else {
          activeApi.delete(key);
        }
      }
    },

    callable(...newCallable) {
      // If no callable methods are supplied initially, we use a Proxy instead,
      // so all methods end up being treated as callable by default.
      if (callable == null) return;

      for (const method of newCallable) {
        Object.defineProperty(call, method, {
          value: handlerForCall(method),
          writable: false,
          configurable: true,
          enumerable: true
        });
      }
    },

    terminate() {
      send(TERMINATE, undefined);
      terminate();

      if (messenger.terminate) {
        messenger.terminate();
      }
    }

  };

  function send(type, args, transferables) {
    if (terminated) {
      return;
    }

    messenger.postMessage(args ? [type, args] : [type], transferables);
  }

  async function listener(event) {
    const {
      data
    } = event;

    if (data == null || !Array.isArray(data)) {
      return;
    }

    switch (data[0]) {
      case TERMINATE:
        {
          terminate();
          break;
        }

      case CALL:
        {
          const stackFrame = new _memory_mjs__WEBPACK_IMPORTED_MODULE_1__/* .StackFrame */ .Di();
          const [id, property, args] = data[1];
          const func = activeApi.get(property);

          try {
            if (func == null) {
              throw new Error(`No '${property}' method is exposed on this endpoint`);
            }

            const [encoded, transferables] = encoder.encode(await func(...encoder.decode(args, [stackFrame])));
            send(RESULT, [id, undefined, encoded], transferables);
          } catch (error) {
            const {
              name,
              message,
              stack
            } = error;
            send(RESULT, [id, {
              name,
              message,
              stack
            }]);
            throw error;
          } finally {
            stackFrame.release();
          }

          break;
        }

      case RESULT:
        {
          const [callId] = data[1];
          callIdsToResolver.get(callId)(...data[1]);
          callIdsToResolver.delete(callId);
          break;
        }

      case RELEASE:
        {
          const [id] = data[1];
          encoder.release(id);
          break;
        }

      case FUNCTION_RESULT:
        {
          const [callId] = data[1];
          callIdsToResolver.get(callId)(...data[1]);
          callIdsToResolver.delete(callId);
          break;
        }

      case FUNCTION_APPLY:
        {
          const [callId, funcId, args] = data[1];

          try {
            const result = await encoder.call(funcId, args);
            const [encoded, transferables] = encoder.encode(result);
            send(FUNCTION_RESULT, [callId, undefined, encoded], transferables);
          } catch (error) {
            const {
              name,
              message,
              stack
            } = error;
            send(FUNCTION_RESULT, [callId, {
              name,
              message,
              stack
            }]);
            throw error;
          }

          break;
        }
    }
  }

  function handlerForCall(property) {
    return (...args) => {
      if (terminated) {
        return Promise.reject(new Error('You attempted to call a function on a terminated web worker.'));
      }

      if (typeof property !== 'string' && typeof property !== 'number') {
        return Promise.reject(new Error(`Can’t call a symbol method on a remote endpoint: ${property.toString()}`));
      }

      const id = uuid();
      const done = waitForResult(id);
      const [encoded, transferables] = encoder.encode(args);
      send(CALL, [id, property, encoded], transferables);
      return done;
    };
  }

  function waitForResult(id, retainedBy) {
    return new Promise((resolve, reject) => {
      callIdsToResolver.set(id, (_, errorResult, value) => {
        if (errorResult == null) {
          resolve(value && encoder.decode(value, retainedBy));
        } else {
          const error = new Error();
          Object.assign(error, errorResult);
          reject(error);
        }
      });
    });
  }

  function terminate() {
    var _encoder$terminate;

    terminated = true;
    activeApi.clear();
    callIdsToResolver.clear();
    (_encoder$terminate = encoder.terminate) === null || _encoder$terminate === void 0 ? void 0 : _encoder$terminate.call(encoder);
    messenger.removeEventListener('message', listener);
  }
}

function defaultUuid() {
  return `${uuidSegment()}-${uuidSegment()}-${uuidSegment()}-${uuidSegment()}`;
}

function uuidSegment() {
  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16);
}

function createCallable(handlerForCall, callable) {
  let call;

  if (callable == null) {
    if (typeof Proxy !== 'function') {
      throw new Error(`You must pass an array of callable methods in environments without Proxies.`);
    }

    const cache = new Map();
    call = new Proxy({}, {
      get(_target, property) {
        if (cache.has(property)) {
          return cache.get(property);
        }

        const handler = handlerForCall(property);
        cache.set(property, handler);
        return handler;
      }

    });
  } else {
    call = {};

    for (const method of callable) {
      Object.defineProperty(call, method, {
        value: handlerForCall(method),
        writable: false,
        configurable: true,
        enumerable: true
      });
    }
  }

  return call;
}




/***/ }),

/***/ 40374:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Di: () => (/* binding */ StackFrame),
/* harmony export */   i3: () => (/* binding */ isBasicObject),
/* harmony export */   pk: () => (/* binding */ isMemoryManageable)
/* harmony export */ });
/* unused harmony exports release, releaseInternal, retain */
/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28263);



class StackFrame {
  constructor() {
    this.memoryManaged = new Set();
  }

  add(memoryManageable) {
    this.memoryManaged.add(memoryManageable);
    memoryManageable[_types_mjs__WEBPACK_IMPORTED_MODULE_0__/* .RETAINED_BY */ .TK].add(this);
    memoryManageable[_types_mjs__WEBPACK_IMPORTED_MODULE_0__/* .RETAIN_METHOD */ .U4]();
  }

  release() {
    for (const memoryManaged of this.memoryManaged) {
      memoryManaged[_types_mjs__WEBPACK_IMPORTED_MODULE_0__/* .RETAINED_BY */ .TK].delete(this);
      memoryManaged[_types_mjs__WEBPACK_IMPORTED_MODULE_0__/* .RELEASE_METHOD */ .$h]();
    }

    this.memoryManaged.clear();
  }

}
function isMemoryManageable(value) {
  return Boolean(value && value[_types_mjs__WEBPACK_IMPORTED_MODULE_0__/* .RETAIN_METHOD */ .U4] && value[_types_mjs__WEBPACK_IMPORTED_MODULE_0__/* .RELEASE_METHOD */ .$h]);
}
function retain(value, {
  deep = true
} = {}) {
  return retainInternal(value, deep, new Map());
}

function retainInternal(value, deep, seen) {
  const seenValue = seen.get(value);
  if (seenValue != null) return seenValue;
  const canRetain = isMemoryManageable(value);

  if (canRetain) {
    value[RETAIN_METHOD]();
  }

  seen.set(value, canRetain);

  if (deep) {
    if (Array.isArray(value)) {
      const nestedCanRetain = value.reduce((canRetain, item) => retainInternal(item, deep, seen) || canRetain, canRetain);
      seen.set(value, nestedCanRetain);
      return nestedCanRetain;
    }

    if (isBasicObject(value)) {
      const nestedCanRetain = Object.keys(value).reduce((canRetain, key) => retainInternal(value[key], deep, seen) || canRetain, canRetain);
      seen.set(value, nestedCanRetain);
      return nestedCanRetain;
    }
  }

  seen.set(value, canRetain);
  return canRetain;
}

function release(value, {
  deep = true
} = {}) {
  return releaseInternal(value, deep, new Map());
}
function releaseInternal(value, deep, seen) {
  const seenValue = seen.get(value);
  if (seenValue != null) return seenValue;
  const canRelease = isMemoryManageable(value);

  if (canRelease) {
    value[RELEASE_METHOD]();
  }

  seen.set(value, canRelease);

  if (deep) {
    if (Array.isArray(value)) {
      const nestedCanRelease = value.reduce((canRelease, item) => releaseInternal(item, deep, seen) || canRelease, canRelease);
      seen.set(value, nestedCanRelease);
      return nestedCanRelease;
    }

    if (isBasicObject(value)) {
      const nestedCanRelease = Object.keys(value).reduce((canRelease, key) => releaseInternal(value[key], deep, seen) || canRelease, canRelease);
      seen.set(value, nestedCanRelease);
      return nestedCanRelease;
    }
  }

  return canRelease;
}
function isBasicObject(value) {
  if (value == null || typeof value !== 'object') return false;
  const prototype = Object.getPrototypeOf(value);
  return prototype == null || prototype === Object.prototype;
}




/***/ }),

/***/ 28263:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $h: () => (/* binding */ RELEASE_METHOD),
/* harmony export */   TK: () => (/* binding */ RETAINED_BY),
/* harmony export */   U4: () => (/* binding */ RETAIN_METHOD)
/* harmony export */ });
const RETAIN_METHOD = Symbol.for('RemoteUi::Retain');
const RELEASE_METHOD = Symbol.for('RemoteUi::Release');
const RETAINED_BY = Symbol.for('RemoteUi::RetainedBy');




/***/ }),

/***/ 27449:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Jq: () => (/* binding */ base58)
/* harmony export */ });
/* unused harmony exports assertNumber, utils, base16, base32, base32hex, base32crockford, base64, base64url, base64urlnopad, base58flickr, base58xrp, base58xmr, createBase58check, base58check, bech32, bech32m, utf8, hex, bytesToString, str, stringToBytes, bytes */
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// Utilities
/**
 * @__NO_SIDE_EFFECTS__
 */
function assertNumber(n) {
    if (!Number.isSafeInteger(n))
        throw new Error(`Wrong integer: ${n}`);
}
function isBytes(a) {
    return (a instanceof Uint8Array ||
        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
}
/**
 * @__NO_SIDE_EFFECTS__
 */
function chain(...args) {
    const id = (a) => a;
    // Wrap call in closure so JIT can inline calls
    const wrap = (a, b) => (c) => a(b(c));
    // Construct chain of args[-1].encode(args[-2].encode([...]))
    const encode = args.map((x) => x.encode).reduceRight(wrap, id);
    // Construct chain of args[0].decode(args[1].decode(...))
    const decode = args.map((x) => x.decode).reduce(wrap, id);
    return { encode, decode };
}
/**
 * Encodes integer radix representation to array of strings using alphabet and back
 * @__NO_SIDE_EFFECTS__
 */
function alphabet(alphabet) {
    return {
        encode: (digits) => {
            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                throw new Error('alphabet.encode input should be an array of numbers');
            return digits.map((i) => {
                assertNumber(i);
                if (i < 0 || i >= alphabet.length)
                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);
                return alphabet[i];
            });
        },
        decode: (input) => {
            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                throw new Error('alphabet.decode input should be array of strings');
            return input.map((letter) => {
                if (typeof letter !== 'string')
                    throw new Error(`alphabet.decode: not string element=${letter}`);
                const index = alphabet.indexOf(letter);
                if (index === -1)
                    throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet}`);
                return index;
            });
        },
    };
}
/**
 * @__NO_SIDE_EFFECTS__
 */
function join(separator = '') {
    if (typeof separator !== 'string')
        throw new Error('join separator should be string');
    return {
        encode: (from) => {
            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))
                throw new Error('join.encode input should be array of strings');
            for (let i of from)
                if (typeof i !== 'string')
                    throw new Error(`join.encode: non-string input=${i}`);
            return from.join(separator);
        },
        decode: (to) => {
            if (typeof to !== 'string')
                throw new Error('join.decode input should be string');
            return to.split(separator);
        },
    };
}
/**
 * Pad strings array so it has integer number of bits
 * @__NO_SIDE_EFFECTS__
 */
function padding(bits, chr = '=') {
    assertNumber(bits);
    if (typeof chr !== 'string')
        throw new Error('padding chr should be string');
    return {
        encode(data) {
            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))
                throw new Error('padding.encode input should be array of strings');
            for (let i of data)
                if (typeof i !== 'string')
                    throw new Error(`padding.encode: non-string input=${i}`);
            while ((data.length * bits) % 8)
                data.push(chr);
            return data;
        },
        decode(input) {
            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                throw new Error('padding.encode input should be array of strings');
            for (let i of input)
                if (typeof i !== 'string')
                    throw new Error(`padding.decode: non-string input=${i}`);
            let end = input.length;
            if ((end * bits) % 8)
                throw new Error('Invalid padding: string should have whole number of bytes');
            for (; end > 0 && input[end - 1] === chr; end--) {
                if (!(((end - 1) * bits) % 8))
                    throw new Error('Invalid padding: string has too much padding');
            }
            return input.slice(0, end);
        },
    };
}
/**
 * @__NO_SIDE_EFFECTS__
 */
function normalize(fn) {
    if (typeof fn !== 'function')
        throw new Error('normalize fn should be function');
    return { encode: (from) => from, decode: (to) => fn(to) };
}
/**
 * Slow: O(n^2) time complexity
 * @__NO_SIDE_EFFECTS__
 */
function convertRadix(data, from, to) {
    // base 1 is impossible
    if (from < 2)
        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
    if (to < 2)
        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
    if (!Array.isArray(data))
        throw new Error('convertRadix: data should be array');
    if (!data.length)
        return [];
    let pos = 0;
    const res = [];
    const digits = Array.from(data);
    digits.forEach((d) => {
        assertNumber(d);
        if (d < 0 || d >= from)
            throw new Error(`Wrong integer: ${d}`);
    });
    while (true) {
        let carry = 0;
        let done = true;
        for (let i = pos; i < digits.length; i++) {
            const digit = digits[i];
            const digitBase = from * carry + digit;
            if (!Number.isSafeInteger(digitBase) ||
                (from * carry) / from !== carry ||
                digitBase - digit !== from * carry) {
                throw new Error('convertRadix: carry overflow');
            }
            carry = digitBase % to;
            const rounded = Math.floor(digitBase / to);
            digits[i] = rounded;
            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
                throw new Error('convertRadix: carry overflow');
            if (!done)
                continue;
            else if (!rounded)
                pos = i;
            else
                done = false;
        }
        res.push(carry);
        if (done)
            break;
    }
    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
        res.push(0);
    return res.reverse();
}
const gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => (!b ? a : gcd(b, a % b));
const radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));
/**
 * Implemented with numbers, because BigInt is 5x slower
 * @__NO_SIDE_EFFECTS__
 */
function convertRadix2(data, from, to, padding) {
    if (!Array.isArray(data))
        throw new Error('convertRadix2: data should be array');
    if (from <= 0 || from > 32)
        throw new Error(`convertRadix2: wrong from=${from}`);
    if (to <= 0 || to > 32)
        throw new Error(`convertRadix2: wrong to=${to}`);
    if (radix2carry(from, to) > 32) {
        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);
    }
    let carry = 0;
    let pos = 0; // bitwise position in current element
    const mask = 2 ** to - 1;
    const res = [];
    for (const n of data) {
        assertNumber(n);
        if (n >= 2 ** from)
            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
        carry = (carry << from) | n;
        if (pos + from > 32)
            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
        pos += from;
        for (; pos >= to; pos -= to)
            res.push(((carry >> (pos - to)) & mask) >>> 0);
        carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow
    }
    carry = (carry << (to - pos)) & mask;
    if (!padding && pos >= from)
        throw new Error('Excess padding');
    if (!padding && carry)
        throw new Error(`Non-zero padding: ${carry}`);
    if (padding && pos > 0)
        res.push(carry >>> 0);
    return res;
}
/**
 * @__NO_SIDE_EFFECTS__
 */
function radix(num) {
    assertNumber(num);
    return {
        encode: (bytes) => {
            if (!isBytes(bytes))
                throw new Error('radix.encode input should be Uint8Array');
            return convertRadix(Array.from(bytes), 2 ** 8, num);
        },
        decode: (digits) => {
            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                throw new Error('radix.decode input should be array of numbers');
            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
        },
    };
}
/**
 * If both bases are power of same number (like `2**8 <-> 2**64`),
 * there is a linear algorithm. For now we have implementation for power-of-two bases only.
 * @__NO_SIDE_EFFECTS__
 */
function radix2(bits, revPadding = false) {
    assertNumber(bits);
    if (bits <= 0 || bits > 32)
        throw new Error('radix2: bits should be in (0..32]');
    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
        throw new Error('radix2: carry overflow');
    return {
        encode: (bytes) => {
            if (!isBytes(bytes))
                throw new Error('radix2.encode input should be Uint8Array');
            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
        },
        decode: (digits) => {
            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                throw new Error('radix2.decode input should be array of numbers');
            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
        },
    };
}
/**
 * @__NO_SIDE_EFFECTS__
 */
function unsafeWrapper(fn) {
    if (typeof fn !== 'function')
        throw new Error('unsafeWrapper fn should be function');
    return function (...args) {
        try {
            return fn.apply(null, args);
        }
        catch (e) { }
    };
}
/**
 * @__NO_SIDE_EFFECTS__
 */
function checksum(len, fn) {
    assertNumber(len);
    if (typeof fn !== 'function')
        throw new Error('checksum fn should be function');
    return {
        encode(data) {
            if (!isBytes(data))
                throw new Error('checksum.encode: input should be Uint8Array');
            const checksum = fn(data).slice(0, len);
            const res = new Uint8Array(data.length + len);
            res.set(data);
            res.set(checksum, data.length);
            return res;
        },
        decode(data) {
            if (!isBytes(data))
                throw new Error('checksum.decode: input should be Uint8Array');
            const payload = data.slice(0, -len);
            const newChecksum = fn(payload).slice(0, len);
            const oldChecksum = data.slice(-len);
            for (let i = 0; i < len; i++)
                if (newChecksum[i] !== oldChecksum[i])
                    throw new Error('Invalid checksum');
            return payload;
        },
    };
}
// prettier-ignore
const utils = {
    alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,
};
// RFC 4648 aka RFC 3548
// ---------------------
const base16 = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));
const base32 = /* @__PURE__ */ chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));
const base32hex = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));
const base32crockford = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));
const base64 = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));
const base64url = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));
const base64urlnopad = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));
// base58 code
// -----------
const genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));
const base58 = /* @__PURE__ */ genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');
const base58flickr = /* @__PURE__ */ (/* unused pure expression or super */ null && (genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ')));
const base58xrp = /* @__PURE__ */ (/* unused pure expression or super */ null && (genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz')));
// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.
// Block encoding significantly reduces quadratic complexity of base58.
// Data len (index) -> encoded block len
const XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
const base58xmr = {
    encode(data) {
        let res = '';
        for (let i = 0; i < data.length; i += 8) {
            const block = data.subarray(i, i + 8);
            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');
        }
        return res;
    },
    decode(str) {
        let res = [];
        for (let i = 0; i < str.length; i += 11) {
            const slice = str.slice(i, i + 11);
            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
            const block = base58.decode(slice);
            for (let j = 0; j < block.length - blockLen; j++) {
                if (block[j] !== 0)
                    throw new Error('base58xmr: wrong padding');
            }
            res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
    },
};
const createBase58check = /* @__PURE__ */ (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);
// legacy export, bad name
const base58check = (/* unused pure expression or super */ null && (createBase58check));
const BECH_ALPHABET = /* @__PURE__ */ chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));
const POLYMOD_GENERATORS = (/* unused pure expression or super */ null && ([0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]));
/**
 * @__NO_SIDE_EFFECTS__
 */
function bech32Polymod(pre) {
    const b = pre >> 25;
    let chk = (pre & 0x1ffffff) << 5;
    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
        if (((b >> i) & 1) === 1)
            chk ^= POLYMOD_GENERATORS[i];
    }
    return chk;
}
/**
 * @__NO_SIDE_EFFECTS__
 */
function bechChecksum(prefix, words, encodingConst = 1) {
    const len = prefix.length;
    let chk = 1;
    for (let i = 0; i < len; i++) {
        const c = prefix.charCodeAt(i);
        if (c < 33 || c > 126)
            throw new Error(`Invalid prefix (${prefix})`);
        chk = bech32Polymod(chk) ^ (c >> 5);
    }
    chk = bech32Polymod(chk);
    for (let i = 0; i < len; i++)
        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);
    for (let v of words)
        chk = bech32Polymod(chk) ^ v;
    for (let i = 0; i < 6; i++)
        chk = bech32Polymod(chk);
    chk ^= encodingConst;
    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));
}
/**
 * @__NO_SIDE_EFFECTS__
 */
function genBech32(encoding) {
    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;
    const _words = radix2(5);
    const fromWords = _words.decode;
    const toWords = _words.encode;
    const fromWordsUnsafe = unsafeWrapper(fromWords);
    function encode(prefix, words, limit = 90) {
        if (typeof prefix !== 'string')
            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);
        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))
            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
        const actualLength = prefix.length + 7 + words.length;
        if (limit !== false && actualLength > limit)
            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
        const lowered = prefix.toLowerCase();
        const sum = bechChecksum(lowered, words, ENCODING_CONST);
        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
    }
    function decode(str, limit = 90) {
        if (typeof str !== 'string')
            throw new Error(`bech32.decode input should be string, not ${typeof str}`);
        if (str.length < 8 || (limit !== false && str.length > limit))
            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
        // don't allow mixed case
        const lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase())
            throw new Error(`String must be lowercase or uppercase`);
        str = lowered;
        const sepIndex = str.lastIndexOf('1');
        if (sepIndex === 0 || sepIndex === -1)
            throw new Error(`Letter "1" must be present between prefix and data only`);
        const prefix = str.slice(0, sepIndex);
        const _words = str.slice(sepIndex + 1);
        if (_words.length < 6)
            throw new Error('Data must be at least 6 characters long');
        const words = BECH_ALPHABET.decode(_words).slice(0, -6);
        const sum = bechChecksum(prefix, words, ENCODING_CONST);
        if (!_words.endsWith(sum))
            throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
        return { prefix, words };
    }
    const decodeUnsafe = unsafeWrapper(decode);
    function decodeToBytes(str) {
        const { prefix, words } = decode(str, false);
        return { prefix, words, bytes: fromWords(words) };
    }
    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
}
const bech32 = /* @__PURE__ */ (/* unused pure expression or super */ null && (genBech32('bech32')));
const bech32m = /* @__PURE__ */ (/* unused pure expression or super */ null && (genBech32('bech32m')));
const utf8 = {
    encode: (data) => new TextDecoder().decode(data),
    decode: (str) => new TextEncoder().encode(str),
};
const hex = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {
    if (typeof s !== 'string' || s.length % 2)
        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
    return s.toLowerCase();
}));
// prettier-ignore
const CODERS = {
    utf8, hex, base16, base32, base64, base64url, base58, base58xmr
};
const coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';
const bytesToString = (type, bytes) => {
    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
    if (!isBytes(bytes))
        throw new TypeError('bytesToString() expects Uint8Array');
    return CODERS[type].encode(bytes);
};
const str = (/* unused pure expression or super */ null && (bytesToString)); // as in python, but for bytes only
const stringToBytes = (type, str) => {
    if (!CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
    if (typeof str !== 'string')
        throw new TypeError('stringToBytes() expects string');
    return CODERS[type].decode(str);
};
const bytes = (/* unused pure expression or super */ null && (stringToBytes));


/***/ }),

/***/ 79411:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   v: () => (/* binding */ DOM_ELEMENT_ID)
/* harmony export */ });
/**
 *
 * This module contains the types and explanations of the communication
 * protocol between the JavaScript code embedded in a web page and the
 * substrate-connect extension.
 *
 * # Overview
 *
 * If a web page wants to use the features of the substrate-connect extension,
 * it must first check whether the extension is available by checking whether
 * there exists an element on the DOM whose `id` is equal to
 * {@link ToExtensionAddChain}. This DOM element is automatically inserted by
 * the extension when the page loads.
 *
 * If so, the web page can make use of the extension by sending messages on
 * its `window` by using `Window.postMessage`. These messages must conform to
 * the {@link ToExtension} interface defined below.
 *
 * The substrate-connect extension (more precisely, its content-script) listens
 * for "message" events (using `window.addEventListener("message", ...)`) and
 * replies by sending back messages using `Window.postMessage` as well. The
 * messages sent by the extension conform to the {@link ToApplication}
 * interface defined below.
 *
 * # Detailed usage
 *
 * In order to ask the substrate-connect extension to connect to a certain
 * chain, the web page must:
 *
 * - Randomly generate the so-called `chainId`, a string that will be used
 * to identify this specific chain connection during its lifetime. At least
 * 48 bits of entropy are recommended in order to avoid accidentally
 * generating the same string multiple times.
 * - Send a {@link ToExtensionAddChain} message (using `Window.postMessage`,
 * as explained in the previous section) containing this `chainid` and the
 * specification of the chain to connect to.
 *
 * Instead of a {@link ToExtensionAddChain} message, the web page can
 * alternatively send a {@link ToExtensionAddWellKnownChain} message and pass
 * a chain name recognized by the extension such as "polkadot" or "ksmcc3", in
 * which case the extension will use the chain specification stored internally.
 * Doing so provides multiple advantages such as less bandwidth usage (as the
 * web page doesn't have to download the chain specification), and a faster
 * initialization as the extension is most likely already connected to that
 * chain.
 *
 * After a {@link ToExtensionAddChain} or a
 * {@link ToExtensionAddWellKnownChain} message has been sent, the extension
 * starts connecting to the chain, and later replies by sending back a
 * {@link ToApplicationChainReady} message in case of success, or a
 * {@link ToApplicationError} message in case of failure. This reply might
 * only be sent back after a few seconds or more, and the web page is
 * encouraged to display some kind of loading screen in the meanwhile.
 *
 * Note that the extension reserves the rights to stop supporting a chain that
 * used to be recognized by {@link ToExtensionAddWellKnownChain}. If the web
 * page has sent a {@link ToExtensionAddWellKnownChain} and receives back a
 * {@link ToApplicationError}, it should automatically fall back to
 * downloading the chain specification and sending a
 * {@link ToExtensionAddChain} instead.
 *
 * After a chain has been successfully initialized (i.e. a
 * {@link ToApplicationChainReady} message has been sent to the web page), the
 * web page can submit JSON-RPC requests and notifications to the chain client
 * by sending {@link ToExtensionRpc} messages. The chain client sends back
 * JSON-RPC responses and notifications using {@link ToApplicationRpc}
 * messages.
 *
 * Once a web page no longer wants to interface with a certain chain, it should
 * send a {@link ToExtensionRemoveChain} message to the extension in order for
 * resources to be de-allocated. This can also be done before a
 * {@link ToApplicationChainReady} message has been sent back.
 *
 * At any point in time after the chain has been initialized, the extension
 * can send a {@link ToApplicationError} message to indicate a critical problem
 * with the chain or the extension that prevents execution from continuing.
 * This can include for example the extension being disabled by the user, the
 * underlying client crashing, an internal error, etc. Contrary to
 * {@link ToApplicationError} messages *before* a chain has been initialized,
 * {@link ToApplicationError} messages that happen *after* a chain has been
 * initialized are rare and serious. If that happens, the web page is
 * encouraged to remove all of its existing chains and stop using the extension
 * altogether.
 *
 * Note that if the extension sends a {@link ToApplicationError} message,
 * either before of after the chain is ready, the corresponding `chainId` is
 * immediately considered dead/removed, and the web page doesn't need to send
 * a {@link ToExtensionRemoveChain} message.
 *
 * @packageDocumentation
 */
// READ THIS BEFORE MODIFYING ANYTHING BELOW
//
// This file contains the communication protocol between the web page and
// extension. If you modify it, existing web pages will still continue to use
// the previous version until they upgrade, which can take a long time.
// Similarly, some users will still have versions of the extension installed
// that use of the previous version of this protocol. If the modifications
// to this protocol aren't done carefully, web pages might no longer being able
// to talk to the extension, or worse: try to talk to the extension and
// throw exceptions because their assumptions are violated. As such, be
// extremely careful when doing modifications: either the modifications are
// completely backwards-compatible, or an upgrade path must be carefully
// planned.
/**
 * `id` of the DOM elemeent automatically inserted by the extension when a web page loads.
 */
const DOM_ELEMENT_ID = "substrateConnectExtensionAvailable";
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 58711:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AlreadyDestroyedError: () => (/* binding */ AlreadyDestroyedError),
/* harmony export */   CrashError: () => (/* binding */ CrashError),
/* harmony export */   JsonRpcDisabledError: () => (/* binding */ JsonRpcDisabledError),
/* harmony export */   WellKnownChain: () => (/* binding */ WellKnownChain),
/* harmony export */   createScClient: () => (/* binding */ createScClient3),
/* harmony export */   isExtensionPresent: () => (/* binding */ isExtensionPresent)
/* harmony export */ });
/* harmony import */ var _substrate_connect_extension_protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79411);
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/WellKnownChain.ts
var WellKnownChain = /* @__PURE__ */ ((WellKnownChain2) => {
  WellKnownChain2["polkadot"] = "polkadot";
  WellKnownChain2["ksmcc3"] = "ksmcc3";
  WellKnownChain2["rococo_v2_2"] = "rococo_v2_2";
  WellKnownChain2["westend2"] = "westend2";
  return WellKnownChain2;
})(WellKnownChain || {});

// src/connector/getSpec.ts
var chains = /* @__PURE__ */ new Map();
function getSpec(chain) {
  return __async(this, null, function* () {
    if (!Object.keys(WellKnownChain).includes(chain))
      throw new Error("Invalid chain name");
    const knownChain = chain;
    if (!chains.has(knownChain))
      switch (knownChain) {
        case "polkadot" /* polkadot */: {
          chains.set(
            "polkadot" /* polkadot */,
            __webpack_require__.e(/* import() */ 461).then(__webpack_require__.bind(__webpack_require__, 67461))
          );
          break;
        }
        case "ksmcc3" /* ksmcc3 */: {
          chains.set(
            "ksmcc3" /* ksmcc3 */,
            __webpack_require__.e(/* import() */ 886).then(__webpack_require__.bind(__webpack_require__, 75886))
          );
          break;
        }
        case "westend2" /* westend2 */: {
          chains.set(
            "westend2" /* westend2 */,
            __webpack_require__.e(/* import() */ 249).then(__webpack_require__.bind(__webpack_require__, 22249))
          );
          break;
        }
        case "rococo_v2_2" /* rococo_v2_2 */: {
          chains.set(
            "rococo_v2_2" /* rococo_v2_2 */,
            __webpack_require__.e(/* import() */ 899).then(__webpack_require__.bind(__webpack_require__, 89899))
          );
          break;
        }
      }
    return (yield chains.get(knownChain)).chainSpec;
  });
}

// src/connector/types.ts
var AlreadyDestroyedError = class extends Error {
  constructor() {
    super();
    this.name = "AlreadyDestroyedError";
  }
};
var CrashError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "CrashError";
  }
};
var JsonRpcDisabledError = class extends Error {
  constructor() {
    super();
    this.name = "JsonRpcDisabledError";
  }
};

// src/connector/smoldot-light.ts
var isBrowser = ![typeof window, typeof document].includes("undefined");
var QueueFullError = class {
};
var startPromise = null;
var getStart = () => {
  if (startPromise)
    return startPromise;
  startPromise = Promise.all(/* import() */[__webpack_require__.e(992), __webpack_require__.e(564)]).then(__webpack_require__.bind(__webpack_require__, 27564)).then((sm) => {
    QueueFullError = sm.QueueFullError;
    return sm.start;
  });
  return startPromise;
};
var startWithByteCodePromise = null;
var getStartWithByteCode = () => {
  if (startWithByteCodePromise)
    return startWithByteCodePromise;
  startWithByteCodePromise = __webpack_require__.e(/* import() */ 992).then(__webpack_require__.bind(__webpack_require__, 46992)).then(
    (sm) => sm.startWithBytecode
  );
  return startWithByteCodePromise;
};
var clientReferences = [];
var clientPromise = null;
var clientReferencesMaxLogLevel = 3;
var getClientAndIncRef = (config) => {
  if (config.maxLogLevel && config.maxLogLevel > clientReferencesMaxLogLevel)
    clientReferencesMaxLogLevel = config.maxLogLevel;
  if (clientPromise) {
    clientReferences.push(config);
    if (clientPromise instanceof Promise)
      return clientPromise;
    else
      return Promise.resolve(clientPromise);
  }
  let worker = void 0;
  let portToWorker = void 0;
  if (config.workerFactory) {
    worker = config.workerFactory();
    const { port1, port2 } = new MessageChannel();
    worker.postMessage(port1, [port1]);
    portToWorker = port2;
  }
  const clientOptions = {
    portToWorker,
    forbidTcp: true,
    // In order to avoid confusing inconsistencies between browsers and NodeJS, TCP connections are always disabled.
    forbidNonLocalWs: true,
    // Prevents browsers from emitting warnings if smoldot tried to establish non-secure WebSocket connections
    maxLogLevel: 9999999,
    // The actual level filtering is done in the logCallback
    cpuRateLimit: 0.5,
    // Politely limit the CPU usage of the smoldot background worker.
    logCallback: (level, target, message) => {
      if (level > clientReferencesMaxLogLevel)
        return;
      if (level <= 1) {
        console.error("[%s] %s", target, message);
      } else if (level === 2) {
        console.warn("[%s] %s", target, message);
      } else if (level === 3) {
        console.info("[%s] %s", target, message);
      } else if (level === 4) {
        console.debug("[%s] %s", target, message);
      } else {
        console.trace("[%s] %s", target, message);
      }
    }
  };
  const newClientPromise = worker ? getStartWithByteCode().then((start) => {
    return start(__spreadProps(__spreadValues({}, clientOptions), {
      bytecode: new Promise((resolve) => {
        if (isBrowser)
          worker.onmessage = (event) => resolve(event.data);
        else
          worker.on("message", (message) => resolve(message));
      })
    }));
  }) : getStart().then((start) => start(clientOptions));
  clientPromise = newClientPromise;
  newClientPromise.then((client) => {
    if (clientPromise === newClientPromise)
      clientPromise = client;
    else
      client.terminate();
    return client;
  });
  clientReferences.push(config);
  return clientPromise;
};
var decRef = (config) => {
  const idx = clientReferences.indexOf(config);
  if (idx === -1)
    throw new Error("Internal error within smoldot");
  clientReferences.splice(idx, 1);
  clientReferencesMaxLogLevel = 3;
  for (const cfg of clientReferences.values()) {
    if (cfg.maxLogLevel && cfg.maxLogLevel > clientReferencesMaxLogLevel)
      clientReferencesMaxLogLevel = cfg.maxLogLevel;
  }
  if (clientReferences.length === 0) {
    if (clientPromise && !(clientPromise instanceof Promise))
      clientPromise.terminate();
    clientPromise = null;
  }
};
var transformErrors = (thunk) => {
  try {
    thunk();
  } catch (e) {
    const error = e;
    if ((error == null ? void 0 : error.name) === "JsonRpcDisabledError")
      throw new JsonRpcDisabledError();
    if ((error == null ? void 0 : error.name) === "CrashError")
      throw new CrashError(error.message);
    if ((error == null ? void 0 : error.name) === "AlreadyDestroyedError")
      throw new AlreadyDestroyedError();
    throw new CrashError(
      e instanceof Error ? e.message : `Unexpected error ${e}`
    );
  }
};
var createScClient = (config) => {
  const configOrDefault = config || { maxLogLevel: 3 };
  const internalAddChain = (chainSpec, jsonRpcCallback, databaseContent, relayChain) => __async(void 0, null, function* () {
    const client = yield getClientAndIncRef(configOrDefault);
    try {
      const internalChain = yield client.addChain({
        chainSpec,
        potentialRelayChains: relayChain ? [relayChain] : void 0,
        disableJsonRpc: jsonRpcCallback === void 0,
        databaseContent
      });
      (() => __async(void 0, null, function* () {
        while (true) {
          let jsonRpcResponse;
          try {
            jsonRpcResponse = yield internalChain.nextJsonRpcResponse();
          } catch (_) {
            break;
          }
          try {
            jsonRpcCallback(jsonRpcResponse);
          } catch (error) {
            console.error("JSON-RPC callback has thrown an exception:", error);
          }
        }
      }))();
      return {
        sendJsonRpc: (rpc) => {
          transformErrors(() => {
            try {
              internalChain.sendJsonRpc(rpc);
            } catch (error) {
              if (error instanceof QueueFullError) {
                try {
                  const parsedRq = JSON.parse(rpc);
                  jsonRpcCallback(
                    JSON.stringify({
                      jsonrpc: "v2",
                      id: parsedRq.id,
                      error: {
                        code: -32e3,
                        message: "JSON-RPC server is too busy"
                      }
                    })
                  );
                } catch (_error) {
                }
              } else {
                throw error;
              }
            }
          });
        },
        remove: () => {
          try {
            transformErrors(() => {
              internalChain.remove();
            });
          } finally {
            decRef(configOrDefault);
          }
        },
        addChain: (chainSpec2, jsonRpcCallback2, databaseContent2) => {
          return internalAddChain(
            chainSpec2,
            jsonRpcCallback2,
            databaseContent2,
            internalChain
          );
        }
      };
    } catch (error) {
      decRef(configOrDefault);
      throw error;
    }
  });
  const addChain = (chainSpec, jsonRpcCallback, databaseContent) => internalAddChain(chainSpec, jsonRpcCallback, databaseContent);
  const addWellKnownChain = (supposedChain, jsonRpcCallback, databaseContent) => __async(void 0, null, function* () {
    getClientAndIncRef(configOrDefault);
    try {
      return yield internalAddChain(
        yield getSpec(supposedChain),
        jsonRpcCallback,
        databaseContent
      );
    } finally {
      decRef(configOrDefault);
    }
  });
  return {
    addChain,
    addWellKnownChain
  };
};

// src/connector/extension.ts
var listeners = /* @__PURE__ */ new Map();
if (typeof window === "object") {
  window.addEventListener(
    "message",
    ({ data }) => {
      var _a;
      if ((data == null ? void 0 : data.origin) !== "substrate-connect-extension")
        return;
      (_a = listeners.get(data.chainId)) == null ? void 0 : _a(data);
    }
  );
}
function getRandomChainId() {
  const arr = new BigUint64Array(2);
  crypto.getRandomValues(arr);
  const result = arr[1] << BigInt(64) | arr[0];
  return result.toString(36);
}
var createScClient2 = () => {
  const internalAddChain = (isWellKnown, chainSpecOrWellKnownName, jsonRpcCallback, relayChainId) => __async(void 0, null, function* () {
    let resolve;
    const initFinished = new Promise((res) => {
      resolve = () => res(null);
    });
    const chainState = {
      id: getRandomChainId(),
      state: {
        state: "pending",
        waitFinished: resolve
      }
    };
    if (listeners.has(chainState.id))
      throw new Error(
        "Unexpectedly randomly generated the same chain ID twice despite 64bits of entropy"
      );
    listeners.set(chainState.id, (msg) => {
      switch (chainState.state.state) {
        case "pending": {
          const waitFinished = chainState.state.waitFinished;
          switch (msg.type) {
            case "chain-ready": {
              chainState.state = {
                state: "ok"
              };
              break;
            }
            case "error": {
              chainState.state = {
                state: "dead",
                error: new CrashError(
                  "Error while creating the chain: " + msg.errorMessage
                )
              };
              break;
            }
            default: {
              console.warn(
                "Unexpected message of type `msg.type` received from substrate-connect extension"
              );
            }
          }
          waitFinished();
          break;
        }
        case "ok": {
          switch (msg.type) {
            case "error": {
              chainState.state = {
                state: "dead",
                error: new CrashError(
                  "Extension has killed the chain: " + msg.errorMessage
                )
              };
              break;
            }
            case "rpc": {
              if (jsonRpcCallback) {
                jsonRpcCallback(msg.jsonRpcMessage);
              } else {
                console.warn(
                  "Unexpected message of type `msg.type` received from substrate-connect extension"
                );
              }
              break;
            }
            default: {
              console.warn(
                "Unexpected message of type `msg.type` received from substrate-connect extension"
              );
            }
          }
          break;
        }
        case "dead": {
          break;
        }
      }
    });
    if (isWellKnown) {
      postToExtension({
        origin: "substrate-connect-client",
        chainId: chainState.id,
        type: "add-well-known-chain",
        chainName: chainSpecOrWellKnownName
      });
    } else {
      postToExtension({
        origin: "substrate-connect-client",
        chainId: chainState.id,
        type: "add-chain",
        chainSpec: chainSpecOrWellKnownName,
        potentialRelayChainIds: relayChainId ? [relayChainId] : []
      });
    }
    yield initFinished;
    if (isWellKnown && chainState.state.state === "dead") {
      let resolve2;
      const initFinished2 = new Promise((res) => {
        resolve2 = () => res(null);
      });
      chainState.state = {
        state: "pending",
        waitFinished: resolve2
      };
      postToExtension({
        origin: "substrate-connect-client",
        chainId: chainState.id,
        type: "add-chain",
        chainSpec: yield getSpec(chainSpecOrWellKnownName),
        potentialRelayChainIds: []
      });
      yield initFinished2;
    }
    if (chainState.state.state === "dead") {
      throw chainState.state.error;
    }
    const chain = {
      sendJsonRpc: (jsonRpcMessage) => {
        if (chainState.state.state === "dead") {
          throw chainState.state.error;
        }
        if (!jsonRpcCallback)
          throw new JsonRpcDisabledError();
        postToExtension({
          origin: "substrate-connect-client",
          chainId: chainState.id,
          type: "rpc",
          jsonRpcMessage
        });
      },
      remove: () => {
        if (chainState.state.state === "dead") {
          throw chainState.state.error;
        }
        chainState.state = {
          state: "dead",
          error: new AlreadyDestroyedError()
        };
        listeners.delete(chainState.id);
        postToExtension({
          origin: "substrate-connect-client",
          chainId: chainState.id,
          type: "remove-chain"
        });
      },
      addChain: function(chainSpec, jsonRpcCallback2) {
        return internalAddChain(
          false,
          chainSpec,
          jsonRpcCallback2,
          chainState.id
        );
      }
    };
    return chain;
  });
  return {
    addChain: (chainSpec, jsonRpcCallback) => internalAddChain(false, chainSpec, jsonRpcCallback),
    addWellKnownChain: (name, jsonRpcCallback) => internalAddChain(true, name, jsonRpcCallback)
  };
};
function postToExtension(msg) {
  window.postMessage(msg, "*");
}

// src/connector/index.ts

var isExtensionPresent = typeof document === "object" && typeof document.getElementById === "function" && !!document.getElementById(_substrate_connect_extension_protocol__WEBPACK_IMPORTED_MODULE_0__/* .DOM_ELEMENT_ID */ .v);
function createScClient3(config) {
  const forceEmbedded = config == null ? void 0 : config.forceEmbeddedNode;
  if (!forceEmbedded && isExtensionPresent)
    return createScClient2();
  return createScClient(config == null ? void 0 : config.embeddedNodeConfig);
}

//# sourceMappingURL=index.js.map

/***/ }),

/***/ 86311:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   yM: () => (/* binding */ p)
/* harmony export */ });
/* unused harmony exports allSettled, attach, clearNode, combine, createApi, createDomain, createEffect, createNode, createStore, createWatch, fork, forward, fromObservable, guard, hydrate, is, launch, merge, restore, sample, scopeBind, serialize, setGraphInspector, setInspector, setStoreName, split, step, version, withFactory, withRegion */
function e(e,t){for(const n in e)t(e[n],n)}function t(e,t){e.forEach(t)}function n(e,t,n){if(!e)throw Error(`${n?n+': ':''}${t}`)}function r(e,t){const n=E(e).meta||{};ge={id:E(e).id,parent:ge,value:e,template:n.template||ve(),sidRoot:n.sidRoot||ge&&ge.sidRoot,meta:n};try{return t()}finally{ye('region'),ge=H(ge)}}function a({node:e=[],from:n,source:r,parent:a=n||r,to:o,target:s,child:i=o||s,scope:c={},meta:l={},family:d={type:'regular'},regional:u}={}){const f=Se(a),p=Se(d.links),m=Se(d.owners),h=[];t(e,(e=>e&&ie(h,e)));const g={id:fe(),seq:h,next:Se(i),meta:l,scope:c,family:{type:d.type||"crosslink",links:p,owners:m}};return t(p,(e=>ie(V(e),g))),t(m,(e=>ie(T(e),g))),t(f,(e=>ie(e.next,g))),u&&ge&&we(B(ge),[g]),g}function o(e,n,r){let a,o=at,s=null,i=et;if(e.target&&(n=e.params,r=e.defer,a=e.meta,o='page'in e?e.page:o,e.stack&&(s=e.stack),i=U(e)||i,e=e.target),i&&et&&i!==et&&(et=null),Array.isArray(e))for(let t=0;t<e.length;t++)Qe('pure',o,E(e[t]),s,n[t],i,a);else Qe('pure',o,E(e),s,n,i,a);if(r&&!tt)return;const c={isRoot:tt,currentPage:at,scope:et,isWatch:nt,isPure:rt};let l,d,u,f,p,m;tt=0;e:for(;f=Ke();){const{idx:e,stack:n,type:r}=f;u=n.node,at=p=n.page,et=U(n),p?m=p.reg:et&&(m=et.reg);const a=!!p,o=!!et,s={fail:0,scope:u.scope};l=d=0;for(let t=e;t<u.seq.length&&!l;t++){const i=u.seq[t];if(i.order){const{priority:a,barrierID:o}=i.order,s=o?p?`${p.fullID}_${o}`:o:0;if(t!==e||r!==a){o?Ze.has(s)||(Ze.add(s),Xe(t,n,a,o)):Xe(t,n,a,0);continue e}o&&Ze.delete(s)}switch(i.type){case'mov':{const e=i.data;let t;switch(e.from){case'stack':t=B(n);break;case'a':case'b':t=n[e.from];break;case'value':t=e.store;break;case'store':if(m&&!m[e.store.id])if(a){const t=ct(p,e.store.id);n.page=p=t,t?m=t.reg:o?(pt(et,e.store,0,1,e.softRead),m=et.reg):m=void 0}else o&&pt(et,e.store,0,1,e.softRead);t=Be(m&&m[e.store.id]||e.store)}switch(e.to){case'stack':n.value=t;break;case'a':case'b':n[e.to]=t;break;case'store':lt(p,et,e.target,0).current=t}break}case'compute':const e=i.data;if(e.fn){nt='watch'===u.meta.op,rt=e.pure;const t=e.safe?(0,e.fn)(B(n),s.scope,n):mt(s,e.fn,n);e.filter?d=!t:n.value=t,nt=c.isWatch,rt=c.isPure}}l=s.fail||d}if(dt&&dt(n,s),!l){const e=B(n),r=U(n);if(t(u.next,(t=>{Qe('child',p,t,n,e,r)})),r){u.meta.needFxCounter&&Qe('child',p,r.fxCount,n,e,r),u.meta.storeChange&&Qe('child',p,r.storeChange,n,e,r),u.meta.warnSerialize&&Qe('child',p,r.warnSerializeNode,n,e,r);const a=r.additionalLinks[u.id];a&&t(a,(t=>{Qe('child',p,t,n,e,r)}))}}}tt=c.isRoot,at=c.currentPage,et=U(c)}function s(t,n="combine"){let r=n+'(',a='',o=0;return e(t,(e=>{o<25&&(null!=e&&(r+=a,r+=Q(e)?K(e).fullName:e.toString()),o+=1,a=', ')})),r+')'}function i(e,t){e.shortName=t,Object.assign(K(e),c(t,H(e)))}function c(e,t){let n,r;const a=e;if(t){const a=K(t);0===e.length?(n=a.path,r=a.fullName):(n=a.path.concat([e]),r=0===a.fullName.length?e:a.fullName+'/'+e)}else n=0===e.length?[]:[e],r=e;return{shortName:a,fullName:r,path:n}}function l(e,t){if(!t)return e;if(!t.name&&!t.named&&!t.loc)return e;let n=`[${e}]`;const r=t.named||t.name;r&&(n+=` unit '${r}'`);const a=t.loc;return!r&&a&&(n+=` (${a.file}:${a.line}:${a.column})`),n}function d(e,t){const n=t?e:e[0];ze(n);let r=n.or;const a=n.and;if(a){const n=t?a:a[0];if($e(n)&&'and'in n){const n=d(a,t);e=n[0],r={...r,...n[1]}}else e=a}return[e,r]}function u(e){const t=()=>e();return t.unsubscribe=()=>e(),t}function f(e,...t){const n=ve();if(n){const r=n.handlers[e];if(r)return r(n,...t)}}function p(e,t){const r=ht({or:t,and:'string'==typeof e?{name:e}:e}),s=l('event',r),i=(e,...t)=>(n(!G(i,'derived'),'call of derived event is not supported, use createEvent instead',s),n(!rt,'unit call from pure function is not supported, use operators like sample instead',s),at?((e,t,n,r)=>{const a=at;let o=null;if(t)for(o=at;o&&o.template!==t;)o=H(o);st(o);const s=e.create(n,r);return st(a),s})(i,c,e,t):i.create(e,t)),c=ve(),d=Object.assign(i,{graphite:a({meta:xt(r.actualOp||"event",i,r),regional:1}),create:e=>(o({target:i,params:e,scope:et}),e),watch:e=>$t(i,e),map:e=>zt(i,"map",e,[Ve()]),filter:e=>zt(i,'filter',e.fn?e:e.fn,[Ve(Oe,1)]),filterMap:e=>zt(i,'filterMap',e,[Ve(),Pe((e=>!xe(e)),1)]),prepend(e){n(i.targetable,'.prepend of derived event is not supported, call source event instead',s);const t=p('* \u2192 '+i.shortName,{parent:H(i)});return f('eventPrepend',E(t)),wt(t,i,[Ve()],'prepend',e),Mt(i,t),t}});return null!=r&&r.domain&&r.domain.hooks.event(d),J(d,'id',d.graphite.id),ye(d.graphite),d}function m(e,r,a,o,s){return Ce(a,`${s} ${r}`,'first argument'),n(Me(o),'second argument should be a function',s),ce(!G(e,'derived'),`${r} in derived store`,`${r} in store created via createStore`,s),t(Array.isArray(a)?a:[a],(t=>{e.off(t),W(e).set(t,kt(Ct(t,e,'on',Ie,o)))})),e}function h(e,r){const s=ht(r),i=Le(e),c=l('store',s),d=p({named:'updates',derived:1});f('storeBase',i);const u=i.id,g='skipVoid'in s,y=g&&!s.skipVoid;ce(!(g&&s.skipVoid),'{skipVoid: true}','updateFilter',c);const v={subscribers:new Map,updates:d,defaultState:e,stateRef:i,getState(){let e,t=i;if(at){let t=at;for(;t&&!t.reg[u];)t=H(t);t&&(e=t)}return!e&&et&&(pt(et,i,1),e=et),e&&(t=e.reg[u]),Be(t)},setState:e=>o({target:v,params:e,defer:1,scope:et}),reset:(...e)=>(n(v.targetable,'.reset of derived store is not supported',c),t(e,(e=>m(v,'.reset',e,(()=>v.defaultState),c))),v),on:(e,t)=>(n(v.targetable,'.on of derived store is not supported',c),m(v,'.on',e,t,c)),off(e){const t=W(v).get(e);return t&&(t(),W(v).delete(e)),v},map(e,t){let n,r;$e(e)&&(n=e,e=e.fn);const a=v.getState(),o=xe(a);ve()?r=null:(!o||o&&y)&&(r=e(a));const s=h(r,{name:`${v.shortName} \u2192 *`,derived:1,...t,and:n}),c=Ct(v,s,"map",Oe,e);return We(L(s),{type:"map",fn:e,from:i}),L(s).noInit=1,f('storeMap',i,c),s},watch(e,t){if(ce(!t,'watch second argument','sample',c),!t||!Q(e)){const t=$t(v,e);return f('storeWatch',i,e)||e(v.getState()),t}return n(Me(t),'second argument should be a function',c),e.watch((e=>t(v.getState(),e)))}},b=xt("store",v,s),k=v.defaultConfig.updateFilter;v.graphite=a({scope:{state:i,fn:k},node:[Pe(((e,t,n)=>(n.scope&&!n.scope.reg[i.id]&&(n.b=1),e))),Ee(i),Pe(((e,t,{a:n,b:r})=>{const a=xe(e);return a&&!g&&console.error(`${c}: ${At}`),(a&&y||!a)&&(e!==n||r)}),1),k&&Ve(Ne,1),qe({from:"stack",target:i})],child:d,meta:{...b,defaultState:e},regional:1}),J(v,'id',v.graphite.id),J(v,'rootStateRefId',u);const w=G(v,'serialize'),S=G(v,'derived'),$='ignore'===w,M=G(v,'sid');M&&(J(v,'storeChange',1),i.sid=M),M||$||S||J(v,'warnSerialize',1);const x=xe(e);return n(S||!x||x&&y,At,c),S&&x&&!g&&console.error(`${c}: ${At}`),we(v,[d]),null!=s&&s.domain&&s.domain.hooks.store(v),S||(v.reinit=p({named:'reinit'}),v.reset(v.reinit)),i.meta=v.graphite.meta,ye(v.graphite),v}function g(...e){let t,r,a;[e,a]=d(e);const o=l('combine',a),s=e[e.length-1],i=!Y(s)&&$e(s),c=i&&s,u=i?e[e.length-2]:s;let f,p,m;if(Me(u)?(r=e.slice(0,i?-2:-1),t=u):r=e,1===r.length){const e=r[0];Y(e)||(f=e,p=1)}if(!p&&(f=r,t)){m=1;const e=t;t=t=>e(...t)}return n($e(f),`${o}: shape should be an object`),jt(Array.isArray(f),!m,f,a,t,c)}function y(){const e={};return e.req=new Promise(((t,n)=>{e.rs=t,e.rj=n})),e.req.catch((()=>{})),e}function v(e,t={}){const r=ht(Me(e)?{handler:e}:e,t),s=l('effect',r),i=p(Me(e)?{handler:e}:e,{...t,actualOp:"effect"}),c=E(i);J(c,'op',i.kind="effect"),i.use=e=>(n(Me(e),'.use argument should be a function',s),v.scope.handler=e,i),i.use.getCurrent=()=>v.scope.handler;const d=i.finally=p({named:'finally',derived:1}),u=i.done=d.filterMap({named:'done',fn({status:e,params:t,result:n}){if('done'===e)return{params:t,result:n}}}),f=i.fail=d.filterMap({named:'fail',fn({status:e,params:t,error:n}){if('fail'===e)return{params:t,error:n}}}),m=i.doneData=u.map({named:'doneData',fn:({result:e})=>e}),g=i.failData=f.map({named:'failData',fn:({error:e})=>e}),v=a({scope:{handler:i.defaultConfig.handler||(()=>n(0,`no handler used in ${i.compositeName.fullName}`))},node:[Pe(((e,t,n)=>{let r=t.handler;const a=U(n);if(a){const e=a.handlers.unitMap.get(i)||a.handlers.sidMap[i.sid];e&&(r=e)}return e.handler=r,e}),0,1),Pe(((e,t,n)=>{if(t.runnerFn&&!t.runnerFn(e,null,n))return;const{params:r,req:a,handler:o,args:s=[r]}=e,i=It(r,a,1,d,n),c=It(r,a,0,d,n),[l,u]=Nt(o,c,s);l&&($e(u)&&Me(u.then)?u.then(i,c):i(u))}),0,1)],meta:{op:'fx',fx:'runner'}});c.scope.runner=v,ie(c.seq,Pe(((e,{runner:t},n)=>{const r=H(n)?{params:e,req:{rs(e){},rj(e){}}}:e;return n.meta||(n.meta={fxID:pe()}),o({target:t,params:r,defer:1,scope:U(n),meta:n.meta}),r.params}))),i.create=e=>{const t=y(),n={params:e,req:t};if(et&&!nt){const e=et;t.req.finally((()=>{ot(e)})).catch((()=>{}))}return o({target:i,params:n,scope:et}),t.req};const b=i.inFlight=h(0,{serialize:'ignore',named:(G(i,'name')||i.graphite.id)+'.inFlight'}).on(i,(e=>e+1)).on(d,(e=>e-1)).map({fn:e=>e,named:'inFlight'});J(d,'needFxCounter','dec'),J(i,'needFxCounter',1);const k=i.pending=b.map({fn:e=>e>0,named:'pending'});return we(i,[d,u,f,m,g,k,b]),null!=r&&r.domain&&r.domain.hooks.effect(i),i}function b(e){let t;[e,t]=d(e,1);const r=l('attach',t);let{source:a,effect:s,mapParams:i,domain:u}=e;ee(s)&&n(xe(u),'`domain` can only be used with a plain function',r);const f=v(e,t);J(f,'attached',1);const{runner:p}=E(f).scope;let m;const h=(e,t,n)=>{const{params:r,req:s,handler:c}=e,l=f.finally,d=It(r,s,0,l,n),u=n.a,p=ee(c);let m,h=1;if(i?[h,m]=Nt(i,d,[r,u]):m=a&&p?u:r,h){if(!p)return e.args=[u,m],1;o({target:c,params:{params:m,req:{rs:It(r,s,1,l,n),rj:d}},page:n.page,defer:1,meta:n.meta})}};if(a){let e;p.scope.runnerFn=h,Y(a)?(e=a,we(e,[f])):(e=g(a),we(f,[e])),m=[Pe((e=>e),0,1),Ee(L(e))],delete p.seq[1].order}else m=[Pe(h,1,1)];p.seq.splice(1,0,...m),f.use(s);const y=H(s);return y&&(Object.assign(K(f),c(f.shortName,y)),f.defaultConfig.parent=y),Mt(s,f,"effect"),f}function k(...t){let[[n,r],a]=d(t);const o={};return e(r,((e,t)=>{const r=o[t]=p(t,{parent:H(n),config:a});n.on(r,e),Mt(n,r)})),o}function w(n,r){const s=ht({or:r,and:'string'==typeof n?{name:n}:n}),i=a({family:{type:"domain"},regional:1,parent:(null==s?void 0:s.domain)||(null==s?void 0:s.parent)}),c={history:{},graphite:i,hooks:{}};i.meta=xt("domain",c,{parent:(null==s?void 0:s.domain)||(null==s?void 0:s.parent),or:{...s,derived:1}}),e({Event:p,Effect:v,Store:h,Domain:w},((e,n)=>{const r=n.toLowerCase(),a=p({named:`on${n}`});c.hooks[r]=a;const s=new Set;c.history[`${r}s`]=s,a.create=e=>(o(a,e),e),ie(E(a).seq,Pe(((e,t,n)=>(n.scope=null,e)))),a.watch((e=>{we(c,[e]),s.add(e),e.ownerSet||(e.ownerSet=s),H(e)||(e.parent=c)})),we(c,[a]),c[`onCreate${n}`]=e=>(t(s,e),a.watch(e)),c[`create${n}`]=c[r]=(t,n)=>{const r=ht({and:n,or:t});return null!=r&&r.domain?e(t,n):a(e(t,{parent:c,or:r}))}}));const l=H(c);return l&&e(c.hooks,((e,t)=>wt(e,l.hooks[t]))),null!=s&&s.domain&&s.domain.hooks.domain(c),c}function S(e){ze(e);const t=P in e?e[P]():e;n(t.subscribe,'expect observable to have .subscribe');const r=p(),a=kt(r);return t.subscribe({next:r,error:a,complete:a}),r}function $(e,t){const n=l('merge',t);Ce(e,n,'first argument');const r=p({name:s(e,'merge'),derived:1,and:t});return wt(e,r,[],'merge'),r}function M(e,r){let a=0;return t(Ft,(t=>{t in e&&(n(null!=e[t],Rt(r,t)),a=1)})),a}function x(...e){let t,n,r,a,[[o,s,i],c]=d(e),u=1;const f=l('sample',c);return xe(s)&&$e(o)&&M(o,f)&&(s=o.clock,i=o.fn,'batch'in o?u=o.batch:(ce(!('greedy'in o),'greedy in sample','batch',f),u=!o.greedy),a=o.filter,t=o.target,n=o.name,r=o.sid,o=o.source),qt('sample',s,o,a,t,i,n,c,u,1,0,r)}function z(...e){let[[t,n],r]=d(e);const a=l('guard',r);return ce(0,'guard','sample',a),n||(n=t,t=n.source),M(n,a),qt('guard',n.clock,t,n.filter,n.target,null,n.name,r,!n.greedy,0,1)}function A(t,r,a){const o=l('restore',a);if(n(!Y(t),'restore($store) is not supported',o),Z(t)||ee(t)){const e=H(t),n=h(r,{parent:e,name:t.shortName,and:a});return wt(ee(t)?t.doneData:t,n),e&&e.hooks.store(n),n}const s=Array.isArray(t)?[]:{};return e(t,((e,t)=>s[t]=Y(e)?e:h(e,{name:t}))),s}function C(...t){const r='split';let o,s,[[i,c],u]=d(t);const m=l(r,u),h=!c;h&&(o=i.cases,c=i.match,s=i.clock,i=i.source);const g=Y(c),y=!Q(c)&&Me(c),v=!g&&!y&&$e(c);n(Q(i),'source must be a unit',m),o||(o={}),h?e(o,((e,t)=>je(m,e,`cases.${t}`))):(n(v,'match should be an object',m),e(c,((e,t)=>o[t]=p({derived:1,named:`cases.${t}`,and:u}))),o.__=p({derived:1,named:'cases.__',and:u}));const b=new Set([].concat(i,s||[],Object.values(o))),k=Object.keys(g||y?o:c);let w;if(g||y)g&&b.add(c),w=[g&&Ee(L(c),0,1),De({safe:g,filter:1,pure:!g,fn(e,t,n){const r=String(g?n.a:c(e));Pt(t,oe(k,r)?r:'__',e,n)}})];else if(v){const t=Le({});t.type='shape';const n=[];let r;e(c,((e,a)=>{if(Q(e)){r=1,ie(n,a),b.add(e);const o=wt(e,[],[Ee(t),Pe(((e,t,{a:n})=>n[a]=e))]);if(Y(e)){t.current[a]=e.getState();const n=L(e);We(t,{from:n,field:a,type:'field'}),f('splitMatchStore',n,o)}}})),r&&f('splitBase',t),w=[r&&Ee(t,0,1),Ve(((e,t,r)=>{for(let a=0;a<k.length;a++){const o=k[a];if(oe(n,o)?r.a[o]:c[o](e))return void Pt(t,o,e,r)}Pt(t,'__',e,r)}),1)]}else n(0,'expect match to be unit, function or object');const S=a({meta:{op:r},parent:s?[]:i,scope:o,node:w,family:{owners:Array.from(b)},regional:1});if(s&&qt(r,s,i,null,S,null,r,u,0,0,0),!h)return o}function j(e,{scope:t,params:n}={}){if(!Q(e))return Promise.reject(new Error('first argument should be unit'));if(!(ee(e)||Z(e)||Y(e)||re(e)))return Promise.reject(new Error('first argument accepts only effects, events, stores or scopes'));re(e)&&(t=e);const r=y();r.parentFork=et;const{fxCount:a}=t;ie(a.scope.defers,r);const s=[],i=[];return re(e)||(ie(s,e),ie(i,ee(e)?{params:n,req:{rs(e){r.value={status:'done',value:e}},rj(e){r.value={status:'fail',value:e}}}}:n)),ie(s,a),ie(i,null),o({target:s,params:i,scope:t}),r.req}function N(e,n,r){const a=[];(function e(o){oe(a,o)||(ie(a,o),"store"===G(o,'op')&&(r||G(o,'sid'))&&n(o,G(o,'sid')),t(o.next,e),t(V(o),e),t(T(o),e))})(e)}function I(e,r){const a=Array.isArray(e)?new Map(e):e,o=new Map;let s=0;if(a instanceof Map){const e={};return t(a,((t,a)=>{n(Q(a),'Map key should be a unit'),r&&r(a,t),a.sid&&(a.sid in e&&(s=1),e[a.sid]=t),o.set(a,t)})),{sidMap:e,unitMap:o,hasSidDoubles:s}}return{sidMap:a,unitMap:o}}function O(e,r){let o,s=e;ne(e)&&(ce(0,'fork(domain)','fork()'),o=e,s=r);const i=(e=>{const n=a({scope:{defers:[],inFlight:0,fxID:0},node:[Pe(((e,t,n)=>{n.parent?'dec'===n.parent.node.meta.needFxCounter?t.inFlight-=1:(t.inFlight+=1,t.fxID+=1):t.fxID+=1})),De({priority:"sampler",batch:1}),Pe(((e,n)=>{const{defers:r,fxID:a}=n;n.inFlight>0||0===r.length||Promise.resolve().then((()=>{n.fxID===a&&t(r.splice(0,r.length),(e=>{ot(e.parentFork),e.rs(e.value)}))}))}),0,1)]}),r=a({node:[Pe(((e,t,n)=>{const r=n.parent;if(r){const t=r.node;if(Vt(r)){const r=U(n),a=t.meta.sid;r.sidIdMap[a]=t.scope.state.id,r.values.sidMap[a]=e;const o=t.meta.serialize;o&&r.sidSerializeSettings.set(a,'ignore'===o?{ignore:1}:{ignore:0,write:o.write})}}}))]}),o=a({node:[Pe(((e,t,n)=>{const r=U(n);r&&n.parent&&Vt(n.parent)&&(r.warnSerialize=1)}))]}),s={cloneOf:e,reg:{},values:{sidMap:{},idMap:{}},sidIdMap:{},sidSerializeSettings:new Map,getState(e){if('current'in e)return lt(at,s,e,0).current;const t=E(e);return lt(at,s,t.scope.state,1).current},kind:"scope",graphite:a({family:{type:"domain",links:[n,r,o]},meta:{unit:'fork'},scope:{forkInFlightCounter:n}}),additionalLinks:{},handlers:{sidMap:{},unitMap:new Map},fxCount:n,storeChange:r,warnSerializeNode:o};return s})(o);if(s){if(s.values){const{sidMap:e,unitMap:r,hasSidDoubles:a}=I(s.values,(e=>n(Y(e)&&te(e),'Values map can contain only writable stores as keys')));Object.assign(i.values.sidMap,e),t(r,((e,t)=>{if(i.values.idMap[t.stateRef.id]=e,'ignore'===G(t,'serialize')){const e=G(t,'sid');i.sidSerializeSettings.set(e,{ignore:1})}})),i.fromSerialize=!(Array.isArray(s.values)||s.values instanceof Map),i.hasSidDoubles=a}s.handlers&&(ce(s.handlers instanceof Map||Array.isArray(s.handlers),'object with handlers','array'),i.handlers=I(s.handlers,(e=>n(ee(e),"Handlers map can contain only effects as keys"))))}return i}function F(e,{values:r}){n($e(r),'values property should be an object');const{sidMap:a,unitMap:s}=I(r),i=Object.getOwnPropertyNames(a),c={};t(s,((e,t)=>{c[t.stateRef.id]=t}));const l=[],d=[];let u,f,p;re(e)?(u=e,p=1,n(u.cloneOf,'scope should be created from domain'),ce(0,'hydrate(fork(domain), { values })','fork({ values })'),f=E(u.cloneOf)):ne(e)?(ce(0,'hydrate(domain, { values })','fork({ values })'),f=E(e)):n(0,'first argument of hydrate should be domain or scope'),N(f,((e,t)=>{if(t&&oe(i,t)){ie(l,e);const n=G(e,'serialize');n&&'ignore'!==n&&(a[t]=n.read(a[t])),ie(d,a[t])}else e.scope.state.id in c&&(ie(l,e),ie(d,s.get(c[e.scope.state.id])))}),1),o({target:l,params:d,scope:u}),p&&Object.assign(u.values.sidMap,a)}function R(e,{scope:t,safe:r}={}){n(t||et||r,'scopeBind: scope not found');const a=t||et;return t=>{function n(){ot(s)}let r,o=0;const s=et;ot(a);try{r=e(t)}catch(e){r=e,o=1}if(n(),o)throw r;return r instanceof Promise&&r.then(n,n),r}}function q(t,r={}){t.warnSerialize&&console.error('There is a store without sid in this scope, its value is omitted'),n(!t.hasSidDoubles,'duplicate sid found in this scope');const a=r.ignore?r.ignore.map((({sid:e})=>e)):[],o={};return e(t.values.sidMap,((e,n)=>{var r;if(oe(a,n))return;const s=t.sidIdMap[n],i=null!==(r=t.sidSerializeSettings.get(n))&&void 0!==r?r:{ignore:0,write:Tt};i.ignore||(o[n]=(0,i.write)(s&&s in t.reg?t.reg[s].current:e))})),'onlyChanges'in r&&(ce(0,'onlyChanges'),r.onlyChanges||(n(t.cloneOf,'scope should be created from domain'),N(E(t.cloneOf),((e,n)=>{n in o||oe(a,n)||G(e,'isCombine')||'ignore'===G(e,'serialize')||(o[n]=t.getState(e))})))),o}function D({unit:e,fn:t,scope:n,batch:r}){const o=[Te.run({fn:e=>t(e)})];r&&o.unshift(Te.compute({priority:'sampler',batch:1})),Y(e)&&o.unshift(Te.mov({store:e.stateRef,to:'stack'}));const s=Array.isArray(e)?e:[e];if(n){const e=[],t=n.additionalLinks;return s.forEach((n=>{const r=t[n.graphite.id]||[];t[n.graphite.id]=r;const s=a({node:_(o,n),meta:{watchOp:n.kind}});r.push(s),e.push((()=>{const e=r.indexOf(s);-1!==e&&r.splice(e,1),bt(s)}))})),u((()=>{e.forEach((e=>e()))}))}{const e=a({node:o,parent:s,family:{owners:s}});return u((()=>{bt(e)}))}}function _(e,t){return Y(t)?[Te.mov({store:t.stateRef,to:'stack'}),...e]:e}const P='undefined'!=typeof Symbol&&Symbol.observable||'@@observable',E=e=>e.graphite||e,V=e=>e.family.owners,T=e=>e.family.links,L=e=>e.stateRef,B=e=>e.value,W=e=>e.subscribers,H=e=>e.parent,U=e=>e.scope,G=(e,t)=>E(e).meta[t],J=(e,t,n)=>E(e).meta[t]=n,K=e=>e.compositeName,Q=e=>(Me(e)||$e(e))&&'kind'in e,X=e=>t=>Q(t)&&t.kind===e,Y=X("store"),Z=X("event"),ee=X("effect"),te=e=>Q(e)&&!!e.targetable,ne=X("domain"),re=X("scope");var ae={__proto__:null,unit:Q,store:Y,event:Z,effect:ee,targetable:te,domain:ne,scope:re,attached:e=>ee(e)&&1==G(e,'attached')};const oe=(e,t)=>e.includes(t),se=(e,t)=>{const n=e.indexOf(t);-1!==n&&e.splice(n,1)},ie=(e,t)=>e.push(t),ce=(e,t,n,r)=>!e&&console.error(`${r?r+': ':''}${t} is deprecated${n?`, use ${n} instead`:''}`),le=()=>{let e=0;return()=>""+ ++e},de=le(),ue=le(),fe=le(),pe=le();let me;const he=e=>{me=e};let ge=null;const ye=e=>{me&&me(e,ge)},ve=()=>ge&&ge.template,be=e=>(e&&ge&&ge.sidRoot&&(e=`${ge.sidRoot}|${e}`),e),ke=({sid:e,name:t,loc:n,method:o,fn:s})=>r(a({meta:{sidRoot:be(e),sid:e,name:t,loc:n,method:o,type:'factory'}}),s),we=(e,n)=>{const r=E(e);t(n,(e=>{const t=E(e);"domain"!==r.family.type&&(t.family.type="crosslink"),ie(V(t),r),ie(T(r),t)}))},Se=(e=[])=>(Array.isArray(e)?e:[e]).flat().map(E),$e=e=>'object'==typeof e&&null!==e,Me=e=>'function'==typeof e,xe=e=>void 0===e,ze=e=>n($e(e)||Me(e),'expect first argument be an object'),Ae=(e,t,r,a)=>n(!(!$e(e)&&!Me(e)||!('family'in e)&&!('graphite'in e)),`${t}: expect ${r} to be a unit (store, event or effect)${a}`),Ce=(e,n,r)=>{Array.isArray(e)?t(e,((e,t)=>Ae(e,n,`${t} item of ${r}`,''))):Ae(e,n,r,' or array of units')},je=(e,r,a="target")=>t(Se(r),(t=>n(!G(t,'derived'),`${e}: derived unit in "${a}" is not supported, use createStore/createEvent instead"`))),Ne=(e,{fn:t},{a:n})=>t(e,n),Ie=(e,{fn:t},{a:n})=>t(n,e),Oe=(e,{fn:t})=>t(e),Fe=(e,t,n,r)=>{const a={id:ue(),type:e,data:t};return n&&(a.order={priority:n},r&&(a.order.barrierID=++Re)),a};let Re=0;const qe=({from:e="store",store:t,target:n,to:r=(n?"store":"stack"),batch:a,priority:o})=>Fe('mov',{from:e,store:t,to:r,target:n},o,a),De=({fn:e,batch:t,priority:n,safe:r=0,filter:a=0,pure:o=0})=>Fe('compute',{fn:e,safe:r,filter:a,pure:o},n,t),_e=({fn:e})=>De({fn:e,priority:"effect"}),Pe=(e,t,n)=>De({fn:e,safe:1,filter:t,priority:n&&"effect"}),Ee=(e,t,n)=>qe({store:e,to:t?"stack":"a",priority:n&&"sampler",batch:1}),Ve=(e=Oe,t)=>De({fn:e,pure:1,filter:t}),Te={mov:qe,compute:De,filter:({fn:e,pure:t})=>De({fn:e,filter:1,pure:t}),run:_e},Le=e=>({id:ue(),current:e,initial:e}),Be=({current:e})=>e,We=(e,t)=>{e.before||(e.before=[]),ie(e.before,t)};let He=null;const Ue=(e,t)=>{if(!e)return t;if(!t)return e;let n;return(e.v.type===t.v.type&&e.v.id>t.v.id||Ye(e.v.type)>Ye(t.v.type))&&(n=e,e=t,t=n),n=Ue(e.r,t),e.r=e.l,e.l=n,e},Ge=[];let Je=0;for(;Je<6;)ie(Ge,{first:null,last:null,size:0}),Je+=1;const Ke=()=>{for(let e=0;e<6;e++){const t=Ge[e];if(t.size>0){if(3===e||4===e){t.size-=1;const e=He.v;return He=Ue(He.l,He.r),e}1===t.size&&(t.last=null);const n=t.first;return t.first=n.r,t.size-=1,n.v}}},Qe=(e,t,n,r,a,o,s)=>Xe(0,{a:null,b:null,node:n,parent:r,value:a,page:t,scope:o,meta:s},e,0),Xe=(e,t,n,r)=>{const a=Ye(n),o=Ge[a],s={v:{idx:e,stack:t,type:n,id:r},l:null,r:null};3===a||4===a?He=Ue(He,s):(0===o.size?o.first=s:o.last.r=s,o.last=s),o.size+=1},Ye=e=>{switch(e){case'child':return 0;case'pure':return 1;case'read':return 2;case'barrier':return 3;case'sampler':return 4;case'effect':return 5;default:return-1}},Ze=new Set;let et,tt=1,nt=0,rt=0,at=null;const ot=e=>{et=e},st=e=>{at=e},ct=(e,t)=>{if(e){for(;e&&!e.reg[t];)e=e.parent;if(e)return e}return null},lt=(e,t,n,r)=>{const a=ct(e,n.id);return a?a.reg[n.id]:t?(pt(t,n,r),t.reg[n.id]):n};let dt;const ut=e=>{dt=e},ft=e=>e,pt=(e,n,r,a,o)=>{const s=e.reg;if(s[n.id])return;const i=n.sid,c={id:n.id,current:n.initial,meta:n.meta};if(c.id in e.values.idMap)c.current=e.values.idMap[c.id];else if(i&&i in e.values.sidMap&&!(i in e.sidIdMap)){var l;const t=null==n||null===(l=n.meta)||void 0===l?void 0:l.serialize;c.current=(e.fromSerialize&&'ignore'!==t&&(null==t?void 0:t.read)||ft)(e.values.sidMap[i])}else if(n.before&&!o){let o=0;const i=r||!n.noInit||a;t(n.before,(t=>{switch(t.type){case'map':{const n=t.from;if((n||t.fn)&&(n&&pt(e,n,r,a),i)){const e=n&&s[n.id].current;c.current=t.fn?t.fn(e):e}break}case'field':pt(e,t.from,r,a),o||(o=1,c.current=Array.isArray(c.current)?[...c.current]:{...c.current}),i&&(c.current[t.field]=s[s[t.from.id].id].current)}}))}i&&(e.sidIdMap[i]=n.id),s[n.id]=c},mt=(e,t,n)=>{try{return t(B(n),e.scope,n)}catch(t){console.error(t),e.fail=1,e.failReason=t}},ht=(t,n={})=>($e(t)&&(ht(t.or,n),e(t,((e,t)=>{xe(e)||'or'===t||'and'===t||(n[t]=e)})),ht(t.and,n)),n),gt=(e,t)=>{se(e.next,t),se(V(e),t),se(T(e),t)},yt=(e,t,n)=>{let r;e.next.length=0,e.seq.length=0,e.scope=null;let a=T(e);for(;r=a.pop();)gt(r,e),(t||n&&'sample'!==e.meta.op||"crosslink"===r.family.type)&&yt(r,t,'on'!==r.meta.op&&n);for(a=V(e);r=a.pop();)gt(r,e),n&&"crosslink"===r.family.type&&yt(r,t,'on'!==r.meta.op&&n)},vt=e=>e.clear(),bt=(e,{deep:t}={})=>{let n=0;if(e.ownerSet&&e.ownerSet.delete(e),Y(e))vt(W(e));else if(ne(e)){n=1;const t=e.history;vt(t.events),vt(t.effects),vt(t.stores),vt(t.domains)}yt(E(e),!!t,n)},kt=e=>u((()=>bt(e))),wt=(e,t,n,r,o)=>a({node:n,parent:e,child:t,scope:{fn:o},meta:{op:r},family:{owners:[e,t],links:t},regional:1}),St=e=>{const t='forward',[{from:n,to:r},o]=d(e,1),s=l(t,o);return ce(0,t,'sample',s),Ce(n,s,'"from"'),Ce(r,s,'"to"'),je(s,r,'to'),kt(a({parent:n,child:r,meta:{op:t,config:o},family:{},regional:1}))},$t=(e,t)=>(n(Me(t),'.watch argument should be a function'),kt(a({scope:{fn:t},node:[_e({fn:Oe})],parent:e,meta:{op:'watch'},family:{owners:e},regional:1}))),Mt=(e,t,n="event")=>{H(e)&&H(e).hooks[n](t)},xt=(e,t,n)=>{const r=ht(n),a="domain"===e,o=de(),{sid:s=null,named:i=null,domain:l=null,parent:d=l}=r,u=i||r.name||(a?'':o),f=c(u,d),p={op:t.kind=e,name:t.shortName=u,sid:t.sid=be(s),named:i,unitId:t.id=o,serialize:r.serialize,derived:r.derived,config:r};if(t.targetable=!r.derived,t.parent=d,t.compositeName=f,t.defaultConfig=r,t.getType=()=>(ce(0,'getType','compositeName.fullName'),f.fullName),!a){t.subscribe=e=>(ze(e),t.watch(Me(e)?e:t=>e.next&&e.next(t))),t[P]=()=>t;const e=ve();e&&(p.nativeTemplate=e)}return p},zt=(e,t,n,r)=>{let a;$e(n)&&(a=n,n=n.fn);const o=p({name:`${e.shortName} \u2192 *`,derived:1,and:a});return wt(e,o,r,t,n),o},At='undefined is used to skip updates. To allow undefined as a value provide explicit { skipVoid: false } option',Ct=(e,t,n,r,a)=>{const o=L(t),s=qe({store:o,to:"a",priority:'read'});"map"===n&&(s.data.softRead=1);const i=[s,Ve(r)];return f('storeOnMap',o,i,Y(e)&&L(e)),wt(e,t,i,n,a)},jt=(t,r,a,o,i,c)=>{const d=l('combine',o),u=t?e=>[...e]:e=>({...e}),p=t?[]:{},m=u(p),g=Le(m),y=Le(1);g.type=t?'list':'shape',g.noInit=1,f('combineBase',g,y);const v=h(m,{name:s(a),derived:1,...c,and:o}),b=L(v);b.noInit=1,J(v,'isCombine',1);const k=Ee(g);k.order={priority:'barrier'};const w=qe({store:b,to:'b',priority:'read'});w.data.softRead=1;const S=[Pe(((e,t,n)=>(n.scope&&!n.scope.reg[g.id]&&(n.c=1),e))),k,qe({store:y,to:'b'}),Pe(((e,{key:t},n)=>{if(n.c||e!==n.a[t])return r&&n.b&&(n.a=u(n.a)),n.a[t]=e,1}),1),qe({from:"a",target:g}),qe({from:"value",store:0,target:y}),qe({from:"value",store:1,target:y,priority:'barrier',batch:1}),Ee(g,1,1),i&&Ve(),w];if(e(a,((e,t)=>{if(!Y(e))return n(!Q(e)&&!xe(e),`combine expects a store in a field ${t}`,d),void(m[t]=p[t]=e);p[t]=e.defaultState,m[t]=e.getState();const r=wt(e,v,S,'combine',i);r.scope.key=t;const a=L(e);We(g,{type:'field',field:t,from:a}),f('combineField',a,r)})),v.defaultShape=a,We(b,{type:"map",from:g,fn:i}),!ve())if(i){const e=i(m);!xe(e)||c&&'skipVoid'in c||console.error(`${d}: ${At}`),b.current=e,b.initial=e,v.defaultState=e}else v.defaultState=p;return v},Nt=(e,t,n)=>{try{return[1,e(...n)]}catch(e){return t(e),[0,null]}},It=(e,t,n,r,a)=>s=>{o({target:[r,Ot],params:[n?{status:'done',params:e,result:s}:{status:'fail',params:e,error:s},{value:s,fn:n?t.rs:t.rj}],defer:1,page:a.page,scope:a.scope,meta:a.meta})},Ot=a({node:[_e({fn:({fn:e,value:t})=>e(t)})],meta:{op:'fx',fx:'sidechain'}}),Ft=(/* unused pure expression or super */ null && (['source','clock','target'])),Rt=(e,t)=>e+`: ${t} should be defined`,qt=(e,t,r,a,o,s,i,c,d,u,m,y)=>{const v=l(e,c),b=!!o;n(!xe(r)||!xe(t),Rt(v,'either source or clock'));let k=0;xe(r)?k=1:Q(r)||(r=g(r)),xe(t)?t=r:(Ce(t,v,'clock'),Array.isArray(t)&&(t=$(t))),k&&(r=t),c||i||(i=r.shortName);let w='none';(m||a)&&(Q(a)?w='unit':(n(Me(a),'`filter` should be function or unit'),w='fn')),o?(Ce(o,v,'target'),je(v,o)):'none'===w&&u&&Y(r)&&Y(t)?o=h(s?s(Be(L(r)),Be(L(t))):Be(L(r)),{name:i,sid:y,or:c}):(o=p({name:i,derived:1,or:c}),f('sampleTarget',E(o)));const S=Le();let M=[];if('unit'===w){const[n,r,s]=_t(a,o,t,S,e);s||M.push(...Dt(r)),M.push(...Dt(n))}const x=[];if(k)d&&x.push(Ee(S,1,1));else{const[n,a,s]=_t(r,o,t,S,e);s||x.push(...Dt(a)),x.push(Ee(n,1,d))}const z=wt(t,o,[f('sampleSourceLoader'),qe({from:"stack",target:S}),...x,...M,Ee(S),'fn'===w&&Ve(((e,t,{a:n})=>a(e,n)),1),s&&Ve(Ne),f('sampleSourceUpward',b)],e,s);return we(r,[z]),Object.assign(z.meta,c,{joint:1}),o},Dt=e=>[Ee(e),Pe(((e,t,{a:n})=>n),1)],_t=(e,t,n,r,o)=>{const s=Y(e),i=s?L(e):Le(),c=Le(s);return s||a({parent:e,node:[qe({from:"stack",target:i}),qe({from:"value",store:1,target:c})],family:{owners:[e,t,n],links:t},meta:{op:o},regional:1}),f('sampleSource',c,i,r),[i,c,s]},Pt=(e,t,n,r)=>{const a=e[t];a&&o({target:a,params:Array.isArray(a)?a.map((()=>n)):n,defer:1,stack:r})},Et="23.1.0",Vt=e=>!e.node.meta.isCombine||e.parent&&'combine'!==e.parent.node.meta.op,Tt=e=>e;
//# sourceMappingURL=effector.mjs.map


/***/ }),

/***/ 73983:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   v: () => (/* reexport default export from named module */ _index_js__WEBPACK_IMPORTED_MODULE_0__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2337);



/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (EventEmitter)));


/***/ }),

/***/ 99938:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CR: () => (/* binding */ __read),
/* harmony export */   FC: () => (/* binding */ __asyncGenerator),
/* harmony export */   Jh: () => (/* binding */ __generator),
/* harmony export */   KL: () => (/* binding */ __asyncValues),
/* harmony export */   XA: () => (/* binding */ __values),
/* harmony export */   ZT: () => (/* binding */ __extends),
/* harmony export */   ev: () => (/* binding */ __spreadArray),
/* harmony export */   mG: () => (/* binding */ __awaiter),
/* harmony export */   qq: () => (/* binding */ __await)
/* harmony export */ });
/* unused harmony exports __assign, __rest, __decorate, __param, __esDecorate, __runInitializers, __propKey, __setFunctionName, __metadata, __createBinding, __exportStar, __spread, __spreadArrays, __asyncDelegator, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet, __classPrivateFieldIn, __addDisposableResource, __disposeResources */
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose;
    if (async) {
        if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
        dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
        if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
        dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
      }
      catch (e) {
          fail(e);
      }
    }
    if (env.hasError) throw env.error;
  }
  return next();
}

/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
});


/***/ })

}]);